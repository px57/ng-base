{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DatetimeService = /*#__PURE__*/(() => {\n  var _class;\n  class DatetimeService {\n    constructor() {}\n    /**\n     * @description\n     */\n    convertIsoDate(iso_date) {\n      if (typeof iso_date === 'string') {\n        return new Date(iso_date);\n      }\n      return iso_date;\n    }\n    /**\n     * @description\n     */\n    convertDateForReader(date) {\n      try {\n        const dateObj = new Date(date);\n        const month = dateObj.getMonth() + 1;\n        const day = dateObj.getDate();\n        const year = dateObj.getFullYear();\n        let diff_timestamp = (dateObj.getTime() - new Date().getTime()) / 1000;\n        // -> this day is today \n        if (new Date().getDate() === dateObj.getDate()) {\n          return `Today`;\n        }\n        // -> this day is tomorrow\n        if (new Date().getDate() + 1 === dateObj.getDate()) {\n          return `Tomorrow`;\n        }\n        // -> this day is outdated \n        if (diff_timestamp < 0) {\n          return `Passed`;\n        }\n        return `${month}.${day}.${year}`;\n      } catch (e) {\n        return `Not specified`;\n      }\n    }\n    /**\n     * @description\n     */\n    is_today(date) {\n      date = this.convertIsoDate(date);\n      const today = new Date();\n      return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n    }\n    /**\n     * @description\n     */\n    is_tomorrow(date) {\n      date = this.convertIsoDate(date);\n      const today = new Date();\n      return date.getDate() === today.getDate() + 1 && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n    }\n    /**\n     * @descriptionLa date est dans le futur, dans plus de deux jours : JJ.MM.AA\n     */\n    is_future(date) {\n      date = this.convertIsoDate(date);\n      const today = new Date();\n      return date !== null;\n    }\n    /**\n     * @description\n     */\n    is_passed(date) {\n      date = this.convertIsoDate(date);\n      const today = new Date();\n      return date.getDate() < today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n    }\n    /**\n     * @description:\n     * @param: $seconds -> number\n     * @return: $minute:$second -> 00:00 -> string\n     */\n    convertSecondsToMinutes(seconds) {\n      let minutes = String(Math.floor(seconds / 60));\n      let second = String(seconds % 60);\n      if (second.length === 1) {\n        second = `0${second}`;\n      }\n      if (minutes.length === 1) {\n        minutes = `0${minutes}`;\n      }\n      return `${minutes}:${second}`;\n    }\n  }\n  _class = DatetimeService;\n  _class.ɵfac = function DatetimeService_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return DatetimeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}