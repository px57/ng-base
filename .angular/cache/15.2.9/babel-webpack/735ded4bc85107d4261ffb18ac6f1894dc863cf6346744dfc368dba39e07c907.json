{"ast":null,"code":"var _class;\nimport { HttpEventType } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/upload.service\";\nconst _c0 = [\"fileUpload\"];\nexport class FileUploadComponent {\n  /**\n   * @description:\n   */\n  constructor(HttpClient, upload_service) {\n    this.HttpClient = HttpClient;\n    this.upload_service = upload_service;\n    /**\n     * @description:\n     */\n    this.files = [];\n    /**\n     * @description:\n     */\n    this.load_upload = false;\n    /**\n     * @description:\n     */\n    this.progress = 0;\n    /**\n     * @description:\n     */\n    this.settings = undefined;\n  }\n  /**\n   * @description:\n   */\n  ngOnInit() {\n    this.bindStream();\n  }\n  /**\n   * @description:\n   */\n  bindStream() {\n    this.upload_service.stream.subscribe(upload_stream => {\n      if (this.settings.label !== upload_stream.data.label) {\n        return;\n      }\n      this.onClick();\n    });\n  }\n  /**\n   * @description:\n   */\n  ngAfterContentInit() {\n    this.onClick();\n  }\n  /**\n   * @description:\n   */\n  ngOnDestroy() {\n    alert('ngondestroy');\n  }\n  /**\n   * @description:\n   */\n  changeFileUpload($event) {\n    const files = $event.target.files;\n    // this.FileService.addFiles(files);\n  }\n  /*\n  * @description:\n  */\n  onClick() {\n    if (this.fileUpload === undefined) {\n      return;\n    }\n    const fileUpload = this.fileUpload.nativeElement;\n    fileUpload.onchange = () => {\n      for (let index = 0; index < fileUpload.files.length; index++) {\n        const file = fileUpload.files[index];\n        this.files.push({\n          data: file,\n          inProgress: false,\n          progress: 0\n        });\n      }\n      this.uploadFiles();\n    };\n    fileUpload.click();\n  }\n  /*\n  * @description:\n  */\n  uploadFiles() {\n    if (this.fileUpload === undefined) {\n      return;\n    }\n    this.fileUpload.nativeElement.value = '';\n    let file = this.files[this.files.length - 1];\n    let listOfMime = this.upload_service.getListOfMimeType(this.settings);\n    if (listOfMime.indexOf(file.data.type) === -1) {\n      alert(this.upload_service.getErrorMimeType(this.settings));\n      return;\n    }\n    if (file.data.size > this.settings.max_file_size) {\n      alert(`File too large. Upload a file less than ${this.upload_service.convertBytes(this.settings.max_file_size)}`);\n      return;\n    }\n    this.uploadFile(file);\n  }\n  /*\n  * @description:\n  */\n  uploadFile(file) {\n    const formData = new FormData();\n    formData.append('file', file.data);\n    formData.append('label', this.settings.label);\n    file.inProgress = true;\n    this.load_upload = true;\n    this.upload(formData).pipe(map(event => {\n      switch (event.type) {\n        case HttpEventType.UploadProgress:\n          file.progress = Math.round(event.loaded * 100 / event.total);\n          this.progress = file.progress;\n          this.set_progress(file.progress);\n          break;\n        case HttpEventType.Response:\n          return event;\n      }\n    }), catchError(error => {\n      file.inProgress = false;\n      return of(`${file.data.name} upload failed.`);\n    })).subscribe(event => {\n      if (typeof event === 'object') {\n        this.load_upload = false;\n        this.set_finished(event);\n      }\n    });\n  }\n  /**\n  * @description:\n  */\n  upload(formData, path_url = undefined) {\n    let url = this.get_url();\n    return this.HttpClient.post(url, formData, {\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n  /**\n   * @description:\n   */\n  get_url() {\n    let host = this.upload_service.getHost(this.settings);\n    let url = host + this.settings.is_private ? '/v1/mediacenter/upload/private_upload/' : '/v1/mediacenter/upload/public_upload/';\n    return url;\n  }\n  /**\n   * @description:\n   */\n  set_progress(progress) {\n    this.progress = progress;\n    this.settings.stream.next({\n      event: 'progress',\n      progress: progress,\n      label: this.settings.label\n    });\n  }\n  /**\n   * @description:\n   */\n  set_finished(event) {\n    this.progress = 0;\n    this.load_upload = false;\n    this.settings.stream.next({\n      event: 'finished',\n      progress: 0,\n      label: this.settings.label,\n      data: event.body\n    });\n  }\n}\n_class = FileUploadComponent;\n_class.ɵfac = function FileUploadComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.UploadService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-file-upload\"]],\n  viewQuery: function FileUploadComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileUpload = _t.first);\n    }\n  },\n  inputs: {\n    settings: \"settings\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"type\", \"file\", 2, \"display\", \"none\", 3, \"change\"], [\"fileUpload\", \"\"]],\n  template: function FileUploadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"input\", 0, 1);\n      i0.ɵɵlistener(\"change\", function FileUploadComponent_Template_input_change_0_listener($event) {\n        return ctx.changeFileUpload($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["HttpEventType","of","catchError","map","FileUploadComponent","constructor","HttpClient","upload_service","undefined","ngOnInit","bindStream","stream","subscribe","upload_stream","settings","label","data","onClick","ngAfterContentInit","ngOnDestroy","alert","changeFileUpload","$event","files","target","fileUpload","nativeElement","onchange","index","length","file","push","inProgress","progress","uploadFiles","click","value","listOfMime","getListOfMimeType","indexOf","type","getErrorMimeType","size","max_file_size","convertBytes","uploadFile","formData","FormData","append","load_upload","upload","pipe","event","UploadProgress","Math","round","loaded","total","set_progress","Response","error","name","set_finished","path_url","url","get_url","post","reportProgress","observe","host","getHost","is_private","next","body","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["/var/projects/base/ng-base/src/modules/uploadmanager/components/file-upload/file-upload.component.ts","/var/projects/base/ng-base/src/modules/uploadmanager/components/file-upload/file-upload.component.html"],"sourcesContent":["import { \n  Component, \n  Input, \n  AfterContentInit, \n  OnDestroy,\n  ViewChild,\n  ElementRef\n } from '@angular/core';\nimport { UploadService, Files } from '../../services/upload.service';\nimport { HttpClient, HttpEvent, HttpErrorResponse, HttpEventType } from  '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\n\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n\n\n@Component({\n  selector: 'app-file-upload',\n  templateUrl: './file-upload.component.html',\n  styleUrls: ['./file-upload.component.scss']\n})\nexport class FileUploadComponent implements AfterContentInit, OnDestroy {\n  /**\n   * @description:\n   */\n  @ViewChild('fileUpload', {static: true}) fileUpload: ElementRef | undefined;\n\n  /**\n   * @description:\n   */\n  public files: Array<Files>  = [];\n\n  /**\n   * @description:\n   */\n  public load_upload: boolean = false;\n\n  /**\n   * @description:\n   */\n  public progress: any = 0;\n  /**\n   * @description: \n   */\n  @Input()\n  public settings: any = undefined;\n\n  /**\n   * @description:\n   */\n  public constructor(\n    private HttpClient: HttpClient,\n    private upload_service: UploadService,\n  ) {\n\n  }\n\n  /**\n   * @description:\n   */\n  public ngOnInit(): void {\n    this.bindStream();\n  }\n\n  /**\n   * @description:\n   */\n  private bindStream(): void {\n    this.upload_service.stream.subscribe((upload_stream: any) => {\n      if (this.settings.label !== upload_stream.data.label) { return; }\n      this.onClick();\n    });\n  }\n\n  /**\n   * @description: \n   */\n  public ngAfterContentInit(): void {\n    this.onClick();\n  }\n\n  /**\n   * @description:\n   */\n  public ngOnDestroy(): void {\n    alert ('ngondestroy');\n  }\n\n  /**\n   * @description:\n   */\n  public changeFileUpload($event: any) {\n    const files = $event.target.files;\n    // this.FileService.addFiles(files);\n  }\n\n    /*\n    * @description:\n    */\n      public onClick(): void {\n        if (this.fileUpload === undefined) {\n          return;\n        }\n        const fileUpload = this.fileUpload.nativeElement;\n        fileUpload.onchange = () => {\n        for (let index = 0; index < fileUpload.files.length; index++) {\n         const file = fileUpload.files[index];\n         this.files.push({ \n            data: file, \n            inProgress: false, \n            progress: 0\n          });\n        }\n        this.uploadFiles();\n      };\n      fileUpload.click();\n  }\n\n\n\n  /*\n  * @description:\n  */\n  private uploadFiles(): void {\n    if (this.fileUpload === undefined) { return; }\n    this.fileUpload.nativeElement.value = '';\n    let file: any = this.files[this.files.length - 1];\n\n    let listOfMime = this.upload_service.getListOfMimeType(this.settings);\n    if (listOfMime.indexOf(file.data.type) === -1) {\n      alert (this.upload_service.getErrorMimeType(this.settings));\n      return;\n    }\n    \n    if (file.data.size > this.settings.max_file_size) {\n      alert (`File too large. Upload a file less than ${this.upload_service.convertBytes(this.settings.max_file_size)}`);\n      return;\n    }\n\n    this.uploadFile(file);\n  }\n\n\n  /*\n  * @description:\n  */\n  public uploadFile(file: any) {\n    const formData = new FormData();\n    formData.append('file', file.data);\n    formData.append('label', this.settings.label);\n    file.inProgress = true;\n    this.load_upload = true;\n\n    this.upload(formData).pipe(\n      map((event: any) => {\n        switch ((event as any).type) {\n          case HttpEventType.UploadProgress:\n            file.progress = Math.round((event as any).loaded * 100 / (event as any).total);\n            this.progress = file.progress;\n            this.set_progress(file.progress);\n            break;\n          case HttpEventType.Response:\n            return event;\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        file.inProgress = false;\n        return of(`${file.data.name} upload failed.`);\n      })).subscribe((event: any) => {\n        if (typeof (event) === 'object') {\n          this.load_upload = false;\n          \n          this.set_finished(event);\n        }\n      });\n  }\n\n  /** \n  * @description:\n  */\n  public upload(formData: any, path_url: any=undefined) {\n    let url = this.get_url();\n\n    return this.HttpClient.post<any>(url, formData, {\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n\n  /**\n   * @description:\n   */\n  private get_url(): string {\n    let host = this.upload_service.getHost(this.settings);\n    let url = host + this.settings.is_private ? '/v1/mediacenter/upload/private_upload/': '/v1/mediacenter/upload/public_upload/';\n    return url;\n  }\n\n  /**\n   * @description: \n   */\n  public set_progress(progress: any) {\n    this.progress = progress;\n    this.settings.stream.next({\n      event: 'progress',\n      progress: progress,\n      label: this.settings.label\n    });\n  }\n\n  /**\n   * @description:\n   */\n  public set_finished(event: any) {\n    this.progress = 0;\n    this.load_upload = false;\n    this.settings.stream.next({ \n      event: 'finished',\n      progress: 0,\n      label: this.settings.label,\n      data: event.body\n    });\n  }\n}\n","<input \n    (change)=\"changeFileUpload($event)\"\n    #fileUpload\n    type=\"file\"\n    style=\"display: none\">"]},"metadata":{},"sourceType":"module","externalDependencies":[]}