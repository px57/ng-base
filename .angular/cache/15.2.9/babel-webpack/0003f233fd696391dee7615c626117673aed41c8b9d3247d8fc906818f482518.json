{"ast":null,"code":"import { FormGroup } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/modules/tools/services/http.service\";\nimport * as i3 from \"src/modules/tools/services/libs.service\";\nimport * as i4 from \"src/modules/modal/services/switch-modal.service\";\n;\n;\nexport let UserService = /*#__PURE__*/(() => {\n  var _class;\n  class UserService {\n    /*\n     * @description:\n     */\n    constructor(router, _h, l, switchModalService) {\n      this.router = router;\n      this._h = _h;\n      this.l = l;\n      this.switchModalService = switchModalService;\n      /**\n       * @description:\n       */\n      this.stream = new Subject();\n      this.REDIRECT_ONBOARDING = true;\n      /*\n       * @description:\n       */\n      this.registrationForm = {\n        first: FormGroup,\n        second: FormGroup\n      };\n      //############################ [GLOBAL-DATA-BEGIN]\n      /*\n       * @description:\n       */\n      this.data = {\n        success: false\n      };\n      /**\n       * @description:\n       */\n      this.change_settings_data = new Subject();\n      /**\n       * @description:\n       */\n      this.change_data = new Subject();\n      /**\n       * @description:\n       */\n      this.list_component_update_data = [];\n      /*\n       * @description:\n       */\n      this.openEmailValidator = false;\n      window.userService = this;\n      this._h.userService = this;\n    }\n    /*\n     * @description:\n     */\n    logout() {\n      this._h.get('v1/auth/logout/').subscribe(res => {\n        window.location.reload();\n      });\n    }\n    /*\n     * @description:\n     */\n    not_is_authenticated() {\n      return !this.is_authenticated();\n    }\n    /*\n     * @description:\n     */\n    is_authenticated() {\n      return this.data.is_authenticated;\n    }\n    /**\n     * @description:\n     */\n    data_is_loaded() {\n      return this.data.is_authenticated !== undefined;\n    }\n    /*\n     * @description:\n     */\n    belongToGroup(group) {\n      if (!this.is_authenticated()) {\n        return false;\n      }\n      return this.data.user.group === group;\n    }\n    /**\n     * @description:\n     */\n    is_me(compareWith, value) {\n      if (!this.is_authenticated()) {\n        return false;\n      }\n      if (compareWith === 'id' && ['string', 'number'].indexOf(typeof value) !== -1 && this.data.user.id === parseInt(value, 0)) {\n        return true;\n      }\n      return false;\n    }\n    /*\n     * @description:\n     */\n    is_professional(profile = null) {\n      const group = this.get_my_group(profile);\n      return group === 'pro';\n    }\n    /*\n     * @description:\n     */\n    is_creator(profile = null) {\n      const group = this.get_my_group(profile);\n      return group === 'creator';\n    }\n    /*\n     * @description:\n     */\n    is_customer(profile = null) {\n      const group = this.get_my_group(profile);\n      return group !== null && group === 'customer';\n    }\n    /*\n     * @description:\n     */\n    is_staff(profile = null) {\n      const group = this.get_my_group(profile);\n      return group !== null && group === 'staff';\n    }\n    /*\n     * @description:\n     */\n    is_pro_or_creator(profile = null) {\n      const group = this.get_my_group(profile);\n      return group !== null && this.is_creator(profile) || this.is_professional(profile);\n    }\n    /*\n     * @description:\n     */\n    reset_data() {} // Remettre l'element à null\n    /*\n     * @description:\n     */\n    data_loaded() {\n      return this.data.success;\n    }\n    /*\n     * @description:\n     */\n    set_data(data) {\n      this.data = data;\n      if (data.data === null) {\n        return;\n      }\n      this.stream.next(data.user);\n    }\n    /*\n     * @description:\n     */\n    get_id() {\n      let data = this.get_data();\n      if (!data.hasOwnProperty('user') || !data.user.hasOwnProperty('id')) {\n        return 0;\n      }\n      return data.user.id;\n    }\n    /*\n     * @description: Il s'agit ici de récupérer la video de ce profile\n     */\n    get_my_profile_video(profile = null) {\n      if (profile === null) {\n        profile = this.data.profile;\n      }\n      const defaultVideoUrl = '';\n      if (profile.profile_video !== undefined) {\n        return profile.profile_video.video;\n      }\n      return defaultVideoUrl;\n    }\n    /**\n     * @description:\n     */\n    get_my_group(profile = null) {\n      if (profile !== null) {\n        return profile.group;\n      }\n      if (!this.is_authenticated()) {\n        return undefined;\n      }\n      return this.data.profile.group;\n    }\n    /**\n     * @description:\n     */\n    get_in_user(key) {\n      const user = this.data.user;\n      if (user === undefined) {\n        return undefined;\n      }\n      if (!user.hasOwnProperty(key)) {\n        return undefined;\n      }\n      return user[key];\n    }\n    /**\n     * @description:\n     */\n    drop_in_user(key) {\n      if (this.data.user === undefined) {\n        return false;\n      }\n      if (this.data.user[key] === undefined) {\n        return false;\n      }\n      this.data.user[key] = undefined;\n      return true;\n    }\n    /**\n     * @description:\n     */\n    bind_change_data(componentOrService) {\n      this.list_component_update_data.push(componentOrService);\n    }\n    /*\n     * @description:\n     */\n    send_event_change_data() {\n      for (let componentOrService of this.list_component_update_data) {\n        if (!componentOrService.hasOwnProperty('bindChangeGlobalData')) {\n          continue;\n        }\n        componentOrService.bindChangeGlobalData();\n      }\n    }\n    /*\n     * @description:\n     */\n    update_data() {\n      return this._h.get('v1/auth/me/').pipe(map(response => {\n        this.send_event_change_data();\n        this.set_data(response);\n        return response;\n      }));\n    }\n    /*\n     * @description:\n     */\n    get_data() {\n      const invitation = this.get_in_user('invitation');\n      if (invitation) {\n        this.drop_in_user('invitation');\n        // this.invitation.get_data(invitation, this.get_my_group());\n      }\n\n      return this.data;\n    }\n    /*\n     * @description:\n     */\n    getSettings() {\n      return this.data.profile.settings;\n      // return {\n      //   'notification': {\n      //     'before_your_video_call': true,\n      //     'wishlist_activity': true,\n      //     'talkto_promotionnal_offer': true,\n      //   }\n      // };\n    }\n    /*\n     * @description: Récupérer le profile de cette personnes.\n     */\n    getProfile(profile = null) {\n      if (profile !== null) {\n        return profile;\n      }\n      return this.data.profile;\n    }\n    /*\n     * @description:\n     */\n    get_profile_url(profile) {\n      return `/profile/${profile.username}`;\n    }\n    /*\n     * @description: Si l'utilisateurs n'est pas connecter alors ont le redirige vers la pages de logins.\n     */\n    redirectToLogin__IfLogout() {\n      if (this.is_authenticated()) {\n        return false;\n      }\n      this.open_login_modal();\n      return true;\n    }\n    /**\n     * @description:\n     */\n    redirectToSignup__IfLogout() {\n      if (this.is_authenticated()) {\n        return false;\n      }\n      this.open_signup_modal();\n      return true;\n    }\n    /*\n     * @description: Permet de savoir si l'images est part défaut\n     */\n    hasProfilePicture(profile = null) {\n      profile = this.getProfile(profile);\n      const images = this.data.profile.profile_picture;\n      const defaultPicture = `assets/assets/img/user1.jpg`;\n      try {\n        return images.split('/').splice(-4).join('/') !== defaultPicture;\n      } catch {\n        return true;\n      }\n      return true;\n    }\n    /*\n     * @description: Regarde s'il y a une video de presentations.\n     */\n    hasVideoProfile(profile = null) {\n      profile = this.getProfile(profile);\n      if (profile.profile_video === undefined) {\n        return false;\n      }\n      if (profile.profile_video.hasOwnProperty('type') && profile.profile_video.type === 'default') {\n        return false;\n      }\n      // if (!profile.profile_video.cropped) {\n      //   return false;\n      // }\n      return true;\n    }\n    /*\n     * @description:\n     */\n    hasVideoPriceConfigured(profile = null) {\n      profile = this.getProfile(profile);\n      const price = profile.price;\n      return price.price.length !== 0;\n    }\n    /*\n     * @description:\n     */\n    updateVideo(video) {\n      this.data.profile.profile_video = video;\n    }\n    /*\n     * @description:\n     */\n    getSocialNetWorkIco() {}\n    /*\n     * @description: Récupérer le bon réseaux social.\n     */\n    getSocialNetWorkUrl(profile, key = `instagram`) {\n      const social_network_list = profile.social_network_list;\n      const index = social_network_list.findIndex(x => x.key === key);\n      if (index === -1) {\n        return ``;\n      }\n      return social_network_list[index].url;\n    }\n    /*\n     * @description:\n     */\n    clickSocialNetWork(socialNetwork) {\n      let url = socialNetwork.url;\n      if (url.substring(0, 4) !== 'http') {\n        url = `http://${url}`;\n      }\n      window.open(url, `_blank`, ``);\n    }\n    /*\n     * @description:\n     */\n    // public openEmailValidatorPage(): void {\n    //   if (this.openEmailValidator) {\n    //     return;\n    //   }\n    //   const profile = this.getProfile();\n    //   if (!profile.email_validate) {\n    //     this.openEmailValidator = true;\n    //     this.openCloseElementService.openEmailValidator();\n    //   }\n    // }\n    /*\n     * @description: Rediriger l'utilisateurs vers le profile qui lui est lier.\n     */\n    redirectToProfile(profile) {\n      if (!this.is_pro_or_creator(profile)) {\n        return;\n      }\n      this.l.navigateByUrl(profile.username);\n    }\n    /*\n     * @description:\n     */\n    getApiKey(keyName) {\n      if (this.data.API.hasOwnProperty(keyName)) {\n        return this.data.API[keyName];\n      }\n      return undefined;\n    }\n    /*\n     * @description:\n     */\n    phoneNumberIsEmpty() {\n      const profile = this.getProfile();\n      return profile.phone_number.country_code === null || profile.phone_number.number === null;\n    }\n    /*\n     * @description:\n     */\n    isAnonymousProfile() {\n      const profile = this.getProfile();\n      return profile.anonymous;\n    }\n    /*\n     * @description:\n     */\n    notAccessForAnonymousProfile() {\n      if (this.isAnonymousProfile()) {\n        this.router.navigateByUrl(`/`);\n        return true;\n      }\n      return false;\n    }\n    /**\n     * @description:\n     */\n    strapiSendForgetPaswordEmail(email) {\n      return this._h.post(`${this.getApiKey('strapi')}/auth/forgot-password`, {\n        email\n      });\n    }\n    /**\n     * @description:\n     */\n    setJwtToken(token) {\n      localStorage.setItem('jwt', token);\n    }\n    /**\n     * @description:\n     */\n    getJwtToken() {\n      return localStorage.getItem('jwt');\n    }\n    /**\n     * @description:\n     */\n    dropJwtToken() {\n      localStorage.removeItem('jwt');\n    }\n    /**\n     * @description:\n     */\n    hasJwtToken() {\n      return this.getJwtToken() !== null;\n    }\n    /**\n     * @description:\n     */\n    getLanguage() {\n      if (this.data === undefined) {\n        return 'en';\n      }\n      if (this.data.data === undefined) {\n        return 'en';\n      }\n      if (this.data.data.user === undefined) {\n        return 'en';\n      }\n      return this.data.data.user.language;\n    }\n    /**\n     * @description:\n     */\n    langIsFr() {\n      return this.getLanguage() === 'fr';\n    }\n    /**\n     * @description:\n     */\n    langIsEn() {\n      return this.getLanguage() === 'en';\n    }\n    /**\n     * @description:\n     */\n    setLanguage(language) {\n      const params = {\n        language\n      };\n      this._h.post(`profiles/change_language/`, params).subscribe(res => {\n        window.location.reload();\n      });\n    }\n    /**\n     * @description:\n     */\n    get_first_name() {\n      return this.data.data.user.user.first_name;\n    }\n    /**\n     * @description:\n     */\n    get_last_name() {\n      return this.data.data.user.user.last_name;\n    }\n    /**\n     * @description:\n     */\n    get_email() {\n      return this.data.data.user.user.email;\n    }\n    /**\n     * @description:\n     */\n    profileHasOnboarded() {\n      if (this.data.data === undefined) {\n        return false;\n      }\n      return this.data.data.onboarding;\n    }\n    /**\n     * @description:\n     */\n    open_login_modal() {\n      this.switchModalService.open_modal('login');\n    }\n    /**\n     * @description:\n     */\n    open_signup_modal() {\n      this.switchModalService.open_modal('signup');\n    }\n    /**\n     * @description:\n     */\n    open_forget_password_modal() {\n      this.switchModalService.open_modal('forget_password');\n    }\n    /**\n     * @description:\n     * @param.profile\n     */\n    get_avatar(profile = undefined) {\n      const default_avatar = {\n        src: 'assets/assets/img/user1.jpg'\n      };\n      if (profile === undefined) {\n        profile = this.data.profile;\n      }\n      if (profile === undefined) {\n        return;\n      }\n      if (profile.avatar === undefined || profile.avatar === null) {\n        return default_avatar;\n      }\n      return profile.avatar;\n    }\n    /**\n     * @description:\n     */\n    update_avatar(avatar) {\n      this.data.profile.avatar = avatar;\n    }\n  }\n  _class = UserService;\n  _class.ɵfac = function UserService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpService), i0.ɵɵinject(i3.LibsService), i0.ɵɵinject(i4.SwitchModalService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}