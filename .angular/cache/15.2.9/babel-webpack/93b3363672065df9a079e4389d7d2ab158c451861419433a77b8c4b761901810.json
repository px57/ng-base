{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n;\nexport let FileService = /*#__PURE__*/(() => {\n  var _class;\n  class FileService {\n    /*\n    * @description:\n    */\n    constructor(HttpClient) {\n      this.HttpClient = HttpClient;\n      /**\n       * @description:\n       */\n      this.stream = new Subject();\n      /**\n       * @description:\n       */\n      this.upload_file_type_mime = {\n        image: ['image/png', 'image/gif', 'image/jpeg', 'image/webp'],\n        video: ['video/x-matroska', 'video/x-ms-wmv', 'video/x-ms-asf', 'video/x-msvideo', 'video/quicktime', 'video/webm', 'audio/mpeg', 'video/mp4']\n      };\n      /**\n       * @description:\n       */\n      this.bad_file_type_mime_message = {\n        image: `Incorrect format, try again with .jpg, .png, .gif only`,\n        video: 'Incorrect format, try again with .avi or .mp4 .'\n      };\n      /**\n       * @description:\n       */\n      this.SERVER_URL = \"http://127.0.0.1:1337\";\n    }\n    /*\n    * @description:\n    */\n    addFiles(files) {}\n    /*\n    * @description:\n    */\n    getServerUrl(path_url = undefined) {\n      if (path_url !== undefined) {\n        return '' + path_url;\n      }\n      return 'http://127.0.0.1:1337/api/upload';\n    }\n    /*\n    * @description:\n    */\n    upload(formData, path_url = undefined) {\n      return this.HttpClient.post(this.getServerUrl(path_url), formData, {\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n    /*\n    * @description:\n    */\n    cancel(file_upload_request) {\n      file_upload_request.unsubscribe();\n    }\n    /*\n    * @description:\n    */\n    getExtension(src) {\n      const spl_video = src.split(`.`);\n      const ext = spl_video[spl_video.length - 1];\n      return ext.toLowerCase();\n    }\n    /*\n    * @description:\n    */\n    isVideoFileSrc(src) {\n      const ext = this.getExtension(src);\n      const extList = ['avi', 'mp4', 'webm', 'mov'];\n      if (extList.indexOf(ext) === -1) {\n        return false;\n      }\n      return true;\n    }\n    /*\n    * @description:\n    */\n    isImageFileSrc(src) {\n      const ext = this.getExtension(src);\n      const extList = ['png', 'gif', 'jpeg', 'jpg', 'webp'];\n      if (extList.indexOf(ext) === -1) {\n        return false;\n      }\n      return true;\n    }\n    /*\n    * @description:\n    */\n    formatCropCoordinate(cropThis, file_path) {\n      const cropperPosition = cropThis.cropperPosition;\n      const imagePosition = cropThis.imagePosition;\n      delete cropThis.base64;\n      delete cropThis.cropperPosition;\n      delete cropThis.imagePosition;\n      for (const key of Object.keys(cropperPosition)) {\n        cropThis['cropper_position_' + key] = parseInt(cropperPosition[key]);\n      }\n      for (const key of Object.keys(imagePosition)) {\n        cropThis['image_position_' + key] = parseInt(imagePosition[key]);\n      }\n      cropThis.file_path = file_path;\n      return cropThis;\n    }\n    /**\n     * @description: Get file from Strapi.\n     */\n    getSrc(file) {\n      if (file.data === null) {\n        return '';\n      }\n      return file.data.attributes.url;\n    }\n    /**\n     * @description: Get file from Strapi.\n     */\n    getFileSize(file) {\n      if (file.data === null) {\n        return {\n          width: 0,\n          height: 0\n        };\n      }\n      return {\n        width: file.data.attributes.width,\n        height: file.data.attributes.height\n      };\n    }\n  }\n  _class = FileService;\n  _class.ɵfac = function FileService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return FileService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}