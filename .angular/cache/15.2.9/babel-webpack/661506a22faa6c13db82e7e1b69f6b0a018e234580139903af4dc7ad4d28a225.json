{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nfunction $localize(a) {\n  return a;\n}\n;\n;\nexport let UploadService = /*#__PURE__*/(() => {\n  var _class;\n  class UploadService {\n    /**\n     * @description:\n     */\n    constructor() {\n      /**\n       * @description:\n       */\n      this.stream = new Subject();\n      /**\n       * @description:\n       */\n      this.settings = [];\n      /**\n       * @description:\n       */\n      this.upload_list = [];\n      /**\n       * @description:\n       */\n      this.file_mime_types = {\n        image: ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'],\n        video: ['video/mp4', 'video/webm', 'video/ogg'],\n        audio: ['audio/mpeg', 'audio/ogg', 'audio/wav', 'audio/webm'],\n        document: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation']\n      };\n      /**\n       * @description:\n       */\n      this.file_mime_types_error = {\n        image: $localize`Incorrect format, try again with .jpg, .png, .gif only`,\n        video: $localize`Incorrect format, try again with .mp4, .webm, .ogg only`,\n        audio: $localize`Incorrect format, try again with .mp3, .ogg, .wav only`,\n        document: $localize`Incorrect format, try again with .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`,\n        all: $localize`Incorrect format, try again with .jpg, .png, .gif, .mp4, .webm, .ogg, .mp3, .wav, .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`\n      };\n    }\n    /**\n     * @description:\n     */\n    clickButtonUpload(settings) {\n      this.updateSettings(settings);\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          // TODO: Return the subject to the caller\n          // TODO: Le but etant de retourner a l'utilisateur l'ensemble des informations pre-traiter.\n          resolve('salope');\n        }, 1000);\n      });\n    }\n    /**\n     * @description:\n     */\n    updateSettings(settings) {\n      let encountered = this.settings.filter(x => x.label === settings.label);\n      if (encountered.length === 0) {\n        this.settings.push(settings);\n        this.stream.next({\n          event: 'new_settings',\n          data: settings\n        });\n      } else {\n        this.stream.next({\n          event: 'new_upload',\n          data: settings\n        });\n      }\n    }\n    /**\n     * @description:\n     */\n    getListOfMimeType(settings) {\n      if (settings.file_type === 'all') {\n        return [...this.file_mime_types.image, ...this.file_mime_types.video, ...this.file_mime_types.audio, ...this.file_mime_types.document];\n      }\n      let file_type = settings.file_type;\n      let mime_types = this.file_mime_types[file_type];\n      return mime_types;\n    }\n    /**\n     * @description:\n     */\n    getErrorMimeType(settings) {\n      let file_type = settings.file_type;\n      let mime_types = this.file_mime_types_error[file_type];\n      return mime_types;\n    }\n    /**\n     * @description:\n     */\n    convertBytes(bytes, decimals = 2) {\n      if (bytes === 0) {\n        return '0 Bytes';\n      }\n      const k = 1024;\n      const dm = decimals < 0 ? 0 : decimals;\n      const sizes = ['Bytes', 'KB', 'MB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n    /**\n     * @description:\n     */\n    getHost(settings) {\n      if (settings.host === undefined) {\n        return window.location.origin;\n      }\n      return settings.host;\n    }\n  }\n  _class = UploadService;\n  _class.ɵfac = function UploadService_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return UploadService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}