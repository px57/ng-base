{"ast":null,"code":"import { HttpEventType } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/upload.service\";\nconst _c0 = [\"fileUpload\"];\nexport let FileUploadComponent = /*#__PURE__*/(() => {\n  var _class;\n  class FileUploadComponent {\n    /**\n     * @description:\n     */\n    constructor(HttpClient, upload_service) {\n      this.HttpClient = HttpClient;\n      this.upload_service = upload_service;\n      /**\n       * @description:\n       */\n      this.files = [];\n      /**\n       * @description:\n       */\n      this.load_upload = false;\n      /**\n       * @description:\n       */\n      this.progress = 0;\n      /**\n       * @description:\n       */\n      this.settings = undefined;\n    }\n    /**\n     * @description:\n     */\n    ngOnInit() {\n      this.bindStream();\n    }\n    /**\n     * @description:\n     */\n    bindStream() {\n      this.upload_service.stream.subscribe(upload_stream => {\n        if (this.settings.label !== upload_stream.data.label) {\n          return;\n        }\n        this.onClick();\n      });\n    }\n    /**\n     * @description:\n     */\n    ngAfterContentInit() {\n      this.onClick();\n    }\n    /**\n     * @description:\n     */\n    ngOnDestroy() {\n      alert('ngondestroy');\n    }\n    /**\n     * @description:\n     */\n    changeFileUpload($event) {\n      const files = $event.target.files;\n      // this.FileService.addFiles(files);\n    }\n    /*\n    * @description:\n    */\n    onClick() {\n      if (this.fileUpload === undefined) {\n        return;\n      }\n      const fileUpload = this.fileUpload.nativeElement;\n      fileUpload.onchange = () => {\n        for (let index = 0; index < fileUpload.files.length; index++) {\n          const file = fileUpload.files[index];\n          this.files.push({\n            data: file,\n            inProgress: false,\n            progress: 0\n          });\n        }\n        this.uploadFiles();\n      };\n      fileUpload.click();\n    }\n    /*\n    * @description:\n    */\n    uploadFiles() {\n      if (this.fileUpload === undefined) {\n        return;\n      }\n      this.fileUpload.nativeElement.value = '';\n      let file = this.files[this.files.length - 1];\n      let listOfMime = this.upload_service.getListOfMimeType(this.settings);\n      if (listOfMime.indexOf(file.data.type) === -1) {\n        alert(this.upload_service.getErrorMimeType(this.settings));\n        return;\n      }\n      if (file.data.size > this.settings.max_file_size) {\n        alert(`File too large. Upload a file less than ${this.upload_service.convertBytes(this.settings.max_file_size)}`);\n        return;\n      }\n      this.uploadFile(file);\n    }\n    /*\n    * @description:\n    */\n    uploadFile(file) {\n      const formData = new FormData();\n      formData.append('file', file.data);\n      formData.append('label', this.settings.label);\n      file.inProgress = true;\n      this.load_upload = true;\n      this.upload(formData).pipe(map(event => {\n        switch (event.type) {\n          case HttpEventType.UploadProgress:\n            file.progress = Math.round(event.loaded * 100 / event.total);\n            this.progress = file.progress;\n            this.set_progress(file.progress);\n            break;\n          case HttpEventType.Response:\n            return event;\n        }\n      }), catchError(error => {\n        file.inProgress = false;\n        return of(`${file.data.name} upload failed.`);\n      })).subscribe(event => {\n        if (typeof event === 'object') {\n          this.load_upload = false;\n          this.set_finished(event);\n        }\n      });\n    }\n    /**\n    * @description:\n    */\n    upload(formData, path_url = undefined) {\n      let url = this.get_url();\n      return this.HttpClient.post(url, formData, {\n        reportProgress: true,\n        observe: 'events'\n      });\n    }\n    /**\n     * @description:\n     */\n    get_url() {\n      let host = this.upload_service.getHost(this.settings);\n      let url = host + this.settings.is_private ? '/v1/mediacenter/upload/private_upload/' : '/v1/mediacenter/upload/public_upload/';\n      return url;\n    }\n    /**\n     * @description:\n     */\n    set_progress(progress) {\n      this.progress = progress;\n      this.settings.stream.next({\n        event: 'progress',\n        progress: progress,\n        label: this.settings.label\n      });\n    }\n    /**\n     * @description:\n     */\n    set_finished(event) {\n      this.progress = 0;\n      this.load_upload = false;\n      this.settings.stream.next({\n        event: 'finished',\n        progress: 0,\n        label: this.settings.label,\n        data: event.body\n      });\n    }\n  }\n  _class = FileUploadComponent;\n  _class.ɵfac = function FileUploadComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.UploadService));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-file-upload\"]],\n    viewQuery: function FileUploadComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileUpload = _t.first);\n      }\n    },\n    inputs: {\n      settings: \"settings\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"type\", \"file\", 2, \"display\", \"none\", 3, \"change\"], [\"fileUpload\", \"\"]],\n    template: function FileUploadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"input\", 0, 1);\n        i0.ɵɵlistener(\"change\", function FileUploadComponent_Template_input_change_0_listener($event) {\n          return ctx.changeFileUpload($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return FileUploadComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}