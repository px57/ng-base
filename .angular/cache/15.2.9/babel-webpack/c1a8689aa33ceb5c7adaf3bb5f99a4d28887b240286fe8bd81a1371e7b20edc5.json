{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/tools/services/websocket.service\";\n;\nexport class ChatroomService {\n  /**\n   * @description:\n   */\n  constructor(wsService) {\n    this.wsService = wsService;\n    /**\n     * @description: The stream of data from the websocket\n     */\n    this.stream = new Subject();\n    this.setConfigWebsocket();\n  }\n  /**\n   * @description:\n   */\n  setConfigWebsocket() {\n    this.wsService.setConfig({\n      port: 4242,\n      pathname: 'ws/chatroom/?room=fr&fakeConnect=true',\n      service: this\n    });\n  }\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ##########################################[  RECEPT  ]#########################################################\n  /**\n   * @description:\n   */\n  recept__messages(data) {\n    this.stream.next({\n      event: 'messages',\n      data: data\n    });\n  }\n  /**\n   * @description:\n   */\n  recept__participants_counter(data) {\n    this.stream.next({\n      event: 'participants_counter',\n      data: data\n    });\n  }\n  /**\n   * @description:\n   */\n  recept__error(data) {}\n  /**\n   * @description:\n   */\n  recept__new_message(data) {\n    this.stream.next({\n      event: 'new_message',\n      data: data\n    });\n  }\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ##########################################[  CALLS  ]##########################################################\n  /**\n   * @description:\n   */\n  call__create_personnal_room(room) {}\n  /**\n   * @description:\n   */\n  call__join_room(room) {\n    this.ws_connection?.wsService?.send(this.ws_connection, {\n      'join_room': room\n    });\n  }\n  /**\n   * @description:\n   */\n  call__leave_room(room) {}\n  /**\n   * @description:\n   */\n  call__delete_room(room) {}\n  /**\n   * @description:\n   */\n  call__edit_room(room) {}\n  /**\n   * @description:\n   */\n  call__fetch_all_rooms() {}\n  /**\n   * @description:\n   */\n  call__get_messages(room) {}\n  /**\n   * @description:\n   */\n  call__send_message(message) {\n    this.ws_connection?.wsService?.send(this.ws_connection, {\n      'new_message': message\n    });\n  }\n}\n_class = ChatroomService;\n_class.ɵfac = function ChatroomService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.WebsocketService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;;AAU7B;AAKD,OAAM,MAAOC,eAAe;EAW1B;;;EAGAC,YACUC,SAA2B;IAA3B,cAAS,GAATA,SAAS;IATnB;;;IAGO,WAAM,GAA4B,IAAIH,OAAO,EAAkB;IAQpE,IAAI,CAACI,kBAAkB,EAAE;EAC3B;EAEA;;;EAGQA,kBAAkB;IACxB,IAAI,CAACD,SAAS,CAACE,SAAS,CAAC;MACvBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,uCAAuC;MACjDC,OAAO,EAAE;KACV,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAGOC,gBAAgB,CAACC,IAAS;IAC/B,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfC,KAAK,EAAE,UAAU;MACjBH,IAAI,EAAEA;KACP,CAAC;EACJ;EAEA;;;EAGOI,4BAA4B,CAACJ,IAAS;IAC3C,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfC,KAAK,EAAE,sBAAsB;MAC7BH,IAAI,EAAEA;KACP,CAAC;EACJ;EAEA;;;EAGOK,aAAa,CAACL,IAAS,GAE9B;EAEA;;;EAGOM,mBAAmB,CAACN,IAAS;IAClC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;MACfC,KAAK,EAAE,aAAa;MACpBH,IAAI,EAAEA;KACP,CAAC;EACJ;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;EAGOO,2BAA2B,CAACC,IAAY,GAE/C;EAEA;;;EAGOC,eAAe,CAACD,IAAmB;IACxC,IAAI,CAACE,aAAa,EAAEjB,SAAS,EAAEkB,IAAI,CACjC,IAAI,CAACD,aAAa,EAClB;MACE,WAAW,EAAEF;KAChB,CAAC;EACJ;EAEA;;;EAGOI,gBAAgB,CAACJ,IAAY,GAEpC;EAEA;;;EAGOK,iBAAiB,CAACL,IAAY,GAErC;EAEA;;;EAGOM,eAAe,CAACN,IAAY,GAEnC;EAEA;;;EAGOO,qBAAqB,IAE5B;EAGA;;;EAGOC,kBAAkB,CAACR,IAAY,GAEtC;EAEA;;;EAGOS,kBAAkB,CAACC,OAAe;IACvC,IAAI,CAACR,aAAa,EAAEjB,SAAS,EAAEkB,IAAI,CACjC,IAAI,CAACD,aAAa,EAClB;MACE,aAAa,EAAEQ;KAClB,CAAC;EACJ;;SArJW3B,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAA4B,SAAf5B,MAAe;EAAA6B,YAFd;AAAM","names":["Subject","ChatroomService","constructor","wsService","setConfigWebsocket","setConfig","port","pathname","service","recept__messages","data","stream","next","event","recept__participants_counter","recept__error","recept__new_message","call__create_personnal_room","room","call__join_room","ws_connection","send","call__leave_room","call__delete_room","call__edit_room","call__fetch_all_rooms","call__get_messages","call__send_message","message","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/base/ng-base/src/modules/chatroom/services/chatroom.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { WebSocketsConfig, WebsocketService } from 'src/modules/tools/services/websocket.service';\nimport { JoinRoomTypes } from '../types/chatroom.types';\n\n/**\n * @description: \n */\nexport interface ChatroomStream {\n  event: 'messages' | 'participants_counter' | 'new_message' | 'error',\n  data: any,\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatroomService {\n  /**\n   * @description: \n   */\n  public ws_connection: WebSocketsConfig | undefined;\n\n  /**\n   * @description: The stream of data from the websocket\n   */\n  public stream: Subject<ChatroomStream> = new Subject<ChatroomStream>();\n\n  /**\n   * @description:  \n   */\n  constructor(\n    private wsService: WebsocketService,\n  ) { \n    this.setConfigWebsocket();\n  }\n\n  /**\n   * @description: \n   */\n  private setConfigWebsocket(): void {\n    this.wsService.setConfig({\n      port: 4242,\n      pathname: 'ws/chatroom/?room=fr&fakeConnect=true',\n      service: this,\n    });\n  }\n\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ##########################################[  RECEPT  ]#########################################################\n\n  /**\n   * @description: \n   */\n  public recept__messages(data: any): void {\n    this.stream.next({\n      event: 'messages',\n      data: data,\n    });\n  }\n\n  /**\n   * @description: \n   */\n  public recept__participants_counter(data: any): void {\n    this.stream.next({\n      event: 'participants_counter',\n      data: data,\n    });\n  }\n\n  /**\n   * @description:\n   */\n  public recept__error(data: any): void {\n\n  }\n\n  /**\n   * @description:\n   */\n  public recept__new_message(data: any): void {\n    this.stream.next({\n      event: 'new_message',\n      data: data,\n    });\n  }\n\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ###############################################################################################################\n  // ##########################################[  CALLS  ]##########################################################\n\n  /**\n   * @description: \n   */\n  public call__create_personnal_room(room: string): void {\n\n  }\n\n  /**\n   * @description: \n   */\n  public call__join_room(room: JoinRoomTypes): void {\n    this.ws_connection?.wsService?.send(\n      this.ws_connection,\n      {\n        'join_room': room,\n    });\n  }\n\n  /**\n   * @description:\n   */\n  public call__leave_room(room: string): void {\n\n  }\n\n  /**\n   * @description:\n   */\n  public call__delete_room(room: string): void {\n      \n  }\n\n  /**\n   * @description:\n   */\n  public call__edit_room(room: string): void {\n      \n  }\n\n  /**\n   * @description:\n   */\n  public call__fetch_all_rooms(): void {\n\n  }\n\n\n  /**\n   * @description:\n   */\n  public call__get_messages(room: string): void {\n\n  }\n\n  /**\n   * @description: \n   */\n  public call__send_message(message: string): void {\n    this.ws_connection?.wsService?.send(\n      this.ws_connection,\n      {\n        'new_message': message,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}