{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/forms.service\";\nexport class AuthService {\n  /**\n   * @description:\n   */\n  constructor(router, formsService) {\n    this.router = router;\n    this.formsService = formsService;\n    /**\n     * @description:\n     */\n    this.config__signin = {\n      redirectToPathname: '/',\n      eventAfterSignin: () => {\n        const redirectToPathname = this.config__signin.redirectToPathname;\n        if (typeof redirectToPathname === 'string') {\n          window.location.href = redirectToPathname;\n        } else {\n          this.router.navigate(redirectToPathname);\n        }\n      }\n    };\n    /**\n     * @description:\n     */\n    this.config__signup = {\n      redirectToPathname: '/',\n      eventAfterSignup: () => {\n        const redirectToPathname = this.config__signin.redirectToPathname;\n        if (typeof redirectToPathname === 'string') {\n          window.location.href = redirectToPathname;\n        } else {\n          this.router.navigate(redirectToPathname);\n        }\n      },\n      inputList: [{\n        name: 'username',\n        required: true,\n        placeholder: `My Username`\n      }, {\n        name: 'email',\n        required: true,\n        placeholder: `Myemail@gmail.com`\n      }, {\n        name: 'password',\n        required: true,\n        placeholder: '********'\n      }]\n    };\n    /**\n     * @description:\n     */\n    this.config__forget_password = {\n      redirectToPathname: ['/', 'dashboard'],\n      eventAfterForgetPassword: () => {\n        this.router.navigate([this.config__forget_password.redirectToPathname]);\n      }\n    };\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.FormsService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAcA,OAAM,MAAOA,WAAW;EA0DtB;;;EAGAC,YACUC,MAAc,EACdC,YAA0B;IAD1B,WAAM,GAAND,MAAM;IACN,iBAAY,GAAZC,YAAY;IA9DtB;;;IAGO,mBAAc,GAAiB;MACpCC,kBAAkB,EAAE,GAAG;MACvBC,gBAAgB,EAAE,MAAK;QACrB,MAAMD,kBAAkB,GAAG,IAAI,CAACE,cAAc,CAACF,kBAAkB;QACjE,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;UAC1CG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGL,kBAAkB;SAC1C,MAAM;UACL,IAAI,CAACF,MAAM,CAACQ,QAAQ,CAACN,kBAAkB,CAAC;;MAE5C;KACD;IAED;;;IAGO,mBAAc,GAAiB;MACpCA,kBAAkB,EAAE,GAAG;MACvBO,gBAAgB,EAAE,MAAK;QACrB,MAAMP,kBAAkB,GAAG,IAAI,CAACE,cAAc,CAACF,kBAAkB;QACjE,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;UAC1CG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGL,kBAAkB;SAC1C,MAAM;UACL,IAAI,CAACF,MAAM,CAACQ,QAAQ,CAACN,kBAAkB,CAAC;;MAE5C,CAAC;MACDQ,SAAS,EAAE,CACT;QACEC,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,EACD;QACEF,IAAI,EAAE,OAAO;QACbC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd,EACD;QACEF,IAAI,EAAE,UAAU;QAChBC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;OACd;KAEJ;IAED;;;IAGO,4BAAuB,GAAyB;MACrDX,kBAAkB,EAAE,CAAC,GAAG,EAAE,WAAW,CAAC;MACtCY,wBAAwB,EAAE,MAAK;QAC7B,IAAI,CAACd,MAAM,CAACQ,QAAQ,CAAC,CAAC,IAAI,CAACO,uBAAuB,CAACb,kBAAkB,CAAC,CAAC;MACzE;KACD;EAUD;;SAlEWJ,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAkB,SAAXlB,MAAW;EAAAmB,YAFV;AAAM","names":["AuthService","constructor","router","formsService","redirectToPathname","eventAfterSignin","config__signin","window","location","href","navigate","eventAfterSignup","inputList","name","required","placeholder","eventAfterForgetPassword","config__forget_password","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/profile/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { \n  ConfigSignin, \n  ConfigSignup, \n  ConfigForgetPassword \n} from '../types';\nimport { FormsService } from 'src/app/services/forms.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  /**\n   * @description: \n   */\n  public config__signin: ConfigSignin = {\n    redirectToPathname: '/',\n    eventAfterSignin: () => {\n      const redirectToPathname = this.config__signin.redirectToPathname;\n      if (typeof redirectToPathname === 'string') { \n        window.location.href = redirectToPathname;\n      } else {\n        this.router.navigate(redirectToPathname);\n      }\n    },\n  };\n\n  /**\n   * @description: \n   */\n  public config__signup: ConfigSignup = {\n    redirectToPathname: '/',\n    eventAfterSignup: () => {\n      const redirectToPathname = this.config__signin.redirectToPathname;\n      if (typeof redirectToPathname === 'string') { \n        window.location.href = redirectToPathname;\n      } else {\n        this.router.navigate(redirectToPathname);\n      }\n    },\n    inputList: [\n      {\n        name: 'username',\n        required: true,\n        placeholder: `My Username`,\n      },\n      {\n        name: 'email',\n        required: true,\n        placeholder: `Myemail@gmail.com`,\n      },\n      {\n        name: 'password',\n        required: true,\n        placeholder: '********',\n      }\n    ]\n  };\n\n  /**\n   * @description: \n   */\n  public config__forget_password: ConfigForgetPassword = {\n    redirectToPathname: ['/', 'dashboard'],\n    eventAfterForgetPassword: () => {\n      this.router.navigate([this.config__forget_password.redirectToPathname]);\n    },\n  };\n\n  /**\n   * @description: \n   */\n  constructor(\n    private router: Router,\n    private formsService: FormsService,\n  ) {\n\n  }\n\n  /**\n   * @description:\n   */\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}