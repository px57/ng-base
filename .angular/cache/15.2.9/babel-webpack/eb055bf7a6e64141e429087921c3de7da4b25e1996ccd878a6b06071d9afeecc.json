{"ast":null,"code":"var _class;\nimport { FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction InputComponent_div_2_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 8);\n    i0.ɵɵlistener(\"click\", function InputComponent_div_2_i_1_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.togglePassword());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InputComponent_div_2_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"i\", 9);\n    i0.ɵɵlistener(\"click\", function InputComponent_div_2_i_2_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.togglePassword());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\nfunction InputComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, InputComponent_div_2_i_1_Template, 1, 0, \"i\", 6);\n    i0.ɵɵtemplate(2, InputComponent_div_2_i_2_Template, 1, 0, \"i\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.type == \"password\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.type == \"text\");\n  }\n}\nfunction InputComponent_div_4_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"li\");\n  }\n}\nfunction InputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"ul\");\n    i0.ɵɵtemplate(2, InputComponent_div_4_li_2_Template, 1, 0, \"li\", 11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.password_strength);\n  }\n}\nexport class InputComponent {\n  constructor() {\n    /**\n     * @description:\n     */\n    this.formGroup = new FormGroup({});\n    /**\n     * @description:\n     */\n    this.formControlName = '';\n    /**\n     * @description:\n     */\n    this.type = 'password';\n    /**\n     * @description:\n     */\n    this.placeholder = '';\n    /**\n     * @description:\n     */\n    this.value = '';\n    /**\n     * @description:\n     */\n    this.name = '';\n    /**\n     * @description:\n     */\n    this.id = '';\n    /**\n     * @description:\n     */\n    this.disabled = false;\n    /**\n     * @description:\n     */\n    this.required = false;\n    /**\n     * @description:\n     */\n    this.readonly = false;\n    /**\n     * @description:\n     */\n    this.autofocus = false;\n    /**\n     * @description:\n     */\n    this.autocomplete = 'on';\n    /**\n     * @description:\n     */\n    this.pattern = '';\n    /**\n     * @description:\n     */\n    this.minlength = 0;\n    /**\n     * @description:\n     */\n    this.maxlength = 0;\n    /**\n     * @description:\n     */\n    this.min = 0;\n    /**\n     * @description:\n     */\n    this.max = 0;\n    /**\n     * @description: Variable to show or hide the password\n     */\n    this.showPassword = false;\n    /**\n     * @description:\n     */\n    this.showPasswordStrength = false;\n    /**\n     * @description:\n     */\n    this.invariable_type = 'text';\n    /**\n     * @description: Percentage of the password strength\n     */\n    this.password_strength = [false, false, false, false, false];\n    /**\n     * @description\n     */\n    this.input_model = '';\n  }\n  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ password\n  /**\n   * @description: Hide or show the password\n   */\n  togglePassword() {\n    this.showPassword = !this.showPassword;\n    this.type = this.showPassword ? 'text' : 'password';\n  }\n  /**\n   * @description:\n   */\n  passwordStrength(password) {\n    if (!this.showPasswordStrength) {\n      return;\n    }\n    this.password_strength[0] = password.length >= 8; // Exemple : considérez que le mot de passe doit avoir au moins 8 caractères\n    this.password_strength[1] = /[0-9]/.test(password); // Vérifie la présence de chiffres\n    this.password_strength[2] = /[A-Z]/.test(password); // Vérifie la présence de lettres majuscules\n    this.password_strength[3] = /[a-z]/.test(password); // Vérifie la présence de lettres minuscules\n    this.password_strength[4] = /\\W/.test(password); // Vérifie la présence de caractères spéciaux\n  }\n  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ NgOnInit\n  /**\n   * @description:\n   */\n  ngOnInit() {\n    this.invariable_type = this.type;\n  }\n}\n_class = InputComponent;\n_class.ɵfac = function InputComponent_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"form-input\"]],\n  inputs: {\n    formGroup: \"formGroup\",\n    formControlName: \"formControlName\",\n    type: \"type\",\n    placeholder: \"placeholder\",\n    value: \"value\",\n    name: \"name\",\n    id: \"id\",\n    disabled: \"disabled\",\n    required: \"required\",\n    readonly: \"readonly\",\n    autofocus: \"autofocus\",\n    autocomplete: \"autocomplete\",\n    pattern: \"pattern\",\n    minlength: \"minlength\",\n    maxlength: \"maxlength\",\n    min: \"min\",\n    max: \"max\",\n    showPassword: \"showPassword\",\n    showPasswordStrength: \"showPasswordStrength\"\n  },\n  decls: 5,\n  vars: 7,\n  consts: [[3, \"formGroup\"], [1, \"input_container\"], [\"class\", \"eye_container\", 4, \"ngIf\"], [3, \"ngModel\", \"type\", \"placeholder\", \"formControlName\", \"ngModelChange\", \"keydown\"], [\"class\", \"password_strength_container\", 4, \"ngIf\"], [1, \"eye_container\"], [\"class\", \"fa fa-eye\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"fa fa-eye-slash\", 3, \"click\", 4, \"ngIf\"], [1, \"fa\", \"fa-eye\", 3, \"click\"], [1, \"fa\", \"fa-eye-slash\", 3, \"click\"], [1, \"password_strength_container\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function InputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1);\n      i0.ɵɵtemplate(2, InputComponent_div_2_Template, 3, 2, \"div\", 2);\n      i0.ɵɵelementStart(3, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function InputComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.input_model = $event;\n      })(\"keydown\", function InputComponent_Template_input_keydown_3_listener() {\n        return ctx.passwordStrength(ctx.input_model);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(4, InputComponent_div_4_Template, 3, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.invariable_type === \"password\" && ctx.showPassword);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngModel\", ctx.input_model)(\"type\", ctx.type)(\"placeholder\", ctx.placeholder)(\"formControlName\", ctx.formControlName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showPasswordStrength);\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\".input_container[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n.input_container[_ngcontent-%COMP%]   .eye_container[_ngcontent-%COMP%] {\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  bottom: 0;\\n  display: flex;\\n  align-items: center;\\n  padding: 0 10px;\\n  cursor: pointer;\\n  background-color: red;\\n}\\n\\n.password_strength_container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n.password_strength_container[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  width: 15%;\\n  height: 4px;\\n  margin-right: 5%;\\n  \\n  background-color: #ccc;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9tb2R1bGVzL2Zvcm0vY29tcG9uZW50cy9pbnB1dC9pbnB1dC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0FBQ0o7QUFDSTtFQUNJLGtCQUFBO0VBQ0EsUUFBQTtFQUNBLE1BQUE7RUFDQSxTQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSxxQkFBQTtBQUNSOztBQU9JO0VBQ0ksV0FBQTtBQUpSO0FBTVE7RUFDSSxxQkFBQTtFQUNBLFVBQUE7RUFDQSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSx3QkFBQTtFQUNBLHNCQUFBO0FBSloiLCJzb3VyY2VzQ29udGVudCI6WyIuaW5wdXRfY29udGFpbmVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAuZXllX2NvbnRhaW5lciB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiAwIDEwcHg7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICAgICAgICAvLyBoZWlnaHQ6IDMycHg7XG4gICAgfVxuXG5cbn1cblxuLnBhc3N3b3JkX3N0cmVuZ3RoX2NvbnRhaW5lciB7XG4gICAgdWwge1xuICAgICAgICB3aWR0aDogMTAwJTtcblxuICAgICAgICBsaSB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICB3aWR0aDogMTUlO1xuICAgICAgICAgICAgaGVpZ2h0OiA0cHg7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDUlO1xuICAgICAgICAgICAgLyogYm9yZGVyLXJhZGl1czogNTAlOyAqL1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYztcbiAgICAgICAgfVxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","i0","InputComponent","constructor","togglePassword","showPassword","type","passwordStrength","password","showPasswordStrength","password_strength","length","test","ngOnInit","invariable_type","selectors","inputs","formGroup","formControlName","placeholder","value","name","id","disabled","required","readonly","autofocus","autocomplete","pattern","minlength","maxlength","min","max","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/form/components/input/input.component.ts","/var/projects/gtender/client2/src/modules/form/components/input/input.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'form-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss']\n})\nexport class InputComponent {\n  /**\n   * @description: \n   */\n  @Input()\n  public formGroup: FormGroup = new FormGroup({});\n\n  /**\n   * @description:\n   */\n  @Input()\n  public formControlName: string = '';\n\n  /**\n   * @description:\n   */\n  @Input() \n  public type: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url' | 'search' | 'date' | 'datetime-local' | 'time' | 'week' | 'month' | 'color' = 'password';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public placeholder: string = '';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public value: string = '';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public name: string = '';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public id: string = '';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public disabled: boolean = false;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public required: boolean = false;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public readonly: boolean = false;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public autofocus: boolean = false;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public autocomplete: 'on' | 'off' = 'on';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public pattern: string = '';\n\n  /**\n   * @description:\n   */\n  @Input()\n  public minlength: number = 0;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public maxlength: number = 0;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public min: number = 0;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public max: number = 0;\n\n  /**\n   * @description: Variable to show or hide the password \n   */\n  @Input()\n  public showPassword: boolean = false;\n\n  /**\n   * @description:\n   */\n  @Input()\n  public showPasswordStrength: boolean = false;\n\n  /**\n   * @description: \n   */\n  public invariable_type: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url' | 'search' | 'date' | 'datetime-local' | 'time' | 'week' | 'month' | 'color' = 'text';\n\n  /**\n   * @description: Percentage of the password strength\n   */\n  public password_strength: Array<boolean> = [false, false, false, false, false];\n\n  /**\n   * @description\n   */\n  public input_model: string = '';\n\n  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ password\n  /**\n   * @description: Hide or show the password\n   */\n  public togglePassword(): void {\n    this.showPassword = !this.showPassword;\n    this.type = this.showPassword ? 'text' : 'password';\n  }\n\n  /**\n   * @description:\n   */\n  public passwordStrength(password: string): void {\n    if (!this.showPasswordStrength) { return; }\n    this.password_strength[0] = password.length >= 8; // Exemple : considérez que le mot de passe doit avoir au moins 8 caractères\n    this.password_strength[1] = /[0-9]/.test(password); // Vérifie la présence de chiffres\n    this.password_strength[2] = /[A-Z]/.test(password); // Vérifie la présence de lettres majuscules\n    this.password_strength[3] = /[a-z]/.test(password); // Vérifie la présence de lettres minuscules\n    this.password_strength[4] = /\\W/.test(password); // Vérifie la présence de caractères spéciaux\n  }\n\n  // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ NgOnInit\n  /**\n   * @description:\n   */\n  public ngOnInit(): void {\n    this.invariable_type = this.type;\n  }\n}\n","<form [formGroup]=\"formGroup\">\n    <div class=\"input_container\">\n        <div\n            *ngIf=\"invariable_type === 'password' && showPassword\" \n            class=\"eye_container\">\n            <i \n                *ngIf=\"type=='password'\"\n                class=\"fa fa-eye\"\n                (click)=\"togglePassword()\"></i>\n            <i \n                *ngIf=\"type=='text'\"\n                class=\"fa fa-eye-slash\"\n                (click)=\"togglePassword()\"></i>\n        </div>\n        <input \n            [(ngModel)]=\"input_model\"\n            [type]=\"type\"\n            [placeholder]=\"placeholder\"\n            [formControlName]=\"formControlName\"\n            (keydown)=\"passwordStrength(input_model)\">\n    </div>\n    <div \n    *ngIf=\"showPasswordStrength\"\n    class=\"password_strength_container\">\n    <ul>\n        <li *ngFor=\"let i of password_strength\"\n            ></li>\n    </ul>\n</div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}