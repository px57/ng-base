{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\n// import '@angulars/localize/init';\nvar $localize = msg => msg;\nvar $localize = function (data) {\n  return data;\n};\nconst FORM_DJANGO_TRADUCTOR = {\n  email: {\n    exists: $localize`This email address is already in use.`,\n    invalid: $localize`The email address is invalid.`,\n    required: $localize`This field is required.`,\n    not_encountered: $localize`This email address is not registered.`,\n    'Enter a valid email address.': $localize`The email address is invalid.`,\n    invalid_partner_email: $localize`The email address is invalid for this partner.`\n  },\n  password: {\n    password_is_alpha: $localize`Password must contain at least one number.`,\n    password_is_numeric: $localize`Password must contain at least one letter.`,\n    password_too_long: $localize`Password must contain at most 128 characters.`,\n    password_too_short: $localize`Password must contain at least 8 characters.`,\n    password_is_lower: $localize`Password must contain at least one uppercase letter.`,\n    password_has_space: $localize`Password must not contain spaces.`,\n    required: $localize`This field is required.`\n  },\n  collegeCode: {\n    invalid: $localize`The college code is invalid.`,\n    required: $localize`This field is required.`\n  },\n  first_name: {\n    required: $localize`This field is required.`\n  },\n  last_name: {\n    required: $localize`This field is required.`\n  },\n  __signin__: {\n    not_exists: $localize`Please fill in your email and password to sign in`\n  }\n};\nexport class FormsService {\n  /**\n   * @description: Constructeur.\n   */\n  constructor() {}\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   */\n  hasError(httpResponse, inputName) {\n    if (httpResponse === undefined) {\n      return false;\n    }\n    if (inputName === undefined) {\n      return false;\n    }\n    return httpResponse.form_error !== undefined && httpResponse.form_error[inputName] !== undefined;\n  }\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   */\n  notHasError(httpResponse, inputName) {\n    return !this.hasError(httpResponse, inputName);\n  }\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   * @param httpResponse: any\n   * @param inputName: string | undefined\n   * @param traductor: any\n   */\n  getErrorMsg(httpResponse, inputName) {\n    if (this.notHasError(httpResponse, inputName)) {\n      return undefined;\n    }\n    if (inputName === undefined) {\n      return undefined;\n    }\n    const error = httpResponse.form_error[inputName][0];\n    const errorMsg = this.getErrorMsgDjango(error, inputName);\n    if (errorMsg === undefined) {\n      console.error(\"FORM-ERROR>>>>\", error);\n    }\n    return errorMsg;\n  }\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   * @param httpResponse: any\n   * @param inputName: string | undefined\n   */\n  getErrorMsgDjango(error, inputName) {\n    if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(inputName) === false) {\n      return undefined;\n    }\n    if (FORM_DJANGO_TRADUCTOR[inputName].hasOwnProperty(error) === false) {\n      return undefined;\n    }\n    return FORM_DJANGO_TRADUCTOR[inputName][error];\n  }\n  /**\n   * @description: Add the error message to the traductor.\n   */\n  setConvertFormError(dict) {\n    for (const key in Object.keys(dict)) {\n      if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(key) === false) {\n        FORM_DJANGO_TRADUCTOR[key] = dict[key];\n        return;\n      }\n      Object.assign(FORM_DJANGO_TRADUCTOR[key], dict[key]);\n    }\n  }\n}\n_class = FormsService;\n_class.ɵfac = function FormsService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["$localize","msg","data","FORM_DJANGO_TRADUCTOR","email","exists","invalid","required","not_encountered","invalid_partner_email","password","password_is_alpha","password_is_numeric","password_too_long","password_too_short","password_is_lower","password_has_space","collegeCode","first_name","last_name","__signin__","not_exists","FormsService","constructor","hasError","httpResponse","inputName","undefined","form_error","notHasError","getErrorMsg","error","errorMsg","getErrorMsgDjango","console","hasOwnProperty","setConvertFormError","dict","key","Object","keys","assign","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/app/services/forms.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\n// import '@angulars/localize/init';\n\nvar $localize = (msg: any) => msg;\nvar $localize = function(data: any) { return data };\n\nconst FORM_DJANGO_TRADUCTOR: any = {\n  email: {\n    exists: $localize`This email address is already in use.`,\n    invalid: $localize`The email address is invalid.`,\n    required: $localize`This field is required.`,\n    not_encountered: $localize`This email address is not registered.`,\n    'Enter a valid email address.': $localize`The email address is invalid.`,\n    invalid_partner_email: $localize`The email address is invalid for this partner.`,\n  },\n  password: {\n    password_is_alpha: $localize`Password must contain at least one number.`,\n    password_is_numeric: $localize`Password must contain at least one letter.`,\n    password_too_long: $localize`Password must contain at most 128 characters.`,\n    password_too_short: $localize`Password must contain at least 8 characters.`,\n    password_is_lower: $localize`Password must contain at least one uppercase letter.`,\n    password_has_space: $localize`Password must not contain spaces.`,\n    required: $localize`This field is required.`,\n  },\n  collegeCode: {\n    invalid: $localize`The college code is invalid.`,\n    required: $localize`This field is required.`,\n  },\n  first_name: {\n    required: $localize`This field is required.`,\n  },\n  last_name: {\n    required: $localize`This field is required.`,\n  },\n  __signin__: {\n    not_exists: $localize`Please fill in your email and password to sign in`,\n  },\n};\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class FormsService {\n  /**\n   * @description: Constructeur.\n   */\n  constructor() {}\n\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   */\n  public hasError(httpResponse: any, inputName: string | undefined): boolean {\n    if (httpResponse === undefined) {\n      return false;\n    }\n\n    if (inputName === undefined) {\n      return false;\n    }\n    return (\n      httpResponse.form_error !== undefined &&\n      httpResponse.form_error[inputName] !== undefined\n    );\n  }\n\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   */\n  public notHasError(\n    httpResponse: any,\n    inputName: string | undefined\n  ): boolean {\n    return !this.hasError(httpResponse, inputName);\n  }\n\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   * @param httpResponse: any\n   * @param inputName: string | undefined\n   * @param traductor: any\n   */\n  public getErrorMsg(\n    httpResponse: any,\n    inputName: string | undefined\n  ): string | undefined {\n    if (this.notHasError(httpResponse, inputName)) {\n      return undefined;\n    }\n\n    if (inputName === undefined) {\n      return undefined;\n    }\n\n    const error = httpResponse.form_error[inputName][0];\n    const errorMsg = this.getErrorMsgDjango(error, inputName);\n    if (errorMsg === undefined) {\n      console.error(\"FORM-ERROR>>>>\", error);\n    }\n    return errorMsg;\n  }\n\n  /**\n   * @description: Retourne le message d'erreur associé à un champ de formulaire.\n   * @param httpResponse: any\n   * @param inputName: string | undefined\n   */\n  private getErrorMsgDjango(\n    error: string,\n    inputName: string\n  ): string | undefined {\n    if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(inputName) === false) {\n      return undefined;\n    }\n\n    if (FORM_DJANGO_TRADUCTOR[inputName].hasOwnProperty(error) === false) {\n      return undefined;\n    }\n\n    return FORM_DJANGO_TRADUCTOR[inputName][error];\n  }\n\n  /**\n   * @description: Add the error message to the traductor.\n   */\n  public setConvertFormError(dict: any): void {\n    for (const key in Object.keys(dict)) {\n      if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(key) === false) {\n        FORM_DJANGO_TRADUCTOR[key] = dict[key];\n        return; \n      }\n      Object.assign(FORM_DJANGO_TRADUCTOR[key], dict[key]);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}