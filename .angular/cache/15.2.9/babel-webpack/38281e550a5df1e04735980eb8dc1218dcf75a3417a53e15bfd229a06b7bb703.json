{"ast":null,"code":"var _class;\nimport { EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/tools/services/http.service\";\nimport * as i2 from \"@angular/forms\";\nexport class UpdateProfileComponent {\n  constructor(httpService) {\n    this.httpService = httpService;\n    /**\n     * @description:\n     */\n    this.changeField = new EventEmitter();\n    this.formGroup = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required])\n    });\n  }\n  /**\n   * @description:\n   */\n  ngSubmit() {\n    if (!this.formGroup.valid) {\n      return;\n    }\n    this.httpService.post('auth/update_profile', this.formGroup.value).subscribe(response => {\n      if (!response.success) {\n        return;\n      }\n      alert('aeouaoue');\n    });\n  }\n}\n_class = UpdateProfileComponent;\n_class.ɵfac = function UpdateProfileComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.HttpService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-update-profile\"]],\n  outputs: {\n    changeField: \"changeField\"\n  },\n  decls: 7,\n  vars: 1,\n  consts: [[1, \"dropdown_form_container\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"Username\"], [\"type\", \"text\", \"id\", \"Username\", \"formControlName\", \"username\", \"placeholder\", \"username\", 1, \"form-control\", 3, \"keypress\"], [\"for\", \"Email\"], [\"type\", \"text\", \"id\", \"Email\", \"formControlName\", \"email\", \"placeholder\", \"email\", 1, \"form-control\", 3, \"keypress\"]],\n  template: function UpdateProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdateProfileComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.ngSubmit();\n      });\n      i0.ɵɵelementStart(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 2);\n      i0.ɵɵlistener(\"keypress\", function UpdateProfileComponent_Template_input_keypress_3_listener() {\n        return ctx.changeField.emit({\n          componentForm: ctx\n        });\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\", 3);\n      i0.ɵɵtext(5, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 4);\n      i0.ɵɵlistener(\"keypress\", function UpdateProfileComponent_Template_input_keypress_6_listener() {\n        return ctx.changeField.emit({\n          componentForm: ctx\n        });\n      });\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAAA,SAAmCA,YAAY,QAAQ,eAAe;AACtE,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAQnE,OAAM,MAAOC,sBAAsB;EAajCC,YACUC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAZrB;;;IAIO,gBAAW,GAAsB,IAAIN,YAAY,EAAE;IAUxD,IAAI,CAACO,SAAS,GAAG,IAAIN,SAAS,CAAC;MAC7BO,QAAQ,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACM,QAAQ,CAAC,CAAC;MACpDC,KAAK,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACM,QAAQ,CAAC;KACjD,CAAC;EACJ;EAEA;;;EAGOE,QAAQ;IACb,IAAI,CAAC,IAAI,CAACJ,SAAS,CAACK,KAAK,EAAE;MACzB;;IAEF,IAAI,CAACN,WAAW,CAACO,IAAI,CACnB,qBAAqB,EACrB,IAAI,CAACN,SAAS,CAACO,KAAK,CACrB,CAACC,SAAS,CAAEC,QAAa,IAAI;MAC5B,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;QACrB;;MAEFC,KAAK,CAAE,UAAU,CAAC;IACpB,CAAC,CAAC;EACJ;;SAtCWd,sBAAsB;;mBAAtBA,MAAsB;AAAA;;QAAtBA,MAAsB;EAAAe;EAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCTnCC,+BAG4B;MAAxBA;QAAA,OAAYC,cAAU;MAAA,EAAC;MACvBD,gCAAsB;MAAAA,wBAAQ;MAAAA,iBAAQ;MACtCA,gCAQS;MAFLA;QAAA,OAAYC;UAAAC;QAAA,EAEV;MAAA,EAAC;MARPF,iBAQS;MAETA,gCAAmB;MAAAA,qBAAK;MAAAA,iBAAQ;MAChCA,gCAQS;MAFLA;QAAA,OAAYC;UAAAC;QAAA,EAEV;MAAA,EAAC;MARPF,iBAQS;;;MAtBTA,yCAAuB","names":["EventEmitter","FormGroup","FormControl","Validators","UpdateProfileComponent","constructor","httpService","formGroup","username","required","email","ngSubmit","valid","post","value","subscribe","response","success","alert","selectors","outputs","changeField","decls","vars","consts","template","i0","ctx","componentForm"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/profile/components/update-profile/update-profile.component.ts","/var/projects/gtender/client2/src/modules/profile/components/update-profile/update-profile.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HttpService } from 'src/modules/tools/services/http.service';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.scss']\n})\nexport class UpdateProfileComponent {\n\n  /**\n   * @description: \n   */\n  @Output()\n  public changeField: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * @description: \n   */\n  public formGroup: FormGroup;\n\n  constructor(\n    private httpService: HttpService,\n  ) {\n    this.formGroup = new FormGroup({\n      username: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required]),\n    });\n  }\n\n  /**\n   * @description:\n   */\n  public ngSubmit(): void {\n    if (!this.formGroup.valid) {\n      return; \n    }\n    this.httpService.post(\n      'auth/update_profile', \n      this.formGroup.value\n    ).subscribe((response: any) => {\n      if (!response.success) {\n        return;\n      }\n      alert ('aeouaoue');\n    });\n  }\n}\n","<form \n    class=\"dropdown_form_container\"\n    [formGroup]=\"formGroup\"\n    (ngSubmit)=\"ngSubmit()\">\n    <label for=\"Username\">Username</label>\n    <input \n        type=\"text\" \n        id=\"Username\" \n        formControlName=\"username\" \n        class=\"form-control\" \n        placeholder=\"username\"\n        (keypress)=\"changeField.emit({\n            componentForm: this,\n        })\"/>\n\n    <label for=\"Email\">Email</label>\n    <input \n        type=\"text\" \n        id=\"Email\" \n        formControlName=\"email\" \n        class=\"form-control\" \n        placeholder=\"email\"\n        (keypress)=\"changeField.emit({\n            componentForm: this,\n        })\"/>\n        \n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}