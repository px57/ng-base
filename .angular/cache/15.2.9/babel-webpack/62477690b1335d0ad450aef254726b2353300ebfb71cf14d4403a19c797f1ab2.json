{"ast":null,"code":"var _class;\nimport { ViewContainerRef, EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"dynamicComponentContainer\"];\nconst _c1 = [\"container\"];\nfunction ComponentInjectorComponent_ng_template_0_Template(rf, ctx) {}\nexport class ComponentInjectorComponent {\n  /**\n   * @description:\n   */\n  constructor(componentFactoryResolver) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    /**\n     * @Input() public params: any;\n     */\n    this.params = {};\n    /**\n     * @Input() public events: any;\n     */\n    this.events = {};\n  }\n  /**\n   * @method {boolean} isMenuCollapsed\n   */\n  ngOnInit() {\n    // if (this.component === undefined) {\n    //   console.error('ComponentInjectorComponent: component is undefined');\n    //   // alert('aooeuaoeaou'); \n    //   return;\n    // }\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\n    this.componentRef = this.container?.createComponent(componentFactory);\n    this.define_input_list();\n    this.define_output_list();\n  }\n  /**\n   * @method {boolean} define_input_list\n   */\n  define_input_list() {\n    if (this.componentRef === undefined) {\n      return;\n    }\n    Object.assign(this.componentRef.instance, this.params);\n  }\n  /**\n   * @define_output_list : set the output function\n   */\n  define_output_list() {\n    if (this.componentRef === undefined) {\n      return;\n    }\n    let output_list = {};\n    for (let key of Object.keys(this.componentRef.instance)) {\n      // has eventemitter\n      if (this.componentRef.instance[key] instanceof EventEmitter) {\n        output_list[key] = this.componentRef.instance[key];\n      }\n    }\n    for (let key of Object.keys(this.events)) {\n      const subscribe_function = this.events[key];\n      if (subscribe_function === undefined) {\n        continue;\n      }\n      this.componentRef.instance[key].subscribe(data => {\n        this.events[key](data);\n      });\n    }\n  }\n  /**\n   * @angular-method {void} ngAfterViewInit\n   */\n  ngAfterViewInit() {}\n  /**\n   * @description:\n   */\n  ngOnChanges() {}\n}\n_class = ComponentInjectorComponent;\n_class.ɵfac = function ComponentInjectorComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"component-injector\"]],\n  viewQuery: function ComponentInjectorComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n      i0.ɵɵviewQuery(_c1, 5, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicComponentContainer = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n    }\n  },\n  inputs: {\n    component: \"component\",\n    params: \"params\",\n    events: \"events\",\n    classList: \"classList\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"container\", \"\"]],\n  template: function ComponentInjectorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ComponentInjectorComponent_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAMEA,gBAAgB,EAEhBC,YAAY,QAGP,eAAe;;;;;AAOtB,OAAM,MAAOC,0BAA0B;EAsCrC;;;EAGAC,YACUC,wBAAkD;IAAlD,6BAAwB,GAAxBA,wBAAwB;IAzBlC;;;IAGgB,WAAM,GAAQ,EAAE;IAEhC;;;IAGgB,WAAM,GAAQ,EAAE;EAkB5B;EAEJ;;;EAGOC,QAAQ;IACb;IACA;IACA;IACA;IACA;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAACF,wBAAwB,CAACG,uBAAuB,CAAC,IAAI,CAACC,SAAS,CAAC;IAC9F,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,SAAS,EAAEC,eAAe,CAACL,gBAAgB,CAAC;IAGrE,IAAI,CAACM,iBAAiB,EAAE;IACxB,IAAI,CAACC,kBAAkB,EAAE;EAC3B;EAEA;;;EAGOD,iBAAiB;IACtB,IAAI,IAAI,CAACH,YAAY,KAAKK,SAAS,EAAE;MAAE;;IACvCC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACP,YAAY,CAACQ,QAAQ,EAAE,IAAI,CAACC,MAAM,CAAC;EACxD;EAEA;;;EAGOL,kBAAkB;IACvB,IAAI,IAAI,CAACJ,YAAY,KAAKK,SAAS,EAAE;MAAE;;IAEvC,IAAIK,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIC,GAAG,IAAIL,MAAM,CAACM,IAAI,CAAC,IAAI,CAACZ,YAAY,CAACQ,QAAQ,CAAC,EAAE;MACvD;MACA,IAAI,IAAI,CAACR,YAAY,CAACQ,QAAQ,CAACG,GAAG,CAAC,YAAYnB,YAAY,EAAE;QAC1DkB,WAAmB,CAACC,GAAG,CAAC,GAAG,IAAI,CAACX,YAAY,CAACQ,QAAQ,CAACG,GAAG,CAAC;;;IAI/D,KAAK,IAAIA,GAAG,IAAIL,MAAM,CAACM,IAAI,CAAC,IAAI,CAACC,MAAM,CAAC,EAAE;MACxC,MAAMC,kBAAkB,GAAI,IAAI,CAACD,MAAM,CAACF,GAAG,CAAS;MACpD,IAAIG,kBAAkB,KAAKT,SAAS,EAAE;QACpC;;MAGF,IAAI,CAACL,YAAY,CAACQ,QAAQ,CAACG,GAAG,CAAC,CAACI,SAAS,CAAEC,IAAS,IAAI;QACtD,IAAI,CAACH,MAAM,CAACF,GAAG,CAAC,CAACK,IAAI,CAAC;MACxB,CAAC,CAAC;;EAKN;EACA;;;EAGOC,eAAe,IAEtB;EAEA;;;EAGOC,WAAW,IAElB;;SA9GWzB,0BAA0B;;mBAA1BA,MAA0B;AAAA;;QAA1BA,MAA0B;EAAA0B;EAAAC;IAAA;6BAKW7B,gBAAgB;6BAKjCA,gBAAgB;;;;;;;;;;;;;;;;;;;;MC7BjD8B,4HAAsC","names":["ViewContainerRef","EventEmitter","ComponentInjectorComponent","constructor","componentFactoryResolver","ngOnInit","componentFactory","resolveComponentFactory","component","componentRef","container","createComponent","define_input_list","define_output_list","undefined","Object","assign","instance","params","output_list","key","keys","events","subscribe_function","subscribe","data","ngAfterViewInit","ngOnChanges","selectors","viewQuery","i0"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/tools/components/component-injector/component-injector.component.ts","/var/projects/gtender/client2/src/modules/tools/components/component-injector/component-injector.component.html"],"sourcesContent":["\nimport {\n  Component,\n  Input,\n  OnInit,\n  ComponentFactoryResolver, Type,\n  ViewChild,\n  ViewContainerRef,\n  AfterViewInit,\n  EventEmitter,\n  Output,\n  OnChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'component-injector',\n  templateUrl: './component-injector.component.html',\n  styleUrls: ['./component-injector.component.scss']\n})\nexport class ComponentInjectorComponent implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * @ViewChild('container)\n   */\n  @ViewChild('dynamicComponentContainer', { read: ViewContainerRef }) dynamicComponentContainer: ViewContainerRef | undefined;\n\n  /**\n   * @ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef;\n   */\n  @ViewChild('container', {read: ViewContainerRef}) container: ViewContainerRef | undefined;\n\n  /**\n   * @Input() public component: Type<any>;\n   */\n  @Input() public component: Type<any> | undefined;\n  \n  /**\n   * @Input() public params: any;\n   */\n  @Input() public params: any = {};\n\n  /**\n   * @Input() public events: any;\n   */\n  @Input() public events: any = {};\n\n  /**\n   * @Input() public classList: string;\n   */\n  @Input() public classList: string | undefined;\n  \n\n  /**\n   * @attribute {componentFactoryResolver} componentRef\n   */\n  public componentRef: any;\n\n  /**\n   * @description: \n   */\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n  ) { }\n\n  /**\n   * @method {boolean} isMenuCollapsed\n   */\n  public ngOnInit() {\n    // if (this.component === undefined) {\n    //   console.error('ComponentInjectorComponent: component is undefined');\n    //   // alert('aooeuaoeaou'); \n    //   return;\n    // }\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\n    this.componentRef = this.container?.createComponent(componentFactory);\n\n\n    this.define_input_list();\n    this.define_output_list();\n  }\n\n  /**\n   * @method {boolean} define_input_list\n   */\n  public define_input_list() {\n    if (this.componentRef === undefined) { return; }\n    Object.assign(this.componentRef.instance, this.params);\n  }\n\n  /**\n   * @define_output_list : set the output function\n   */\n  public define_output_list() {\n    if (this.componentRef === undefined) { return; }\n    \n    let output_list = {};\n    for (let key of Object.keys(this.componentRef.instance)) {\n      // has eventemitter\n      if (this.componentRef.instance[key] instanceof EventEmitter) {\n        (output_list as any)[key] = this.componentRef.instance[key];\n      }\n    }\n\n    for (let key of Object.keys(this.events)) {\n      const subscribe_function = (this.events[key] as any);\n      if (subscribe_function === undefined) {\n        continue;\n      }\n\n      this.componentRef.instance[key].subscribe((data: any) => { \n        this.events[key](data);\n      });\n\n    }\n\n\n  }\n  /**\n   * @angular-method {void} ngAfterViewInit\n   */\n  public ngAfterViewInit() {\n\n  }\n\n  /**\n   * @description: \n   */\n  public ngOnChanges() {\n    \n  }\n}\n\n","<ng-template #container></ng-template>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}