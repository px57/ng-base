{"ast":null,"code":"export class DynamicFormManager {\n  constructor(inputList) {\n    this.inputList = inputList;\n  }\n  /**\n   * @description:\n   */\n  getInput(input_name) {\n    for (let input of this.inputList) {\n      if (input.name === input_name) {\n        return input;\n      }\n    }\n    throw new Error(`Input ${input_name} not found`);\n  }\n  /**\n   * @description:\n   */\n  placeholder(input_name) {\n    const input = this.getInput(input_name);\n    if (input.placeholder === undefined) {\n      throw new Error(`Placeholder of ${input_name} is undefined`);\n    }\n    return input.placeholder;\n  }\n}","map":{"version":3,"mappings":"AAGA,OAAM,MAAOA,kBAAkB;EAM3BC,YACIC,SAA6B;IAE7B,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EAEA;;;EAGOC,QAAQ,CAACC,UAAkB;IAC9B,KAAK,IAAIC,KAAK,IAAI,IAAI,CAACH,SAAS,EAAE;MAC9B,IAAIG,KAAK,CAACC,IAAI,KAAKF,UAAU,EAAE;QAC3B,OAAOC,KAAK;;;IAGpB,MAAM,IAAIE,KAAK,CAAC,SAASH,UAAU,YAAY,CAAC;EACpD;EAEA;;;EAGOI,WAAW,CAACJ,UAAkB;IACjC,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,CAACC,UAAU,CAAC;IACvC,IAAIC,KAAK,CAACG,WAAW,KAAKC,SAAS,EAAE;MACjC,MAAM,IAAIF,KAAK,CAAC,kBAAkBH,UAAU,eAAe,CAAC;;IAEhE,OAAOC,KAAK,CAACG,WAAW;EAC5B","names":["DynamicFormManager","constructor","inputList","getInput","input_name","input","name","Error","placeholder","undefined"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/form/classes/dynamic_form.ts"],"sourcesContent":["\nimport { ConfigInput } from \"src/modules/form/types\";\n\nexport class DynamicFormManager {\n    /**\n     * @description:  \n     */\n    public inputList: Array<ConfigInput>;\n\n    constructor(\n        inputList: Array<ConfigInput>,\n    ) {\n        this.inputList = inputList;\n    }\n\n    /**\n     * @description:\n     */\n    public getInput(input_name: string): ConfigInput {\n        for (let input of this.inputList) {\n            if (input.name === input_name) {\n                return input;\n            }\n        }\n        throw new Error(`Input ${input_name} not found`);\n    }\n\n    /**\n     * @description:\n     */\n    public placeholder(input_name: string): string {\n        const input = this.getInput(input_name);\n        if (input.placeholder === undefined) {\n            throw new Error(`Placeholder of ${input_name} is undefined`);\n        }\n        return input.placeholder;\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}