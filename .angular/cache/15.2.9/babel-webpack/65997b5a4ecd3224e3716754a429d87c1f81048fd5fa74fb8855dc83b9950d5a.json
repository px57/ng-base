{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/tools/services/http.service\";\nexport let GlobalsService = /*#__PURE__*/(() => {\n  var _class;\n  class GlobalsService {\n    /**\n     * @description:\n     */\n    constructor(httpService) {\n      this.httpService = httpService;\n      /**\n       * @description:\n       */\n      this.load_basic_data__is_loaded = false;\n      /**\n       * @description:\n       */\n      this.jobs = [];\n      /**\n       * @description:\n       */\n      this.job_categories = [];\n      /**\n       * @description:\n       */\n      this.company_types = [];\n      /**\n       * @description:\n       */\n      this.company_sizes = [];\n    }\n    /**\n     * @description:\n     */\n    load_basic_data() {\n      this.httpService.get(`/v1/profiles/load_basic_data/`).subscribe(data => {\n        this.jobs = data.jobs;\n        this.job_categories = data.job_categories;\n        this.company_types = data.company_types;\n        this.company_sizes = data.company_sizes;\n        this.load_basic_data__is_loaded = true;\n      });\n    }\n    /**\n     * @description: Retourne promise when data is not loaded\n     */\n    waitLoadBasicData() {\n      return new Promise((resolve, reject) => {\n        this.setTimeoutAfterWaitLoadBasicData(resolve, reject);\n      });\n    }\n    /**\n     * @description:\n     */\n    setTimeoutAfterWaitLoadBasicData(resolve, reject) {\n      setTimeout(() => {\n        if (this.load_basic_data__is_loaded) {\n          resolve('ok');\n        } else {\n          this.setTimeoutAfterWaitLoadBasicData(resolve, reject);\n        }\n      }, 100);\n    }\n  }\n  _class = GlobalsService;\n  _class.ɵfac = function GlobalsService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}