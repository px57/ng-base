{"ast":null,"code":"var _class;\nimport { FormGroup, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/modal/services/switch-modal.service\";\nimport * as i2 from \"src/modules/tools/services/http.service\";\nimport * as i3 from \"../../services/auth.service\";\nimport * as i4 from \"src/app/services/forms.service\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../../../form/components/form-error/form-error.component\";\nexport class SignupComponent {\n  constructor(switchModalService, httpService, authService, formService) {\n    this.switchModalService = switchModalService;\n    this.httpService = httpService;\n    this.authService = authService;\n    this.formService = formService;\n    /**\n     * @description:\n     */\n    this.httpResponse = {};\n    this.config = this.authService.config__signup;\n    this.formGroup = this.generateFormGroup();\n  }\n  /**\n   * @description:\n   */\n  generateFormGroup() {\n    const inputList = this.config.inputList;\n    const formGroup = {};\n    inputList.forEach(input => {\n      formGroup[input.name] = new FormControl('');\n    });\n    return new FormGroup(formGroup);\n  }\n  /**\n   * @description:\n   */\n  submit() {\n    if (this.formGroup.invalid) {\n      return;\n    }\n    // -> [API] - Signin\n    const params = {\n      email: this.formGroup.value.email,\n      password: this.formGroup.value.password,\n      username: this.formGroup.value.username\n    };\n    this.httpService.post('auth/signup', params).subscribe(response => {\n      console.log(response);\n      if (!response.success) {\n        return;\n      }\n      this.config.eventAfterSignup(response);\n    });\n  }\n}\n_class = SignupComponent;\n_class.ɵfac = function SignupComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.SwitchModalService), i0.ɵɵdirectiveInject(i2.HttpService), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.FormsService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-signup\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[1, \"signup_container\", \"auth_container\"], [\"src\", \"/assets/img/logo.svg\", \"alt\", \"\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"email\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", \"placeholder\", \"Username\", \"required\", \"\"], [\"inputName\", \"username\", 3, \"httpResponse\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email address\", \"required\", \"\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"required\", \"\"], [\"type\", \"submit\", \"value\", \"Sign in\", 1, \"bg_central_button_gradient\"]],\n  template: function SignupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"img\", 1);\n      i0.ɵɵelementStart(2, \"h1\");\n      i0.ɵɵtext(3, \"Create new account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function SignupComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.submit();\n      });\n      i0.ɵɵelementStart(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Pseudo\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4)(8, \"app-form-error\", 5);\n      i0.ɵɵelementStart(9, \"label\", 3);\n      i0.ɵɵtext(10, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 6)(12, \"app-form-error\", 5);\n      i0.ɵɵelementStart(13, \"label\", 7);\n      i0.ɵɵtext(14, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 8)(16, \"input\", 9);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"httpResponse\", ctx.httpResponse);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"httpResponse\", ctx.httpResponse);\n    }\n  },\n  dependencies: [i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.FormGroupDirective, i5.FormControlName, i6.FormErrorComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAGA,SAASA,SAAS,EAAEC,WAAW,QAAQ,gBAAgB;;;;;;;;AAUvD,OAAM,MAAOC,eAAe;EAgB1BC,YACSC,kBAAsC,EACtCC,WAAwB,EACxBC,WAAwB,EACxBC,WAAyB;IAHzB,uBAAkB,GAAlBH,kBAAkB;IAClB,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IATpB;;;IAGO,iBAAY,GAAQ,EAAE;IAQ3B,IAAI,CAACC,MAAM,GAAG,IAAI,CAACF,WAAW,CAACG,cAAc;IAC7C,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,iBAAiB,EAAE;EAC3C;EAEA;;;EAGQA,iBAAiB;IACvB,MAAMC,SAAS,GAAG,IAAI,CAACJ,MAAM,CAACI,SAAS;IACvC,MAAMF,SAAS,GAAQ,EAAE;IAEzBE,SAAS,CAACC,OAAO,CAAEC,KAAK,IAAI;MAC1BJ,SAAS,CAACI,KAAK,CAACC,IAAI,CAAC,GAAG,IAAId,WAAW,CAAC,EAAE,CAAC;IAC7C,CAAC,CAAC;IAEF,OAAO,IAAID,SAAS,CAACU,SAAS,CAAC;EACjC;EAGA;;;EAGOM,MAAM;IACX,IAAI,IAAI,CAACN,SAAS,CAACO,OAAO,EAAE;MAAE;;IAE9B;IACA,MAAMC,MAAM,GAAG;MACbC,KAAK,EAAE,IAAI,CAACT,SAAS,CAACU,KAAK,CAACD,KAAK;MACjCE,QAAQ,EAAE,IAAI,CAACX,SAAS,CAACU,KAAK,CAACC,QAAQ;MACvCC,QAAQ,EAAE,IAAI,CAACZ,SAAS,CAACU,KAAK,CAACE;KAChC;IAED,IAAI,CAACjB,WAAW,CAACkB,IAAI,CAAC,aAAa,EAAEL,MAAM,CAAC,CAACM,SAAS,CAAEC,QAAa,IAAI;MACvEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACA,QAAQ,CAACG,OAAO,EAAE;QACrB;;MAEF,IAAI,CAACpB,MAAM,CAACqB,gBAAgB,CAACJ,QAAQ,CAAC;IACxC,CAAC,CAAC;EACJ;;SA7DWvB,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX5BC,8BAA6C;MACzCA,yBAAuC;MACvCA,0BAAI;MAAAA,kCAAkB;MAAAA,iBAAK;MAC3BA,+BAE0B;MAAtBA;QAAA,OAAYC,YAAQ;MAAA,EAAC;MAErBD,gCAAmB;MAAAA,sBAAM;MAAAA,iBAAQ;MACjCA,2BAKa;MAMbA,gCAAmB;MAAAA,8BAAa;MAAAA,iBAAQ;MAExCA,4BAKa;MAQbA,iCAAsB;MAAAA,yBAAQ;MAAAA,iBAAQ;MACtCA,4BAKa;MAGjBA,iBAAO;;;MAvCHA,eAAuB;MAAvBA,yCAAuB;MAYnBA,eAA6B;MAA7BA,+CAA6B;MAa7BA,eAA6B;MAA7BA,+CAA6B","names":["FormGroup","FormControl","SignupComponent","constructor","switchModalService","httpService","authService","formService","config","config__signup","formGroup","generateFormGroup","inputList","forEach","input","name","submit","invalid","params","email","value","password","username","post","subscribe","response","console","log","success","eventAfterSignup","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/profile/components/signup/signup.component.ts","/var/projects/gtender/client2/src/modules/profile/components/signup/signup.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SwitchModalService } from 'src/modules/modal/services/switch-modal.service';\nimport { HttpService } from 'src/modules/tools/services/http.service';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { ConfigSignup } from '../../types';\nimport { FormsService } from 'src/app/services/forms.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignupComponent {\n  /**\n   * @description: \n   */\n  public formGroup: FormGroup;\n\n  /**\n   * @description: \n   */\n  public config: ConfigSignup;\n\n  /**\n   * @description: \n   */\n  public httpResponse: any = {};\n\n  constructor(\n    public switchModalService: SwitchModalService,\n    public httpService: HttpService,\n    public authService: AuthService,\n    public formService: FormsService,\n  ) {\n    this.config = this.authService.config__signup;\n    this.formGroup = this.generateFormGroup();\n  }\n\n  /**\n   * @description: \n   */\n  private generateFormGroup(): FormGroup {\n    const inputList = this.config.inputList;\n    const formGroup: any = {};\n\n    inputList.forEach((input) => {\n      formGroup[input.name] = new FormControl('');\n    });\n\n    return new FormGroup(formGroup);\n  }\n\n\n  /**\n   * @description:\n   */\n  public submit(): void {\n    if (this.formGroup.invalid) { return; }\n    \n    // -> [API] - Signin\n    const params = {\n      email: this.formGroup.value.email,\n      password: this.formGroup.value.password,\n      username: this.formGroup.value.username,\n    };\n\n    this.httpService.post('auth/signup', params).subscribe((response: any) => {\n      console.log(response);\n      if (!response.success) {\n        return; \n      }\n      this.config.eventAfterSignup(response);\n    });\n  }\n}\n","\n<!-- https://tailwindui.com/components/application-ui/forms/sign-in-forms -->\n<div class=\"signup_container auth_container\">\n    <img src=\"/assets/img/logo.svg\" alt=\"\">\n    <h1>Create new account</h1>\n    <form \n        [formGroup]=\"formGroup\" \n        (ngSubmit)=\"submit()\">\n\n        <label for=\"email\">Pseudo</label>\n        <input \n            type=\"text\" \n            id=\"username\" \n            formControlName=\"username\" \n            placeholder=\"Username\" \n            required>\n\n        <app-form-error\n            [httpResponse]=\"httpResponse\"\n            inputName=\"username\"></app-form-error>\n\n        <label for=\"email\">Email address</label>\n\n        <input \n            type=\"email\" \n            id=\"email\" \n            formControlName=\"email\" \n            placeholder=\"Email address\" \n            required>\n\n        <app-form-error\n            [httpResponse]=\"httpResponse\"\n            inputName=\"username\">\n        </app-form-error>\n\n        \n        <label for=\"password\">Password</label>\n        <input \n            type=\"password\" \n            id=\"password\" \n            formControlName=\"password\" \n            placeholder=\"Password\" \n            required>\n        \n        <input type=\"submit\" value=\"Sign in\" class=\"bg_central_button_gradient\">\n    </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}