{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/modules/profile/services/user.service\";\nimport * as i3 from \"src/modules/tools/services/http.service\";\n;\nexport class GlobalResolver {\n  constructor(router, user, activatedRoute, httpService) {\n    this.router = router;\n    this.user = user;\n    this.activatedRoute = activatedRoute;\n    this.httpService = httpService;\n  }\n  resolve() {\n    return new Promise(resolve => {\n      this.response = resolve;\n      this.route = this.activatedRoute.snapshot;\n      this.state = this.router.routerState;\n      if (!this.user.data_loaded()) {\n        this.user.update_data().subscribe(response => {\n          this.callback.bind(this);\n          this.httpService.get('v1/auth/me').subscribe(response => {\n            this.user.set_data(response);\n            this.callback();\n            if (response.data.onboarding !== true) {\n              this.router.navigate(['/', 'auth', 'onboarding', 'start']);\n            }\n            resolve({\n              success: true\n            });\n          });\n        });\n      } else {\n        this.callback();\n        resolve({\n          success: true\n        });\n      }\n    });\n  }\n  callback() {\n    const data = this.user.get_data();\n    this.response(data);\n  }\n}\n_class = GlobalResolver;\n_class.ɵfac = function GlobalResolver_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i3.HttpService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";;;;;AAWC;AAGD,OAAM,MAAOA,cAAc;EAIzBC,YACUC,MAAc,EACdC,IAAiB,EAClBC,cAA8B,EAC7BC,WAAwB;IAHxB,WAAM,GAANH,MAAM;IACN,SAAI,GAAJC,IAAI;IACL,mBAAc,GAAdC,cAAc;IACb,gBAAW,GAAXC,WAAW;EACjB;EAIKC,OAAO;IACV,OAAO,IAAIC,OAAO,CAAED,OAAO,IAAI;MAC7B,IAAI,CAACE,QAAQ,GAAGF,OAAO;MACvB,IAAI,CAACG,KAAK,GAAG,IAAI,CAACL,cAAc,CAACM,QAAQ;MACzC,IAAI,CAACC,KAAK,GAAG,IAAI,CAACT,MAAM,CAACU,WAAW;MAEpC,IAAI,CAAC,IAAI,CAACT,IAAI,CAACU,WAAW,EAAE,EAAE;QAC5B,IAAI,CAACV,IAAI,CAACW,WAAW,EAAE,CAACC,SAAS,CAAEP,QAAa,IAAI;UAClD,IAAI,CAACQ,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;UACxB,IAAI,CAACZ,WAAW,CAACa,GAAG,CAAC,YAAY,CAAC,CAACH,SAAS,CAAEP,QAAa,IAAI;YAC7D,IAAI,CAACL,IAAI,CAACgB,QAAQ,CAACX,QAAQ,CAAC;YAC5B,IAAI,CAACQ,QAAQ,EAAE;YAEf,IAAIR,QAAQ,CAACY,IAAI,CAACC,UAAU,KAAK,IAAI,EAAE;cACrC,IAAI,CAACnB,MAAM,CAACoB,QAAQ,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;;YAE5DhB,OAAO,CAAC;cAACiB,OAAO,EAAE;YAAI,CAAC,CAAC;UACzB,CAAC,CAAC;QAEL,CAAC,CAAC;OACH,MAAM;QACL,IAAI,CAACP,QAAQ,EAAE;QACfV,OAAO,CAAC;UAACiB,OAAO,EAAE;QAAI,CAAC,CAAC;;IAG5B,CAAC,CAAC;EACN;EAEOP,QAAQ;IACb,MAAMI,IAAI,GAAG,IAAI,CAACjB,IAAI,CAACqB,QAAQ,EAAE;IACjC,IAAI,CAAChB,QAAQ,CAACY,IAAI,CAAC;EACrB;;SA5CSpB,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAyB,SAAdzB,MAAc;AAAA","names":["GlobalResolver","constructor","router","user","activatedRoute","httpService","resolve","Promise","response","route","snapshot","state","routerState","data_loaded","update_data","subscribe","callback","bind","get","set_data","data","onboarding","navigate","success","get_data","factory"],"sourceRoot":"","sources":["/var/projects/base/ng-base/src/resolvers/global-resolver.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Resolve,\n         ActivatedRoute,\n         Router } from '@angular/router';\n\nimport { HttpService } from 'src/modules/tools/services/http.service';\nimport { UserService } from 'src/modules/profile/services/user.service';\n\ninterface offers {\n    success: boolean\n};\n\n@Injectable()\nexport class GlobalResolver implements Resolve<offers>{\n  public route: any;\n  public state: any;\n\n  constructor(\n    private router: Router,\n    private user: UserService,\n    public activatedRoute: ActivatedRoute,\n    private httpService: HttpService,\n   ) {}\n\n    public response: any;\n\n    public resolve(): Promise<offers> {\n        return new Promise((resolve) => {\n          this.response = resolve;\n          this.route = this.activatedRoute.snapshot;\n          this.state = this.router.routerState;\n          \n          if (!this.user.data_loaded()) {\n            this.user.update_data().subscribe((response: any) => {\n              this.callback.bind(this);\n              this.httpService.get('v1/auth/me').subscribe((response: any) => {\n                this.user.set_data(response);\n                this.callback();\n\n                if (response.data.onboarding !== true) { \n                  this.router.navigate(['/', 'auth', 'onboarding', 'start']);\n                }\n                resolve({success: true});\n               });\n\n            });\n          } else {\n            this.callback();\n            resolve({success: true});\n          }\n\n        });\n    }\n\n    public callback(): void {\n      const data = this.user.get_data();\n      this.response(data);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}