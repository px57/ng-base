{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let SwitchModalService = /*#__PURE__*/(() => {\n  var _class;\n  class SwitchModalService {\n    constructor(router) {\n      this.router = router;\n      /**\n       * @description:\n       */\n      this.config_list = [];\n    }\n    /*\n    * @description: Recuperer le nom dans l'url.\n    */\n    get_switch_name() {\n      const url = new URL(window.location.href);\n      return url.searchParams.get(`switch`);\n    }\n    /*\n    * @description: Get the good params.\n    */\n    /*\n    * @description:\n    */\n    open_modal(name, params = {}) {\n      if (name !== undefined) {\n        params.switch = name;\n      }\n      this.router.navigate([], {\n        queryParams: params\n      });\n    }\n    /*\n    * @description:\n    */\n    close(params = {}) {\n      this.open_modal(undefined, params);\n    }\n    /*\n    * @description:\n    */\n    open_help(hash) {\n      this.open_modal(`info_curbapp_manifest_create`);\n    }\n    /**\n     * @description:\n     */\n    clickWhiteContainer($event) {\n      $event.stopPropagation();\n    }\n    /**\n     * @description:\n     */\n    has_in_switchmodal() {\n      return this.get_switch_name() !== null;\n    }\n    /**\n     * @description:\n     */\n    set_config(config) {\n      if (this.config_exists(config.name)) {\n        return;\n      }\n      this.config_list.push(config);\n      console.log(this.config_list);\n    }\n    /**\n     * @description:\n     */\n    set_config_list(config_list) {\n      for (const config of config_list) {\n        this.set_config(config);\n      }\n    }\n    /**\n     * @description:\n     */\n    get_config(config_name) {\n      for (const config of this.config_list) {\n        if (config.name === config_name) {\n          return config;\n        }\n      }\n      return undefined;\n    }\n    /**\n     * @description:\n     */\n    config_exists(config_name) {\n      return this.get_config(config_name) !== undefined;\n    }\n  }\n  _class = SwitchModalService;\n  _class.ɵfac = function SwitchModalService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Router));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return SwitchModalService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}