{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/modal/services/switch-modal.service\";\nexport class BalanceService {\n  constructor(switchModalService) {\n    this.switchModalService = switchModalService;\n    /**\n     * @description:\n     */\n    this.stream = new Subject();\n    /**\n     * @description:\n     */\n    this.balance = 0;\n    setInterval(() => {\n      this.getBalance();\n    }, 500);\n  }\n  /**\n   * @description:\n   * @savein.service -> balance\n   * @savein.stream -> balance\n   * @savein.localStorage -> balance\n   */\n  setBalance(balance) {\n    this.balance = balance;\n    localStorage.setItem('balance', balance.toString());\n    this.stream.next(balance);\n  }\n  /**\n   * @description:\n   */\n  getBalance() {\n    let balance = localStorage.getItem('balance');\n    if (balance === null) {\n      return this.balance;\n    }\n    if (this.balance !== parseInt(balance)) {\n      this.setBalance(parseInt(balance));\n    }\n    return this.balance;\n  }\n  /**\n   * @description:\n   */\n  hasSuffisantMoney(amount) {\n    let balance = this.getBalance();\n    if (balance < amount) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * @description:\n   */\n  open_balance_modal() {\n    this.switchModalService.open_modal('balance');\n  }\n}\n_class = BalanceService;\n_class.ɵfac = function BalanceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.SwitchModalService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;;AAM9B,OAAM,MAAOC,cAAc;EAWzBC,YACSC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IAX3B;;;IAGO,WAAM,GAAoB,IAAIH,OAAO,EAAU;IAEtD;;;IAGO,YAAO,GAAW,CAAC;IAKxBI,WAAW,CAAC,MAAK;MACf,IAAI,CAACC,UAAU,EAAE;IACnB,CAAC,EAAE,GAAG,CAAC;EACT;EAEA;;;;;;EAMOC,UAAU,CAACC,OAAe;IAC/B,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtBC,YAAY,CAACC,OAAO,CAAC,SAAS,EAAEF,OAAO,CAACG,QAAQ,EAAE,CAAC;IACnD,IAAI,CAACC,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC;EAC3B;EAEA;;;EAGOF,UAAU;IACf,IAAIE,OAAO,GAAGC,YAAY,CAACK,OAAO,CAAC,SAAS,CAAC;IAC7C,IAAIN,OAAO,KAAK,IAAI,EAAE;MACpB,OAAO,IAAI,CAACA,OAAO;;IAErB,IAAI,IAAI,CAACA,OAAO,KAAKO,QAAQ,CAACP,OAAO,CAAC,EAAE;MACtC,IAAI,CAACD,UAAU,CAACQ,QAAQ,CAACP,OAAO,CAAC,CAAC;;IAEpC,OAAO,IAAI,CAACA,OAAO;EACrB;EAEA;;;EAGOQ,iBAAiB,CAACC,MAAc;IACrC,IAAIT,OAAO,GAAG,IAAI,CAACF,UAAU,EAAE;IAC/B,IAAIE,OAAO,GAAGS,MAAM,EAAE;MACpB,OAAO,KAAK;;IAEd,OAAO,IAAI;EACb;EAEA;;;EAGOC,kBAAkB;IACvB,IAAI,CAACd,kBAAkB,CAACe,UAAU,CAAC,SAAS,CAAC;EAC/C;;SA7DWjB,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAkB,SAAdlB,MAAc;EAAAmB,YAFb;AAAM","names":["Subject","BalanceService","constructor","switchModalService","setInterval","getBalance","setBalance","balance","localStorage","setItem","toString","stream","next","getItem","parseInt","hasSuffisantMoney","amount","open_balance_modal","open_modal","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/base/ng-base/src/app/services/balance.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { SwitchModalService } from 'src/modules/modal/services/switch-modal.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BalanceService {\n  /**\n   * @description:\n   */\n  public stream: Subject<number> = new Subject<number>();\n\n  /**\n   * @description: \n   */\n  public balance: number = 0;\n\n  constructor(\n    public switchModalService: SwitchModalService,\n  ) { \n    setInterval(() => {\n      this.getBalance();\n    }, 500);\n  }\n\n  /**\n   * @description:\n   * @savein.service -> balance\n   * @savein.stream -> balance\n   * @savein.localStorage -> balance\n   */\n  public setBalance(balance: number) {\n    this.balance = balance;\n    localStorage.setItem('balance', balance.toString());\n    this.stream.next(balance);\n  }\n\n  /**\n   * @description:\n   */\n  public getBalance() {\n    let balance = localStorage.getItem('balance');\n    if (balance === null) {\n      return this.balance;\n    }\n    if (this.balance !== parseInt(balance)) {\n      this.setBalance(parseInt(balance));\n    }\n    return this.balance;\n  }\n\n  /**\n   * @description:\n   */\n  public hasSuffisantMoney(amount: number): boolean {\n    let balance = this.getBalance();\n    if (balance < amount) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * @description:\n   */\n  public open_balance_modal(): void {\n    this.switchModalService.open_modal('balance');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}