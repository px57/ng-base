{"ast":null,"code":"import { webSocket } from 'rxjs/webSocket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/modules/tools/services/libs.service\";\n;\nexport let WebsocketService = /*#__PURE__*/(() => {\n  var _class;\n  class WebsocketService {\n    // /**\n    //  * @description: \n    //  */\n    // private websocket_config: Array<WebSocketsConfig> = [\n    //   {\n    //     port: 4242,\n    //     pathname: 'ws/chatroom/?room=fr&fakeConnect=true',\n    //     service: ChatroomService,\n    //   },\n    //   {\n    //     port: 4242,\n    //     pathname: 'ws/playroom/?room=fr&fakeConnect=true',\n    //   }\n    // ];\n    /**\n     * @description:\n     */\n    constructor(router, l) {\n      this.router = router;\n      this.l = l;\n      /**\n       * @description:\n       */\n      this.subject = undefined;\n      /**\n       * @description:\n       */\n      this.consumerData = {};\n      /**\n       * @description:\n       */\n      this.websocket_config = [];\n      // this.completeWebsocketConfig();\n      // for (const ws_config of this.websocket_config) {\n      //   this.connection(ws_config);\n      // }\n    }\n    /**\n     * @description: Injection des elements essentielles a la configuration du websocket.\n     */\n    completeWebsocketConfig() {\n      // const config = [\n      //   {\n      //     service: this.chatroomService,\n      //   },\n      //   {\n      //     service: this.playroomService,\n      //   }\n      // ];\n      // for (let i = 0; i < config.length; i++) {\n      //   this.websocket_config[i].service = config[i].service;\n      //   this.websocket_config[i].wsService = this;\n      // } \n    }\n    /*\n     * @description: Ici ont souscrit au différents éléments à envoyer et recevoir.\n     */\n    connection(ws_config) {\n      const url = this.getWebsocketUrl(ws_config);\n      ws_config.wsStream = webSocket(url);\n      ws_config.wsStream.subscribe(msg => '',\n      // Called whenever there is a message from the server.\n      err => this.error_traitement(ws_config, err),\n      // Called if at any point WebSocket API signals some kind of error.\n      () => console.log('complete') // Called when connection is closed (for whatever reason).\n      );\n\n      this.receive(ws_config);\n      window.websocket = ws_config.wsStream;\n      // this.change_page();\n    }\n    /*\n     * @description: Il serait important par la suite de créer plusieurs possibilité de shéma.\n     */\n    receive(ws_config) {\n      ws_config.service.ws_connection = ws_config;\n      try {\n        ws_config.wsStream.asObservable().subscribe(msg => {\n          for (let key of Object.keys(msg)) {\n            const recept_key = `recept__${key}`;\n            let recept__function = ws_config.service[recept_key];\n            if (recept__function === undefined) {\n              alert(`recept__${key} is not defined`);\n              return;\n            }\n            ws_config.service[recept_key](msg[key]);\n          }\n        });\n      } catch (e) {}\n    }\n    /*\n     * @description: Recoit les erreurs du flux\n     * x. Tenter à la fin de reconnecter le flux.\n     */\n    error_traitement(ws_config, err) {\n      console.error('error_traitement'.repeat(1));\n      setTimeout(() => {\n        this.connection(ws_config);\n      }, 1000);\n    }\n    /**\n     * @description:\n     */\n    getWebsocketUrl(ws_config) {\n      return `${this.get_protocol()}${this.l.get_host()}:${ws_config.port}/${ws_config.pathname}`;\n    }\n    /**\n     * @description:\n     */\n    get_protocol() {\n      if (window.location.protocol === 'https:') {\n        return 'ws://';\n      }\n      return 'ws://';\n    }\n    /**\n     * @description:\n     */\n    send(ws_connection, params) {\n      if (ws_connection === undefined) {\n        return;\n      }\n      ws_connection.wsStream.next(params);\n    }\n    /**\n     * @description: Add the websocket config to the list of websocket config.\n     * and run the connection.\n    */\n    setConfig(ws_config) {\n      this.websocket_config.push(ws_config);\n      ws_config.wsService = this;\n      this.connection(ws_config);\n    }\n  }\n  _class = WebsocketService;\n  _class.ɵfac = function WebsocketService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LibsService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return WebsocketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}