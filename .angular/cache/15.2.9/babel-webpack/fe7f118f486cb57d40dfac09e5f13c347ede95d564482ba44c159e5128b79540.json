{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { SnackbarService } from './snackbar.service';\n// import { UserService } from './user.service';\nconst localhost = ['127.0.0.1:4200', 'localhost:4200'];\n/**\n * @description: Django position.\n */\nconst domain = function () {\n  return window.location.protocol + '//' + window.location.host + '/v1';\n}();\n/**\n * @description: Strapi domain.\n */\nconst strapi_domain = function () {\n  return window.location.protocol + '//' + window.location.host + '/api';\n}();\nexport let HttpService = /*#__PURE__*/(() => {\n  var _class;\n  class HttpService {\n    /*\n    * @description:\n    */\n    constructor(http) {\n      this.http = http;\n      this.domain = domain;\n      this.strapi_domain = strapi_domain;\n      this.userService = undefined;\n      window.h = this;\n    }\n    /**\n     * @description: Generer a partir d'un dict, un query params correct\n     * @returns\n     */\n    generateQueryParams(params) {\n      let resp = '?';\n      for (let key of Object.keys(params)) {\n        let value = params[key];\n        resp += `${key}=${value}&`;\n      }\n      return resp;\n    }\n    /*\n    * @description:\n    */\n    addBaseUrl(domain, path) {\n      let resp_url = domain;\n      if (path[0] !== '/') {\n        resp_url += '/';\n      }\n      resp_url += path;\n      if (path[path.length - 1] !== '/') {\n        resp_url += '/';\n      }\n      return resp_url;\n    }\n    /*\n    * @description:\n    */\n    __map_url(url) {\n      return this.addBaseUrl(this.domain, url);\n    }\n    /*\n    * @description:\n    */\n    __defaultOptions() {\n      return {\n        'headers': new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Bearer ${this.userService.getJwtToken()}`\n        }),\n        'withCredentials': true\n      };\n    }\n    /*\n    * @description:\n    */\n    __jsonOptions() {\n      return {\n        'headers': new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Type': 'application/json'\n        }),\n        'withCredentials': true\n      };\n    }\n    /*\n    * @description:\n    */\n    __map_response(response, request__type = 'post') {\n      // if (response === null || response === undefined) { return; }\n      // this.snackbar.httpResponseTraitment(response);\n      if (response.success) {} else {}\n      return response;\n    }\n    /*\n    * @description:\n    */\n    __encodeObjectParams(key, encode_object) {\n      let resp = [];\n      for (let into_key of Object.keys(encode_object)) {\n        let value = encode_object[into_key];\n        let add_into_key = `${key}[${into_key}]`;\n        if (typeof value === `object`) {\n          resp.push.apply(resp, this.__encodeObjectParams(add_into_key, value));\n          continue;\n        } else if (typeof value === 'function') {\n          continue;\n        }\n        resp.push(`${add_into_key}=${value}`);\n      }\n      return resp;\n    }\n    /*\n    * @description:\n    */\n    __encodeParams(raw_params) {\n      let body = new URLSearchParams();\n      let encode_object = {};\n      for (let key in raw_params) {\n        if (typeof raw_params[key] === `object`) {\n          encode_object[key] = raw_params[key];\n          continue;\n        } else if (typeof raw_params[key] === 'function') {\n          continue;\n        }\n        body.set(key, raw_params[key]);\n      }\n      // -> Gerer l'encodage des liste, et des dict.\n      let resp = [];\n      for (let key of Object.keys(encode_object)) {\n        resp.push.apply(resp, this.__encodeObjectParams(key, encode_object[key]));\n      }\n      return `${body.toString()}&${resp.join('&')}`;\n    }\n    /*\n    * @description:\n    */\n    post(url, params, header = undefined) {\n      url = this.addBaseUrl(this.domain, url);\n      return this.http.post(url, this.__encodeParams(params), this.__defaultOptions()).pipe(map(response => {\n        return this.__map_response(response, 'post');\n      }));\n    }\n    /*\n    * @description:\n    */\n    get(url, header = undefined) {\n      return this.http.get(url, this.__defaultOptions()).pipe(map(response => {\n        return this.__map_response(response, 'get');\n      }));\n    }\n    /*\n    * @description:\n    */\n    rawGet(url) {\n      return this.http.get(url, this.__defaultOptions()).pipe(map(response => {\n        return response;\n      }));\n    }\n    /*\n    * @description:\n    */\n    put() {}\n    /*\n    * @description:\n    */\n    delete() {}\n    /*\n    * @description:\n    */\n    redirectTo(path) {\n      window.location.href = this.__map_url(path);\n    }\n  }\n  _class = HttpService;\n  _class.ɵfac = function HttpService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}