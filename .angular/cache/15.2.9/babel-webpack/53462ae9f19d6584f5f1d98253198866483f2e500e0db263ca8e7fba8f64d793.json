{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class DatetimeService {\n  constructor() {}\n  /**\n   * @description\n   */\n  convertIsoDate(iso_date) {\n    if (typeof iso_date === 'string') {\n      return new Date(iso_date);\n    }\n    return iso_date;\n  }\n  /**\n   * @description\n   */\n  convertDateForReader(date) {\n    try {\n      const dateObj = new Date(date);\n      const month = dateObj.getMonth() + 1;\n      const day = dateObj.getDate();\n      const year = dateObj.getFullYear();\n      let diff_timestamp = (dateObj.getTime() - new Date().getTime()) / 1000;\n      // -> this day is today \n      if (new Date().getDate() === dateObj.getDate()) {\n        return `Today`;\n      }\n      // -> this day is tomorrow\n      if (new Date().getDate() + 1 === dateObj.getDate()) {\n        return `Tomorrow`;\n      }\n      // -> this day is outdated \n      if (diff_timestamp < 0) {\n        return `Passed`;\n      }\n      return `${month}.${day}.${year}`;\n    } catch (e) {\n      return `Not specified`;\n    }\n  }\n  /**\n   * @description\n   */\n  is_today(date) {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n  /**\n   * @description\n   */\n  is_tomorrow(date) {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() === today.getDate() + 1 && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n  /**\n   * @descriptionLa date est dans le futur, dans plus de deux jours : JJ.MM.AA\n   */\n  is_future(date) {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date !== null;\n  }\n  /**\n   * @description\n   */\n  is_passed(date) {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() < today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n  /**\n   * @description:\n   * @param: $seconds -> number\n   * @return: $minute:$second -> 00:00 -> string\n   */\n  convertSecondsToMinutes(seconds) {\n    let minutes = String(Math.floor(seconds / 60));\n    let second = String(seconds % 60);\n    if (second.length === 1) {\n      second = `0${second}`;\n    }\n    if (minutes.length === 1) {\n      minutes = `0${minutes}`;\n    }\n    return `${minutes}:${second}`;\n  }\n}\n_class = DatetimeService;\n_class.ɵfac = function DatetimeService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DatetimeService","constructor","convertIsoDate","iso_date","Date","convertDateForReader","date","dateObj","month","getMonth","day","getDate","year","getFullYear","diff_timestamp","getTime","e","is_today","today","is_tomorrow","is_future","is_passed","convertSecondsToMinutes","seconds","minutes","String","Math","floor","second","length","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/base/ng-base/src/app/services/datetime.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatetimeService {\n\n  constructor() { }\n  /**\n   * @description\n   */\n  public convertIsoDate(iso_date: string | Date): Date {\n    if (typeof iso_date === 'string') {\n      return new Date(iso_date);\n    }\n    return iso_date;\n  }\n\n  /**\n   * @description\n   */\n  public convertDateForReader(date: string ): string {\n    try {\n      const dateObj = new Date(date);\n      const month = dateObj.getMonth() + 1;\n      const day = dateObj.getDate();\n      const year = dateObj.getFullYear();\n\n      let diff_timestamp = (dateObj.getTime() - new Date().getTime()) / 1000;\n  \n      // -> this day is today \n      if (new Date().getDate() === dateObj.getDate()) {\n        return `Today`;\n      }\n  \n      // -> this day is tomorrow\n      if (new Date().getDate() + 1 === dateObj.getDate()) {\n        return `Tomorrow`;\n      }\n      \n\n      // -> this day is outdated \n      if (diff_timestamp < 0) {\n        return `Passed`;\n      }\n  \n      return `${month}.${day}.${year}`;\n    } catch(e) {\n      return `Not specified`;\n    }\n  \n  }\n\n  /**\n   * @description\n   */\n  public is_today(date: string | Date): boolean {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n\n  /**\n   * @description\n   */\n  public is_tomorrow(date: string | Date): boolean {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() === today.getDate() + 1 && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n\n  /**\n   * @descriptionLa date est dans le futur, dans plus de deux jours : JJ.MM.AA\n   */\n  public is_future(date: string | Date): boolean {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date !== null;\n  }\n\n  /**\n   * @description\n   */\n  public is_passed(date: string | Date): boolean {\n    date = this.convertIsoDate(date);\n    const today = new Date();\n    return date.getDate() < today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  }\n\n  /**\n   * @description: \n   * @param: $seconds -> number\n   * @return: $minute:$second -> 00:00 -> string\n   */\n  public convertSecondsToMinutes(seconds: number): string {\n    let minutes = String(Math.floor(seconds / 60));\n    let second = String(seconds % 60);\n\n    if (second.length === 1) {\n      second = `0${second}`;\n    }\n\n    if (minutes.length === 1) {\n      minutes = `0${minutes}`;\n    }\n    \n    return `${minutes}:${second}`;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}