{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/modules/tools/services/http.service\";\nexport class GlobalsService {\n  /**\n   * @description:\n   */\n  constructor(httpService) {\n    this.httpService = httpService;\n    /**\n     * @description:\n     */\n    this.load_basic_data__is_loaded = false;\n    /**\n     * @description:\n     */\n    this.jobs = [];\n    /**\n     * @description:\n     */\n    this.job_categories = [];\n    /**\n     * @description:\n     */\n    this.company_types = [];\n    /**\n     * @description:\n     */\n    this.company_sizes = [];\n  }\n  /**\n   * @description:\n   */\n  load_basic_data() {\n    this.httpService.get(`/v1/profiles/load_basic_data/`).subscribe(data => {\n      this.jobs = data.jobs;\n      this.job_categories = data.job_categories;\n      this.company_types = data.company_types;\n      this.company_sizes = data.company_sizes;\n      this.load_basic_data__is_loaded = true;\n    });\n  }\n  /**\n   * @description: Retourne promise when data is not loaded\n   */\n  waitLoadBasicData() {\n    return new Promise((resolve, reject) => {\n      this.setTimeoutAfterWaitLoadBasicData(resolve, reject);\n    });\n  }\n  /**\n   * @description:\n   */\n  setTimeoutAfterWaitLoadBasicData(resolve, reject) {\n    setTimeout(() => {\n      if (this.load_basic_data__is_loaded) {\n        resolve('ok');\n      } else {\n        this.setTimeoutAfterWaitLoadBasicData(resolve, reject);\n      }\n    }, 100);\n  }\n}\n_class = GlobalsService;\n_class.ɵfac = function GlobalsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,cAAc;EA0BzB;;;EAGAC,YACUC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IA7BrB;;;IAGO,+BAA0B,GAAY,KAAK;IAElD;;;IAGO,SAAI,GAAQ,EAAE;IAErB;;;IAGO,mBAAc,GAAQ,EAAE;IAE/B;;;IAGO,kBAAa,GAAQ,EAAE;IAE9B;;;IAGO,kBAAa,GAAQ,EAAE;EAO1B;EAEJ;;;EAGOC,eAAe;IACpB,IAAI,CAACD,WAAW,CAACE,GAAG,CAAC,+BAA+B,CAAC,CAACC,SAAS,CAC5DC,IAAS,IAAI;MACZ,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACC,IAAI;MACrB,IAAI,CAACC,cAAc,GAAGF,IAAI,CAACE,cAAc;MACzC,IAAI,CAACC,aAAa,GAAGH,IAAI,CAACG,aAAa;MACvC,IAAI,CAACC,aAAa,GAAGJ,IAAI,CAACI,aAAa;MACvC,IAAI,CAACC,0BAA0B,GAAG,IAAI;IACxC,CAAC,CACF;EACH;EAEA;;;EAGOC,iBAAiB;IACtB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI,CAACC,gCAAgC,CAACF,OAAO,EAAEC,MAAM,CAAC;IACxD,CAAC,CAAC;EACJ;EAEA;;;EAGOC,gCAAgC,CAACF,OAAY,EAAEC,MAAW;IAC/DE,UAAU,CAAC,MAAK;MACd,IAAI,IAAI,CAACN,0BAA0B,EAAE;QACnCG,OAAO,CAAC,IAAI,CAAC;OACd,MAAM;QACL,IAAI,CAACE,gCAAgC,CAACF,OAAO,EAAEC,MAAM,CAAC;;IAE1D,CAAC,EAAE,GAAG,CAAC;EACT;;SApEWf,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAkB,SAAdlB,MAAc;EAAAmB,YAFb;AAAM","names":["GlobalsService","constructor","httpService","load_basic_data","get","subscribe","data","jobs","job_categories","company_types","company_sizes","load_basic_data__is_loaded","waitLoadBasicData","Promise","resolve","reject","setTimeoutAfterWaitLoadBasicData","setTimeout","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/app/services/globals.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpService } from 'src/modules/tools/services/http.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalsService {\n  /**\n   * @description:\n   */\n  public load_basic_data__is_loaded: boolean = false;\n\n  /**\n   * @description:\n   */\n  public jobs: any = [];\n\n  /**\n   * @description: \n   */\n  public job_categories: any = [];\n\n  /**\n   * @description:\n   */\n  public company_types: any = [];\n\n  /**\n   * @description:\n   */\n  public company_sizes: any = [];\n\n  /**\n   * @description:\n   */\n  constructor(\n    private httpService: HttpService,\n  ) { }\n\n  /**\n   * @description:\n   */\n  public load_basic_data() {\n    this.httpService.get(`/v1/profiles/load_basic_data/`).subscribe(\n      (data: any) => {\n        this.jobs = data.jobs;\n        this.job_categories = data.job_categories;\n        this.company_types = data.company_types;\n        this.company_sizes = data.company_sizes;\n        this.load_basic_data__is_loaded = true;\n      }\n    );\n  }\n\n  /**\n   * @description: Retourne promise when data is not loaded\n   */\n  public waitLoadBasicData(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.setTimeoutAfterWaitLoadBasicData(resolve, reject);\n    });\n  }\n\n  /**\n   * @description:\n   */\n  public setTimeoutAfterWaitLoadBasicData(resolve: any, reject: any) {\n    setTimeout(() => {\n      if (this.load_basic_data__is_loaded) {\n        resolve('ok');\n      } else {\n        this.setTimeoutAfterWaitLoadBasicData(resolve, reject); \n      } \n    }, 100);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}