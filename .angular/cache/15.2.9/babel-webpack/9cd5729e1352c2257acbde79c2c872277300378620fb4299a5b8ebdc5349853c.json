{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./http.service\";\nexport let LibsService = /*#__PURE__*/(() => {\n  var _class;\n  class LibsService {\n    /*\n     * @description:\n     */\n    constructor(\n    // private cookieService: CookieService,\n    router, h) {\n      this.router = router;\n      this.h = h;\n      this.timezone_list = [{\n        key: 'US/Hawaii',\n        value: '(UTC−10) Hawaii'\n      }, {\n        key: 'US/Alaska',\n        value: '(UTC−9) Alaska'\n      }, {\n        key: 'Canada/Pacific',\n        value: '(UTC−8) Pacific U.S & Canada'\n      }, {\n        key: 'US/Arizona',\n        value: '(UTC−7) Arizona'\n      }, {\n        key: 'Canada/Central',\n        value: '(UTC−6) Central America'\n      }, {\n        key: 'America/Mexico_City',\n        value: '(UTC−6) Mexico'\n      }, {\n        key: 'America/Bogota',\n        value: '(UTC−5) Bogota'\n      }, {\n        key: 'America/Havana',\n        value: '(UTC−5) Havana'\n      }, {\n        key: 'US/Eastern',\n        value: '(UTC−5) Eastern'\n      }, {\n        key: 'Canada/Atlantic',\n        value: '(UTC−4) Atlantic'\n      }, {\n        key: 'America/Sao_Paulo',\n        value: '(UTC−3) Brasilia'\n      }, {\n        key: 'America/Argentina/Buenos_Aires',\n        value: '(UTC−3) Buenos_Aires'\n      }, {\n        key: 'America/El_Salvador',\n        value: '(UTC−3) El Salvador'\n      }, {\n        key: 'Africa/Cairo',\n        value: '(UTC−2) Cairo'\n      }, {\n        key: 'Atlantic/Cape_Verde',\n        value: '(UTC−1) Cape_Verde'\n      }, {\n        key: 'Europe/Dublin',\n        value: '(UTC+0) Dublin, Lisbon, London'\n      }, {\n        key: 'Africa/Casablanca',\n        value: '(UTC+1) Casablanca'\n      }, {\n        key: 'Europe/Amsterdam',\n        value: '(UTC+1) Amsterdam, Berlin, Rome, Stockholm, Vienna'\n      }, {\n        key: 'Europe/Berlin',\n        value: '(UTC+1) Belgrade, Budapest, Ljubljana, Prague'\n      }, {\n        key: 'Europe/Madrid',\n        value: '(UTC+1) Brussels, Copenhagen, Madrid, Paris'\n      }, {\n        key: 'Europe/Sarajevo',\n        value: '(UTC+1) Sarajevo, Skopje, Warsaw, Zagreb'\n      }, {\n        key: 'Europe/Athens',\n        value: '(UTC+2) Athens, Bucharest'\n      }, {\n        key: 'Europe/Chisinau',\n        value: '(UTC+2) Chisinau'\n      }, {\n        key: 'Asia/Damascus',\n        value: '(UTC+2) Damascus'\n      }, {\n        key: 'Asia/Gaza',\n        value: '(UTC+2) Gaza'\n      }, {\n        key: 'Europe/Helsinki',\n        value: '(UTC+2) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'\n      }, {\n        key: 'Asia/Jerusalem',\n        value: '(UTC+2) Jerusalem'\n      }, {\n        key: 'Africa/Tripoli',\n        value: '(UTC+2) Tripoli'\n      }, {\n        key: 'Europe/Istanbul',\n        value: '(UTC+3) Istanbul'\n      }, {\n        key: 'Asia/Kuwait',\n        value: '(UTC+3) Kuwait'\n      }, {\n        key: 'Europe/Minsk',\n        value: '(UTC+3) Minsk'\n      }, {\n        key: 'Europe/Moscow',\n        value: '(UTC+3) Moscow'\n      }, {\n        key: 'Asia/Muscat',\n        value: '(UTC+4) Muscat'\n      }, {\n        key: 'Asia/Dubai',\n        value: '(UTC+4) Dubai'\n      }, {\n        key: 'Europe/Saratov',\n        value: '(UTC+4) Saratov'\n      }, {\n        key: 'Asia/Omsk',\n        value: '(UTC+6) Omsk'\n      }, {\n        key: 'Asia/Bangkok',\n        value: '(UTC+7) Bangkok'\n      }, {\n        key: 'Asia/Tomsk',\n        value: '(UTC+7) Tomsk'\n      }, {\n        key: 'Asia/Hong_Kong',\n        value: '(UTC+8) Hong_Kong'\n      }, {\n        key: 'Asia/Singapore',\n        value: '(UTC+8) Singapore'\n      }, {\n        key: 'Asia/Tokyo',\n        value: '(UTC+9) Tokyo'\n      }, {\n        key: 'Asia/Pyongyang',\n        value: '(UTC+9) Pyongyang'\n      }, {\n        key: 'Asia/Seoul',\n        value: '(UTC+9) Seoul'\n      }, {\n        key: 'Australia/Brisbane',\n        value: '(UTC+10) Brisbane'\n      }, {\n        key: 'Australia/Sydney',\n        value: '(UTC+10) Sydney'\n      }, {\n        key: 'Pacific/Bougainville',\n        value: '(UTC+11) Bougainville'\n      }, {\n        key: 'Pacific/Auckland',\n        value: '(UTC+12) Auckland'\n      }];\n      /*\n       * @description:\n       */\n      this.countryList = [{\n        code: `AF`,\n        name: `Afghanistan`\n      }, {\n        code: `AX`,\n        name: `Åland Islands`\n      }, {\n        code: `AL`,\n        name: `Albania`\n      }, {\n        code: `DZ`,\n        name: `Algeria`\n      }, {\n        code: `AS`,\n        name: `American Samoa`\n      }, {\n        code: `AD`,\n        name: `Andorra`\n      }, {\n        code: `AO`,\n        name: `Angola`\n      }, {\n        code: `AI`,\n        name: `Anguilla`\n      }, {\n        code: `AQ`,\n        name: `Antarctica`\n      }, {\n        code: `AG`,\n        name: `Antigua and Barbuda`\n      }, {\n        code: `AR`,\n        name: `Argentina`\n      }, {\n        code: `AM`,\n        name: `Armenia`\n      }, {\n        code: `AW`,\n        name: `Aruba`\n      }, {\n        code: `AU`,\n        name: `Australia`\n      }, {\n        code: `AT`,\n        name: `Austria`\n      }, {\n        code: `AZ`,\n        name: `Azerbaijan`\n      }, {\n        code: `BS`,\n        name: `Bahamas`\n      }, {\n        code: `BH`,\n        name: `Bahrain`\n      }, {\n        code: `BD`,\n        name: `Bangladesh`\n      }, {\n        code: `BB`,\n        name: `Barbados`\n      }, {\n        code: `BY`,\n        name: `Belarus`\n      }, {\n        code: `BE`,\n        name: `Belgium`\n      }, {\n        code: `BZ`,\n        name: `Belize`\n      }, {\n        code: `BJ`,\n        name: `Benin`\n      }, {\n        code: `BM`,\n        name: `Bermuda`\n      }, {\n        code: `BT`,\n        name: `Bhutan`\n      }, {\n        code: `BO`,\n        name: `Bolivia`\n      }, {\n        code: `BQ`,\n        name: `Bonaire, Sint Eustatius and Saba`\n      }, {\n        code: `BA`,\n        name: `Bosnia and Herzegovina`\n      }, {\n        code: `BW`,\n        name: `Botswana`\n      }, {\n        code: `BV`,\n        name: `Bouvet Island`\n      }, {\n        code: `BR`,\n        name: `Brazil`\n      }, {\n        code: `IO`,\n        name: `British Indian Ocean Territory`\n      }, {\n        code: `BN`,\n        name: `Brunei`\n      }, {\n        code: `BG`,\n        name: `Bulgaria`\n      }, {\n        code: `BF`,\n        name: `Burkina Faso`\n      }, {\n        code: `BI`,\n        name: `Burundi`\n      }, {\n        code: `CV`,\n        name: `Cabo Verde`\n      }, {\n        code: `KH`,\n        name: `Cambodia`\n      }, {\n        code: `CM`,\n        name: `Cameroon`\n      }, {\n        code: `CA`,\n        name: `Canada`\n      }, {\n        code: `KY`,\n        name: `Cayman Islands`\n      }, {\n        code: `CF`,\n        name: `Central African Republic`\n      }, {\n        code: `TD`,\n        name: `Chad`\n      }, {\n        code: `CL`,\n        name: `Chile`\n      }, {\n        code: `CN`,\n        name: `China`\n      }, {\n        code: `CX`,\n        name: `Christmas Island`\n      }, {\n        code: `CC`,\n        name: `Cocos (Keeling) Islands`\n      }, {\n        code: `CO`,\n        name: `Colombia`\n      }, {\n        code: `KM`,\n        name: `Comoros`\n      }, {\n        code: `CG`,\n        name: `Congo`\n      }, {\n        code: `CD`,\n        name: `Congo (the Democratic Republic of the)`\n      }, {\n        code: `CK`,\n        name: `Cook Islands`\n      }, {\n        code: `CR`,\n        name: `Costa Rica`\n      }, {\n        code: `CI`,\n        name: \"Côte d'Ivoire\"\n      }, {\n        code: `HR`,\n        name: `Croatia`\n      }, {\n        code: `CU`,\n        name: `Cuba`\n      }, {\n        code: `CW`,\n        name: `Curaçao`\n      }, {\n        code: `CY`,\n        name: `Cyprus`\n      }, {\n        code: `CZ`,\n        name: `Czechia`\n      }, {\n        code: `DK`,\n        name: `Denmark`\n      }, {\n        code: `DJ`,\n        name: `Djibouti`\n      }, {\n        code: `DM`,\n        name: `Dominica`\n      }, {\n        code: `DO`,\n        name: `Dominican Republic`\n      }, {\n        code: `EC`,\n        name: `Ecuador`\n      }, {\n        code: `EG`,\n        name: `Egypt`\n      }, {\n        code: `SV`,\n        name: `El Salvador`\n      }, {\n        code: `GQ`,\n        name: `Equatorial Guinea`\n      }, {\n        code: `ER`,\n        name: `Eritrea`\n      }, {\n        code: `EE`,\n        name: `Estonia`\n      }, {\n        code: `SZ`,\n        name: `Eswatini`\n      }, {\n        code: `ET`,\n        name: `Ethiopia`\n      }, {\n        code: `FK`,\n        name: `Falkland Islands  [Malvinas]`\n      }, {\n        code: `FO`,\n        name: `Faroe Islands`\n      }, {\n        code: `FJ`,\n        name: `Fiji`\n      }, {\n        code: `FI`,\n        name: `Finland`\n      }, {\n        code: `FR`,\n        name: `France`\n      }, {\n        code: `GF`,\n        name: `French Guiana`\n      }, {\n        code: `PF`,\n        name: `French Polynesia`\n      }, {\n        code: `TF`,\n        name: `French Southern Territories`\n      }, {\n        code: `GA`,\n        name: `Gabon`\n      }, {\n        code: `GM`,\n        name: `Gambia`\n      }, {\n        code: `GE`,\n        name: `Georgia`\n      }, {\n        code: `DE`,\n        name: `Germany`\n      }, {\n        code: `GH`,\n        name: `Ghana`\n      }, {\n        code: `GI`,\n        name: `Gibraltar`\n      }, {\n        code: `GR`,\n        name: `Greece`\n      }, {\n        code: `GL`,\n        name: `Greenland`\n      }, {\n        code: `GD`,\n        name: `Grenada`\n      }, {\n        code: `GP`,\n        name: `Guadeloupe`\n      }, {\n        code: `GU`,\n        name: `Guam`\n      }, {\n        code: `GT`,\n        name: `Guatemala`\n      }, {\n        code: `GG`,\n        name: `Guernsey`\n      }, {\n        code: `GN`,\n        name: `Guinea`\n      }, {\n        code: `GW`,\n        name: `Guinea-Bissau`\n      }, {\n        code: `GY`,\n        name: `Guyana`\n      }, {\n        code: `HT`,\n        name: `Haiti`\n      }, {\n        code: `HM`,\n        name: `Heard Island and McDonald Islands`\n      }, {\n        code: `VA`,\n        name: `Holy See`\n      }, {\n        code: `HN`,\n        name: `Honduras`\n      }, {\n        code: `HK`,\n        name: `Hong Kong`\n      }, {\n        code: `HU`,\n        name: `Hungary`\n      }, {\n        code: `IS`,\n        name: `Iceland`\n      }, {\n        code: `IN`,\n        name: `India`\n      }, {\n        code: `ID`,\n        name: `Indonesia`\n      }, {\n        code: `IR`,\n        name: `Iran`\n      }, {\n        code: `IQ`,\n        name: `Iraq`\n      }, {\n        code: `IE`,\n        name: `Ireland`\n      }, {\n        code: `IM`,\n        name: `Isle of Man`\n      }, {\n        code: `IL`,\n        name: `Israel`\n      }, {\n        code: `IT`,\n        name: `Italy`\n      }, {\n        code: `JM`,\n        name: `Jamaica`\n      }, {\n        code: `JP`,\n        name: `Japan`\n      }, {\n        code: `JE`,\n        name: `Jersey`\n      }, {\n        code: `JO`,\n        name: `Jordan`\n      }, {\n        code: `KZ`,\n        name: `Kazakhstan`\n      }, {\n        code: `KE`,\n        name: `Kenya`\n      }, {\n        code: `KI`,\n        name: `Kiribati`\n      }, {\n        code: `KW`,\n        name: `Kuwait`\n      }, {\n        code: `KG`,\n        name: `Kyrgyzstan`\n      }, {\n        code: `LA`,\n        name: `Laos`\n      }, {\n        code: `LV`,\n        name: `Latvia`\n      }, {\n        code: `LB`,\n        name: `Lebanon`\n      }, {\n        code: `LS`,\n        name: `Lesotho`\n      }, {\n        code: `LR`,\n        name: `Liberia`\n      }, {\n        code: `LY`,\n        name: `Libya`\n      }, {\n        code: `LI`,\n        name: `Liechtenstein`\n      }, {\n        code: `LT`,\n        name: `Lithuania`\n      }, {\n        code: `LU`,\n        name: `Luxembourg`\n      }, {\n        code: `MO`,\n        name: `Macao`\n      }, {\n        code: `MG`,\n        name: `Madagascar`\n      }, {\n        code: `MW`,\n        name: `Malawi`\n      }, {\n        code: `MY`,\n        name: `Malaysia`\n      }, {\n        code: `MV`,\n        name: `Maldives`\n      }, {\n        code: `ML`,\n        name: `Mali`\n      }, {\n        code: `MT`,\n        name: `Malta`\n      }, {\n        code: `MH`,\n        name: `Marshall Islands`\n      }, {\n        code: `MQ`,\n        name: `Martinique`\n      }, {\n        code: `MR`,\n        name: `Mauritania`\n      }, {\n        code: `MU`,\n        name: `Mauritius`\n      }, {\n        code: `YT`,\n        name: `Mayotte`\n      }, {\n        code: `MX`,\n        name: `Mexico`\n      }, {\n        code: `FM`,\n        name: `Micronesia (Federated States of)`\n      }, {\n        code: `MD`,\n        name: `Moldova`\n      }, {\n        code: `MC`,\n        name: `Monaco`\n      }, {\n        code: `MN`,\n        name: `Mongolia`\n      }, {\n        code: `ME`,\n        name: `Montenegro`\n      }, {\n        code: `MS`,\n        name: `Montserrat`\n      }, {\n        code: `MA`,\n        name: `Morocco`\n      }, {\n        code: `MZ`,\n        name: `Mozambique`\n      }, {\n        code: `MM`,\n        name: `Myanmar`\n      }, {\n        code: `NA`,\n        name: `Namibia`\n      }, {\n        code: `NR`,\n        name: `Nauru`\n      }, {\n        code: `NP`,\n        name: `Nepal`\n      }, {\n        code: `NL`,\n        name: `Netherlands`\n      }, {\n        code: `NC`,\n        name: `New Caledonia`\n      }, {\n        code: `NZ`,\n        name: `New Zealand`\n      }, {\n        code: `NI`,\n        name: `Nicaragua`\n      }, {\n        code: `NE`,\n        name: `Niger`\n      }, {\n        code: `NG`,\n        name: `Nigeria`\n      }, {\n        code: `NU`,\n        name: `Niue`\n      }, {\n        code: `NF`,\n        name: `Norfolk Island`\n      }, {\n        code: `KP`,\n        name: `North Korea`\n      }, {\n        code: `MK`,\n        name: `North Macedonia`\n      }, {\n        code: `MP`,\n        name: `Northern Mariana Islands`\n      }, {\n        code: `NO`,\n        name: `Norway`\n      }, {\n        code: `OM`,\n        name: `Oman`\n      }, {\n        code: `PK`,\n        name: `Pakistan`\n      }, {\n        code: `PW`,\n        name: `Palau`\n      }, {\n        code: `PS`,\n        name: `Palestine, State of`\n      }, {\n        code: `PA`,\n        name: `Panama`\n      }, {\n        code: `PG`,\n        name: `Papua New Guinea`\n      }, {\n        code: `PY`,\n        name: `Paraguay`\n      }, {\n        code: `PE`,\n        name: `Peru`\n      }, {\n        code: `PH`,\n        name: `Philippines`\n      }, {\n        code: `PN`,\n        name: `Pitcairn`\n      }, {\n        code: `PL`,\n        name: `Poland`\n      }, {\n        code: `PT`,\n        name: `Portugal`\n      }, {\n        code: `PR`,\n        name: `Puerto Rico`\n      }, {\n        code: `QA`,\n        name: `Qatar`\n      }, {\n        code: `RE`,\n        name: `Réunion`\n      }, {\n        code: `RO`,\n        name: `Romania`\n      }, {\n        code: `RU`,\n        name: `Russia`\n      }, {\n        code: `RW`,\n        name: `Rwanda`\n      }, {\n        code: `BL`,\n        name: `Saint Barthélemy`\n      }, {\n        code: `SH`,\n        name: `Saint Helena, Ascension and Tristan da Cunha`\n      }, {\n        code: `KN`,\n        name: `Saint Kitts and Nevis`\n      }, {\n        code: `LC`,\n        name: `Saint Lucia`\n      }, {\n        code: `MF`,\n        name: `Saint Martin (French part)`\n      }, {\n        code: `PM`,\n        name: `Saint Pierre and Miquelon`\n      }, {\n        code: `VC`,\n        name: `Saint Vincent and the Grenadines`\n      }, {\n        code: `WS`,\n        name: `Samoa`\n      }, {\n        code: `SM`,\n        name: `San Marino`\n      }, {\n        code: `ST`,\n        name: `Sao Tome and Principe`\n      }, {\n        code: `SA`,\n        name: `Saudi Arabia`\n      }, {\n        code: `SN`,\n        name: `Senegal`\n      }, {\n        code: `RS`,\n        name: `Serbia`\n      }, {\n        code: `SC`,\n        name: `Seychelles`\n      }, {\n        code: `SL`,\n        name: `Sierra Leone`\n      }, {\n        code: `SG`,\n        name: `Singapore`\n      }, {\n        code: `SX`,\n        name: `Sint Maarten (Dutch part)`\n      }, {\n        code: `SK`,\n        name: `Slovakia`\n      }, {\n        code: `SI`,\n        name: `Slovenia`\n      }, {\n        code: `SB`,\n        name: `Solomon Islands`\n      }, {\n        code: `SO`,\n        name: `Somalia`\n      }, {\n        code: `ZA`,\n        name: `South Africa`\n      }, {\n        code: `GS`,\n        name: `South Georgia and the South Sandwich Islands`\n      }, {\n        code: `KR`,\n        name: `South Korea`\n      }, {\n        code: `SS`,\n        name: `South Sudan`\n      }, {\n        code: `ES`,\n        name: `Spain`\n      }, {\n        code: `LK`,\n        name: `Sri Lanka`\n      }, {\n        code: `SD`,\n        name: `Sudan`\n      }, {\n        code: `SR`,\n        name: `Suriname`\n      }, {\n        code: `SJ`,\n        name: `Svalbard and Jan Mayen`\n      }, {\n        code: `SE`,\n        name: `Sweden`\n      }, {\n        code: `CH`,\n        name: `Switzerland`\n      }, {\n        code: `SY`,\n        name: `Syria`\n      }, {\n        code: `TW`,\n        name: `Taiwan`\n      }, {\n        code: `TJ`,\n        name: `Tajikistan`\n      }, {\n        code: `TZ`,\n        name: `Tanzania`\n      }, {\n        code: `TH`,\n        name: `Thailand`\n      }, {\n        code: `TL`,\n        name: `Timor-Leste`\n      }, {\n        code: `TG`,\n        name: `Togo`\n      }, {\n        code: `TK`,\n        name: `Tokelau`\n      }, {\n        code: `TO`,\n        name: `Tonga`\n      }, {\n        code: `TT`,\n        name: `Trinidad and Tobago`\n      }, {\n        code: `TN`,\n        name: `Tunisia`\n      }, {\n        code: `TR`,\n        name: `Turkey`\n      }, {\n        code: `TM`,\n        name: `Turkmenistan`\n      }, {\n        code: `TC`,\n        name: `Turks and Caicos Islands`\n      }, {\n        code: `TV`,\n        name: `Tuvalu`\n      }, {\n        code: `UG`,\n        name: `Uganda`\n      }, {\n        code: `UA`,\n        name: `Ukraine`\n      }, {\n        code: `AE`,\n        name: `United Arab Emirates`\n      }, {\n        code: `GB`,\n        name: `United Kingdom`\n      }, {\n        code: `UM`,\n        name: `United States Minor Outlying Islands`\n      }, {\n        code: `US`,\n        name: `United States of America`\n      }, {\n        code: `UY`,\n        name: `Uruguay`\n      }, {\n        code: `UZ`,\n        name: `Uzbekistan`\n      }, {\n        code: `VU`,\n        name: `Vanuatu`\n      }, {\n        code: `VE`,\n        name: `Venezuela`\n      }, {\n        code: `VN`,\n        name: `Vietnam`\n      }, {\n        code: `VG`,\n        name: `Virgin Islands (British)`\n      }, {\n        code: `VI`,\n        name: `Virgin Islands (U.S.)`\n      }, {\n        code: `WF`,\n        name: `Wallis and Futuna`\n      }, {\n        code: `EH`,\n        name: `Western Sahara`\n      }, {\n        code: `YE`,\n        name: `Yemen`\n      }, {\n        code: `ZM`,\n        name: `Zambia`\n      }, {\n        code: `ZW`,\n        name: `Zimbabw`\n      }];\n      /*\n       * @description:\n       */\n      this.hold_scrolltop = undefined;\n    }\n    /*\n     * @description: Veuillez à prendre en charge la complexité de cette applications au travers d'un usages\n     * Particulier.\n     */\n    connect_before_use() {\n      let password = 'htopwget';\n      // if (this.cookieService.get('password').length === 0) {\n      //   while (true) {\n      //     let entered_password = prompt(\"Entrer mot de passe\");\n      //     if (entered_password==password) {\n      //       this.cookieService.set('password', entered_password);\n      //       return true;\n      //     }\n      //   }\n      // }\n      return true;\n    }\n    /*\n     * @description: Renvoit true sur le media sur lequel je me trouve est bien un téléphones mobiles.\n     */\n    is_mobile() {\n      return window.innerWidth < 812;\n    }\n    /*\n     * @description:\n     */\n    is_desktop() {\n      return !this.is_mobile();\n    }\n    /*\n     * @description: Il s'agit ici d'un helper qui permet de réduire le temps de récupérations des images et de leur intégrations.\n     */\n    responsive_picture(fields, for_mobile = `for_mobile`, for_pc = `for_pc`, for_background_image = true) {\n      let path = '';\n      if (this.is_mobile()) {\n        path = fields[for_mobile];\n      } else {\n        path = fields[for_pc];\n      }\n      if (for_background_image) {\n        return `url(\"${path}\")`;\n      }\n      return path;\n    }\n    /*\n     * @description:\n     */\n    generateUuid() {\n      var dt = new Date().getTime();\n      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n      });\n      return uuid;\n    }\n    /*\n     * @description:\n     */\n    add_00_in_end(number) {\n      number = Math.round(number * 100) / 100;\n      let stringNumber = number.toString();\n      const length0 = stringNumber.split('.');\n      if (length0.length === 1) {\n        stringNumber = stringNumber + '.00';\n      } else if (length0[1].length === 1) {\n        stringNumber = stringNumber + '0';\n      }\n      return stringNumber.replace('.', ',');\n    }\n    /*\n     * @description: Transformer cette éléments\n     */\n    convert_video_data(ico) {\n      return {\n        extension: ico.split('.').splice(-1)[0],\n        video: ico\n      };\n    }\n    /*\n     * @description:\n     */\n    convert_phone_number_to_string(phone_number) {\n      if (typeof phone_number === `object`) {\n        if (phone_number['country_code'] === null && phone_number['number'] === null) {\n          return '';\n        }\n        return `+${phone_number['country_code']} ${phone_number['number']}`;\n      }\n      return '';\n    }\n    /*\n     * @description:\n     */\n    timelaps_with_now(time) {}\n    /*\n     * @description:\n     */\n    timelaps_show(time) {}\n    /*\n     * Afficher distinctements l'espace disque occupée par\n     * @params:\n     * size (int) -> Permet d'indiquer la taille de l'éléments.\n     * base_format(string) -> Indique le format de la size par défaut\n     * oc -> Octet\n     * ko -> kilooctet.\n     * mo -> Megaoctet\n     */\n    display_readable_size(size, base_format = 'oc') {\n      // DOC: Part des octet et convertir l'éléments sur cette base.\n      if (base_format == 'oc') {\n        if (size < 1024 * 1024) {\n          return `${Math.round(size / 1024 * 100) / 100}Ko`;\n        } else {\n          return `${Math.round(size / (1024 * 1024) * 100) / 100}Mo`;\n        }\n      }\n      // -> ko\n      // -> mo\n    }\n    /*\n     * In Always display pages scroll to  top;\n     */\n    scrollToTop() {\n      document.body.scrollTop = 0;\n    }\n    /*\n     * @description:\n     */\n    scrollMovingSweet(scrollTop, contain) {\n      let diff = scrollTop - contain.nativeElement.scrollTop;\n      if (diff > 0) {\n        this.scrollToScrollTop(+50, scrollTop, contain);\n      } else {\n        this.scrollToScrollTop(-50, scrollTop, contain);\n      }\n    }\n    scrollToScrollTop(scroll, scrollTop, contain) {\n      setTimeout(() => {\n        contain.nativeElement.scrollTop += scroll;\n        // -> Quitter la boucle si l'ont ne peut pas atteindre la zone de la page indiquer\n        if (this.hold_scrolltop !== undefined && this.hold_scrolltop === contain.nativeElement.scrollTop) {\n          return;\n        }\n        this.hold_scrolltop = contain.nativeElement.scrollTop;\n        this.scrollToScrollTop(scroll, scrollTop, contain);\n      }, 20);\n    }\n    /*\n     * @description: Autorize scroll\n     */\n    autorizeScroll() {\n      document.getElementsByTagName('body')[0].style.overflowY = `auto`;\n    }\n    /*\n     * @description: Bloque scroll;\n     */\n    blockScroll() {\n      document.getElementsByTagName('body')[0].style.overflowY = `hidden`;\n    }\n    /*\n     * @description:\n     */\n    stringIsEmpty(string) {\n      if (string === undefined || string === null) {\n        return true;\n      }\n      string = string.replaceAll(/\\s/g, '');\n      if (string.length === 0) {\n        return true;\n      }\n      return false;\n    }\n    /*\n     * @description:\n     */\n    navigateLink(link) {\n      if (typeof link === 'string') {\n        alert('link width url');\n      } else if (typeof link === 'object') {\n        alert('object');\n      }\n    }\n    /*\n     * @description:\n     */\n    navigateByAnchorLink(anchorId) {\n      const anchor = document.querySelector(`${anchorId}`);\n      if (anchor === null) {\n        return;\n      }\n      const app_container = document.getElementById('app_container');\n      if (app_container === null) {\n        return;\n      }\n      app_container.scroll(0, anchor.offsetTop);\n    }\n    /*\n     * @description:\n     */\n    calculateRatio(coords) {\n      /* euclidean GCD (feel free to use any other) */\n      function gcd(a, b) {\n        if (b > a) {\n          let temp = a;\n          a = b;\n          b = temp;\n        }\n        while (b !== 0) {\n          let m = a % b;\n          a = b;\n          b = m;\n        }\n        return a;\n      }\n      /* ratio is to get the gcd and divide each component by the gcd, then return a string with the typical colon-separated value */\n      function ratio(x, y) {\n        let c = gcd(x, y);\n        return '' + x / c + ':' + y / c;\n      }\n      return ratio(coords.x, coords.y);\n    }\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    // {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{RANDOM}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}\n    /*\n     * @description:\n     */\n    randomList(sizeResponse = 12, listChoices = '0123456789abcdefghijklmnopqrstuvwxyz') {\n      let response = '';\n      for (let i = 0; i < sizeResponse; i++) {\n        const index = Math.floor(Math.random() * listChoices.length - 1 + 1);\n        response += listChoices[index];\n      }\n      return response;\n    }\n    /*\n     * Générer un random de chiffre hexadecimal.\n     * Peut servir par exemple à générer des couleurs hexadecimal aléatoire.\n     */\n    randomHexa(sizeResponse = 6) {\n      const listChoices = '0987654321ABCDEF';\n      return this.randomList(sizeResponse, listChoices);\n    }\n    /*\n     *\n     */\n    navigateByUrl(pathname) {\n      this.router.navigateByUrl(pathname);\n    }\n    /*\n     * @description: Changer l'extension de l'url ou du fichier obtenue\n     */\n    changeExtensionFileOrUrl(fileOrUrl, newExtension) {\n      let splittedUrl = fileOrUrl.split('.');\n      splittedUrl[splittedUrl.length - 1] = newExtension;\n      return splittedUrl.join('.');\n    }\n    /*\n     * @description: Je renvoit ici le nom de mon browser\n     */\n    getBrowserName() {\n      let name = `Unknown`;\n      if (navigator.userAgent.indexOf(`MSIE`) !== -1) {\n        name = `MSIE`;\n      } else if (navigator.userAgent.indexOf(`Firefox`) !== -1) {\n        name = `Firefox`;\n      } else if (navigator.userAgent.indexOf(`Opera`) !== -1) {\n        name = `Opera`;\n      } else if (navigator.userAgent.indexOf(`Chrome`) !== -1) {\n        name = `Chrome`;\n      } else if (navigator.userAgent.indexOf(`Safari`) !== -1) {\n        name = `Safari`;\n      }\n      return name;\n    }\n    /*\n     * @description:\n     */\n    isSafari() {\n      return this.getBrowserName() === `Safari`;\n    }\n    /*\n     * Convertir la date reçut en date envoyers.\n     * @description: Adapter cette éléments pour chaque navigateur.\n     */\n    convertIso861__to_date(iso8601) {\n      if (this.getBrowserName() === `Safari`) {\n        return new Date(iso8601.replace(/-/g, `/`));\n      }\n      return new Date(iso8601);\n    }\n    /*\n     * Faire le travail inverse;\n     */\n    convertDate__toIso8601(date) {\n      return date.toISOString();\n    }\n    /*\n     * @description: Modifier\n     */\n    templateFunction(messageText, ctx) {\n      for (let key of Object.keys(ctx)) {\n        messageText = messageText.replace(`{{${key}}}`, ctx[key]);\n      }\n      return messageText;\n    }\n    /*\n     * @description:\n     */\n    isIosDevice() {\n      return [`iPad Simulator`, `iPhone Simulator`, `iPod Simulator`, `iPad`, `iPhone`, `iPod`].includes(navigator.platform) ||\n      // iPad on iOS 13 detection\n      navigator.userAgent.includes(`Mac`) && `ontouchend` in document;\n    }\n    /*\n     * @description: Il s'agit de savoir s'il s'agit de chrome dans iphones.\n     */\n    isChromeInIos() {\n      if (this.isIosDevice()) {\n        return !this.isSafari();\n      }\n      return false;\n    }\n    /*\n     * @description: est un chiffre pair.\n     */\n    isPair(n) {\n      return n & 1 ? false : true;\n    }\n    /*\n     * @description: Il s'agit ici d'un petit languages de template destiner à la générations des éléments restant\n     */\n    localizeFormat(message, params) {}\n    /*\n     * @description: Permet d'indiquer fonctionnellement que la donnée reçut est incorrect.\n     */\n    isUrl(textMatch) {\n      let pattern = new RegExp('^(https?:\\\\/\\\\/)?' +\n      // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' +\n      // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' +\n      // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' +\n      // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' +\n      // query string\n      '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n      return !!pattern.test(textMatch);\n    }\n    /*\n     * @description:\n     */\n    addStyle(styleString) {\n      const style = document.createElement('style');\n      style.textContent = styleString;\n      document.head.append(style);\n    }\n    /*\n     * @description: Calculer la distance qui existe entre l'element au sein de la page est le reste.\n     */\n    screenBottom(nativeElement) {\n      const coords = nativeElement.getBoundingClientRect();\n      const screenBottom = coords.y - window.innerHeight;\n      return screenBottom;\n    }\n    /*\n     * @description: Me renvoyer la bonne valeur en width et en height.\n     */\n    aspect_ratio(nativeElement, ratio) {\n      const spitRatio = ratio.split(`/`);\n      window.aspect_ratio = nativeElement;\n      // nativeElement.offsetHeight = nativeElement.offsetWidth;\n      nativeElement.style.height = `${nativeElement.offsetWidth}px`;\n    }\n    /*\n     * @description:\n     */\n    alert(text) {\n      alert(text);\n    }\n    /*\n     * @description:\n     */\n    console_log(text) {\n      console.error(text);\n    }\n    /*\n     * @\n     */\n    ready(fn) {\n      document.addEventListener('DOMContentLoaded', fn);\n    }\n    /*\n     * @description: Attendre que la class ait ete creer pour ensuite realiser toute les action inimaginable.\n     */\n    wait_class_create(cll, callback) {\n      setTimeout(() => {\n        const anchor = document.getElementById(cll);\n        if (anchor === null) {\n          return this.wait_class_create(cll, callback);\n        }\n        callback();\n      }, 10);\n    }\n    /*\n     * @description: Verifier si les deux element sont parfaitement egal.\n     */\n    checkObjEqual(obj1, obj2) {\n      for (let key in obj1) {\n        if (!(key in obj2)) {\n          return false;\n        }\n        if (obj1[key] !== obj2[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     * @description: Permet de savoir si l'element est dans le viewport.\n     */\n    isEmail(email) {\n      return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n    }\n    /**\n     * @description: Overflow scroll is activated on the element.\n     */\n    isOverflowScroll(element) {\n      // let \n      return element.scrollWidth > element.clientWidth || element.scrollHeight > element.clientHeight;\n    }\n    /**\n     * @description:\n     */\n    convertNumberToLetterVersion(number) {\n      let number_list = [`zero`, `one`, `two`, `three`, `four`, `five`, `six`, `seven`, `eight`, `nine`, `ten`];\n      return number_list[number];\n    }\n    /**\n     * @description:\n     */\n    toTowerCase(text) {\n      return text.replace(/([A-Z])/g, ' $1').trim();\n    }\n    /**\n     * @description:\n     */\n    get_host() {\n      let host = window.location.host;\n      return host.split(':')[0];\n    }\n    /**\n     * @description:\n     */\n    isDev() {\n      return this.get_host() === `localhost` || this.get_host() === `127.0.0.1`;\n    }\n  }\n  _class = LibsService;\n  _class.ɵfac = function LibsService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return LibsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}