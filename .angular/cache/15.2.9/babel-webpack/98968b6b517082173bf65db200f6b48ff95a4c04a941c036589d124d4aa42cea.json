{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { SnackbarService } from './snackbar.service';\n// import { UserService } from './user.service';\nconst localhost = ['127.0.0.1:4200', 'localhost:4200'];\n/**\n * @description: Django position.\n */\nconst domain = function () {\n  return window.location.protocol + '//' + window.location.host + '/v1';\n}();\n/**\n * @description: Strapi domain.\n */\nconst strapi_domain = function () {\n  return window.location.protocol + '//' + window.location.host + '/api';\n}();\nexport class HttpService {\n  /*\n  * @description:\n  */\n  constructor(http) {\n    this.http = http;\n    this.domain = domain;\n    this.strapi_domain = strapi_domain;\n    this.userService = undefined;\n    window.h = this;\n  }\n  /**\n   * @description: Generer a partir d'un dict, un query params correct\n   * @returns\n   */\n  generateQueryParams(params) {\n    let resp = '?';\n    for (let key of Object.keys(params)) {\n      let value = params[key];\n      resp += `${key}=${value}&`;\n    }\n    return resp;\n  }\n  /*\n  * @description:\n  */\n  addBaseUrl(domain, path) {\n    let resp_url = domain;\n    if (path[0] !== '/') {\n      resp_url += '/';\n    }\n    resp_url += path;\n    if (path[path.length - 1] !== '/') {\n      resp_url += '/';\n    }\n    return resp_url;\n  }\n  /*\n  * @description:\n  */\n  __map_url(url) {\n    return this.addBaseUrl(this.domain, url);\n  }\n  /*\n  * @description:\n  */\n  __defaultOptions() {\n    return {\n      'headers': new HttpHeaders({\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': `Bearer ${this.userService.getJwtToken()}`\n      }),\n      'withCredentials': true\n    };\n  }\n  /*\n  * @description:\n  */\n  __jsonOptions() {\n    return {\n      'headers': new HttpHeaders({\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json'\n      }),\n      'withCredentials': true\n    };\n  }\n  /*\n  * @description:\n  */\n  __map_response(response, request__type = 'post') {\n    // if (response === null || response === undefined) { return; }\n    // this.snackbar.httpResponseTraitment(response);\n    if (response.success) {} else {}\n    return response;\n  }\n  /*\n  * @description:\n  */\n  __encodeObjectParams(key, encode_object) {\n    let resp = [];\n    for (let into_key of Object.keys(encode_object)) {\n      let value = encode_object[into_key];\n      let add_into_key = `${key}[${into_key}]`;\n      if (typeof value === `object`) {\n        resp.push.apply(resp, this.__encodeObjectParams(add_into_key, value));\n        continue;\n      } else if (typeof value === 'function') {\n        continue;\n      }\n      resp.push(`${add_into_key}=${value}`);\n    }\n    return resp;\n  }\n  /*\n  * @description:\n  */\n  __encodeParams(raw_params) {\n    let body = new URLSearchParams();\n    let encode_object = {};\n    for (let key in raw_params) {\n      if (typeof raw_params[key] === `object`) {\n        encode_object[key] = raw_params[key];\n        continue;\n      } else if (typeof raw_params[key] === 'function') {\n        continue;\n      }\n      body.set(key, raw_params[key]);\n    }\n    // -> Gerer l'encodage des liste, et des dict.\n    let resp = [];\n    for (let key of Object.keys(encode_object)) {\n      resp.push.apply(resp, this.__encodeObjectParams(key, encode_object[key]));\n    }\n    return `${body.toString()}&${resp.join('&')}`;\n  }\n  /*\n  * @description:\n  */\n  post(url, params, header = undefined) {\n    url = this.addBaseUrl(this.domain, url);\n    return this.http.post(url, this.__encodeParams(params), this.__defaultOptions()).pipe(map(response => {\n      // return this.__map_response(response, 'post');\n    }));\n  }\n  /**\n   * @description:\n   * @param url\n   * @param header\n   * @returns\n   */\n  strapiPost(url, params, header = undefined) {\n    url = this.addBaseUrl(this.strapi_domain, url);\n    return this.http.post(url, params, this.__jsonOptions()).pipe(map(response => {\n      // return this.__map_response(response, 'post');\n    }));\n  }\n  /*\n  * @description:\n  */\n  get(url, header = undefined) {\n    return this.http.get(url, this.__defaultOptions()).pipe(map(response => {\n      return this.__map_response(response, 'get');\n    }));\n  }\n  /*\n  * @description:\n  */\n  rawGet(url) {\n    return this.http.get(url, this.__defaultOptions()).pipe(map(response => {\n      return response;\n    }));\n  }\n  /*\n  * @description:\n  */\n  put() {}\n  /*\n  * @description:\n  */\n  delete() {}\n  /*\n  * @description:\n  */\n  redirectTo(path) {\n    window.location.href = this.__map_url(path);\n  }\n}\n_class = HttpService;\n_class.ɵfac = function HttpService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","map","localhost","domain","window","location","protocol","host","strapi_domain","HttpService","constructor","http","undefined","h","generateQueryParams","params","resp","key","Object","keys","value","addBaseUrl","path","resp_url","length","__map_url","url","__defaultOptions","userService","getJwtToken","__jsonOptions","__map_response","response","request__type","success","__encodeObjectParams","encode_object","into_key","add_into_key","push","apply","__encodeParams","raw_params","body","URLSearchParams","set","toString","join","post","header","pipe","strapiPost","get","rawGet","put","delete","redirectTo","href","factory"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/tools/services/http.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\n\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\n\n// import { SnackbarService } from './snackbar.service';\n// import { UserService } from './user.service';\n\nconst localhost = ['127.0.0.1:4200', 'localhost:4200'];\n\n/**\n * @description: Django position.\n */\nconst domain = function() {\n  return window.location.protocol + '//' + window.location.host + '/v1' ;\n}();\n\n/**\n * @description: Strapi domain.\n */\nconst strapi_domain = function() {\n  return window.location.protocol + '//' + window.location.host + '/api' ;\n}();\n\n \n\n@Injectable()\nexport class HttpService {\n  public domain = domain;\n  public strapi_domain = strapi_domain;\n  public userService: any = undefined;\n\n  /*\n  * @description:\n  */\n  constructor(\n    private http: HttpClient,\n    // private snackbar: SnackbarService,\n  ) {\n    (window as any).h = this;\n  }\n\n  /**\n   * @description: Generer a partir d'un dict, un query params correct\n   * @returns \n   */\n  private generateQueryParams(params: any): string {\n    let resp = '?';\n    for (let key of Object.keys(params)) {\n      let value = params[key];\n      resp += `${key}=${value}&`;\n    }\n    return resp;\n  }\n\n  /*\n  * @description:\n  */\n  public addBaseUrl(domain: string, path: string): string {\n    let resp_url = domain;\n\n    if (path[0] !== '/') {\n        resp_url += '/';\n    }\n    resp_url += path;\n\n    if (path[path.length - 1] !== '/') {\n        resp_url += '/';\n    }\n\n    return resp_url;\n  }\n\n  /*\n  * @description:\n  */\n  private __map_url(url: any): any {\n    return this.addBaseUrl(this.domain, url);\n  }\n\n  /*\n  * @description:\n  */\n  private __defaultOptions() {\n    return {\n        'headers': new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Bearer ${this.userService.getJwtToken()}`,\n         }),\n        'withCredentials': true,\n    };\n  }\n\n  /*\n  * @description:\n  */\n  private __jsonOptions() {\n    return {\n        'headers': new HttpHeaders({\n          'X-Requested-With': 'XMLHttpRequest',\n          'Content-Type': 'application/json',\n         }),\n        'withCredentials': true,\n    };\n  }\n\n  /*\n  * @description:\n  */\n  private __map_response(response: any, request__type='post'): any {\n    // if (response === null || response === undefined) { return; }\n    // this.snackbar.httpResponseTraitment(response);\n    if (response.success) {\n\n    } else {\n\n    }\n    return response;\n  }\n\n\n  /*\n  * @description:\n  */\n  private __encodeObjectParams(key: string, encode_object: any): Array<string> {\n    let resp: Array<string>  = [];\n\n    for (let into_key of Object.keys(encode_object)) {\n      let value = encode_object[into_key];\n      let add_into_key = `${key}[${into_key}]`;\n\n      if (typeof(value) === `object`) {\n        resp.push.apply(resp, this.__encodeObjectParams(add_into_key, value));\n        continue;\n      } else if(typeof(value) === 'function') {\n        continue;\n      }\n\n      resp.push(`${add_into_key}=${value}`);\n    }\n    return resp;\n  }\n\n  /*\n  * @description:\n  */\n  private __encodeParams(raw_params: any) {\n      let body: URLSearchParams = new URLSearchParams();\n      let encode_object: any = {};\n      for(let key in raw_params) {\n        if (typeof(raw_params[key]) === `object`) {\n          encode_object[key] = raw_params[key];\n          continue;\n        } else if(typeof(raw_params[key]) === 'function') {\n          continue;\n        }\n\n        body.set(key, raw_params[key]);\n      }\n\n      // -> Gerer l'encodage des liste, et des dict.\n      let resp: Array<string> = [];\n      for (let key of Object.keys(encode_object)) {\n          resp.push.apply(resp, this.__encodeObjectParams(key, encode_object[key]));\n      }\n\n      return `${body.toString()}&${resp.join('&')}`;\n  }\n\n  /*\n  * @description:\n  */\n  public post(url:string, params:any, header:any=undefined): any {\n    url = this.addBaseUrl(this.domain, url);\n    return this.http.post(url, this.__encodeParams(params), this.__defaultOptions()).pipe(\n      map(response => {\n        // return this.__map_response(response, 'post');\n      })\n    );\n  }\n\n  /**\n   * @description:\n   * @param url \n   * @param header \n   * @returns \n   */\n  public strapiPost(url:string, params:any, header:any=undefined): any {\n    url = this.addBaseUrl(this.strapi_domain, url);\n    return this.http.post(url, params, this.__jsonOptions()).pipe(\n      map(response => {\n        // return this.__map_response(response, 'post');\n      })\n    );\n  }\n\n  /*\n  * @description:\n  */\n  public get(url:string, header:any=undefined): any {\n    return this.http.get(url, this.__defaultOptions()).pipe(\n      map(response => {\n          return this.__map_response(response, 'get');\n      })\n    );\n  }\n\n  /*\n  * @description:\n  */\n  rawGet(url: string) {\n    return this.http.get(url, this.__defaultOptions()).pipe(\n      map(response => {\n        return response\n      })\n    );\n  }\n\n  /*\n  * @description:\n  */\n  public put() {\n\n  }\n\n  /*\n  * @description:\n  */\n  public delete() {\n\n  }\n\n  /*\n  * @description:\n  */\n  redirectTo(path: string) {\n    window.location.href = this.__map_url(path);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}