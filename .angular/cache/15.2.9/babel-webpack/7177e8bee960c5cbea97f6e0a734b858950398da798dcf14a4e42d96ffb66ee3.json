{"ast":null,"code":"/**\n * @license Angular v15.2.9\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Subject, Subscription, Observable, merge as merge$1 } from 'rxjs';\nimport { share } from 'rxjs/operators';\nfunction getClosureSafeProperty(objWithPropertyToExtract) {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nfunction fillProperties(target, source) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\nfunction stringify(token) {\n  if (typeof token === 'string') {\n    return token;\n  }\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n  if (token == null) {\n    return '' + token;\n  }\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n  if (token.name) {\n    return `${token.name}`;\n  }\n  const res = token.toString();\n  if (res == null) {\n    return '' + res;\n  }\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nfunction concatStringsWithSpace(before, after) {\n  return before == null || before === '' ? after === null ? '' : after : after == null || after === '' ? before : before + ' ' + after;\n}\nconst __forward_ref__ = getClosureSafeProperty({\n  __forward_ref__: getClosureSafeProperty\n});\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nfunction forwardRef(forwardRefFn) {\n  forwardRefFn.__forward_ref__ = forwardRef;\n  forwardRefFn.toString = function () {\n    return stringify(this());\n  };\n  return forwardRefFn;\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nfunction resolveForwardRef(type) {\n  return isForwardRef(type) ? type() : type;\n}\n/** Checks whether a function is wrapped by a `forwardRef`. */\nfunction isForwardRef(fn) {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;\n}\nfunction isEnvironmentProviders(value) {\n  return value && !!value.ɵproviders;\n}\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nconst ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n/**\n * URL for the XSS security documentation.\n */\nconst XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\nclass RuntimeError extends Error {\n  constructor(code, message) {\n    super(formatRuntimeError(code, message));\n    this.code = code;\n  }\n}\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nfunction formatRuntimeError(code, message) {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  const fullCode = `NG0${Math.abs(code)}`;\n  let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nfunction renderStringify(value) {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nfunction stringifyForError(value) {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n  return renderStringify(value);\n}\n\n/** Called when directives inject each other (creating a circular dependency) */\nfunction throwCyclicDependencyError(token, path) {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(-200 /* RuntimeErrorCode.CYCLIC_DI_DEPENDENCY */, `Circular dependency in DI detected for ${token}${depPath}`);\n}\nfunction throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\nfunction throwInvalidProviderError(ngModuleType, providers, provider) {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(207 /* RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT */, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n/** Throws an error when a token is not found in DI. */\nfunction throwProviderNotFoundError(token, injectorName) {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(-201 /* RuntimeErrorCode.PROVIDER_NOT_FOUND */, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n\n// The functions in this file verify that the assumptions we are making\nfunction assertNumber(actual, msg) {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\nfunction assertNumberInRange(actual, minInclusive, maxInclusive) {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\nfunction assertString(actual, msg) {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\nfunction assertFunction(actual, msg) {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\nfunction assertEqual(actual, expected, msg) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\nfunction assertNotEqual(actual, expected, msg) {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\nfunction assertSame(actual, expected, msg) {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\nfunction assertNotSame(actual, expected, msg) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\nfunction assertLessThan(actual, expected, msg) {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\nfunction assertLessThanOrEqual(actual, expected, msg) {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\nfunction assertGreaterThan(actual, expected, msg) {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\nfunction assertGreaterThanOrEqual(actual, expected, msg) {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\nfunction assertNotDefined(actual, msg) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\nfunction assertDefined(actual, msg) {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\nfunction throwError(msg, actual, expected, comparison) {\n  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\nfunction assertDomNode(node) {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) && !(typeof node === 'object' && node != null && node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\nfunction assertIndexInRange(arr, index) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\nfunction assertOneOf(value, ...validValues) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);\n}\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nfunction ɵɵdefineInjectable(opts) {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn || null,\n    factory: opts.factory,\n    value: undefined\n  };\n}\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nconst defineInjectable = ɵɵdefineInjectable;\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nfunction ɵɵdefineInjector(options) {\n  return {\n    providers: options.providers || [],\n    imports: options.imports || []\n  };\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nfunction getInjectableDef(type) {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\nfunction isInjectable(type) {\n  return getInjectableDef(type) !== null;\n}\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition(type, field) {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nfunction getInheritedInjectableDef(type) {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n  if (def) {\n    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token \"${type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` + `This will become an error in a future version of Angular. Please add @Injectable() to the \"${type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nfunction getInjectorDef(type) {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;\n}\nconst NG_PROV_DEF = getClosureSafeProperty({\n  ɵprov: getClosureSafeProperty\n});\nconst NG_INJ_DEF = getClosureSafeProperty({\n  ɵinj: getClosureSafeProperty\n});\n// We need to keep these around so we can read off old defs if new defs are unavailable\nconst NG_INJECTABLE_DEF = getClosureSafeProperty({\n  ngInjectableDef: getClosureSafeProperty\n});\nconst NG_INJECTOR_DEF = getClosureSafeProperty({\n  ngInjectorDef: getClosureSafeProperty\n});\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\nvar InjectFlags;\n(function (InjectFlags) {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n  /** Check self and check parent injector if needed */\n  InjectFlags[InjectFlags[\"Default\"] = 0] = \"Default\";\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  InjectFlags[InjectFlags[\"Host\"] = 1] = \"Host\";\n  /** Don't ascend to ancestors of the node requesting injection. */\n  InjectFlags[InjectFlags[\"Self\"] = 2] = \"Self\";\n  /** Skip the node that is requesting injection. */\n  InjectFlags[InjectFlags[\"SkipSelf\"] = 4] = \"SkipSelf\";\n  /** Inject `defaultValue` instead if token not found. */\n  InjectFlags[InjectFlags[\"Optional\"] = 8] = \"Optional\";\n})(InjectFlags || (InjectFlags = {}));\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation;\nfunction getInjectImplementation() {\n  return _injectImplementation;\n}\n/**\n * Sets the current inject implementation.\n */\nfunction setInjectImplementation(impl) {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nfunction injectRootLimpMode(token, notFoundValue, flags) {\n  const injectableDef = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() : injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nfunction assertInjectImplementationNotEqual(fn) {\n  ngDevMode && assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\nconst _global = /* @__PURE__ */(() => typeof globalThis !== 'undefined' && globalThis || typeof global !== 'undefined' && global || typeof window !== 'undefined' && window || typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self)();\nfunction ngDevModeResetPerfCounters() {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters = {\n    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n    firstCreatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererAppendChild: 0,\n    rendererInsertBefore: 0,\n    rendererCreateComment: 0\n  };\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  _global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n  return newCounters;\n}\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nfunction initNgDevMode() {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object') {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\nconst _THROW_IF_NOT_FOUND = {};\nconst THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nconst SOURCE = '__source';\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector = undefined;\nfunction setCurrentInjector(injector) {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\nfunction injectInjectorOnly(token, flags = InjectFlags.Default) {\n  if (_currentInjector === undefined) {\n    throw new RuntimeError(-203 /* RuntimeErrorCode.MISSING_INJECTION_CONTEXT */, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\nfunction ɵɵinject(token, flags = InjectFlags.Default) {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactoryDep(index) {\n  throw new RuntimeError(202 /* RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY */, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction inject(token, flags = InjectFlags.Default) {\n  return ɵɵinject(token, convertToBitFlags(flags));\n}\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nfunction convertToBitFlags(flags) {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return 0 /* InternalInjectFlags.Default */ | (\n  // comment to force a line break in the formatter\n  flags.optional && 8 /* InternalInjectFlags.Optional */) | (flags.host && 1 /* InternalInjectFlags.Host */) | (flags.self && 2 /* InternalInjectFlags.Self */) | (flags.skipSelf && 4 /* InternalInjectFlags.SkipSelf */);\n}\n\nfunction injectArgs(types) {\n  const args = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type = undefined;\n      let flags = InjectFlags.Default;\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === -1 /* DecoratorFlags.Inject */) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n      args.push(ɵɵinject(type, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nfunction attachInjectFlag(decorator, flag) {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nfunction getInjectFlag(token) {\n  return token[DI_DECORATOR_FLAG];\n}\nfunction catchInjectorError(e, token, injectorErrorName, source) {\n  const tokenPath = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\nfunction formatError(text, obj, injectorErrorName, source = null) {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = [];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nfunction noSideEffects(fn) {\n  return {\n    toString: fn\n  }.toString();\n}\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nvar ChangeDetectionStrategy;\n(function (ChangeDetectionStrategy) {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"OnPush\"] = 0] = \"OnPush\";\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  ChangeDetectionStrategy[ChangeDetectionStrategy[\"Default\"] = 1] = \"Default\";\n})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nvar ViewEncapsulation$1;\n(function (ViewEncapsulation) {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\nconst EMPTY_OBJ = {};\nconst EMPTY_ARRAY = [];\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\nconst NG_COMP_DEF = getClosureSafeProperty({\n  ɵcmp: getClosureSafeProperty\n});\nconst NG_DIR_DEF = getClosureSafeProperty({\n  ɵdir: getClosureSafeProperty\n});\nconst NG_PIPE_DEF = getClosureSafeProperty({\n  ɵpipe: getClosureSafeProperty\n});\nconst NG_MOD_DEF = getClosureSafeProperty({\n  ɵmod: getClosureSafeProperty\n});\nconst NG_FACTORY_DEF = getClosureSafeProperty({\n  ɵfac: getClosureSafeProperty\n});\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nconst NG_ELEMENT_ID = getClosureSafeProperty({\n  __NG_ELEMENT_ID__: getClosureSafeProperty\n});\n\n/** Counter used to generate unique IDs for component definitions. */\nlet componentDefCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nfunction ɵɵdefineComponent(componentDefinition) {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n    const baseDef = getNgDirectiveDef(componentDefinition);\n    const def = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null,\n      pipeDefs: null,\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: null,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,\n      id: `c${componentDefCount++}`,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null\n    };\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */true);\n    return def;\n  });\n}\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nfunction ɵɵsetComponentScope(type, directives, pipes) {\n  const def = type.ɵcmp;\n  def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */false);\n  def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */true);\n}\nfunction extractDirectiveDef(type) {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\nfunction nonNull(value) {\n  return value !== null;\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵdefineNgModule(def) {\n  return noSideEffects(() => {\n    const res = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null\n    };\n    return res;\n  });\n}\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nfunction ɵɵsetNgModuleScope(type, scope) {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n  });\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj, secondary) {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName = obj[minifiedKey];\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        secondary[publicName] = declaredName;\n      }\n    }\n  }\n  return newLookup;\n}\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdefineDirective(directiveDefinition) {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n    return def;\n  });\n}\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nfunction ɵɵdefinePipe(pipeDef) {\n  return {\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone === true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  };\n}\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\nfunction getComponentDef(type) {\n  return type[NG_COMP_DEF] || null;\n}\nfunction getDirectiveDef(type) {\n  return type[NG_DIR_DEF] || null;\n}\nfunction getPipeDef$1(type) {\n  return type[NG_PIPE_DEF] || null;\n}\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See this guide for additional information: https://angular.io/guide/standalone-components\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nfunction isStandalone(type) {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n  return def !== null ? def.standalone : false;\n}\nfunction getNgModuleDef(type, throwNotFound) {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\nfunction getNgDirectiveDef(directiveDefinition) {\n  const declaredInputs = {};\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    findHostDirectiveDefs: null,\n    hostDirectives: null,\n    inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n    outputs: invertObject(directiveDefinition.outputs)\n  };\n}\nfunction initFeatures(definition) {\n  definition.features?.forEach(fn => fn(definition));\n}\nfunction extractDefListOrFactory(dependencies, pipeDef) {\n  if (!dependencies) {\n    return null;\n  }\n  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;\n  return () => (typeof dependencies === 'function' ? dependencies() : dependencies).map(dep => defExtractor(dep)).filter(nonNull);\n}\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nconst HOST = 0;\nconst TVIEW = 1;\nconst FLAGS = 2;\nconst PARENT = 3;\nconst NEXT = 4;\nconst TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nconst T_HOST = 6;\nconst CLEANUP = 7;\nconst CONTEXT = 8;\nconst INJECTOR$1 = 9;\nconst RENDERER_FACTORY = 10;\nconst RENDERER = 11;\nconst SANITIZER = 12;\nconst CHILD_HEAD = 13;\nconst CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nconst DECLARATION_VIEW = 15;\nconst DECLARATION_COMPONENT_VIEW = 16;\nconst DECLARATION_LCONTAINER = 17;\nconst PREORDER_HOOK_FLAGS = 18;\nconst QUERIES = 19;\nconst ID = 20;\nconst EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nconst HEADER_OFFSET = 22;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$4 = 1;\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nconst TYPE = 1;\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nconst HAS_TRANSPLANTED_VIEWS = 2;\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\nconst NATIVE = 7;\nconst VIEW_REFS = 8;\nconst MOVED_VIEWS = 9;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nconst CONTAINER_HEADER_OFFSET = 10;\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$3 = 1;\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[TYPE] === true;\n}\nfunction isContentQueryHost(tNode) {\n  return (tNode.flags & 4 /* TNodeFlags.hasContentQuery */) !== 0;\n}\nfunction isComponentHost(tNode) {\n  return tNode.componentOffset > -1;\n}\nfunction isDirectiveHost(tNode) {\n  return (tNode.flags & 1 /* TNodeFlags.isDirectiveHost */) === 1 /* TNodeFlags.isDirectiveHost */;\n}\n\nfunction isComponentDef(def) {\n  return !!def.template;\n}\nfunction isRootView(target) {\n  return (target[FLAGS] & 256 /* LViewFlags.IsRoot */) !== 0;\n}\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\nfunction assertTNodeForLView(tNode, lView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\nfunction assertTNodeForTView(tNode, tView) {\n  assertTNode(tNode);\n  tNode.hasOwnProperty('tView_') && assertEqual(tNode.tView_, tView, 'This TNode does not belong to this TView.');\n}\nfunction assertTNode(tNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\nfunction assertTIcu(tIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\nfunction assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\nfunction assertCurrentTNodeIsParent(isParent) {\n  assertEqual(isParent, true, 'currentTNode should be a parent');\n}\nfunction assertHasParent(tNode) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode.parent, 'currentTNode should have a parent');\n}\nfunction assertLContainer(value) {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\nfunction assertLViewOrUndefined(value) {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\nfunction assertLView(value) {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\nfunction assertFirstCreatePass(tView, errMessage) {\n  assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\nfunction assertFirstUpdatePass(tView, errMessage) {\n  assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nfunction assertDirectiveDef(obj) {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\nfunction assertIndexInDeclRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\nfunction assertIndexInExpandoRange(lView, index) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\nfunction assertBetween(lower, upper, index) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\nfunction assertProjectionSlots(lView, errMessage) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || 'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\nfunction assertParentView(lView, errMessage) {\n  assertDefined(lView, errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nfunction assertNodeInjector(lView, injectorIndex) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + 8 /* NodeInjectorOffset.PARENT */);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */], 'injectorIndex should point to parent injector');\n}\nfunction getFactoryDef(type, throwNotFound) {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nclass SimpleChange {\n  constructor(previousValue, currentValue, firstChange) {\n    this.previousValue = previousValue;\n    this.currentValue = currentValue;\n    this.firstChange = firstChange;\n  }\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange() {\n    return this.firstChange;\n  }\n}\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵNgOnChangesFeature() {\n  return NgOnChangesFeatureImpl;\n}\nfunction NgOnChangesFeatureImpl(definition) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\nɵɵNgOnChangesFeature.ngInherit = true;\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook() {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n  if (current) {\n    const previous = simpleChangesStore.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore.current = null;\n    this.ngOnChanges(current);\n  }\n}\nfunction ngOnChangesSetInput(instance, value, publicName, privateName) {\n  const declaredName = this.declaredInputs[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, {\n    previous: EMPTY_OBJ,\n    current: null\n  });\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n  instance[privateName] = value;\n}\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\nfunction getSimpleChangesStore(instance) {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\nfunction setSimpleChangesStore(instance, store) {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\nlet profilerCallback = null;\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nconst setProfiler = profiler => {\n  profilerCallback = profiler;\n};\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nconst profiler = function (event, instance, hookOrListener) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\nconst SVG_NAMESPACE = 'svg';\nconst MATH_ML_NAMESPACE = 'math';\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapRNode(value) {\n  while (Array.isArray(value)) {\n    value = value[HOST];\n  }\n  return value;\n}\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nfunction unwrapLView(value) {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value;\n    value = value[HOST];\n  }\n  return null;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nfunction getNativeByIndex(index, lView) {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNode(tNode, lView) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nfunction getNativeByTNodeOrNull(tNode, lView) {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    const node = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n// fixme(misko): The return Type should be `TNode|null`\nfunction getTNode(tView, index) {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index];\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n/** Retrieves a value from any `LView` or `TData`. */\nfunction load(view, index) {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\nfunction getComponentLViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n/** Checks whether a given view is in creation mode */\nfunction isCreationMode(view) {\n  return (view[FLAGS] & 4 /* LViewFlags.CreationMode */) === 4 /* LViewFlags.CreationMode */;\n}\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nfunction viewAttachedToChangeDetector(view) {\n  return (view[FLAGS] & 64 /* LViewFlags.Attached */) === 64 /* LViewFlags.Attached */;\n}\n/** Returns a boolean for whether the view is attached to a container. */\nfunction viewAttachedToContainer(view) {\n  return isLContainer(view[PARENT]);\n}\nfunction getConstant(consts, index) {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts, index);\n  return consts[index];\n}\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nfunction resetPreOrderHookFlags(lView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nfunction updateTransplantedViewCount(lContainer, amount) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer = lContainer;\n  let parent = lContainer[PARENT];\n  while (parent !== null && (amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1 || amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0)) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\nconst instructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true\n};\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nfunction specOnlyIsInstructionStateEmpty() {\n  return instructionState.lFrame.parent === null;\n}\nfunction getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\nfunction increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\nfunction decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\nfunction getBindingsEnabled() {\n  return instructionState.bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵenableBindings() {\n  instructionState.bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵdisableBindings() {\n  instructionState.bindingsEnabled = false;\n}\n/**\n * Return the current `LView`.\n */\nfunction getLView() {\n  return instructionState.lFrame.lView;\n}\n/**\n * Return the current `TView`.\n */\nfunction getTView() {\n  return instructionState.lFrame.tView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nfunction ɵɵrestoreView(viewToRestore) {\n  instructionState.lFrame.contextLView = viewToRestore;\n  return viewToRestore[CONTEXT];\n}\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nfunction ɵɵresetView(value) {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\nfunction getCurrentTNode() {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === 64 /* TNodeType.Placeholder */) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\nfunction getCurrentTNodePlaceholderOk() {\n  return instructionState.lFrame.currentTNode;\n}\nfunction getCurrentParentTNode() {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode.parent;\n}\nfunction setCurrentTNode(tNode, isParent) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\nfunction isCurrentTNodeParent() {\n  return instructionState.lFrame.isParent;\n}\nfunction setCurrentTNodeAsNotParent() {\n  instructionState.lFrame.isParent = false;\n}\nfunction getContextLView() {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView;\n}\nfunction isInCheckNoChangesMode() {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _isInCheckNoChangesMode;\n}\nfunction setIsInCheckNoChangesMode(mode) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _isInCheckNoChangesMode = mode;\n}\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nfunction getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\nfunction getBindingIndex() {\n  return instructionState.lFrame.bindingIndex;\n}\nfunction setBindingIndex(value) {\n  return instructionState.lFrame.bindingIndex = value;\n}\nfunction nextBindingIndex() {\n  return instructionState.lFrame.bindingIndex++;\n}\nfunction incrementBindingIndex(count) {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\nfunction isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\nfunction setInI18nBlock(isInI18nBlock) {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nfunction setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nfunction getCurrentDirectiveIndex() {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nfunction setCurrentDirectiveIndex(currentDirectiveIndex) {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nfunction getCurrentDirectiveDef(tData) {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];\n}\nfunction getCurrentQueryIndex() {\n  return instructionState.lFrame.currentQueryIndex;\n}\nfunction setCurrentQueryIndex(value) {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView) {\n  const tView = lView[TVIEW];\n  // Return the declaration parent for embedded views\n  if (tView.type === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === 1 /* TViewType.Component */) {\n    return lView[T_HOST];\n  }\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nfunction enterDI(lView, tNode, flags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n    let parentTNode = tNode;\n    let parentLView = lView;\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode.parent;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW];\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (2 /* TNodeType.Element */ | 8 /* TNodeType.ElementContainer */)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n  return true;\n}\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nfunction enterView(newView) {\n  ngDevMode && assertNotEqual(newView[0], newView[1], '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\nfunction createLFrame(parent) {\n  const lFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null,\n    tView: null,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent,\n    child: null,\n    inI18n: false\n  };\n  parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.\n  return lFrame;\n}\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight() {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null;\n  oldLFrame.lView = null;\n  return oldLFrame;\n}\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nconst leaveDI = leaveViewLight;\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nfunction leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\nfunction nextContextImpl(level) {\n  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);\n  return contextLView[CONTEXT];\n}\nfunction walkUpViews(nestingLevel, currentView) {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW];\n    nestingLevel--;\n  }\n  return currentView;\n}\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nfunction getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nfunction setSelectedIndex(index) {\n  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nfunction getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nfunction ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nfunction namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\nfunction getNamespace$1() {\n  return instructionState.lFrame.currentNamespace;\n}\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nfunction registerPreOrderHooks(directiveIndex, directiveDef, tView) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {\n    ngOnChanges,\n    ngOnInit,\n    ngDoCheck\n  } = directiveDef.type.prototype;\n  if (ngOnChanges) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, wrappedOnChanges);\n  }\n  if (ngOnInit) {\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(0 - directiveIndex, ngOnInit);\n  }\n  if (ngDoCheck) {\n    (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(directiveIndex, ngDoCheck);\n  }\n}\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nfunction registerPostOrderHooks(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i];\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n    if (ngAfterContentInit) {\n      (tView.contentHooks ?? (tView.contentHooks = [])).push(-i, ngAfterContentInit);\n    }\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ?? (tView.contentHooks = [])).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ?? (tView.contentCheckHooks = [])).push(i, ngAfterContentChecked);\n    }\n    if (ngAfterViewInit) {\n      (tView.viewHooks ?? (tView.viewHooks = [])).push(-i, ngAfterViewInit);\n    }\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ?? (tView.viewHooks = [])).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ?? (tView.viewCheckHooks = [])).push(i, ngAfterViewChecked);\n    }\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ?? (tView.destroyHooks = [])).push(i, ngOnDestroy);\n    }\n  }\n}\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeCheckHooks(lView, hooks, nodeIndex) {\n  callHooks(lView, hooks, 3 /* InitPhaseState.InitPhaseCompleted */, nodeIndex);\n}\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\nfunction incrementInitPhaseFlags(lView, initPhase) {\n  ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseState.InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n    flags &= 2047 /* LViewFlags.IndexWithinInitPhaseReset */;\n    flags += 1 /* LViewFlags.InitPhaseStateIncrementer */;\n    lView[FLAGS] = flags;\n  }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(currentView, arr, initPhase, currentNodeIndex) {\n  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, 'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ? currentView[PREORDER_HOOK_FLAGS] & 65535 /* PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask */ : 0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1; // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1];\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i];\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook) currentView[PREORDER_HOOK_FLAGS] += 65536 /* PreOrderHookFlags.NumberOfInitHooksCalledIncrementer */;\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* PreOrderHookFlags.NumberOfInitHooksCalledMask */) + i + 2;\n      }\n      i++;\n    }\n  }\n}\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView, initPhase, arr, i) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1];\n  const directiveIndex = isInitHook ? -arr[i] : arr[i];\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> 11 /* LViewFlags.IndexWithinInitPhaseShift */;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 /* PreOrderHookFlags.NumberOfInitHooksCalledShift */ && (currentView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === initPhase) {\n      currentView[FLAGS] += 2048 /* LViewFlags.IndexWithinInitPhaseIncrementer */;\n      profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n      try {\n        hook.call(directive);\n      } finally {\n        profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n      }\n    }\n  } else {\n    profiler(4 /* ProfilerEvent.LifecycleHookStart */, directive, hook);\n    try {\n      hook.call(directive);\n    } finally {\n      profiler(5 /* ProfilerEvent.LifecycleHookEnd */, directive, hook);\n    }\n  }\n}\nconst NO_PARENT_INJECTOR = -1;\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nclass NodeInjectorFactory {\n  constructor(\n  /**\n   * Factory to invoke in order to create a new instance.\n   */\n  factory,\n  /**\n   * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n   */\n  isViewProvider, injectImplementation) {\n    this.factory = factory;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     */\n    this.resolving = false;\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\nfunction isFactory(obj) {\n  return obj instanceof NodeInjectorFactory;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$2 = 1;\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nfunction toTNodeTypeAsString(tNodeType) {\n  let text = '';\n  tNodeType & 1 /* TNodeType.Text */ && (text += '|Text');\n  tNodeType & 2 /* TNodeType.Element */ && (text += '|Element');\n  tNodeType & 4 /* TNodeType.Container */ && (text += '|Container');\n  tNodeType & 8 /* TNodeType.ElementContainer */ && (text += '|ElementContainer');\n  tNodeType & 16 /* TNodeType.Projection */ && (text += '|Projection');\n  tNodeType & 32 /* TNodeType.Icu */ && (text += '|IcuContainer');\n  tNodeType & 64 /* TNodeType.Placeholder */ && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd$1 = 1;\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasClassInput(tNode) {\n  return (tNode.flags & 8 /* TNodeFlags.hasClassInput */) !== 0;\n}\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nfunction hasStyleInput(tNode) {\n  return (tNode.flags & 16 /* TNodeFlags.hasStyleInput */) !== 0;\n}\nfunction assertTNodeType(tNode, expectedTypes, message) {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\nfunction assertPureTNodeType(type) {\n  if (!(type === 2 /* TNodeType.Element */ ||\n  //\n  type === 1 /* TNodeType.Text */ ||\n  //\n  type === 4 /* TNodeType.Container */ ||\n  //\n  type === 8 /* TNodeType.ElementContainer */ ||\n  //\n  type === 32 /* TNodeType.Icu */ ||\n  //\n  type === 16 /* TNodeType.Projection */ ||\n  //\n  type === 64 /* TNodeType.Placeholder */)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);\n  }\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(renderer, native, attrs) {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== 0 /* AttributeMarker.NamespaceURI */) {\n        break;\n      }\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n      const namespaceURI = attrs[i++];\n      const attrName = attrs[i++];\n      const attrVal = attrs[i++];\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal);\n      }\n      i++;\n    }\n  }\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nfunction isNameOnlyAttributeMarker(marker) {\n  return marker === 3 /* AttributeMarker.Bindings */ || marker === 4 /* AttributeMarker.Template */ || marker === 6 /* AttributeMarker.I18n */;\n}\n\nfunction isAnimationProp(name) {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === 64 /* CharCode.AT_SIGN */;\n}\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nfunction mergeHostAttrs(dst, src) {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === 0 /* AttributeMarker.NamespaceURI */) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (srcMarker === -1 /* AttributeMarker.ImplicitAttributes */ || srcMarker === 2 /* AttributeMarker.Styles */) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nfunction mergeHostAttribute(dst, marker, key1, key2, value) {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === -1 /* AttributeMarker.ImplicitAttributes */) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nfunction hasParentInjector(parentLocation) {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\nfunction getParentInjectorIndex(parentLocation) {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation, -1, 'Not a valid state.');\n  const parentInjectorIndex = parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, 'Parent injector must be pointing past HEADER_OFFSET.');\n  return parentLocation & 32767 /* RelativeInjectorLocationFlags.InjectorIndexMask */;\n}\n\nfunction getParentInjectorViewOffset(parentLocation) {\n  return parentLocation >> 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nfunction getParentInjectorView(location, startView) {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW];\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\nfunction setIncludeViewProviders(v) {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nfunction bloomAdd(injectorIndex, tView, type) {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = type[NG_ELEMENT_ID];\n  }\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = type[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nfunction getOrCreateNodeInjectorForNode(tNode, lView) {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode); // foundation for node bloom\n    insertBloom(lView, null); // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8 /* NodeInjectorOffset.BLOOM_SIZE */; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n  lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */] = parentLoc;\n  return injectorIndex;\n}\nfunction insertBloom(arr, footer) {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\nfunction getInjectorIndex(tNode, lView) {\n  if (tNode.injectorIndex === -1 ||\n  // If the injector index is the same as its parent's injector index, then the index has been\n  // copied down from the parent node. No injector has been created yet on this node.\n  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex ||\n  // After the first template pass, the injector index might exist but the parent values\n  // might not have been calculated yet for this instance\n  lView[tNode.injectorIndex + 8 /* NodeInjectorOffset.PARENT */] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nfunction getParentInjectorLocation(tNode, lView) {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex; // ViewOffset is 0\n  }\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode = null;\n  let lViewCursor = lView;\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return parentTNode.injectorIndex | declarationViewOffset << 16 /* RelativeInjectorLocationFlags.ViewOffsetShift */;\n    }\n  }\n\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nfunction diPublicInInjector(injectorIndex, tView, token) {\n  bloomAdd(injectorIndex, tView, token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nfunction injectAttributeImpl(tNode, attrNameToInject) {\n  ngDevMode && assertTNodeType(tNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n      // Skip namespaced attributes\n      if (value === 0 /* AttributeMarker.NamespaceURI */) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1];\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\nfunction notFoundValueOrThrow(notFoundValue, token, flags) {\n  if (flags & InjectFlags.Optional || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR$1];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow(notFoundValue, token, flags);\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n}\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);\n    }\n    try {\n      const value = bloomHash(flags);\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode && assertTNodeForLView(tView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */], lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + 8 /* NodeInjectorOffset.PARENT */];\n      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n  return notFoundValue;\n}\nfunction searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n  // 1) This is the first invocation `previousTView == null` which means that we are at the\n  // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n  // to look into the ViewProviders is if:\n  // - we are on a component\n  // - AND the injector set `includeViewProviders` to true (implying that the token can see\n  // ViewProviders because it is the Component or a Service which itself was declared in\n  // ViewProviders)\n  isComponentHost(tNode) && includeViewProviders :\n  // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n  // In such a case we are only allowed to look into the ViewProviders if:\n  // - We just crossed from child View to Parent View `previousTView != currentTView`\n  // - AND the parent TNode is an Element.\n  // This means that we just came from the Component's View and therefore are allowed to see\n  // into the ViewProviders.\n  previousTView != currentTView && (tNode.type & 3 /* TNodeType.AnyRNode */) !== 0;\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;\n  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nfunction locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n  const injectablesStart = nodeProviderIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount = nodeProviderIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i];\n    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart];\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nfunction getNodeInjectable(lView, tView, index, tNode) {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode && assertEqual(success, true, 'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index], tView);\n      }\n    } finally {\n      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nfunction bloomHashBitOrFactory(token) {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId =\n  // First check with `hasOwnProperty` so we don't get an inherited ID.\n  token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode && assertEqual(tokenId, -1 /* InjectorMarkers.Injector */, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\nfunction bloomHasToken(bloomHash, injectorIndex, injectorView) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags, isFirstHostTNode) {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\nclass NodeInjector {\n  constructor(_tNode, _lView) {\n    this._tNode = _tNode;\n    this._lView = _lView;\n  }\n  get(token, notFoundValue, flags) {\n    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n/** Creates a `NodeInjector` for the current node. */\nfunction createNodeInjector() {\n  return new NodeInjector(getCurrentTNode(), getLView());\n}\n/**\n * @codeGenApi\n */\nfunction ɵɵgetInheritedFactory(type) {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n      parent = Object.getPrototypeOf(parent);\n    }\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\nfunction getFactoryOf(type) {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef(type);\n}\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {\n  let currentTNode = tNode;\n  let currentLView = lView;\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */ && !(currentLView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode = currentTNode.parent;\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n    currentTNode = parentTNode;\n  }\n  return notFoundValue;\n}\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView) {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === 2 /* TViewType.Embedded */) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  } else if (tViewType === 1 /* TViewType.Component */) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST];\n  }\n  return null;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nfunction ɵɵinjectAttribute(attrNameToInject) {\n  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);\n}\nconst ANNOTATIONS = '__annotations__';\nconst PARAMETERS = '__parameters__';\nconst PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n */\nfunction makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function DecoratorFactory(...args) {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this;\n      }\n      const annotationInstance = new DecoratorFactory(...args);\n      return function TypeDecorator(cls) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, {\n          value: []\n        })[ANNOTATIONS];\n        annotations.push(annotationInstance);\n        if (additionalProcessing) additionalProcessing(cls);\n        return cls;\n      };\n    }\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    DecoratorFactory.annotationCls = DecoratorFactory;\n    return DecoratorFactory;\n  });\n}\nfunction makeMetadataCtor(props) {\n  return function ctor(...args) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\nfunction makeParamDecorator(name, props, parentClass) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args) {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new ParamDecoratorFactory(...args);\n      ParamDecorator.annotation = annotationInstance;\n      return ParamDecorator;\n      function ParamDecorator(cls, unusedKey, index) {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, {\n          value: []\n        })[PARAMETERS];\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\nfunction makePropDecorator(name, props, parentClass, additionalProcessing) {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function PropDecoratorFactory(...args) {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const decoratorInstance = new PropDecoratorFactory(...args);\n      function PropDecorator(target, name) {\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, {\n          value: {}\n        })[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n      return PropDecorator;\n    }\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    PropDecoratorFactory.annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Attribute = makeParamDecorator('Attribute', attributeName => ({\n  attributeName,\n  __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName)\n}));\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nclass InjectionToken {\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(_desc, options) {\n    this._desc = _desc;\n    /** @internal */\n    this.ngMetadataName = 'InjectionToken';\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) && assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      this.__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory\n      });\n    }\n  }\n  /**\n   * @internal\n   */\n  get multi() {\n    return this;\n  }\n  toString() {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n */\nconst ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nconst emitDistinctChangesOnlyDefaultValue = true;\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nclass Query {}\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nconst ContentChildren = makePropDecorator('ContentChildren', (selector, data = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: false,\n  descendants: false,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...data\n}), Query);\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nconst ContentChild = makePropDecorator('ContentChild', (selector, data = {}) => ({\n  selector,\n  first: true,\n  isViewQuery: false,\n  descendants: true,\n  ...data\n}), Query);\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChildren = makePropDecorator('ViewChildren', (selector, data = {}) => ({\n  selector,\n  first: false,\n  isViewQuery: true,\n  descendants: true,\n  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n  ...data\n}), Query);\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst ViewChild = makePropDecorator('ViewChild', (selector, data) => ({\n  selector,\n  first: true,\n  isViewQuery: true,\n  descendants: true,\n  ...data\n}), Query);\nvar FactoryTarget;\n(function (FactoryTarget) {\n  FactoryTarget[FactoryTarget[\"Directive\"] = 0] = \"Directive\";\n  FactoryTarget[FactoryTarget[\"Component\"] = 1] = \"Component\";\n  FactoryTarget[FactoryTarget[\"Injectable\"] = 2] = \"Injectable\";\n  FactoryTarget[FactoryTarget[\"Pipe\"] = 3] = \"Pipe\";\n  FactoryTarget[FactoryTarget[\"NgModule\"] = 4] = \"NgModule\";\n})(FactoryTarget || (FactoryTarget = {}));\nvar R3TemplateDependencyKind;\n(function (R3TemplateDependencyKind) {\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Directive\"] = 0] = \"Directive\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"Pipe\"] = 1] = \"Pipe\";\n  R3TemplateDependencyKind[R3TemplateDependencyKind[\"NgModule\"] = 2] = \"NgModule\";\n})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));\nvar ViewEncapsulation;\n(function (ViewEncapsulation) {\n  ViewEncapsulation[ViewEncapsulation[\"Emulated\"] = 0] = \"Emulated\";\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  ViewEncapsulation[ViewEncapsulation[\"None\"] = 2] = \"None\";\n  ViewEncapsulation[ViewEncapsulation[\"ShadowDom\"] = 3] = \"ShadowDom\";\n})(ViewEncapsulation || (ViewEncapsulation = {}));\nfunction getCompilerFacade(request) {\n  const globalNg = _global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === 1 /* JitCompilerUsage.PartialDeclaration */) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message += `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nconst Type = Function;\nfunction isType(v) {\n  return typeof v === 'function';\n}\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nfunction arrayEquals(a, b, identityAccessor) {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA);\n      valueB = identityAccessor(valueB);\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Flattens an array.\n */\nfunction flatten(list) {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\nfunction deepForEach(input, fn) {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\nfunction addToArray(arr, index, value) {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\nfunction removeFromArray(arr, index) {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\nfunction newArray(size, value) {\n  const list = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value);\n  }\n  return list;\n}\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nfunction arraySplice(array, index, count) {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop(); // shrink the array\n  }\n}\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nfunction arrayInsert(array, index, value) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nfunction arrayInsert2(array, index, value1, value2) {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nfunction arrayIndexOfSorted(array, value) {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nfunction keyValueArraySet(keyValueArray, key, value) {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nfunction keyValueArrayGet(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1];\n  }\n  return undefined;\n}\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nfunction keyValueArrayIndexOf(keyValueArray, key) {\n  return _arrayIndexOfSorted(keyValueArray, key, 1);\n}\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nfunction keyValueArrayDelete(keyValueArray, key) {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array, value, shift) {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + (end - start >> 1); // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return middle << shift;\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1; // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n\n  return ~(end << shift);\n}\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nconst ES5_DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nconst ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nconst ES2015_INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nconst ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nfunction isDelegateCtor(typeStr) {\n  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);\n}\nclass ReflectionCapabilities {\n  constructor(reflect) {\n    this._reflect = reflect || _global['Reflect'];\n  }\n  factory(t) {\n    return (...args) => new t(...args);\n  }\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {\n    let result;\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n  _ownParameters(type, parentCtor) {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n    // Prefer the direct API.\n    if (type.parameters && type.parameters !== parentCtor.parameters) {\n      return type.parameters;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = type.ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map(ctorParam => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(ctorParam => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray(type.length);\n  }\n  parameters(type) {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n  _ownAnnotations(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {\n      let annotations = typeOrFunc.annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return typeOrFunc[ANNOTATIONS];\n    }\n    return null;\n  }\n  annotations(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n  _ownPropMetadata(typeOrFunc, parentCtor) {\n    // Prefer the direct API.\n    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = typeOrFunc.propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n    // API of tsickle for lowering decorators to properties on the class.\n    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = typeOrFunc.propDecorators;\n      const propMetadata = {};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return typeOrFunc[PROP_METADATA];\n    }\n    return null;\n  }\n  propMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach(propName => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach(propName => {\n        const decorators = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n  ownPropMetadata(typeOrFunc) {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n  hasLifecycleHook(type, lcProperty) {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\nfunction getParentCtor(ctor) {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Inject = attachInjectFlag(\n// Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nmakeParamDecorator('Inject', token => ({\n  token\n})), -1 /* DecoratorFlags.Inject */);\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Optional =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Optional'), 8 /* InternalInjectFlags.Optional */);\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Self =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Self'), 2 /* InternalInjectFlags.Self */);\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst SkipSelf =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('SkipSelf'), 4 /* InternalInjectFlags.SkipSelf */);\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Host =\n// Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n// tslint:disable-next-line: no-toplevel-property-access\nattachInjectFlag(makeParamDecorator('Host'), 1 /* InternalInjectFlags.Host */);\n\nlet _reflect = null;\nfunction getReflect() {\n  return _reflect = _reflect || new ReflectionCapabilities();\n}\nfunction reflectDependencies(type) {\n  return convertDependencies(getReflect().parameters(type));\n}\nfunction convertDependencies(deps) {\n  return deps.map(dep => reflectDependency(dep));\n}\nfunction reflectDependency(dep) {\n  const meta = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false\n  };\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n      const proto = Object.getPrototypeOf(param);\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || Array.isArray(dep) && dep.length === 0) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nfunction resolveComponentResources(resourceResolver) {\n  // Store all promises which are fetching the resources.\n  const componentResolved = [];\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map();\n  function cachedResourceResolve(url) {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n  componentResourceResolutionQueue.forEach((component, type) => {\n    const promises = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then(template => {\n        component.template = template;\n      }));\n    }\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push(''); // pre-allocate array.\n      promises.push(cachedResourceResolve(styleUrl).then(style => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\nlet componentResourceResolutionQueue = new Map();\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set();\nfunction maybeQueueResolutionOfComponentResources(type, metadata) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\nfunction isComponentDefPendingResolution(type) {\n  return componentDefPendingResolution.has(type);\n}\nfunction componentNeedsResolution(component) {\n  return !!(component.templateUrl && !component.hasOwnProperty('template') || component.styleUrls && component.styleUrls.length);\n}\nfunction clearResolutionOfComponentResourcesQueue() {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\nfunction restoreComponentResolutionQueue(queue) {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\nfunction isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\nfunction unwrapResponse(response) {\n  return typeof response == 'string' ? response : response.text();\n}\nfunction componentDefResolved(type) {\n  componentDefPendingResolution.delete(type);\n}\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map();\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\nfunction assertSameOrNotExisting(id, type, incoming) {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nfunction registerNgModuleType(ngModuleType, id) {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\nfunction clearModulesForTest() {\n  modules.clear();\n}\nfunction getRegisteredNgModuleType(id) {\n  return modules.get(id);\n}\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nfunction setAllowDuplicateNgModuleIdsForTest(allowDuplicates) {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nconst CUSTOM_ELEMENTS_SCHEMA = {\n  name: 'custom-elements'\n};\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nconst NO_ERRORS_SCHEMA = {\n  name: 'no-errors-schema'\n};\nlet shouldThrowErrorOnUnknownElement = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownElementStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\nlet shouldThrowErrorOnUnknownProperty = false;\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nfunction ɵsetUnknownPropertyStrictMode(shouldThrow) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n/**\n * Gets the current value of the strict mode.\n */\nfunction ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nfunction validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n    // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n    // Domino doesn't expose HTMLUnknownElement globally.\n    typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 && !customElements.get(tagName);\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;\n      } else {\n        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message);\n      } else {\n        console.error(formatRuntimeError(304 /* RuntimeErrorCode.UNKNOWN_ELEMENT */, message));\n      }\n    }\n  }\n}\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nfunction isPropertyValid(element, propName, tagName, schemas) {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nfunction handleUnknownPropertyError(propName, tagName, nodeType, lView) {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === 4 /* TNodeType.Container */) {\n    tagName = 'ng-template';\n  }\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` + `please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` + `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` + `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` + `the ${schemas} of this component.`;\n    }\n  }\n  reportUnknownPropertyError(message);\n}\nfunction reportUnknownPropertyError(message) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message);\n  } else {\n    console.error(formatRuntimeError(303 /* RuntimeErrorCode.UNKNOWN_BINDING */, message));\n  }\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  // Unable to obtain a context.\n  if (!context) return null;\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction isHostComponentStandalone(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getTemplateLocationDetails(lView) {\n  !ngDevMode && throwError('Must never be called in production mode');\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nconst KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'], ['ngSwitchDefault', 'NgSwitchDefault']]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nfunction matchingSchemas(schemas, tagName) {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nvar RendererStyleFlags2;\n(function (RendererStyleFlags2) {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"Important\"] = 1] = \"Important\";\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  RendererStyleFlags2[RendererStyleFlags2[\"DashCase\"] = 2] = \"DashCase\";\n})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nfunction escapeCommentText(value) {\n  return value.replace(COMMENT_DISALLOWED, text => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map();\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n/** Gets a unique ID that can be assigned to an LView. */\nfunction getUniqueLViewId() {\n  return uniqueIdCounter++;\n}\n/** Starts tracking an LView. */\nfunction registerLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n/** Gets an LView by its unique ID. */\nfunction getLViewById(id) {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n/** Stops tracking an LView. */\nfunction unregisterLView(lView) {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nclass LContext {\n  /** Component's parent view data. */\n  get lView() {\n    return getLViewById(this.lViewId);\n  }\n  constructor(\n  /**\n   * ID of the component's parent view data.\n   */\n  lViewId,\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex,\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native) {\n    this.lViewId = lViewId;\n    this.nodeIndex = nodeIndex;\n    this.native = native;\n  }\n}\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nfunction getLContext(target) {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView = mpValue;\n      let nodeIndex;\n      let component = undefined;\n      let directives = undefined;\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target;\n    ngDevMode && assertDomNode(rElement);\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return mpValue || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView, nodeIndex, native) {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nfunction getComponentViewByInstance(componentInstance) {\n  let patchedData = readPatchedData(componentInstance);\n  let lView;\n  if (isLView(patchedData)) {\n    const contextLView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST]);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData;\n    const contextLView = context.lView;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nfunction attachPatchData(target, data) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nfunction readPatchedData(target) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return typeof data === 'number' ? getLViewById(data) : data || null;\n}\nfunction readPatchedLView(target) {\n  const value = readPatchedData(target);\n  if (value) {\n    return isLView(value) ? value : value.lView;\n  }\n  return null;\n}\nfunction isComponentInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\nfunction isDirectiveInstance(instance) {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView, target) {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode) {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView, componentInstance) {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView, directiveInstance) {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nfunction getDirectivesAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\nfunction getComponentAtNodeIndex(nodeIndex, lView) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  const {\n    directiveStart,\n    componentOffset\n  } = tNode;\n  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nfunction discoverLocalRefs(lView, nodeIndex) {\n  const tNode = lView[TVIEW].data[nodeIndex];\n  if (tNode && tNode.localNames) {\n    const result = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n  return null;\n}\nlet _icuContainerIterate;\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nfunction icuContainerIterate(tIcuContainerNode, lView) {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nfunction ensureIcuContainerVisitorLoaded(loader) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nfunction getLViewParent(lView) {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT] : parent;\n}\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nfunction getRootView(componentOrLView) {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);\n  while (lView && !(lView[FLAGS] & 256 /* LViewFlags.IsRoot */)) {\n    lView = getLViewParent(lView);\n  }\n  ngDevMode && assertLView(lView);\n  return lView;\n}\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nfunction getRootContext(viewOrComponent) {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode && assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT];\n}\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nfunction getFirstLContainer(lView) {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nfunction getNextLContainer(container) {\n  return getNearestLContainer(container[NEXT]);\n}\nfunction getNearestLContainer(viewOrContainer) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer;\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST];\n    }\n    const rNode = unwrapRNode(lNodeToHandle);\n    if (action === 0 /* WalkTNodeTreeAction.Create */ && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === 1 /* WalkTNodeTreeAction.Insert */ && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === 2 /* WalkTNodeTreeAction.Detach */) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === 3 /* WalkTNodeTreeAction.Destroy */) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\nfunction createTextNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\nfunction updateTextNode(renderer, rNode, value) {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\nfunction createCommentNode(renderer, value) {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nfunction createElementNode(renderer, name, namespace) {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nfunction removeViewFromContainer(tView, lView) {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, 2 /* WalkTNodeTreeAction.Detach */, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nfunction addViewToContainer(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, 1 /* WalkTNodeTreeAction.Insert */, parentNativeNode, beforeNode);\n}\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nfunction renderDetachView(tView, lView) {\n  applyView(tView, lView, lView[RENDERER], 2 /* WalkTNodeTreeAction.Detach */, null, null);\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nfunction destroyViewTree(rootView) {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n  while (lViewOrLContainer) {\n    let next = null;\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer[NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nfunction insertView(tView, lView, lContainer, index) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n  lView[PARENT] = lContainer;\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n  // Sets the attached flag\n  lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n}\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer, lView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\nfunction detachMovedView(declarationContainer, lView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT];\n  ngDevMode && assertLContainer(insertionLContainer);\n  // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n  if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n    lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n  movedViews.splice(declarationViewIndex, 1);\n}\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nfunction detachView(lContainer, removeIndex) {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~64 /* LViewFlags.Attached */;\n  }\n\n  return viewToDetach;\n}\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nfunction destroyLView(tView, lView) {\n  if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n    const renderer = lView[RENDERER];\n    if (renderer.destroyNode) {\n      applyView(tView, lView, renderer, 3 /* WalkTNodeTreeAction.Destroy */, null, null);\n    }\n    destroyViewTree(lView);\n  }\n}\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView, lView) {\n  if (!(lView[FLAGS] & 128 /* LViewFlags.Destroyed */)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= 128 /* LViewFlags.Destroyed */;\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === 1 /* TViewType.Component */) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  }\n}\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView, lView) {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP];\n  // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n  let lastLCleanupIndex = -1;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // unregister\n          lCleanup[lastLCleanupIndex = targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[lastLCleanupIndex = -targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n    lView[CLEANUP] = null;\n  }\n}\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView, lView) {\n  let destroyHooks;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i]];\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1];\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j]];\n            const hook = toCall[j + 1];\n            profiler(4 /* ProfilerEvent.LifecycleHookStart */, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(5 /* ProfilerEvent.LifecycleHookEnd */, callContext, hook);\n            }\n          }\n        } else {\n          profiler(4 /* ProfilerEvent.LifecycleHookStart */, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(5 /* ProfilerEvent.LifecycleHookEnd */, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nfunction getParentRElement(tView, tNode, lView) {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nfunction getClosestRElement(tView, tNode, lView) {\n  let parentTNode = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null && parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n    const {\n      componentOffset\n    } = parentTNode;\n    if (componentOffset > -1) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {\n        encapsulation\n      } = tView.data[parentTNode.directiveStart + componentOffset];\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {\n        return null;\n      }\n    }\n    return getNativeByTNode(parentTNode, lView);\n  }\n}\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nfunction nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\nfunction nativeAppendChild(renderer, parent, child) {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\nfunction nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(renderer, parent, child, isHostElement) {\n  renderer.removeChild(parent, child, isHostElement);\n}\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n/**\n * Returns a native parent of a given native node.\n */\nfunction nativeParentNode(renderer, node) {\n  return renderer.parentNode(node);\n}\n/**\n * Returns a native sibling of a given native node.\n */\nfunction nativeNextSibling(renderer, node) {\n  return renderer.nextSibling(node);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {\n  if (parentTNode.type & (8 /* TNodeType.ElementContainer */ | 32 /* TNodeType.Icu */)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore;\nfunction setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nfunction appendChild(tView, lView, childRNode, childTNode) {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode = childTNode.parent || lView[T_HOST];\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n  _processI18nInsertBefore !== undefined && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView, tNode) {\n  if (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */ | 16 /* TNodeType.Projection */);\n    const tNodeType = tNode.type;\n    if (tNodeType & 3 /* TNodeType.AnyRNode */) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & 4 /* TNodeType.Container */) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      let nextRNode = icuContainerIterate(tNode, lView);\n      let rNode = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n  return null;\n}\nfunction getProjectionNodes(lView, tNode) {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const slotIdx = tNode.projection;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection[slotIdx];\n  }\n  return null;\n}\nfunction getBeforeNodeForView(viewIndexInContainer, lContainer) {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex];\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n  return lContainer[NATIVE];\n}\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nfunction nativeRemoveNode(renderer, rNode, isHostElement) {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === 0 /* WalkTNodeTreeAction.Create */) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= 2 /* TNodeFlags.isProjected */;\n      }\n    }\n\n    if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n      if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 32 /* TNodeType.Icu */) {\n        const nextRNode = icuContainerIterate(tNode, lView);\n        let rNode;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & 16 /* TNodeType.Projection */) {\n        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\nfunction applyView(tView, lView, renderer, action, parentRElement, beforeNode) {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nfunction applyProjection(tView, lView, tProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST];\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(renderer, 0 /* WalkTNodeTreeAction.Create */, lView, tProjectionNode, parentRNode, beforeNode);\n}\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST];\n  ngDevMode && assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT];\n    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE]; // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i];\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nfunction applyStyling(renderer, isClassBased, rNode, prop, value) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags |= RendererStyleFlags2.Important;\n      }\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectStyle(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nfunction writeDirectClass(renderer, element, newValue) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n/** Sets up the static DOM attributes on an `RNode`. */\nfunction setupStaticAttributes(renderer, element, tNode) {\n  const {\n    mergedAttrs,\n    classes,\n    styles\n  } = tNode;\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy$1;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy$1() {\n  if (policy$1 === undefined) {\n    policy$1 = null;\n    if (_global.trustedTypes) {\n      try {\n        policy$1 = _global.trustedTypes.createPolicy('angular', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy$1;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n  return getPolicy$1()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nfunction trustedScriptFromString(script) {\n  return getPolicy$1()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nfunction trustedScriptURLFromString(url) {\n  return getPolicy$1()?.createScriptURL(url) || url;\n}\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nfunction newTrustedFunctionForDev(...args) {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!_global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = _global['eval'](trustedScriptFromString(body));\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(_global);\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nfunction ɵɵvalidateIframeAttribute(attrValue, tagName, attrName) {\n  const lView = getLView();\n  const tNode = getSelectedTNode();\n  const element = getNativeByTNode(tNode, lView);\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === 2 /* TNodeType.Element */ && tagName.toLowerCase() === 'iframe') {\n    const iframe = element;\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('');\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n    const errorMessage = ngDevMode && `Angular has detected that the \\`${attrName}\\` was applied ` + `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` + `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` + `as a static attribute only. \\n` + `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` + `in a template or in host bindings section.`;\n    throw new RuntimeError(-910 /* RuntimeErrorCode.UNSAFE_IFRAME_ATTRS */, errorMessage);\n  }\n  return attrValue;\n}\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT = undefined;\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nfunction setDocument(document) {\n  DOCUMENT = document;\n}\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nfunction getDocument() {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n  return undefined;\n}\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n  if (policy === undefined) {\n    policy = null;\n    if (_global.trustedTypes) {\n      try {\n        policy = _global.trustedTypes.createPolicy('angular#unsafe-bypass', {\n          createHTML: s => s,\n          createScript: s => s,\n          createScriptURL: s => s\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedHTMLFromStringBypass(html) {\n  return getPolicy()?.createHTML(html) || html;\n}\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptFromStringBypass(script) {\n  return getPolicy()?.createScript(script) || script;\n}\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nfunction trustedScriptURLFromStringBypass(url) {\n  return getPolicy()?.createScriptURL(url) || url;\n}\nclass SafeValueImpl {\n  constructor(changingThisBreaksApplicationSecurity) {\n    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;\n  }\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` + ` (see ${XSS_SECURITY_URL})`;\n  }\n}\nclass SafeHtmlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"HTML\" /* BypassType.Html */;\n  }\n}\n\nclass SafeStyleImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Style\" /* BypassType.Style */;\n  }\n}\n\nclass SafeScriptImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"Script\" /* BypassType.Script */;\n  }\n}\n\nclass SafeUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"URL\" /* BypassType.Url */;\n  }\n}\n\nclass SafeResourceUrlImpl extends SafeValueImpl {\n  getTypeName() {\n    return \"ResourceURL\" /* BypassType.ResourceUrl */;\n  }\n}\n\nfunction unwrapSafeValue(value) {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;\n}\nfunction allowSanitizationBypassAndThrow(value, type) {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === \"ResourceURL\" /* BypassType.ResourceUrl */ && type === \"URL\" /* BypassType.Url */) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\nfunction getSanitizationBypassType(value) {\n  return value instanceof SafeValueImpl && value.getTypeName() || null;\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustHtml(trustedHtml) {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustStyle(trustedStyle) {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustScript(trustedScript) {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustUrl(trustedUrl) {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nfunction bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nfunction getInertBodyHelper(defaultDoc) {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper {\n  constructor(inertDocumentHelper) {\n    this.inertDocumentHelper = inertDocumentHelper;\n  }\n  getInertBodyElement(html) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), 'text/html').body;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper {\n  constructor(defaultDoc) {\n    this.defaultDoc = defaultDoc;\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n  getInertBodyElement(html) {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html);\n    return templateEl;\n  }\n}\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(''), 'text/html');\n  } catch {\n    return false;\n  }\n}\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nfunction _sanitizeUrl(url) {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n  return 'unsafe:' + url;\n}\nfunction tagSet(tags) {\n  const res = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\nfunction merge(...sets) {\n  const res = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' + 'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' + 'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\nconst VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n// Attributes that have href and hence need to be sanitized\nconst URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\nconst HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' + 'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' + 'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' + 'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' + 'valign,value,vspace,width');\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' + 'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' + 'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' + 'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' + 'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' + 'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' + 'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\nconst VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  constructor() {\n    // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n    // because characters were re-encoded.\n    this.sanitizedSomething = false;\n    this.buf = [];\n  }\n  sanitizeChildren(el) {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current = el.firstChild;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current);\n        }\n        let next = this.checkClobberedElement(current, current.nextSibling);\n        if (next) {\n          current = next;\n          break;\n        }\n        current = this.checkClobberedElement(current, current.parentNode);\n      }\n    }\n    return this.buf.join('');\n  }\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  startElement(element) {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n  endElement(current) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n  chars(chars) {\n    this.buf.push(encodeEntities(chars));\n  }\n  checkClobberedElement(node, nextNode) {\n    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value) {\n  return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (match) {\n    const hi = match.charCodeAt(0);\n    const low = match.charCodeAt(1);\n    return '&#' + ((hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000) + ';';\n  }).replace(NON_ALPHANUMERIC_REGEXP, function (match) {\n    return '&#' + match.charCodeAt(0) + ';';\n  }).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\nlet inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nfunction _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n  let inertBodyElement = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\nfunction getTemplateContent(el) {\n  return 'content' in el /** Microsoft/TypeScript#21517 */ && isTemplateElement(el) ? el.content : null;\n}\nfunction isTemplateElement(el) {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nvar SecurityContext;\n(function (SecurityContext) {\n  SecurityContext[SecurityContext[\"NONE\"] = 0] = \"NONE\";\n  SecurityContext[SecurityContext[\"HTML\"] = 1] = \"HTML\";\n  SecurityContext[SecurityContext[\"STYLE\"] = 2] = \"STYLE\";\n  SecurityContext[SecurityContext[\"SCRIPT\"] = 3] = \"SCRIPT\";\n  SecurityContext[SecurityContext[\"URL\"] = 4] = \"URL\";\n  SecurityContext[SecurityContext[\"RESOURCE_URL\"] = 5] = \"RESOURCE_URL\";\n})(SecurityContext || (SecurityContext = {}));\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeHtml(unsafeHtml) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, \"HTML\" /* BypassType.Html */)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeStyle(unsafeStyle) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, \"Style\" /* BypassType.Style */)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrl(unsafeUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, \"URL\" /* BypassType.Url */)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeResourceUrl(unsafeResourceUrl) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(904 /* RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL */, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeScript(unsafeScript) {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, \"Script\" /* BypassType.Script */)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(905 /* RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT */, ngDevMode && 'unsafe value used in a script context');\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantHtml(html) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nfunction ɵɵtrustConstantResourceUrl(url) {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nfunction getUrlSanitizer(tag, prop) {\n  if (prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' || tag === 'script') || prop === 'href' && (tag === 'base' || tag === 'link')) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nfunction ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\nfunction validateAgainstEventProperties(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...` + `\\nIf '${name}' is a directive input, make sure the directive is imported by the` + ` current module.`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction validateAgainstEventAttributes(name) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, ` + `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(306 /* RuntimeErrorCode.INVALID_EVENT_BINDING */, errorMessage);\n  }\n}\nfunction getSanitizer() {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nconst ENVIRONMENT_INITIALIZER = new InjectionToken('ENVIRONMENT_INITIALIZER');\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nconst INJECTOR = new InjectionToken('INJECTOR',\n// Disable tslint because this is const enum which gets inlined not top level prop access.\n// tslint:disable-next-line: no-toplevel-property-access\n-1 /* InjectorMarkers.Injector */);\n\nconst INJECTOR_DEF_TYPES = new InjectionToken('INJECTOR_DEF_TYPES');\nclass NullInjector {\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component in a component injector.\n */\nfunction makeEnvironmentProviders(providers) {\n  return {\n    ɵproviders: providers\n  };\n}\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nfunction importProvidersFrom(...sources) {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true\n  };\n}\nfunction internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {\n  const providersOut = [];\n  const dedup = new Set(); // already seen types\n  let injectorTypesWithProviders;\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(800 /* RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE */, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${stringifyForError(source)}\"`);\n      }\n    }\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source;\n    if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n      injectorTypesWithProviders || (injectorTypesWithProviders = []);\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n  }\n  return providersOut;\n}\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(typesWithProviders, providersOut) {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {\n      ngModule,\n      providers\n    } = typesWithProviders[i];\n    deepForEachProvider(providers, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      providersOut.push(provider);\n    });\n  }\n}\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nfunction walkProviderTree(container, providersOut, parents, dedup) {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType = null;\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule = container.ngModule;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container;\n  }\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n    if (cmpDef.dependencies) {\n      const deps = typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, providersOut, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n      let importTypesWithProviders;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, providersOut, parents, dedup)) {\n            importTypesWithProviders || (importTypesWithProviders = []);\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n      }\n    }\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType());\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      providersOut.push(\n      // Provider to create `defType` using its factory.\n      {\n        provide: defType,\n        useFactory: factory,\n        deps: EMPTY_ARRAY\n      },\n      // Make this `defType` available to an internal logic that calculates injector scope.\n      {\n        provide: INJECTOR_DEF_TYPES,\n        useValue: defType,\n        multi: true\n      },\n      // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n      {\n        provide: ENVIRONMENT_INITIALIZER,\n        useValue: () => ɵɵinject(defType),\n        multi: true\n      } //\n      );\n    }\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider, defProviders, injectorType);\n        providersOut.push(provider);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n  return defType !== container && container.providers !== undefined;\n}\nfunction validateProvider(provider, providers, containerType) {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {\n    return;\n  }\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\nfunction deepForEachProvider(providers, fn) {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\nconst USE_VALUE$1 = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isValueProvider(value) {\n  return value !== null && typeof value == 'object' && USE_VALUE$1 in value;\n}\nfunction isExistingProvider(value) {\n  return !!(value && value.useExisting);\n}\nfunction isFactoryProvider(value) {\n  return !!(value && value.useFactory);\n}\nfunction isTypeProvider(value) {\n  return typeof value === 'function';\n}\nfunction isClassProvider(value) {\n  return !!value.useClass;\n}\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nconst INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR$1 = undefined;\nfunction getNullInjector() {\n  if (NULL_INJECTOR$1 === undefined) {\n    NULL_INJECTOR$1 = new NullInjector();\n  }\n  return NULL_INJECTOR$1;\n}\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nclass EnvironmentInjector {}\nclass R3Injector extends EnvironmentInjector {\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  constructor(providers, parent, source, scopes) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.scopes = scopes;\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n     * to prevent further searches.\n     */\n    this.records = new Map();\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     */\n    this._ngOnDestroyHooks = new Set();\n    this._onDestroyHooks = [];\n    this._destroyed = false;\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(providers, provider => this.processProvider(provider));\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE);\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value);\n    }\n    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n  }\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy() {\n    this.assertNotDestroyed();\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      for (const hook of this._onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      this._onDestroyHooks.length = 0;\n    }\n  }\n  onDestroy(callback) {\n    this._onDestroyHooks.push(callback);\n  }\n  runInContext(fn) {\n    this.assertNotDestroyed();\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {\n    this.assertNotDestroyed();\n    flags = convertToBitFlags(flags);\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e) {\n      if (e.name === 'NullInjectorError') {\n        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n    }\n  }\n  /** @internal */\n  resolveInjectorInitializers() {\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' + `(expected an array, but got ${typeof initializers}). ` + 'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' + '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  toString() {\n    const tokens = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n  assertNotDestroyed() {\n    if (this._destroyed) {\n      throw new RuntimeError(205 /* RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED */, ngDevMode && 'Injector has already been destroyed.');\n    }\n  }\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  processProvider(provider) {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord.multi);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n  hydrate(token, record) {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this._ngOnDestroyHooks.add(record.value);\n    }\n    return record.value;\n  }\n  injectableDefInScope(def) {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || this.scopes.has(providedIn);\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n}\nfunction injectableDefOrInjectorDefFactory(token) {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n  if (factory !== null) {\n    return factory;\n  }\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && 'unreachable');\n}\nfunction getUndecoratedInjectableFactory(token) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args = newArray(paramLength, '?');\n    throw new RuntimeError(204 /* RuntimeErrorCode.INVALID_INJECTION_TOKEN */, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token);\n  } else {\n    return () => new token();\n  }\n}\nfunction providerToRecord(provider) {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nfunction providerToFactory(provider, ngModuleType, providers) {\n  let factory = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new classRef(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\nfunction makeRecord(factory, value, multi = false) {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined\n  };\n}\nfunction hasDeps(value) {\n  return !!value.deps;\n}\nfunction hasOnDestroy(value) {\n  return value !== null && typeof value === 'object' && typeof value.ngOnDestroy === 'function';\n}\nfunction couldBeInjectableType(value) {\n  return typeof value === 'function' || typeof value === 'object' && value instanceof InjectionToken;\n}\nfunction forEachSingleProvider(providers, fn) {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nclass ComponentRef$1 {}\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactory$1 {}\nfunction noComponentFactoryError(component) {\n  const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  error[ERROR_COMPONENT] = component;\n  return error;\n}\nconst ERROR_COMPONENT = 'ngComponent';\nfunction getComponent$1(error) {\n  return error[ERROR_COMPONENT];\n}\nclass _NullComponentFactoryResolver {\n  resolveComponentFactory(component) {\n    throw noComponentFactoryError(component);\n  }\n}\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nclass ComponentFactoryResolver$1 {}\nComponentFactoryResolver$1.NULL = /* @__PURE__ */new _NullComponentFactoryResolver();\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nfunction injectElementRef() {\n  return createElementRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nfunction createElementRef(tNode, lView) {\n  return new ElementRef(getNativeByTNode(tNode, lView));\n}\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nclass ElementRef {\n  constructor(nativeElement) {\n    this.nativeElement = nativeElement;\n  }\n}\n/**\n * @internal\n * @nocollapse\n */\nElementRef.__NG_ELEMENT_ID__ = injectElementRef;\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nfunction unwrapElementRef(value) {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nclass RendererFactory2 {}\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nclass Renderer2 {}\n/**\n * @internal\n * @nocollapse\n */\nRenderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();\n/** Injects a Renderer2 for the current component. */\nfunction injectRenderer2() {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode();\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nclass Sanitizer {}\n/** @nocollapse */\nSanitizer.ɵprov = ɵɵdefineInjectable({\n  token: Sanitizer,\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nclass Version {\n  constructor(full) {\n    this.full = full;\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n/**\n * @publicApi\n */\nconst VERSION = new Version('15.2.9');\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\nconst ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nfunction wrappedError(message, originalError) {\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\nfunction getOriginalError(error) {\n  return error[ERROR_ORIGINAL_ERROR];\n}\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nclass ErrorHandler {\n  constructor() {\n    /**\n     * @internal\n     */\n    this._console = console;\n  }\n  handleError(error) {\n    const originalError = this._findOriginalError(error);\n    this._console.error('ERROR', error);\n    if (originalError) {\n      this._console.error('ORIGINAL ERROR', originalError);\n    }\n  }\n  /** @internal */\n  _findOriginalError(error) {\n    let e = error && getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n    return e || null;\n  }\n}\nfunction normalizeDebugBindingName(name) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nfunction camelCaseToDashCase(input) {\n  return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());\n}\nfunction normalizeDebugBindingValue(value) {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveWindow(element) {\n  return element.ownerDocument.defaultView;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveDocument(element) {\n  return element.ownerDocument;\n}\n/**\n *\n * @codeGenApi\n */\nfunction ɵɵresolveBody(element) {\n  return element.ownerDocument.body;\n}\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nconst INTERPOLATION_DELIMITER = `�`;\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nfunction maybeUnwrapFn(value) {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n\n/** Verifies that a given type is a Standalone Component. */\nfunction assertStandaloneComponentType(type) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type);\n  if (!componentDef.standalone) {\n    throw new RuntimeError(907 /* RuntimeErrorCode.TYPE_IS_NOT_STANDALONE */, `The ${stringifyForError(type)} component is not marked as standalone, ` + `but Angular expects to have a standalone component here. ` + `Please make sure the ${stringifyForError(type)} component has ` + `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n/** Verifies whether a given type is a component */\nfunction assertComponentDef(type) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(906 /* RuntimeErrorCode.MISSING_GENERATED_DEF */, `The ${stringifyForError(type)} is not an Angular component, ` + `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n/** Called when there are multiple component selectors that match a given node */\nfunction throwMultipleComponentError(tNode, first, second) {\n  throw new RuntimeError(-300 /* RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH */, `Multiple components match node with tagname ${tNode.value}: ` + `${stringifyForError(first)} and ` + `${stringifyForError(second)}`);\n}\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nfunction throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {\n  const field = propName ? ` for '${propName}'` : '';\n  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;\n  if (creationMode) {\n    msg += ` It seems like the view has been created after its parent and its children have been dirty checked.` + ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(-100 /* RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED */, msg);\n}\nfunction constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix,\n    newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {\n    propName,\n    oldValue,\n    newValue\n  };\n}\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nfunction getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {\n      propName: metadata,\n      oldValue,\n      newValue\n    };\n  }\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && matches.length - 1 > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {\n    propName: undefined,\n    oldValue,\n    newValue\n  };\n}\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nfunction classIndexOf(className, classToSearch, startingIndex) {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* CharCode.SPACE */) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32 /* CharCode.SPACE */) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  // Indicates whether we are processing value from the implicit\n  // attribute section (i.e. before the first marker in the array).\n  let isImplicitAttrsSection = true;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (typeof item === 'string' && isImplicitAttrsSection) {\n      const value = attrs[i++];\n      if (isProjectionMode && item === 'class') {\n        // We found a `class` attribute in the implicit attribute section,\n        // check if it matches the value of the `cssClassToMatch` argument.\n        if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n          return true;\n        }\n      }\n    } else if (item === 1 /* AttributeMarker.Classes */) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    } else if (typeof item === 'number') {\n      // We've came across a first marker, which indicates\n      // that the implicit attribute section is over.\n      isImplicitAttrsSection = false;\n    }\n  }\n  return false;\n}\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nfunction isInlineTemplate(tNode) {\n  return tNode.type === 4 /* TNodeType.Container */ && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {\n  const tagNameToCompare = tNode.type === 4 /* TNodeType.Container */ && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nfunction isNodeMatchingSelector(tNode, selector, isProjectionMode) {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode = 4 /* SelectorFlags.ELEMENT */;\n  const nodeAttrs = tNode.attrs || [];\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = current | mode & 1 /* SelectorFlags.NOT */;\n      continue;\n    }\n    if (skipToNextSelector) continue;\n    if (mode & 4 /* SelectorFlags.ELEMENT */) {\n      mode = 2 /* SelectorFlags.ATTRIBUTE */ | mode & 1 /* SelectorFlags.NOT */;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & 8 /* SelectorFlags.CLASS */ ? current : selector[++i];\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if (mode & 8 /* SelectorFlags.CLASS */ && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n      const attrName = mode & 8 /* SelectorFlags.CLASS */ ? 'class' : current;\n      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* AttributeMarker.NamespaceURI */, 'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();\n        }\n        const compareAgainstClassName = mode & 8 /* SelectorFlags.CLASS */ ? nodeAttrValue : null;\n        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2 /* SelectorFlags.ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n  return isPositive(mode) || skipToNextSelector;\n}\nfunction isPositive(mode) {\n  return (mode & 1 /* SelectorFlags.NOT */) === 0;\n}\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {\n  if (attrs === null) return -1;\n  let i = 0;\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (maybeAttrName === 3 /* AttributeMarker.Bindings */ || maybeAttrName === 6 /* AttributeMarker.I18n */) {\n        bindingsMode = true;\n      } else if (maybeAttrName === 1 /* AttributeMarker.Classes */ || maybeAttrName === 2 /* AttributeMarker.Styles */) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === 4 /* AttributeMarker.Template */) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === 0 /* AttributeMarker.NamespaceURI */) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\nfunction isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction getProjectAsAttrValue(tNode) {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* AttributeMarker.ProjectAs */);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1];\n    }\n  }\n  return null;\n}\nfunction getNameOnlyMarkerIndex(nodeAttrs) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\nfunction matchTemplateAttribute(attrs, name) {\n  let i = attrs.indexOf(4 /* AttributeMarker.Template */);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nfunction isSelectorInSelectorList(selector, list) {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\nfunction maybeWrapInNotSelector(isNegativeMode, chunk) {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\nfunction stringifyCSSSelector(selector) {\n  let result = selector[0];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & 2 /* SelectorFlags.ATTRIBUTE */) {\n        const attrValue = selector[++i];\n        currentChunk += '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & 8 /* SelectorFlags.CLASS */) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & 4 /* SelectorFlags.ELEMENT */) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nfunction stringifyCSSSelectorList(selectorList) {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nfunction extractAttrsAndClassesFromSelector(selector) {\n  const attrs = [];\n  const classes = [];\n  let i = 1;\n  let mode = 2 /* SelectorFlags.ATTRIBUTE */;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === 2 /* SelectorFlags.ATTRIBUTE */) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i]);\n        }\n      } else if (mode === 8 /* SelectorFlags.CLASS */) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {\n    attrs,\n    classes\n  };\n}\n\n/** A special value which designates that a value has not changed. */\nconst NO_CHANGE = typeof ngDevMode === 'undefined' || ngDevMode ? {\n  __brand__: 'NO_CHANGE'\n} : {};\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nfunction ɵɵadvance(delta) {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\nfunction selectIndexInternal(tView, lView, index, checkNoChangesMode) {\n  ngDevMode && assertIndexInDeclRange(lView, index);\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, index);\n      }\n    }\n  }\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreDiEnv = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef\n};\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nfunction compileInjectable(type, meta) {\n  let ngInjectableDef = null;\n  let ngFactoryDef = null;\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      }\n    });\n  }\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler = getCompilerFacade({\n            usage: 0 /* JitCompilerUsage.Decorator */,\n            kind: 'injectable',\n            type\n          });\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\nconst USE_VALUE = getClosureSafeProperty({\n  provide: String,\n  useValue: getClosureSafeProperty\n});\nfunction isUseClassProvider(meta) {\n  return meta.useClass !== undefined;\n}\nfunction isUseValueProvider(meta) {\n  return USE_VALUE in meta;\n}\nfunction isUseFactoryProvider(meta) {\n  return meta.useFactory !== undefined;\n}\nfunction isUseExistingProvider(meta) {\n  return meta.useExisting !== undefined;\n}\nfunction getInjectableMetadata(type, srcMeta) {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta = srcMeta || {\n    providedIn: null\n  };\n  const compilerMeta = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (type, meta) => compileInjectable(type, meta));\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nfunction createInjector(defType, parent = null, additionalProviders = null, name) {\n  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nfunction createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = new Set()) {\n  const providers = [additionalProviders || EMPTY_ARRAY, importProvidersFrom(defType)];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nclass Injector {\n  static create(options, parent) {\n    if (Array.isArray(options)) {\n      return createInjector({\n        name: ''\n      }, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({\n        name\n      }, options.parent, options.providers, name);\n    }\n  }\n}\nInjector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\nInjector.NULL = /* @__PURE__ */new NullInjector();\n/** @nocollapse */\nInjector.ɵprov = ɵɵdefineInjectable({\n  token: Injector,\n  providedIn: 'any',\n  factory: () => ɵɵinject(INJECTOR)\n});\n/**\n * @internal\n * @nocollapse\n */\nInjector.__NG_ELEMENT_ID__ = -1 /* InjectorMarkers.Injector */;\n\nfunction findFirstClosedCycle(keys) {\n  const res = [];\n  for (let i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\nfunction constructResolvingPath(keys) {\n  if (keys.length > 1) {\n    const reversed = findFirstClosedCycle(keys.slice().reverse());\n    const tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n  return '';\n}\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n  const keys = [key];\n  const errMsg = constructResolvingMessage(keys);\n  const error = originalError ? wrappedError(errMsg, originalError) : Error(errMsg);\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  error[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\nfunction addKey(injector, key) {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nfunction noProviderError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nfunction cyclicDependencyError(injector, key) {\n  return injectionError(injector, key, function (keys) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nfunction instantiationError(injector, originalException, originalStack, key) {\n  return injectionError(injector, key, function (keys) {\n    const first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nfunction invalidProviderError(provider) {\n  return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nfunction noAnnotationError(typeOrFunc, params) {\n  const signature = [];\n  for (let i = 0, ii = params.length; i < ii; i++) {\n    const parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' + signature.join(', ') + '). ' + 'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' + stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nfunction outOfBoundsError(index) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nfunction mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nclass ReflectiveKey {\n  /**\n   * Private\n   */\n  constructor(token, id) {\n    this.token = token;\n    this.id = id;\n    if (!token) {\n      throw new RuntimeError(208 /* RuntimeErrorCode.MISSING_INJECTION_TOKEN */, ngDevMode && 'Token must be defined!');\n    }\n    this.displayName = stringify(this.token);\n  }\n  /**\n   * Retrieves a `Key` for a token.\n   */\n  static get(token) {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n  /**\n   * @returns the number of keys registered in the system.\n   */\n  static get numberOfKeys() {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n}\nclass KeyRegistry {\n  constructor() {\n    this._allKeys = new Map();\n  }\n  get(token) {\n    if (token instanceof ReflectiveKey) return token;\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token);\n    }\n    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n  get numberOfKeys() {\n    return this._allKeys.size;\n  }\n}\nconst _globalKeyRegistry = new KeyRegistry();\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nclass ReflectiveDependency {\n  constructor(key, optional, visibility) {\n    this.key = key;\n    this.optional = optional;\n    this.visibility = visibility;\n  }\n  static fromKey(key) {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\nconst _EMPTY_LIST = [];\nclass ResolvedReflectiveProvider_ {\n  constructor(key, resolvedFactories, multiProvider) {\n    this.key = key;\n    this.resolvedFactories = resolvedFactories;\n    this.multiProvider = multiProvider;\n    this.resolvedFactory = this.resolvedFactories[0];\n  }\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nclass ResolvedReflectiveFactory {\n  constructor(\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  factory,\n  /**\n   * Arguments (dependencies) to the `factory` function.\n   */\n  dependencies) {\n    this.factory = factory;\n    this.dependencies = dependencies;\n  }\n}\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider) {\n  let factoryFn;\n  let resolvedDeps;\n  if (provider.useClass) {\n    const useClass = resolveForwardRef(provider.useClass);\n    factoryFn = getReflect().factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = aliasInstance => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider) {\n  return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n */\nfunction resolveReflectiveProviders(providers) {\n  const normalized = _normalizeProviders(providers, []);\n  const resolved = normalized.map(resolveReflectiveProvider);\n  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nfunction mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n  for (let i = 0; i < providers.length; i++) {\n    const provider = providers[i];\n    const existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let resolvedProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\nfunction _normalizeProviders(providers, res) {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({\n        provide: b,\n        useClass: b\n      });\n    } else if (b && typeof b == 'object' && b.provide !== undefined) {\n      res.push(b);\n    } else if (Array.isArray(b)) {\n      _normalizeProviders(b, res);\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n  return res;\n}\nfunction constructDependencies(typeOrFunc, dependencies) {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const params = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\nfunction _dependenciesFor(typeOrFunc) {\n  const params = getReflect().parameters(typeOrFunc);\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\nfunction _extractToken(typeOrFunc, metadata, params) {\n  let token = null;\n  let optional = false;\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n  let visibility = null;\n  for (let i = 0; i < metadata.length; ++i) {\n    const paramMetadata = metadata[i];\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n  token = resolveForwardRef(token);\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\nfunction _createDependency(token, optional, visibility) {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n\n// Threshold for the dynamic version\nconst UNDEFINED = {};\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nclass ReflectiveInjector {\n  /**\n   * Turns an array of provider definitions into an array of resolved providers.\n   *\n   * A resolution is a process of flattening multiple nested arrays and converting individual\n   * providers into an array of `ResolvedReflectiveProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n   *\n   * expect(providers.length).toEqual(2);\n   *\n   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n   * expect(providers[0].key.displayName).toBe(\"Car\");\n   * expect(providers[0].dependencies.length).toEqual(1);\n   * expect(providers[0].factory).toBeDefined();\n   *\n   * expect(providers[1].key.displayName).toBe(\"Engine\");\n   * });\n   * ```\n   *\n   */\n  static resolve(providers) {\n    return resolveReflectiveProviders(providers);\n  }\n  /**\n   * Resolves an array of providers and creates an injector from those providers.\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static resolveAndCreate(providers, parent) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n  /**\n   * Creates an injector from previously resolved providers.\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, Engine]);\n   * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static fromResolvedProviders(providers, parent) {\n    return new ReflectiveInjector_(providers, parent);\n  }\n}\nclass ReflectiveInjector_ {\n  /**\n   * Private\n   */\n  constructor(_providers, _parent) {\n    /** @internal */\n    this._constructionCounter = 0;\n    this._providers = _providers;\n    this.parent = _parent || null;\n    const len = _providers.length;\n    this.keyIds = [];\n    this.objs = [];\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n  get(token, notFoundValue = THROW_IF_NOT_FOUND) {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n  resolveAndCreateChild(providers) {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n  createChildFromResolved(providers) {\n    const inj = new ReflectiveInjector_(providers);\n    inj.parent = this;\n    return inj;\n  }\n  resolveAndInstantiate(provider) {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n  instantiateResolved(provider) {\n    return this._instantiateProvider(provider);\n  }\n  getProviderAtIndex(index) {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n  /** @internal */\n  _new(provider) {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n  _getMaxNumberOfObjects() {\n    return this.objs.length;\n  }\n  _instantiateProvider(provider) {\n    if (provider.multiProvider) {\n      const res = [];\n      for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n  _instantiate(provider, ResolvedReflectiveFactory) {\n    const factory = ResolvedReflectiveFactory.factory;\n    let deps;\n    try {\n      deps = ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch (e) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n    let obj;\n    try {\n      obj = factory(...deps);\n    } catch (e) {\n      throw instantiationError(this, e, e.stack, provider.key);\n    }\n    return obj;\n  }\n  _getByReflectiveDependency(dep) {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n  _getByKey(key, visibility, notFoundValue) {\n    if (key === ReflectiveInjector_.INJECTOR_KEY) {\n      return this;\n    }\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n  _getObjByKeyId(keyId) {\n    for (let i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n        return this.objs[i];\n      }\n    }\n    return UNDEFINED;\n  }\n  /** @internal */\n  _throwOrNull(key, notFoundValue) {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n  /** @internal */\n  _getByKeySelf(key, notFoundValue) {\n    const obj = this._getObjByKeyId(key.id);\n    return obj !== UNDEFINED ? obj : this._throwOrNull(key, notFoundValue);\n  }\n  /** @internal */\n  _getByKeyDefault(key, notFoundValue, visibility) {\n    let inj;\n    if (visibility instanceof SkipSelf) {\n      inj = this.parent;\n    } else {\n      inj = this;\n    }\n    while (inj instanceof ReflectiveInjector_) {\n      const inj_ = inj;\n      const obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_.parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n  get displayName() {\n    const providers = _mapProviders(this, b => ' \"' + b.key.displayName + '\" ').join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n  toString() {\n    return this.displayName;\n  }\n}\nReflectiveInjector_.INJECTOR_KEY = /* @__PURE__ */ReflectiveKey.get(Injector);\nfunction _mapProviders(injector, fn) {\n  const res = [];\n  for (let i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n\nfunction ɵɵdirectiveInject(token, flags = InjectFlags.Default) {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);\n}\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nfunction ɵɵinvalidFactory() {\n  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nfunction processHostBindingOpCodes(tView, lView) {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i];\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i];\n        const hostBindingFn = hostBindingOpCodes[++i];\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(2 /* RenderFlags.Update */, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView, lView) {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx];\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode && assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries(2 /* RenderFlags.Update */, lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView, components) {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\nfunction createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector, embeddedViewInjector) {\n  const lView = tView.blueprint.slice();\n  lView[HOST] = host;\n  lView[FLAGS] = flags | 4 /* LViewFlags.CreationMode */ | 64 /* LViewFlags.Attached */ | 8 /* LViewFlags.FirstLViewPass */;\n  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 1024 /* LViewFlags.HasEmbeddedViewInjector */) {\n    lView[FLAGS] |= 1024 /* LViewFlags.HasEmbeddedViewInjector */;\n  }\n\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = rendererFactory || parentLView && parentLView[RENDERER_FACTORY];\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null;\n  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;\n  ngDevMode && assertEqual(tView.type == 2 /* TViewType.Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 /* TViewType.Embedded */ ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\nfunction getOrCreateTNode(tView, index, type, name, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index];\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= 32 /* TNodeFlags.isDetached */;\n    }\n  } else if (tNode.type & 64 /* TNodeType.Placeholder */) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode;\n}\nfunction createTNodeAtIndex(tView, index, type, name, attrs) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n  return tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nfunction allocExpando(tView, lView, numSlotsToAlloc, initialValue) {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n//////////////////////////\n//// Render\n//////////////////////////\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nfunction renderView(tView, lView, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(1 /* RenderFlags.Create */, viewQuery, context);\n    }\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 1 /* RenderFlags.Create */, context);\n    }\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, tView.viewQuery, context);\n    }\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~4 /* LViewFlags.CreationMode */;\n    leaveView();\n  }\n}\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nfunction refreshView(tView, lView, templateFn, context) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */) return;\n  enterView(lView);\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  try {\n    resetPreOrderHookFlags(lView);\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, 2 /* RenderFlags.Update */, context);\n    }\n    const hooksInitPhaseCompleted = (flags & 3 /* LViewFlags.InitPhaseStateMask */) === 3 /* InitPhaseState.InitPhaseCompleted */;\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, 0 /* InitPhaseState.OnInitHooksToBeRun */, null);\n        }\n        incrementInitPhaseFlags(lView, 0 /* InitPhaseState.OnInitHooksToBeRun */);\n      }\n    }\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView);\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(lView, contentHooks, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 1 /* InitPhaseState.AfterContentInitHooksToBeRun */);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    }\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn(2 /* RenderFlags.Update */, viewQuery, context);\n    }\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n        }\n\n        incrementInitPhaseFlags(lView, 2 /* InitPhaseState.AfterViewInitHooksToBeRun */);\n      }\n    }\n\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(32 /* LViewFlags.Dirty */ | 8 /* LViewFlags.FirstLViewPass */);\n    }\n\n    if (lView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n      lView[FLAGS] &= ~512 /* LViewFlags.RefreshTransplantedView */;\n      updateTransplantedViewCount(lView[PARENT], -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\nfunction executeTemplate(tView, lView, templateFn, rf, context) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & 2 /* RenderFlags.Update */;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n    const preHookType = isUpdatePhase ? 2 /* ProfilerEvent.TemplateUpdateStart */ : 0 /* ProfilerEvent.TemplateCreateStart */;\n    profiler(preHookType, context);\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n    const postHookType = isUpdatePhase ? 3 /* ProfilerEvent.TemplateUpdateEnd */ : 1 /* ProfilerEvent.TemplateCreateEnd */;\n    profiler(postHookType, context);\n  }\n}\n//////////////////////////\n//// Element\n//////////////////////////\nfunction executeContentQueries(tView, tNode, lView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex];\n      if (def.contentQueries) {\n        def.contentQueries(1 /* RenderFlags.Create */, lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n/**\n * Creates directive instances.\n */\nfunction createDirectivesInstances(tView, lView, tNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & 64 /* TNodeFlags.hasHostBindings */) === 64 /* TNodeFlags.hasHostBindings */) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1];\n      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nfunction getOrCreateComponentTView(def) {\n  const tView = def.tView;\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(1 /* TViewType.Component */, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n  return tView;\n}\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nfunction createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory) {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n  const blueprint = [];\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n  return blueprint;\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nfunction locateHostElement(renderer, elementOrSelector, encapsulation) {\n  // When using native Shadow DOM, do not clear host element to allow native slot projection\n  const preserveContent = encapsulation === ViewEncapsulation$1.ShadowDom;\n  return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nfunction storeCleanupWithContext(tView, lView, context, cleanupFn) {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\nfunction createTNode(tView, tParent, type, index, value, attrs) {\n  ngDevMode && index !== 0 &&\n  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n  // `view_engine_compatibility` for additional context.\n  assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags: 0,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: null,\n    outputs: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0,\n    styleBindings: 0\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {\n  for (let publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      propertyAliases = propertyAliases === null ? {} : propertyAliases;\n      const internalName = aliasMap[publicName];\n      // If there are no host directive mappings, we want to remap using the alias map from the\n      // definition itself. If there is an alias map, it has two functions:\n      // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n      // ones inside the host directive map will be exposed on the host.\n      // 2. The public name of the property is aliased using the host directive alias map, rather\n      // than the alias map from the definition.\n      if (hostDirectiveAliasMap === null) {\n        addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n      } else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n        addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n      }\n    }\n  }\n  return propertyAliases;\n}\nfunction addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {\n  if (propertyAliases.hasOwnProperty(publicName)) {\n    propertyAliases[publicName].push(directiveIndex, internalName);\n  } else {\n    propertyAliases[publicName] = [directiveIndex, internalName];\n  }\n}\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs = [];\n  let inputsStore = null;\n  let outputsStore = null;\n  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n    const directiveDef = tViewData[directiveIndex];\n    const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n    const aliasedInputs = aliasData ? aliasData.inputs : null;\n    const aliasedOutputs = aliasData ? aliasData.outputs : null;\n    inputsStore = generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n    outputsStore = generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;\n    inputsFromAttrs.push(initialInputs);\n  }\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= 8 /* TNodeFlags.hasClassInput */;\n    }\n\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= 16 /* TNodeFlags.hasStyleInput */;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name) {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\nfunction elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView);\n  let inputData = tNode.inputs;\n  let dataValue;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & 3 /* TNodeType.AnyRNode */) {\n    propName = mapPropName(propName);\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? sanitizer(value, tNode.value || '', propName) : value;\n    renderer.setProperty(element, propName, value);\n  } else if (tNode.type & 12 /* TNodeType.AnyContainer */) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & 16 /* LViewFlags.CheckAlways */)) {\n    childComponentLView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n  }\n}\n\nfunction setNgReflectProperty(lView, element, type, attrName, value) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & 3 /* TNodeType.AnyRNode */) {\n    if (value == null) {\n      renderer.removeAttribute(element, attrName);\n    } else {\n      renderer.setAttribute(element, attrName, debugValue);\n    }\n  } else {\n    const textContent = escapeCommentText(`bindings=${JSON.stringify({\n      [attrName]: debugValue\n    }, null, 2)}`);\n    renderer.setValue(element, textContent);\n  }\n}\nfunction setNgReflectProperties(lView, element, type, dataValue, value) {\n  if (type & (3 /* TNodeType.AnyRNode */ | 4 /* TNodeType.Container */)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);\n    }\n  }\n}\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(tView, lView, tNode, localRefs) {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n  if (getBindingsEnabled()) {\n    const exportsMap = localRefs === null ? null : {\n      '': -1\n    };\n    const matchResult = findDirectiveDefMatches(tView, tNode);\n    let directiveDefs;\n    let hostDirectiveDefs;\n    if (matchResult === null) {\n      directiveDefs = hostDirectiveDefs = null;\n    } else {\n      [directiveDefs, hostDirectiveDefs] = matchResult;\n    }\n    if (directiveDefs !== null) {\n      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nfunction initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {\n  ngDevMode && assertFirstCreatePass(tView);\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directives.length; i++) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n  }\n  initTNodeFlags(tNode, tView.data.length, directives.length);\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directives.length, null);\n  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, 'TNode.directiveStart should point to just allocated space');\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n    if (def.contentQueries !== null) tNode.flags |= 4 /* TNodeFlags.hasContentQuery */;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0) tNode.flags |= 64 /* TNodeFlags.hasHostBindings */;\n    const lifeCycleHooks = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ?? (tView.preOrderHooks = [])).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ?? (tView.preOrderCheckHooks = [])).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n    directiveIdx++;\n  }\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nfunction registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {\n  ngDevMode && assertFirstCreatePass(tView);\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [];\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes) {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView, lView, tNode, native) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n    addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);\n  }\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n  attachPatchData(native, lView);\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i];\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);\n    }\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\nfunction invokeDirectivesHostBindings(tView, lView, tNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex];\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nfunction invokeHostBindingsInCreationMode(def, directive) {\n  if (def.hostBindings !== null) {\n    def.hostBindings(1 /* RenderFlags.Create */, directive);\n  }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(tView, tNode) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  const registry = tView.directiveRegistry;\n  let matches = null;\n  let hostDirectiveDefs = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i];\n      if (isNodeMatchingSelectorList(tNode, def.selectors, /* isProjectionMode */false)) {\n        matches || (matches = []);\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(tNode, 2 /* TNodeType.Element */, `\"${tNode.value}\" tags cannot be used as component hosts. ` + `Please use a different tag to activate the ${stringify(def.type)} component.`);\n            if (isComponentHost(tNode)) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);\n            }\n          }\n          // Components are inserted at the front of the matches array so that their lifecycle\n          // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n          // compatibility. This logic doesn't make sense with host directives, because it\n          // would allow the host directives to undo any overrides the host may have made.\n          // To handle this case, the host directives of components are inserted at the beginning\n          // of the array, followed by the component. As such, the insertion order is as follows:\n          // 1. Host directives belonging to the selector-matched component.\n          // 2. Selector-matched component.\n          // 3. Host directives belonging to selector-matched directives.\n          // 4. Selector-matched directives.\n          if (def.findHostDirectiveDefs !== null) {\n            const hostDirectiveMatches = [];\n            hostDirectiveDefs = hostDirectiveDefs || new Map();\n            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n            // Add all host directives declared on this component, followed by the component itself.\n            // Host directives should execute first so the host has a chance to override changes\n            // to the DOM made by them.\n            matches.unshift(...hostDirectiveMatches, def);\n            // Component is offset starting from the beginning of the host directives array.\n            const componentOffset = hostDirectiveMatches.length;\n            markAsComponentHost(tView, tNode, componentOffset);\n          } else {\n            // No host directives on this component, just add the\n            // component def to the beginning of the matches.\n            matches.unshift(def);\n            markAsComponentHost(tView, tNode, 0);\n          }\n        } else {\n          // Append any host directives to the matches first.\n          hostDirectiveDefs = hostDirectiveDefs || new Map();\n          def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches === null ? null : [matches, hostDirectiveDefs];\n}\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nfunction markAsComponentHost(tView, hostTNode, componentOffset) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ?? (tView.components = [])).push(hostTNode.index);\n}\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n  if (localRefs) {\n    const localNames = tNode.localNames = [];\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new RuntimeError(-301 /* RuntimeErrorCode.EXPORT_NOT_FOUND */, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(directiveIdx, def, exportsMap) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nfunction initTNodeFlags(tNode, index, numberOfDirectives) {\n  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');\n  tNode.flags |= 1 /* TNodeFlags.isDirectiveHost */;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nfunction configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {\n  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\nfunction addComponentLogic(lView, hostTNode, def) {\n  const native = getNativeByTNode(hostTNode, lView);\n  const tView = getOrCreateComponentTView(def);\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, native, hostTNode, rendererFactory, rendererFactory.createRenderer(native, def), null, null, null));\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\nfunction elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(tNode, 2 /* TNodeType.Element */, `Attempted to set attribute \\`${name}\\` on a container node. ` + `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView);\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\nfunction setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n    renderer.setAttribute(element, name, strValue, namespace);\n  }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {\n  const initialInputs = initialInputData[directiveIndex];\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      if (setInput !== null) {\n        def.setInput(instance, value, publicName, privateName);\n      } else {\n        instance[privateName] = value;\n      }\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView);\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(inputs, directiveIndex, attrs) {\n  let inputsToStore = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === 0 /* AttributeMarker.NamespaceURI */) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === 5 /* AttributeMarker.ProjectAs */) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n    if (inputs.hasOwnProperty(attrName)) {\n      if (inputsToStore === null) inputsToStore = [];\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName];\n      for (let j = 0; j < inputConfig.length; j += 2) {\n        if (inputConfig[j] === directiveIndex) {\n          inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    }\n    i += 2;\n  }\n  return inputsToStore;\n}\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nfunction createLContainer(hostNative, currentView, native, tNode) {\n  ngDevMode && assertLView(currentView);\n  const lContainer = [hostNative, true, false, currentView, null, 0, tNode, native, null, null // moved views\n  ];\n\n  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, 'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n      }\n    }\n  }\n}\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n    const movedViews = lContainer[MOVED_VIEWS];\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i];\n      const insertionLContainer = movedLView[PARENT];\n      ngDevMode && assertLContainer(insertionLContainer);\n      // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n      if ((movedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      }\n      // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n      movedLView[FLAGS] |= 512 /* LViewFlags.RefreshTransplantedView */;\n    }\n  }\n}\n/////////////\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n    if (componentView[FLAGS] & (16 /* LViewFlags.CheckAlways */ | 32 /* LViewFlags.Dirty */)) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        if (embeddedLView[FLAGS] & 512 /* LViewFlags.RefreshTransplantedView */) {\n          const embeddedTView = embeddedLView[TVIEW];\n          ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n          refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]);\n        } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n          refreshContainsDirtyView(embeddedLView);\n        }\n      }\n    }\n  }\n  const tView = lView[TVIEW];\n  // Refresh child component views.\n  const components = tView.components;\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView);\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      if (viewAttachedToChangeDetector(componentView) && componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\nfunction renderComponent(hostLView, componentHostIdx) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView, lView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nfunction addToViewTree(lView, lViewOrLContainer) {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nfunction markViewDirty(lView) {\n  while (lView) {\n    lView[FLAGS] |= 32 /* LViewFlags.Dirty */;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent;\n  }\n  return null;\n}\nfunction detectChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n  if (!checkNoChangesMode && rendererFactory.begin) rendererFactory.begin();\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n    throw error;\n  } finally {\n    if (!checkNoChangesMode && rendererFactory.end) rendererFactory.end();\n  }\n}\nfunction checkNoChangesInternal(tView, lView, context, notifyErrorHandler = true) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(tView, lView, context, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\nfunction executeViewQueryFn(flags, viewQueryFn, component) {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n}\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nfunction storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\nfunction getOrCreateLViewCleanup(view) {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\nfunction getOrCreateTViewCleanup(tView) {\n  return tView.cleanup || (tView.cleanup = []);\n}\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nfunction loadComponentRenderer(currentDef, tNode, lView) {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index]);\n  }\n  return lView[RENDERER];\n}\n/** Handles an error thrown in an LView. */\nfunction handleError(lView, error) {\n  const injector = lView[INJECTOR$1];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nfunction setInputsForProperty(tView, lView, inputs, publicName, value) {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++];\n    const privateName = inputs[i++];\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index];\n    if (def.setInput !== null) {\n      def.setInput(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n/**\n * Updates a text binding at a given index in a given LView.\n */\nfunction textBindingInternal(lView, index, value) {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView);\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nfunction computeStaticStyling(tNode, attrs, writeToHost) {\n  ngDevMode && assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles = writeToHost ? tNode.styles : null;\n  let classes = writeToHost ? tNode.classes : null;\n  let mode = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == 1 /* AttributeMarker.Classes */) {\n        classes = concatStringsWithSpace(classes, value);\n      } else if (mode == 2 /* AttributeMarker.Styles */) {\n        const style = value;\n        const styleValue = attrs[++i];\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\nfunction collectNativeNodes(tView, lView, tNode, result, isProjection = false) {\n  while (tNode !== null) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 16 /* TNodeType.Projection */ | 32 /* TNodeType.Icu */);\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n    const tNodeType = tNode.type;\n    if (tNodeType & 8 /* TNodeType.ElementContainer */) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & 32 /* TNodeType.Icu */) {\n      const nextRNode = icuContainerIterate(tNode, lView);\n      let rNode;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & 16 /* TNodeType.Projection */) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n  return result;\n}\nclass ViewRef$1 {\n  get rootNodes() {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n  constructor(\n  /**\n   * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n   *\n   * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n   * component.\n   *\n   * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n   * view.\n   *\n   * @internal\n   */\n  _lView,\n  /**\n   * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n   * requested.\n   *\n   * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n   */\n  _cdRefInjectingView) {\n    this._lView = _lView;\n    this._cdRefInjectingView = _cdRefInjectingView;\n    this._appRef = null;\n    this._attachedToViewContainer = false;\n  }\n  get context() {\n    return this._lView[CONTEXT];\n  }\n  set context(value) {\n    this._lView[CONTEXT] = value;\n  }\n  get destroyed() {\n    return (this._lView[FLAGS] & 128 /* LViewFlags.Destroyed */) === 128 /* LViewFlags.Destroyed */;\n  }\n\n  destroy() {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS];\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, 'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n  onDestroy(callback) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck() {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach() {\n    this._lView[FLAGS] &= ~64 /* LViewFlags.Attached */;\n  }\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach() {\n    this._lView[FLAGS] |= 64 /* LViewFlags.Attached */;\n  }\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges() {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context);\n  }\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges() {\n    if (ngDevMode) {\n      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context);\n    }\n  }\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n  attachToAppRef(appRef) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(902 /* RuntimeErrorCode.VIEW_ALREADY_ATTACHED */, ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n}\n/** @internal */\nclass RootViewRef extends ViewRef$1 {\n  constructor(_view) {\n    super(_view);\n    this._view = _view;\n  }\n  detectChanges() {\n    const lView = this._view;\n    const tView = lView[TVIEW];\n    const context = lView[CONTEXT];\n    detectChangesInternal(tView, lView, context, false);\n  }\n  checkNoChanges() {\n    if (ngDevMode) {\n      const lView = this._view;\n      const tView = lView[TVIEW];\n      const context = lView[CONTEXT];\n      checkNoChangesInternal(tView, lView, context, false);\n    }\n  }\n  get context() {\n    return null;\n  }\n}\nclass ComponentFactoryResolver extends ComponentFactoryResolver$1 {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(ngModule) {\n    super();\n    this.ngModule = ngModule;\n  }\n  resolveComponentFactory(component) {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component);\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\nfunction toRefArray(map) {\n  const array = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({\n        propName: minified,\n        templateName: nonMinified\n      });\n    }\n  }\n  return array;\n}\nfunction getNamespace(elementName) {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : name === 'math' ? MATH_ML_NAMESPACE : null;\n}\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector {\n  constructor(injector, parentInjector) {\n    this.injector = injector;\n    this.parentInjector = parentInjector;\n  }\n  get(token, notFoundValue, flags) {\n    flags = convertToBitFlags(flags);\n    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value;\n    }\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n}\n/**\n * ComponentFactory interface implementation.\n */\nclass ComponentFactory extends ComponentFactory$1 {\n  get inputs() {\n    return toRefArray(this.componentDef.inputs);\n  }\n  get outputs() {\n    return toRefArray(this.componentDef.outputs);\n  }\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(componentDef, ngModule) {\n    super();\n    this.componentDef = componentDef;\n    this.ngModule = ngModule;\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {\n    environmentInjector = environmentInjector || this.ngModule;\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;\n    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;\n    }\n    const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n    const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n    if (rendererFactory === null) {\n      throw new RuntimeError(407 /* RuntimeErrorCode.RENDERER_NOT_FOUND */, ngDevMode && 'Angular was not able to inject a renderer (RendererFactory2). ' + 'Likely this is due to a broken DI hierarchy. ' + 'Make sure that any injector used to create this component has a correct parent.');\n    }\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] || 'div';\n    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) : createElementNode(hostRenderer, elementName, getNamespace(elementName));\n    const rootFlags = this.componentDef.onPush ? 32 /* LViewFlags.Dirty */ | 256 /* LViewFlags.IsRoot */ : 16 /* LViewFlags.CheckAlways */ | 256 /* LViewFlags.IsRoot */;\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(0 /* TViewType.Root */, null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector, null);\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n    let component;\n    let tElementNode;\n    try {\n      const rootComponentDef = this.componentDef;\n      let rootDirectives;\n      let hostDirectiveDefs = null;\n      if (rootComponentDef.findHostDirectiveDefs) {\n        rootDirectives = [];\n        hostDirectiveDefs = new Map();\n        rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n        rootDirectives.push(rootComponentDef);\n      } else {\n        rootDirectives = [rootComponentDef];\n      }\n      const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n      const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, rendererFactory, hostRenderer);\n      tElementNode = getTNode(rootTView, HEADER_OFFSET);\n      // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n      // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n      // that this check can be removed.\n      if (hostRNode) {\n        setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n      }\n      if (projectableNodes !== undefined) {\n        projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n      }\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);\n  }\n}\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nclass ComponentRef extends ComponentRef$1 {\n  constructor(componentType, instance, location, _rootLView, _tNode) {\n    super();\n    this.location = location;\n    this._rootLView = _rootLView;\n    this._tNode = _tNode;\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);\n    this.componentType = componentType;\n  }\n  setInput(name, value) {\n    const inputData = this._tNode.inputs;\n    let dataValue;\n    if (inputData !== null && (dataValue = inputData[name])) {\n      const lView = this._rootLView;\n      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n      markViewDirty(childComponentLView);\n    } else {\n      if (ngDevMode) {\n        const cmpNameForError = stringifyForError(this.componentType);\n        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n        reportUnknownPropertyError(message);\n      }\n    }\n  }\n  get injector() {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n  destroy() {\n    this.hostView.destroy();\n  }\n  onDestroy(callback) {\n    this.hostView.onDestroy(callback);\n  }\n}\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nconst NULL_INJECTOR = {\n  get: (token, notFoundValue) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView, rNode) {\n  const tView = lView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, index);\n  lView[index] = rNode;\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  return getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, '#host', null);\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(tNode, rNode, rootComponentDef, rootDirectives, rootView, rendererFactory, hostRenderer, sanitizer) {\n  const tView = rootView[TVIEW];\n  applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer);\n  const viewRenderer = rendererFactory.createRenderer(rNode, rootComponentDef);\n  const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, rootComponentDef.onPush ? 32 /* LViewFlags.Dirty */ : 16 /* LViewFlags.CheckAlways */, rootView[tNode.index], tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n  if (tView.firstCreatePass) {\n    markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n  }\n  addToViewTree(rootView, componentView);\n  // Store component view at node index, with node as the HOST\n  return rootView[tNode.index] = componentView;\n}\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {\n  for (const def of rootDirectives) {\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n    if (rNode !== null) {\n      setupStaticAttributes(hostRenderer, rNode, tNode);\n    }\n  }\n}\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {\n  const rootTNode = getCurrentTNode();\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  const tView = rootLView[TVIEW];\n  const native = getNativeByTNode(rootTNode, rootLView);\n  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n  for (let i = 0; i < rootDirectives.length; i++) {\n    const directiveIndex = rootTNode.directiveStart + i;\n    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n    attachPatchData(directiveInstance, rootLView);\n  }\n  invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n  if (native) {\n    attachPatchData(native, rootLView);\n  }\n  // We're guaranteed for the `componentOffset` to be positive here\n  // since a root component always matches a component def.\n  ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n  const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n  componentView[CONTEXT] = rootLView[CONTEXT] = component;\n  if (hostFeatures !== null) {\n    for (const feature of hostFeatures) {\n      feature(component, rootComponentDef);\n    }\n  }\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  executeContentQueries(tView, rootTNode, componentView);\n  return component;\n}\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {\n  if (rootSelectorOrNode) {\n    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n  } else {\n    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n    // is not defined), also apply attributes and classes extracted from component selector.\n    // Extract attributes and classes from the first selector only to match VE behavior.\n    const {\n      attrs,\n      classes\n    } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n    if (attrs) {\n      setUpAttributes(hostRenderer, hostRNode, attrs);\n    }\n    if (classes && classes.length > 0) {\n      writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n    }\n  }\n}\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(tNode, ngContentSelectors, projectableNodes) {\n  const projection = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n  }\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nfunction LifecycleHooksFeature() {\n  const tNode = getCurrentTNode();\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\nfunction getSuperType(type) {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nfunction ɵɵInheritDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain = [definition];\n  while (superType) {\n    let superDef = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(903 /* RuntimeErrorCode.INVALID_INHERITANCE */, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = definition.data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            feature(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain) {\n  let hostVars = 0;\n  let hostAttrs = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = hostVars += def.hostVars;\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\nfunction maybeUnwrapEmpty(value) {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\nfunction inheritViewQuery(definition, superViewQuery) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\nfunction inheritContentQueries(definition, superContentQueries) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\nfunction inheritHostBindings(definition, superHostBindings) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf, ctx) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS = [\n// The child class should use the providers of its parent.\n'providersResolver'\n// Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n// as inputs, outputs, and host binding functions.\n];\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS = [\n// The child class should use the template function of its parent, including all template\n// semantics.\n'template', 'decls', 'consts', 'vars', 'onPush', 'ngContentSelectors',\n// The child class should use the CSS styles of its parent, including all styling semantics.\n'styles', 'encapsulation',\n// The child class should be checked by the runtime in the same way as its parent.\n'schemas'];\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nfunction ɵɵCopyDefinitionFeature(definition) {\n  let superType = getSuperType(definition.type);\n  let superDef = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir;\n  }\n  // Needed because `definition` fields are readonly.\n  const defAny = definition;\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nfunction ɵɵHostDirectivesFeature(rawHostDirectives) {\n  return definition => {\n    definition.findHostDirectiveDefs = findHostDirectiveDefs;\n    definition.hostDirectives = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n      return typeof dir === 'function' ? {\n        directive: resolveForwardRef(dir),\n        inputs: EMPTY_OBJ,\n        outputs: EMPTY_OBJ\n      } : {\n        directive: resolveForwardRef(dir.directive),\n        inputs: bindingArrayToMap(dir.inputs),\n        outputs: bindingArrayToMap(dir.outputs)\n      };\n    });\n  };\n}\nfunction findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {\n  if (currentDef.hostDirectives !== null) {\n    for (const hostDirectiveConfig of currentDef.hostDirectives) {\n      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        validateHostDirective(hostDirectiveConfig, hostDirectiveDef, matchedDefs);\n      }\n      // We need to patch the `declaredInputs` so that\n      // `ngOnChanges` can map the properties correctly.\n      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n      // Host directives execute before the host so that its host bindings can be overwritten.\n      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n      matchedDefs.push(hostDirectiveDef);\n    }\n  }\n}\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings) {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n  const result = {};\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n  return result;\n}\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(declaredInputs, exposedInputs) {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);\n      }\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n * @param matchedDefs Directives that have been matched so far.\n */\nfunction validateHostDirective(hostDirectiveConfig, directiveDef, matchedDefs) {\n  const type = hostDirectiveConfig.directive;\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(310 /* RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT */, `Host directive ${type.name} cannot be a component.`);\n    }\n    throw new RuntimeError(307 /* RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE */, `Could not resolve metadata for host directive ${type.name}. ` + `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(308 /* RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE */, `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n  if (matchedDefs.indexOf(directiveDef) > -1) {\n    throw new RuntimeError(309 /* RuntimeErrorCode.DUPLICATE_DIRECTITVE */, `Directive ${directiveDef.type.name} matches multiple times on the same element. ` + `Directives can only match an element once.`);\n  }\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(bindingType, def, hostDirectiveBindings) {\n  const className = def.type.name;\n  const bindings = bindingType === 'input' ? def.inputs : def.outputs;\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(311 /* RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING */, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);\n      }\n      const remappedPublicName = hostDirectiveBindings[publicName];\n      if (bindings.hasOwnProperty(remappedPublicName) && bindings[remappedPublicName] !== publicName) {\n        throw new RuntimeError(312 /* RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS */, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);\n      }\n    }\n  }\n}\nfunction isIterable(obj) {\n  return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\nfunction isListLikeIterable(obj) {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) || !(obj instanceof Map) &&\n  // JS Map are iterables but return entries as [k, v]\n  Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop\n}\n\nfunction areIterablesEqual(a, b, comparator) {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\nfunction iterateListLike(obj, fn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item;\n    while (!(item = iterator.next()).done) {\n      fn(item.value);\n    }\n  }\n}\nfunction isJsObject(o) {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\nfunction devModeEqual(a, b) {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nfunction updateBinding(lView, bindingIndex, value) {\n  return lView[bindingIndex] = value;\n}\n/** Gets the current binding value. */\nfunction getBinding(lView, bindingIndex) {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nfunction bindingUpdated(lView, bindingIndex, value) {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nfunction bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nfunction bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nfunction ɵɵattribute(name, value, sanitizer, namespace) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nfunction interpolationV(lView, values) {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n  return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nfunction interpolation1(lView, prefix, v0, suffix) {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nfunction interpolation2(lView, prefix, v0, i0, v1, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nfunction interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n */\nfunction interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nfunction interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nfunction interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nfunction interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nfunction interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵattributeInterpolate1;\n}\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵattributeInterpolate2;\n}\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵattributeInterpolate3;\n}\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵattributeInterpolate4;\n}\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵattributeInterpolate5;\n}\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵattributeInterpolate6;\n}\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵattributeInterpolate7;\n}\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵattributeInterpolate8;\n}\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵattributeInterpolateV;\n}\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nfunction detectChanges(component) {\n  const view = getComponentViewByInstance(component);\n  detectChangesInternal(view[TVIEW], view, component);\n}\nfunction templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(tView, index, 4 /* TNodeType.Container */, tagName || null, getConstant(tViewConsts, attrsIndex));\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n  const embeddedTView = tNode.tView = createTView(2 /* TViewType.Embedded */, tNode, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n  return tNode;\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, false);\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n\n/** Store a value in the `data` at a given `index`. */\nfunction store(tView, lView, index, value) {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nfunction ɵɵreference(index) {\n  const contextLView = getContextLView();\n  return load(contextLView, HEADER_OFFSET + index);\n}\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵproperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nfunction setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {\n  const inputs = tNode.inputs;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\nfunction elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 2 /* TNodeType.Element */, name, attrs);\n  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nfunction ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace$1());\n  const hasDirectives = isDirectiveHost(tNode);\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n  if ((tNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementEnd() {\n  let currentTNode = getCurrentTNode();\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */);\n  decreaseElementDepthCount();\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelement(index, name, attrsIndex, localRefsIndex) {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\nfunction elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  const attrs = getConstant(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, 8 /* TNodeType.ElementContainer */, 'ng-container', attrs);\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n  const localRefs = getConstant(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n  return tNode;\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');\n  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];\n  setCurrentTNode(tNode, true);\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = lView[adjustedIndex] = lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n  appendChild(tView, lView, native, tNode);\n  attachPatchData(native, lView);\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementContainerStart;\n}\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainerEnd() {\n  let currentTNode = getCurrentTNode();\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent;\n    setCurrentTNode(currentTNode, false);\n  }\n  ngDevMode && assertTNodeType(currentTNode, 8 /* TNodeType.ElementContainer */);\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nfunction ɵɵelementContainer(index, attrsIndex, localRefsIndex) {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nfunction ɵɵgetCurrentView() {\n  return getLView();\n}\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nfunction isPromise(obj) {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is a Subscribable\n */\nfunction isSubscribable(obj) {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nconst isObservable = isSubscribable;\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵlistener(eventName, listenerFn, useCapture, eventTargetResolver) {\n  const lView = getLView();\n  const tView = getTView();\n  const tNode = getCurrentTNode();\n  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostListener(eventName, listenerFn) {\n  const tNode = getCurrentTNode();\n  const lView = getLView();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(tView, lView, eventName, tNodeIdx) {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP];\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\nfunction listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT];\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n  let processOutputs = true;\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if (tNode.type & 3 /* TNodeType.AnyRNode */ || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView);\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ? _lView => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n    let existingListener = null;\n    // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      existingListener.__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n      const cleanupFn = renderer.listen(target, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n  }\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i];\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);\n        }\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\nfunction executeListenerWithErrorHandling(lView, context, listenerFn, e) {\n  try {\n    profiler(6 /* ProfilerEvent.OutputStart */, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(7 /* ProfilerEvent.OutputEnd */, context, listenerFn);\n  }\n}\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(tNode, lView, context, listenerFn, wrapWithPreventDefault) {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView);\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = nextListenerFn.__ngNextListenerFn__;\n    }\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n    return result;\n  };\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nfunction ɵɵnextContext(level = 1) {\n  return nextContextImpl(level);\n}\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nfunction matchingProjectionSlotIndex(tNode, projectionSlots) {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */true) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i; // first matching selector \"captures\" a given node\n    }\n  }\n\n  return wildcardNgContentIndex;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nfunction ɵɵprojectionDef(projectionSlots) {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);\n    const tails = projectionHeads.slice();\n    let componentChild = componentNode.child;\n    while (componentChild !== null) {\n      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex].projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n      componentChild = componentChild.next;\n    }\n  }\n}\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nfunction ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16 /* TNodeType.Projection */, null, attrs || null);\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n  if ((tProjectionNode.flags & 32 /* TNodeFlags.isDetached */) !== 32 /* TNodeFlags.isDetached */) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate(propName, v0, sanitizer) {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵpropertyInterpolateV(propName, values, sanitizer) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]]; // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\nfunction toTStylingRange(prev, next) {\n  ngDevMode && assertNumberInRange(prev, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return prev << 17 /* StylingRange.PREV_SHIFT */ | next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangePrev(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange >> 17 /* StylingRange.PREV_SHIFT */ & 32767 /* StylingRange.UNSIGNED_MASK */;\n}\n\nfunction getTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 2 /* StylingRange.PREV_DUPLICATE */) == 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction setTStylingRangePrev(tStylingRange, previous) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~4294836224 /* StylingRange.PREV_MASK */ | previous << 17 /* StylingRange.PREV_SHIFT */;\n}\n\nfunction setTStylingRangePrevDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 2 /* StylingRange.PREV_DUPLICATE */;\n}\n\nfunction getTStylingRangeNext(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 131068 /* StylingRange.NEXT_MASK */) >> 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction setTStylingRangeNext(tStylingRange, next) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, 32767 /* StylingRange.UNSIGNED_MASK */);\n  return tStylingRange & ~131068 /* StylingRange.NEXT_MASK */ |\n  //\n  next << 2 /* StylingRange.NEXT_SHIFT */;\n}\n\nfunction getTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return (tStylingRange & 1 /* StylingRange.NEXT_DUPLICATE */) === 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction setTStylingRangeNextDuplicate(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return tStylingRange | 1 /* StylingRange.NEXT_DUPLICATE */;\n}\n\nfunction getTStylingRangeTail(tStylingRange) {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__;\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic;\n    tStylingKey = staticKeyValueArray[1]; // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);\n    }\n    tmplTail = index;\n  }\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);\n  }\n}\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {\n  const tStylingAtIndex = tData[index + 1];\n  const isMap = tStylingKey === null;\n  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor];\n    const tStyleRangeAtCursor = tData[cursor + 1];\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor, tStylingKey) {\n  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (tStylingKeyCursor === null ||\n  // If the cursor is `null` it means that we have map at that\n  // location so we must assume that we have a match.\n  tStylingKey == null ||\n  // If `tStylingKey` is `null` then it is a map therefor assume that it\n  // contains a match.\n  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0; // see if we are matching the key\n  }\n\n  return false;\n}\n\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0\n};\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedKey(text) {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nfunction getLastParsedValue(text) {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassName(text) {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nfunction parseClassNameNext(text, index) {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyle(text) {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nfunction parseStyleNext(text, startIndex) {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, 58 /* CharCode.COLON */);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, 59 /* CharCode.SEMI_COLON */);\n}\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nfunction resetParserState(text) {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nfunction consumeWhitespace(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nfunction consumeClassToken(text, startIndex, endIndex) {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* CharCode.SPACE */) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nfunction consumeStyleKey(text, startIndex, endIndex) {\n  let ch;\n  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 /* CharCode.DASH */ || ch === 95 /* CharCode.UNDERSCORE */ || (ch & -33 /* CharCode.UPPER_CASE */) >= 65 /* CharCode.A */ && (ch & -33 /* CharCode.UPPER_CASE */) <= 90 /* CharCode.Z */ || ch >= 48 /* CharCode.ZERO */ && ch <= 57 /* CharCode.NINE */)) {\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nfunction consumeSeparator(text, startIndex, endIndex, separator) {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nfunction consumeStyleValue(text, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let ch2 = -1; // 2nd previous character\n  let ch3 = -1; // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch = text.charCodeAt(i++);\n    if (ch === 59 /* CharCode.SEMI_COLON */) {\n      return lastChIndex;\n    } else if (ch === 34 /* CharCode.DOUBLE_QUOTE */ || ch === 39 /* CharCode.SINGLE_QUOTE */) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (startIndex === i - 4 &&\n    // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n    ch3 === 85 /* CharCode.U */ && ch2 === 82 /* CharCode.R */ && ch1 === 76 /* CharCode.L */ && ch === 40 /* CharCode.OPEN_PAREN */) {\n      lastChIndex = i = consumeQuotedText(text, 41 /* CharCode.CLOSE_PAREN */, i, endIndex);\n    } else if (ch > 32 /* CharCode.SPACE */) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & -33 /* CharCode.UPPER_CASE */;\n  }\n\n  return lastChIndex;\n}\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nfunction consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {\n  let ch1 = -1; // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== 92 /* CharCode.BACK_SLASH */) {\n      return index;\n    }\n    if (ch == 92 /* CharCode.BACK_SLASH */ && ch1 === 92 /* CharCode.BACK_SLASH */) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();\n}\nfunction malformedStyleError(text, expecting, index) {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' + text.substring(index, index + 1) + '<<]' + text.slice(index + 1) + `'. Expecting '${expecting}'.`);\n}\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleProp(prop, value, suffix) {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nfunction ɵɵclassProp(className, value) {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nfunction ɵɵstyleMap(styles) {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction styleStringParser(keyValueArray, text) {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nfunction ɵɵclassMap(classes) {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nfunction classStringParser(keyValueArray, text) {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingProperty(prop, value, suffix, isClassBased) {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()];\n    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()];\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);\n    }\n  }\n}\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView, bindingIndex) {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()];\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);\n          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;\n  }\n  return stylingKey;\n}\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData, tNode, isClassBased) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)];\n}\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData, tNode, isClassBased) {\n  let residual = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = tData[i].hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);\n}\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast];\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {\n  const desiredMarker = isClassBased ? 1 /* AttributeMarker.Classes */ : 2 /* AttributeMarker.Styles */;\n  let currentMarker = -1 /* AttributeMarker.ImplicitAttributes */;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i];\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey];\n          }\n          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nfunction toStylingKeyValueArray(keyValueArraySet, stringParser, value) {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY;\n  const styleKeyValueArray = [];\n  const unwrappedValue = unwrapSafeValue(value);\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode && throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction styleKeyValueArraySet(keyValueArray, key, value) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nfunction classKeyValueArraySet(keyValueArray, key, value) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {\n  if (oldKeyValueArray === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey = null;\n    let setValue = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {\n  if (!(tNode.type & 3 /* TNodeType.AnyRNode */)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1];\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView);\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(tData, tNode, lView, prop, index, isClassBased) {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value = undefined;\n  while (index > 0) {\n    const rawKey = tData[index];\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? rawKey[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : undefined;\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1];\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual, prop);\n    }\n  }\n  return value;\n}\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value) {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value, suffix) {\n  if (value == null || value === '') {\n    // do nothing\n    // Do not add the suffix if the value is going to be empty.\n    // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n    // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction hasStylingInputShadow(tNode, isClassBased) {\n  return (tNode.flags & (isClassBased ? 8 /* TNodeFlags.hasClassInput */ : 16 /* TNodeFlags.hasStyleInput */)) !== 0;\n}\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nfunction ɵɵtext(index, value = '') {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1 /* TNodeType.Text */, value, null) : tView.data[adjustedIndex];\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode);\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate(v0) {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate1;\n}\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate2;\n}\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate3;\n}\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate4;\n}\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate5;\n}\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate6;\n}\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate7;\n}\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nfunction ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolate8;\n}\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵtextInterpolateV(values) {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated);\n  }\n  return ɵɵtextInterpolateV;\n}\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵclassMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate1(prefix, v0, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nfunction ɵɵstyleMapInterpolateV(values) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nfunction ɵɵstylePropInterpolateV(prop, values, valueSuffix) {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵhostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nfunction ɵɵsyntheticHostProperty(propName, value, sanitizer) {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n  // These property accesses can be ignored because ngI18nClosureMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n  (function () {\n    // tslint:disable-next-line:no-toplevel-property-access\n    _global['ngI18nClosureMode'] =\n    // TODO(FW-1250): validate that this actually, you know, works.\n    // tslint:disable-next-line:no-toplevel-property-access\n    typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n  })();\n}\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n  const n = val,\n    i = Math.floor(Math.abs(val)),\n    v = val.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\nvar localeEn = [\"en\", [[\"a\", \"p\"], [\"AM\", \"PM\"], u], [[\"AM\", \"PM\"], u, u], [[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"], [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]], u, [[\"B\", \"A\"], [\"BC\", \"AD\"], [\"Before Christ\", \"Anno Domini\"]], 0, [6, 0], [\"M/d/yy\", \"MMM d, y\", \"MMMM d, y\", \"EEEE, MMMM d, y\"], [\"h:mm a\", \"h:mm:ss a\", \"h:mm:ss a z\", \"h:mm:ss a zzzz\"], [\"{1}, {0}\", u, \"{1} 'at' {0}\", u], [\".\", \",\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0%\", \"¤#,##0.00\", \"#E0\"], \"USD\", \"$\", \"US Dollar\", {}, \"ltr\", plural];\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA = {};\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nfunction registerLocaleData(data, localeId, extraData) {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n  LOCALE_DATA[localeId] = data;\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction findLocaleData(locale) {\n  const normalizedLocale = normalizeLocale(locale);\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n  throw new RuntimeError(701 /* RuntimeErrorCode.MISSING_LOCALE_DATA */, ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nfunction getLocaleCurrencyCode(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nfunction getLocalePluralCase(locale) {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nfunction getLocaleData(normalizedLocale) {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nfunction unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n/**\n * Index of each type of locale data from the locale data array\n */\nvar LocaleDataIndex;\n(function (LocaleDataIndex) {\n  LocaleDataIndex[LocaleDataIndex[\"LocaleId\"] = 0] = \"LocaleId\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsFormat\"] = 1] = \"DayPeriodsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DayPeriodsStandalone\"] = 2] = \"DayPeriodsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysFormat\"] = 3] = \"DaysFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DaysStandalone\"] = 4] = \"DaysStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsFormat\"] = 5] = \"MonthsFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"MonthsStandalone\"] = 6] = \"MonthsStandalone\";\n  LocaleDataIndex[LocaleDataIndex[\"Eras\"] = 7] = \"Eras\";\n  LocaleDataIndex[LocaleDataIndex[\"FirstDayOfWeek\"] = 8] = \"FirstDayOfWeek\";\n  LocaleDataIndex[LocaleDataIndex[\"WeekendRange\"] = 9] = \"WeekendRange\";\n  LocaleDataIndex[LocaleDataIndex[\"DateFormat\"] = 10] = \"DateFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"TimeFormat\"] = 11] = \"TimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"DateTimeFormat\"] = 12] = \"DateTimeFormat\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberSymbols\"] = 13] = \"NumberSymbols\";\n  LocaleDataIndex[LocaleDataIndex[\"NumberFormats\"] = 14] = \"NumberFormats\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyCode\"] = 15] = \"CurrencyCode\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencySymbol\"] = 16] = \"CurrencySymbol\";\n  LocaleDataIndex[LocaleDataIndex[\"CurrencyName\"] = 17] = \"CurrencyName\";\n  LocaleDataIndex[LocaleDataIndex[\"Currencies\"] = 18] = \"Currencies\";\n  LocaleDataIndex[LocaleDataIndex[\"Directionality\"] = 19] = \"Directionality\";\n  LocaleDataIndex[LocaleDataIndex[\"PluralCase\"] = 20] = \"PluralCase\";\n  LocaleDataIndex[LocaleDataIndex[\"ExtraData\"] = 21] = \"ExtraData\";\n})(LocaleDataIndex || (LocaleDataIndex = {}));\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale) {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n/**\n * Returns the plural case based on the locale\n */\nfunction getPluralCase(value, locale) {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return result !== undefined ? result : 'other';\n}\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nconst DEFAULT_LOCALE_ID = 'en-US';\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nconst USD_CURRENCY_CODE = 'USD';\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ELEMENT_MARKER = {\n  marker: 'element'\n};\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nconst ICU_MARKER = {\n  marker: 'ICU'\n};\n/**\n * See `I18nCreateOpCodes`\n */\nvar I18nCreateOpCode;\n(function (I18nCreateOpCode) {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"SHIFT\"] = 2] = \"SHIFT\";\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"APPEND_EAGERLY\"] = 1] = \"APPEND_EAGERLY\";\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  I18nCreateOpCode[I18nCreateOpCode[\"COMMENT\"] = 2] = \"COMMENT\";\n})(I18nCreateOpCode || (I18nCreateOpCode = {}));\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nconst unusedValueExportToPlacateAjd = 1;\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID$1 = DEFAULT_LOCALE_ID;\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nfunction setLocaleId(localeId) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nfunction getLocaleId() {\n  return LOCALE_ID$1;\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent = childRNode;\n    let anchorRNode = null;\n    if (!(childTNode.type & 3 /* TNodeType.AnyRNode */)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nfunction addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {\n  // Start with Rule1\n  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\nfunction isI18nText(tNode) {\n  return !(tNode.type & 64 /* TNodeType.Placeholder */);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode, newTNode) {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\nfunction getInsertBeforeIndex(tNode) {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\nfunction setInsertBeforeIndex(tNode, value) {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nfunction getTIcu(tView, index) {\n  const value = tView.data[index];\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode && !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value : value.value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nfunction setTIcu(tView, index, tIcu) {\n  const tNode = tView.data[index];\n  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty('tView'), true, 'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, 32 /* TNodeType.Icu */);\n    tNode.value = tIcu;\n  }\n}\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nfunction setTNodeInsertBeforeIndex(tNode, index) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex = [null /* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    insertBeforeIndex.push(index);\n  }\n}\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nfunction createTNodePlaceholder(tView, previousTNodes, index) {\n  const tNode = createTNodeAtIndex(tView, index, 64 /* TNodeType.Placeholder */, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nfunction getCurrentICUCaseIndex(tIcu, lView) {\n  const currentCase = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;\n}\nfunction getParentFromIcuCreateOpCode(mergedCode) {\n  return mergedCode >>> 17 /* IcuCreateOpCode.SHIFT_PARENT */;\n}\n\nfunction getRefFromIcuCreateOpCode(mergedCode) {\n  return (mergedCode & 131070 /* IcuCreateOpCode.MASK_REF */) >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\nfunction getInstructionFromIcuCreateOpCode(mergedCode) {\n  return mergedCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */;\n}\n\nfunction icuCreateOpCode(opCode, parentIdx, refIdx) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << 17 /* IcuCreateOpCode.SHIFT_PARENT */ | refIdx << 1 /* IcuCreateOpCode.SHIFT_REF */;\n}\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nfunction setMaskBit(hasChange) {\n  if (hasChange) {\n    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);\n  }\n  changeMaskCounter++;\n}\nfunction applyI18n(tView, lView, index) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index];\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nfunction applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nfunction applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i];\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & 1 /* IcuCreateOpCode.MASK_INSTRUCTION */) {\n        case 0 /* IcuCreateOpCode.AppendChild */:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n          let insertInFrontOf;\n          let parentRNode;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]);\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx];\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case 1 /* IcuCreateOpCode.Attr */:\n          const elementNodeIndex = opCode >>> 1 /* IcuCreateOpCode.SHIFT_REF */;\n          const attrName = mutableOpCodes[++i];\n          const attrValue = mutableOpCodes[++i];\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(700 /* RuntimeErrorCode.INVALID_I18N_STRUCTURE */, `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i];\n          const commentNodeIndex = mutableOpCodes[++i];\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof commentValue, 'string', `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i];\n          const elementNodeIndex = mutableOpCodes[++i];\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode && assertEqual(typeof tagName, 'string', `Expected \"${tagName}\" to be an element node tag name`);\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode && throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nfunction applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i];\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i];\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= i + skipCodes; j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n            switch (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) {\n              case 1 /* I18nUpdateOpCode.Attr */:\n                const propName = updateOpCodes[++j];\n                const sanitizeFn = updateOpCodes[++j];\n                const tNodeOrTagName = tView.data[nodeIndex];\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);\n                } else {\n                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);\n                }\n                break;\n              case 0 /* I18nUpdateOpCode.Text */:\n                const rText = lView[nodeIndex];\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case 2 /* I18nUpdateOpCode.IcuSwitch */:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);\n                break;\n              case 3 /* I18nUpdateOpCode.IcuUpdate */:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1];\n      if (opCode > 0 && (opCode & 3 /* I18nUpdateOpCode.MASK_OPCODE */) === 3 /* I18nUpdateOpCode.IcuUpdate */) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = opCode >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n        const tIcu = getTIcu(tView, nodeIndex);\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView, tIcu, lView, value) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView, tIcu, lView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i];\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);\n      }\n    }\n  }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case 1 /* IcuType.plural */:\n        {\n          const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n          index = icuExpression.cases.indexOf(resolvedCase);\n          if (index === -1 && resolvedCase !== 'other') {\n            index = icuExpression.cases.indexOf('other');\n          }\n          break;\n        }\n      case 0 /* IcuType.select */:\n        {\n          index = icuExpression.cases.indexOf('other');\n          break;\n        }\n    }\n  }\n  return index === -1 ? null : index;\n}\nfunction loadIcuContainerVisitor() {\n  const _stack = [];\n  let _index = -1;\n  let _lView;\n  let _removes;\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode, lView) {\n    _lView = lView;\n    while (_stack.length) _stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n  function enterIcu(tIcu, lView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY;\n    }\n  }\n  function icuContainerIteratorNext() {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++];\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes);\n        // ICUs are represented by negative indices\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex];\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n  return icuContainerIteratorStart;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction i18nCreateOpCodesToString(opcodes) {\n  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++];\n    const text = createOpCodes[i];\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nfunction i18nUpdateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(value) {\n    const ref = value >>> 2 /* I18nUpdateOpCode.SHIFT_REF */;\n    const opCode = value & 3 /* I18nUpdateOpCode.MASK_OPCODE */;\n    switch (opCode) {\n      case 0 /* I18nUpdateOpCode.Text */:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case 1 /* I18nUpdateOpCode.Attr */:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case 2 /* I18nUpdateOpCode.IcuSwitch */:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case 3 /* I18nUpdateOpCode.IcuUpdate */:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nfunction icuCreateOpCodesToString(opcodes) {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines = [];\n  function consumeOpCode(opCode) {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case 0 /* IcuCreateOpCode.AppendChild */:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case 1 /* IcuCreateOpCode.Attr */:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n  return lines;\n}\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nfunction i18nRemoveOpCodesToString(opcodes) {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines = [];\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i];\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n  return lines;\n}\nclass OpCodeParser {\n  constructor(codes) {\n    this.i = 0;\n    this.codes = codes;\n  }\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n  consumeNumber() {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n  consumeString() {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n  consumeFunction() {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n  consumeNumberOrString() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n  consumeNumberStringOrMarker() {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER || value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value) {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter(obj, debugGetter) {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {\n      get: debugGetter,\n      enumerable: false\n    });\n  } else {\n    throw new Error('This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nfunction i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes = [];\n  const updateOpCodes = [];\n  const existingTNodeStack = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression = part;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === 47 /* CharCode.SLASH */;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, 42 /* CharCode.STAR */, 35 /* CharCode.HASH */);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode(), false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n  tView.data[index] = {\n    create: createOpCodes,\n    update: updateOpCodes\n  };\n}\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 /* TNodeType.Icu */ : 1 /* TNodeType.Text */, text === null ? ngDevMode ? '{{?}}' : '' : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n  const previousElement = getCurrentTNode();\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes = [];\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(`ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {\n  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length; // Location of mask\n  const sizeIndex = maskIndex + 1; // location of size for skipping\n  updateOpCodes.push(null, null); // Alloc space for mask and size\n  const startIndex = maskIndex + 2; // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n  updateOpCodes.push(destinationNode << 2 /* I18nUpdateOpCode.SHIFT_REF */ | (attrName ? 1 /* I18nUpdateOpCode.Attr */ : 0 /* I18nUpdateOpCode.Text */));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes) {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex) {\n  return 1 << Math.min(bindingIndex, 31);\n}\nfunction isRootTemplateMessage(subTemplateIndex) {\n  return subTemplateIndex === -1;\n}\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message) {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n  res += message.slice(index);\n  return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nfunction getTranslationForTemplate(message, subTemplateIndex) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nfunction icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(''), nestedIcus) | bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern) {\n  const cases = [];\n  const values = [];\n  let icuType = 1 /* IcuType.plural */;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function (str, binding, type) {\n    if (type === 'select') {\n      icuType = 0 /* IcuType.select */;\n    } else {\n      icuType = 1 /* IcuType.plural */;\n    }\n\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n  const parts = i18nParseTextIntoPartsAndICU(pattern);\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === 1 /* IcuType.plural */) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {\n    type: icuType,\n    mainBinding: mainBinding,\n    cases,\n    values\n  };\n}\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nfunction i18nParseTextIntoPartsAndICU(pattern) {\n  if (!pattern) {\n    return [];\n  }\n  let prevPos = 0;\n  const braceStack = [];\n  const results = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nfunction parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {\n  const create = [];\n  const remove = [];\n  const update = [];\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx, nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\nfunction walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, parentNode, parentIdx, nestedIcus, depth) {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i);\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ` + `${lowerAttrName} on element ${tagName} ` + `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx, newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\nfunction addRemoveNode(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\nfunction addRemoveNestedIcu(remove, index, depth) {\n  if (depth === 0) {\n    remove.push(~index); // remove ICU at `index`\n    remove.push(index); // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(update, icuExpression, index) {\n  update.push(toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 2 /* I18nUpdateOpCode.IcuSwitch */);\n}\n\nfunction addUpdateIcuUpdate(update, bindingMask, index) {\n  update.push(bindingMask, 1, index << 2 /* I18nUpdateOpCode.SHIFT_REF */ | 3 /* I18nUpdateOpCode.IcuUpdate */);\n}\n\nfunction addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(text, createAtIdx, icuCreateOpCode(0 /* IcuCreateOpCode.AppendChild */, appendToParentIdx, createAtIdx));\n}\nfunction addCreateAttribute(create, newIndex, attr) {\n  create.push(newIndex << 1 /* IcuCreateOpCode.SHIFT_REF */ | 1 /* IcuCreateOpCode.Attr */, attr.name, attr.value);\n}\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction i18nPostprocess(message, replacements = {}) {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches = {};\n    const templateIdsStack = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {\n      const content = phs || tmpl;\n      const placeholders = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach(placeholder => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end) => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key) => {\n    return replacements.hasOwnProperty(key) ? replacements[key] : match;\n  });\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key) => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift();\n    }\n    return match;\n  });\n  return result;\n}\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nStart(index, messageIndex, subTemplateIndex = -1) {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant(tView.consts, messageIndex);\n  const parentTNode = getCurrentParentTNode();\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);\n  }\n  const tI18n = tView.data[adjustedIndex];\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && parentTNode.type & 8 /* TNodeType.ElementContainer */ ? lView[parentTNode.index] : null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nEnd() {\n  setInI18nBlock(false);\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nfunction ɵɵi18n(index, messageIndex, subTemplateIndex) {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nfunction ɵɵi18nAttributes(index, attrsIndex) {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant(tView.consts, attrsIndex);\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nfunction ɵɵi18nExp(value) {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nfunction ɵɵi18nApply(index) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nfunction ɵɵi18nPostprocess(message, replacements = {}) {\n  return i18nPostprocess(message, replacements);\n}\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nfunction providersResolver(def, providers, viewProviders) {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory = providerToFactory(provider);\n    const tNode = getCurrentTNode();\n    const beginIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount = tNode.providerIndexes >> 20 /* TNodeProviderIndexes.CptViewProvidersCountShift */;\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);\n        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += 1048576 /* TNodeProviderIndexes.CptViewProvidersCountShifter */;\n        }\n\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;\n      }\n    }\n  }\n}\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n      if (!providerIsTypeProvider && provider.multi) {\n        ngDevMode && assertDefined(indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n  if (isComponentProvider) {\n    multiFactory.componentProviders++;\n  }\n  return multiFactory.multi.push(factory) - 1;\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item, arr, begin, end) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n  return multiResolve(this.multi, []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lView, tNode) {\n  const factories = this.multi;\n  let result;\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders;\n    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories, result) {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i];\n    result.push(factory());\n  }\n  return result;\n}\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nfunction ɵɵProvidersFeature(providers, viewProviders = []) {\n  return definition => {\n    definition.providersResolver = (def, processProvidersFn) => {\n      return providersResolver(def,\n      //\n      processProvidersFn ? processProvidersFn(providers) : providers,\n      //\n      viewProviders);\n    };\n  };\n}\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nclass NgModuleRef$1 {}\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nclass NgModuleFactory$1 {}\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nfunction createNgModule(ngModule, parentInjector) {\n  return new NgModuleRef(ngModule, parentInjector ?? null);\n}\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nconst createNgModuleRef = createNgModule;\nclass NgModuleRef extends NgModuleRef$1 {\n  constructor(ngModuleType, _parent) {\n    super();\n    this._parent = _parent;\n    // tslint:disable-next-line:require-internal-with-underscore\n    this._bootstrapComponents = [];\n    this.destroyCbs = [];\n    // When bootstrapping a module we have a dependency graph that looks like this:\n    // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n    // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n    // circular dependency which will result in a runtime error, because the injector doesn't\n    // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n    // and providing it, rather than letting the injector resolve it.\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [{\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], stringify(ngModuleType), new Set(['environment']));\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(ngModuleType);\n  }\n  get injector() {\n    return this._r3Injector;\n  }\n  destroy() {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback) {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs.push(callback);\n  }\n}\nclass NgModuleFactory extends NgModuleFactory$1 {\n  constructor(moduleType) {\n    super();\n    this.moduleType = moduleType;\n  }\n  create(parentInjector) {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\nclass EnvironmentNgModuleRefAdapter extends NgModuleRef$1 {\n  constructor(providers, parent, source) {\n    super();\n    this.componentFactoryResolver = new ComponentFactoryResolver(this);\n    this.instance = null;\n    const injector = new R3Injector([...providers, {\n      provide: NgModuleRef$1,\n      useValue: this\n    }, {\n      provide: ComponentFactoryResolver$1,\n      useValue: this.componentFactoryResolver\n    }], parent || getNullInjector(), source, new Set(['environment']));\n    this.injector = injector;\n    injector.resolveInjectorInitializers();\n  }\n  destroy() {\n    this.injector.destroy();\n  }\n  onDestroy(callback) {\n    this.injector.onDestroy(callback);\n  }\n}\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nfunction createEnvironmentInjector(providers, parent, debugName = null) {\n  const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n  return adapter.injector;\n}\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService {\n  constructor(_injector) {\n    this._injector = _injector;\n    this.cachedInjectors = new Map();\n  }\n  getOrCreateStandaloneInjector(componentDef) {\n    if (!componentDef.standalone) {\n      return null;\n    }\n    if (!this.cachedInjectors.has(componentDef.id)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;\n      this.cachedInjectors.set(componentDef.id, standaloneInjector);\n    }\n    return this.cachedInjectors.get(componentDef.id);\n  }\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n}\n/** @nocollapse */\nStandaloneService.ɵprov = ɵɵdefineInjectable({\n  token: StandaloneService,\n  providedIn: 'environment',\n  factory: () => new StandaloneService(ɵɵinject(EnvironmentInjector))\n});\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nfunction ɵɵStandaloneFeature(definition) {\n  definition.getStandaloneInjector = parentInjector => {\n    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n  };\n}\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getComponent(element) {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n  return context.component;\n}\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getContext(element) {\n  assertDomElement(element);\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT];\n}\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getOwningComponent(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n  let parent;\n  while (lView[TVIEW].type === 2 /* TViewType.Embedded */ && (parent = getLViewParent(lView))) {\n    lView = parent;\n  }\n  return lView[FLAGS] & 256 /* LViewFlags.IsRoot */ ? null : lView[CONTEXT];\n}\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getRootComponents(elementOrDir) {\n  const lView = readPatchedLView(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getInjector(elementOrDir) {\n  const context = getLContext(elementOrDir);\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n  const tNode = lView[TVIEW].data[context.nodeIndex];\n  return new NodeInjector(tNode, lView);\n}\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nfunction getInjectionTokens(element) {\n  const context = getLContext(element);\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex];\n  const providerTokens = [];\n  const startIndex = tNode.providerIndexes & 1048575 /* TNodeProviderIndexes.ProvidersStartIndexMask */;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectives(node) {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n  const context = getLContext(node);\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getDirectiveMetadata$1(directiveOrComponentInstance) {\n  const {\n    constructor\n  } = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef(constructor);\n  if (componentDef) {\n    return {\n      inputs: componentDef.inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    return {\n      inputs: directiveDef.inputs,\n      outputs: directiveDef.outputs\n    };\n  }\n  return null;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nfunction getLocalRefs(target) {\n  const context = getLContext(target);\n  if (context === null) return {};\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n  return context.localRefs || {};\n}\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getHostElement(componentOrDirective) {\n  return getLContext(componentOrDirective).native;\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nfunction getRenderedText(component) {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction getListeners(element) {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]);\n        const callback = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type = typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0 ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({\n            element,\n            name,\n            callback,\n            useCapture,\n            type\n          });\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\nfunction sortListeners(a, b) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj) {\n  return obj.type !== undefined && obj.declaredInputs !== undefined && obj.findHostDirectiveDefs !== undefined;\n}\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nfunction getComponentLView(target) {\n  const lContext = getLContext(target);\n  const nodeIndx = lContext.nodeIndex;\n  const lView = lContext.lView;\n  ngDevMode && assertLView(lView);\n  const componentLView = lView[nodeIndx];\n  ngDevMode && assertLView(componentLView);\n  return componentLView;\n}\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nfunction setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n  return noSideEffects(() => {\n    const clazz = type;\n    if (decorators !== null) {\n      if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n        clazz.decorators.push(...decorators);\n      } else {\n        clazz.decorators = decorators;\n      }\n    }\n    if (ctorParameters !== null) {\n      // Rather than merging, clobber the existing parameters. If other projects exist which\n      // use tsickle-style annotations and reflect over them in the same way, this could\n      // cause issues, but that is vanishingly unlikely.\n      clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n      // The property decorator objects are merged as it is possible different fields have\n      // different decorator types. Decorators on individual fields are not merged, as it's\n      // also incredibly unlikely that a field will be decorated both with an Angular\n      // decorator and a non-Angular decorator that's also been downleveled.\n      if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n        clazz.propDecorators = {\n          ...clazz.propDecorators,\n          ...propDecorators\n        };\n      } else {\n        clazz.propDecorators = propDecorators;\n      }\n    }\n  });\n}\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction0(slotOffset, pureFn, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nfunction ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView, returnValueIndex) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nfunction pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nfunction pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);\n}\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nfunction ɵɵpipe(index, pipeName) {\n  const tView = getTView();\n  let pipeDef;\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ?? (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex];\n  }\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(-302 /* RuntimeErrorCode.PIPE_NOT_FOUND */, getPipeNotFoundErrorMessage(name));\n  }\n}\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' : 'declared or imported in this module'}`;\n  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind1(index, slotOffset, v1) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind2(index, slotOffset, v1, v2) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nfunction ɵɵpipeBindV(index, slotOffset, values) {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);\n}\nfunction isPure(lView, index) {\n  return lView[TVIEW].data[index].pure;\n}\n\n/// <reference types=\"rxjs\" />\nclass EventEmitter_ extends Subject {\n  constructor(isAsync = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n  emit(value) {\n    super.next(value);\n  }\n  subscribe(observerOrNext, error, complete) {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n    const sink = super.subscribe({\n      next: nextFn,\n      error: errorFn,\n      complete: completeFn\n    });\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n    return sink;\n  }\n}\nfunction _wrapInTimeout(fn) {\n  return value => {\n    setTimeout(fn, undefined, value);\n  };\n}\n/**\n * @publicApi\n */\nconst EventEmitter = EventEmitter_;\nfunction symbolIterator() {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nclass QueryList {\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes() {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(_emitDistinctChangesOnly = false) {\n    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;\n    this.dirty = true;\n    this._results = [];\n    this._changesDetected = false;\n    this._changes = null;\n    this.length = 0;\n    this.first = undefined;\n    this.last = undefined;\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [Symbol.iterator](): Iterator<T> { ... }\n    const proto = QueryList.prototype;\n    if (!proto[Symbol.iterator]) proto[Symbol.iterator] = symbolIterator;\n  }\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index) {\n    return this._results[index];\n  }\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map(fn) {\n    return this._results.map(fn);\n  }\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn) {\n    return this._results.filter(fn);\n  }\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn) {\n    return this._results.find(fn);\n  }\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce(fn, init) {\n    return this._results.reduce(fn, init);\n  }\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn) {\n    this._results.forEach(fn);\n  }\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn) {\n    return this._results.some(fn);\n  }\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray() {\n    return this._results.slice();\n  }\n  toString() {\n    return this._results.toString();\n  }\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree, identityAccessor) {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this;\n    self.dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges() {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly)) this._changes.emit(this);\n  }\n  /** internal */\n  setDirty() {\n    this.dirty = true;\n  }\n  /** internal */\n  destroy() {\n    this.changes.complete();\n    this.changes.unsubscribe();\n  }\n}\nSymbol.iterator;\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nclass TemplateRef {}\n/**\n * @internal\n * @nocollapse\n */\nTemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;\nconst ViewEngineTemplateRef = TemplateRef;\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef extends ViewEngineTemplateRef {\n  constructor(_declarationLView, _declarationTContainer, elementRef) {\n    super();\n    this._declarationLView = _declarationLView;\n    this._declarationTContainer = _declarationTContainer;\n    this.elementRef = elementRef;\n  }\n  createEmbeddedView(context, injector) {\n    const embeddedTView = this._declarationTContainer.tView;\n    const embeddedLView = createLView(this._declarationLView, embeddedTView, context, 16 /* LViewFlags.CheckAlways */, null, embeddedTView.declTNode, null, null, null, null, injector || null);\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n    renderView(embeddedTView, embeddedLView, context);\n    return new ViewRef$1(embeddedLView);\n  }\n};\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nfunction injectTemplateRef() {\n  return createTemplateRef(getCurrentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nfunction createTemplateRef(hostTNode, hostLView) {\n  if (hostTNode.type & 4 /* TNodeType.Container */) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nclass ViewContainerRef {}\n/**\n * @internal\n * @nocollapse\n */\nViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nfunction injectViewContainerRef() {\n  const previousTNode = getCurrentTNode();\n  return createContainerRef(previousTNode, getLView());\n}\nconst VE_ViewContainerRef = ViewContainerRef;\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(_lContainer, _hostTNode, _hostLView) {\n    super();\n    this._lContainer = _lContainer;\n    this._hostTNode = _hostTNode;\n    this._hostLView = _hostLView;\n  }\n  get element() {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n  get injector() {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n  /** @deprecated No replacement */\n  get parentInjector() {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode = parentView[TVIEW].data[injectorIndex + 8 /* NodeInjectorOffset.TNODE */];\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n  clear() {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n  get(index) {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n  get length() {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n  createEmbeddedView(templateRef, context, indexOrOptions) {\n    let index;\n    let injector;\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n    const viewRef = templateRef.createEmbeddedView(context || {}, injector);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index;\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(typeof indexOrOptions !== 'object', true, 'It looks like Component factory was provided as the first argument ' + 'and an options object as the second argument. This combination of arguments ' + 'is incompatible. You can either change the first argument to provide Component ' + 'type or change the second argument to be a number (representing an index at ' + 'which to insert the new component\\'s host view into this container)');\n      }\n      index = indexOrOptions;\n    } else {\n      if (ngDevMode) {\n        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. ` + `Please check whether provided class has @Component decorator.`);\n        assertEqual(typeof indexOrOptions !== 'number', true, 'It looks like Component type was provided as the first argument ' + 'and a number (representing an index at which to insert the new component\\'s ' + 'host view into this container as the second argument. This combination of arguments ' + 'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = indexOrOptions || {};\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));\n    const contextInjector = injector || this.parentInjector;\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && componentFactory.ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n    const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n  insert(viewRef, index) {\n    const lView = viewRef._lView;\n    const tView = lView[TVIEW];\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n      const prevIdx = this.indexOf(viewRef);\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT];\n        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx);\n    // Physical operation of adding the DOM nodes.\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n    viewRef.attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n    return viewRef;\n  }\n  move(viewRef, newIndex) {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n  indexOf(viewRef) {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n  remove(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n  detach(index) {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new ViewRef$1(view) : null;\n  }\n  _adjustIndex(index, shift = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\nfunction getViewRefs(lContainer) {\n  return lContainer[VIEW_REFS];\n}\nfunction getOrCreateViewRefs(lContainer) {\n  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nfunction createContainerRef(hostTNode, hostLView) {\n  ngDevMode && assertTNodeType(hostTNode, 12 /* TNodeType.AnyContainer */ | 3 /* TNodeType.AnyRNode */);\n  let lContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & 8 /* TNodeType.ElementContainer */) {\n      commentNode = unwrapRNode(slotValue);\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n      const hostNative = getNativeByTNode(hostTNode, hostLView);\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);\n    }\n    hostLView[hostTNode.index] = lContainer = createLContainer(slotValue, hostLView, commentNode, hostTNode);\n    addToViewTree(hostLView, lContainer);\n  }\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\nclass LQuery_ {\n  constructor(queryList) {\n    this.queryList = queryList;\n    this.matches = null;\n  }\n  clone() {\n    return new LQuery_(this.queryList);\n  }\n  setDirty() {\n    this.queryList.setDirty();\n  }\n}\nclass LQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  createEmbeddedView(tView) {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries = [];\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n      return new LQueries_(viewLQueries);\n    }\n    return null;\n  }\n  insertView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  detachView(tView) {\n    this.dirtyQueriesWithMatches(tView);\n  }\n  dirtyQueriesWithMatches(tView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\nclass TQueryMetadata_ {\n  constructor(predicate, flags, read = null) {\n    this.predicate = predicate;\n    this.flags = flags;\n    this.read = read;\n  }\n}\nclass TQueries_ {\n  constructor(queries = []) {\n    this.queries = queries;\n  }\n  elementStart(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode) {\n    let queriesForTemplateRef = null;\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n  template(tView, tNode) {\n    ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n  getByIndex(index) {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n  get length() {\n    return this.queries.length;\n  }\n  track(tquery) {\n    this.queries.push(tquery);\n  }\n}\nclass TQuery_ {\n  constructor(metadata, nodeIndex = -1) {\n    this.metadata = metadata;\n    this.matches = null;\n    this.indexInDeclarationView = -1;\n    this.crossesNgTemplate = false;\n    /**\n     * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n     * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n     * elements in a template.\n     */\n    this._appliesToNextNode = true;\n    this._declarationNodeIndex = nodeIndex;\n  }\n  elementStart(tView, tNode) {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n  elementEnd(tNode) {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n  template(tView, tNode) {\n    this.elementStart(tView, tNode);\n  }\n  embeddedTView(tNode, childQueryIndex) {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n  isApplyingToNode(tNode) {\n    if (this._appliesToNextNode && (this.metadata.flags & 1 /* QueryFlags.descendants */) !== 1 /* QueryFlags.descendants */) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && parent.type & 8 /* TNodeType.ElementContainer */ && parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n  matchTNode(tView, tNode) {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if (predicate === TemplateRef) {\n        if (tNode.type & 4 /* TNodeType.Container */) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4 /* TNodeType.Container */) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n  addMatch(tNodeIdx, matchIdx) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1];\n      }\n    }\n  }\n  return null;\n}\nfunction createResultByTNodeType(tNode, currentView) {\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\nfunction createResultForNode(lView, tNode, matchingIdx, read) {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);\n  }\n}\nfunction createSpecialToken(lView, tNode, read) {\n  if (read === ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, 3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */);\n    return createContainerRef(tNode, lView);\n  } else {\n    ngDevMode && throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);\n  }\n}\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults(tView, lView, tQuery, queryIndex) {\n  const lQuery = lView[QUERIES].queries[queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches;\n    const result = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx];\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n  return lQuery.matches;\n}\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults(tView, lView, queryIndex, result) {\n  const tQuery = tView.queries.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2]);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n        const declarationLContainer = lView[-tNodeIdx];\n        ngDevMode && assertLContainer(declarationLContainer);\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS];\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nfunction ɵɵqueryRefresh(queryList) {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n  setCurrentQueryIndex(queryIndex + 1);\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */)) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n  return false;\n}\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nfunction ɵɵviewQuery(predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nfunction ɵɵcontentQuery(directiveIndex, predicate, flags, read) {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode();\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & 2 /* QueryFlags.isStatic */) === 2 /* QueryFlags.isStatic */) {\n      tView.staticContentQueries = true;\n    }\n  }\n  createLQuery(tView, getLView(), flags);\n}\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nfunction ɵɵloadQuery() {\n  return loadQueryInternal(getLView(), getCurrentQueryIndex());\n}\nfunction loadQueryInternal(lView, queryIndex) {\n  ngDevMode && assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);\n  return lView[QUERIES].queries[queryIndex].queryList;\n}\nfunction createLQuery(tView, lView, flags) {\n  const queryList = new QueryList((flags & 4 /* QueryFlags.emitDistinctChangesOnly */) === 4 /* QueryFlags.emitDistinctChangesOnly */);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES].queries.push(new LQuery_(queryList));\n}\nfunction createTQuery(tView, metadata, nodeIndex) {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\nfunction saveContentQueryAndDirectiveIndex(tView, directiveIndex) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);\n  }\n}\nfunction getTQuery(tView, index) {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries.getByIndex(index);\n}\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nfunction ɵɵtemplateRefExtractor(tNode, lView) {\n  return createTemplateRef(tNode, lView);\n}\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nconst angularCoreEnv = (() => ({\n  'ɵɵattribute': ɵɵattribute,\n  'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,\n  'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,\n  'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,\n  'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,\n  'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,\n  'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,\n  'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,\n  'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,\n  'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,\n  'ɵɵdefineComponent': ɵɵdefineComponent,\n  'ɵɵdefineDirective': ɵɵdefineDirective,\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵdefineNgModule': ɵɵdefineNgModule,\n  'ɵɵdefinePipe': ɵɵdefinePipe,\n  'ɵɵdirectiveInject': ɵɵdirectiveInject,\n  'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinjectAttribute': ɵɵinjectAttribute,\n  'ɵɵinvalidFactory': ɵɵinvalidFactory,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,\n  'ɵɵresetView': ɵɵresetView,\n  'ɵɵHostDirectivesFeature': ɵɵHostDirectivesFeature,\n  'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,\n  'ɵɵProvidersFeature': ɵɵProvidersFeature,\n  'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,\n  'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,\n  'ɵɵStandaloneFeature': ɵɵStandaloneFeature,\n  'ɵɵnextContext': ɵɵnextContext,\n  'ɵɵnamespaceHTML': ɵɵnamespaceHTML,\n  'ɵɵnamespaceMathML': ɵɵnamespaceMathML,\n  'ɵɵnamespaceSVG': ɵɵnamespaceSVG,\n  'ɵɵenableBindings': ɵɵenableBindings,\n  'ɵɵdisableBindings': ɵɵdisableBindings,\n  'ɵɵelementStart': ɵɵelementStart,\n  'ɵɵelementEnd': ɵɵelementEnd,\n  'ɵɵelement': ɵɵelement,\n  'ɵɵelementContainerStart': ɵɵelementContainerStart,\n  'ɵɵelementContainerEnd': ɵɵelementContainerEnd,\n  'ɵɵelementContainer': ɵɵelementContainer,\n  'ɵɵpureFunction0': ɵɵpureFunction0,\n  'ɵɵpureFunction1': ɵɵpureFunction1,\n  'ɵɵpureFunction2': ɵɵpureFunction2,\n  'ɵɵpureFunction3': ɵɵpureFunction3,\n  'ɵɵpureFunction4': ɵɵpureFunction4,\n  'ɵɵpureFunction5': ɵɵpureFunction5,\n  'ɵɵpureFunction6': ɵɵpureFunction6,\n  'ɵɵpureFunction7': ɵɵpureFunction7,\n  'ɵɵpureFunction8': ɵɵpureFunction8,\n  'ɵɵpureFunctionV': ɵɵpureFunctionV,\n  'ɵɵgetCurrentView': ɵɵgetCurrentView,\n  'ɵɵrestoreView': ɵɵrestoreView,\n  'ɵɵlistener': ɵɵlistener,\n  'ɵɵprojection': ɵɵprojection,\n  'ɵɵsyntheticHostProperty': ɵɵsyntheticHostProperty,\n  'ɵɵsyntheticHostListener': ɵɵsyntheticHostListener,\n  'ɵɵpipeBind1': ɵɵpipeBind1,\n  'ɵɵpipeBind2': ɵɵpipeBind2,\n  'ɵɵpipeBind3': ɵɵpipeBind3,\n  'ɵɵpipeBind4': ɵɵpipeBind4,\n  'ɵɵpipeBindV': ɵɵpipeBindV,\n  'ɵɵprojectionDef': ɵɵprojectionDef,\n  'ɵɵhostProperty': ɵɵhostProperty,\n  'ɵɵproperty': ɵɵproperty,\n  'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,\n  'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,\n  'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,\n  'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,\n  'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,\n  'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,\n  'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,\n  'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,\n  'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,\n  'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,\n  'ɵɵpipe': ɵɵpipe,\n  'ɵɵqueryRefresh': ɵɵqueryRefresh,\n  'ɵɵviewQuery': ɵɵviewQuery,\n  'ɵɵloadQuery': ɵɵloadQuery,\n  'ɵɵcontentQuery': ɵɵcontentQuery,\n  'ɵɵreference': ɵɵreference,\n  'ɵɵclassMap': ɵɵclassMap,\n  'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,\n  'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,\n  'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,\n  'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,\n  'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,\n  'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,\n  'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,\n  'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,\n  'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,\n  'ɵɵstyleMap': ɵɵstyleMap,\n  'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,\n  'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,\n  'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,\n  'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,\n  'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,\n  'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,\n  'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,\n  'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,\n  'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,\n  'ɵɵstyleProp': ɵɵstyleProp,\n  'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,\n  'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,\n  'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,\n  'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,\n  'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,\n  'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,\n  'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,\n  'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,\n  'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,\n  'ɵɵclassProp': ɵɵclassProp,\n  'ɵɵadvance': ɵɵadvance,\n  'ɵɵtemplate': ɵɵtemplate,\n  'ɵɵtext': ɵɵtext,\n  'ɵɵtextInterpolate': ɵɵtextInterpolate,\n  'ɵɵtextInterpolate1': ɵɵtextInterpolate1,\n  'ɵɵtextInterpolate2': ɵɵtextInterpolate2,\n  'ɵɵtextInterpolate3': ɵɵtextInterpolate3,\n  'ɵɵtextInterpolate4': ɵɵtextInterpolate4,\n  'ɵɵtextInterpolate5': ɵɵtextInterpolate5,\n  'ɵɵtextInterpolate6': ɵɵtextInterpolate6,\n  'ɵɵtextInterpolate7': ɵɵtextInterpolate7,\n  'ɵɵtextInterpolate8': ɵɵtextInterpolate8,\n  'ɵɵtextInterpolateV': ɵɵtextInterpolateV,\n  'ɵɵi18n': ɵɵi18n,\n  'ɵɵi18nAttributes': ɵɵi18nAttributes,\n  'ɵɵi18nExp': ɵɵi18nExp,\n  'ɵɵi18nStart': ɵɵi18nStart,\n  'ɵɵi18nEnd': ɵɵi18nEnd,\n  'ɵɵi18nApply': ɵɵi18nApply,\n  'ɵɵi18nPostprocess': ɵɵi18nPostprocess,\n  'ɵɵresolveWindow': ɵɵresolveWindow,\n  'ɵɵresolveDocument': ɵɵresolveDocument,\n  'ɵɵresolveBody': ɵɵresolveBody,\n  'ɵɵsetComponentScope': ɵɵsetComponentScope,\n  'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,\n  'ɵɵregisterNgModuleType': registerNgModuleType,\n  'ɵɵsanitizeHtml': ɵɵsanitizeHtml,\n  'ɵɵsanitizeStyle': ɵɵsanitizeStyle,\n  'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,\n  'ɵɵsanitizeScript': ɵɵsanitizeScript,\n  'ɵɵsanitizeUrl': ɵɵsanitizeUrl,\n  'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,\n  'ɵɵtrustConstantHtml': ɵɵtrustConstantHtml,\n  'ɵɵtrustConstantResourceUrl': ɵɵtrustConstantResourceUrl,\n  'ɵɵvalidateIframeAttribute': ɵɵvalidateIframeAttribute,\n  'forwardRef': forwardRef,\n  'resolveForwardRef': resolveForwardRef\n}))();\nlet jitOptions = null;\nfunction setJitOptions(options) {\n  if (jitOptions !== null) {\n    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n      ngDevMode && console.error('Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n      return;\n    }\n    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n      ngDevMode && console.error('Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n      return;\n    }\n  }\n  jitOptions = options;\n}\nfunction getJitOptions() {\n  return jitOptions;\n}\nfunction resetJitOptions() {\n  jitOptions = null;\n}\nfunction patchModuleCompilation() {\n  // Does nothing, but exists as a target for patching.\n}\nfunction isModuleWithProviders(value) {\n  return value.ngModule !== undefined;\n}\nfunction isNgModule(value) {\n  return !!getNgModuleDef(value);\n}\nconst moduleQueue = [];\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType, ngModule) {\n  moduleQueue.push({\n    moduleType,\n    ngModule\n  });\n}\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nfunction flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {\n          moduleType,\n          ngModule\n        } = moduleQueue[i];\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration) {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nfunction compileNgModule(moduleType, ngModule = {}) {\n  patchModuleCompilation();\n  compileNgModuleDefs(moduleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType, ngModule.id);\n  }\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nfunction compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n  let ngFactoryDef = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  let ngInjectorDef = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef), (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)]\n        };\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'NgModule',\n          type: moduleType\n        });\n        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction generateStandaloneInDeclarationsError(type, location) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` + 'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\nfunction verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {\n  if (verifiedNgModule.get(moduleType)) return;\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType);\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n  const errors = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach(declarationType => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations = [...declarations.map(resolveForwardRef), ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n  const ngModule = getAnnotation(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n      verifySemanticsOfNgModuleImport(mod, moduleType);\n      verifySemanticsOfNgModuleDef(mod, false, moduleType);\n    });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents && deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n  }\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n  function verifyDirectivesHaveSelector(type) {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n  function verifyNotStandalone(type, moduleType) {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n  function verifyExportsAreDeclaredOrReExported(type) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' || getPipeDef$1(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n  function verifyDeclarationIsUnique(type, suppressErrors) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` + `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` + `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n  function verifyComponentIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n  function verifyCorrectBootstrapType(type) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(`The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` + `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` + `function for bootstrap instead.`);\n    }\n  }\n  function verifyComponentEntryComponentsIsPartOfNgModule(type) {\n    type = resolveForwardRef(type);\n    if (getComponentDef(type)) {\n      // We know we are component\n      const component = getAnnotation(type, 'Component');\n      if (component && component.entryComponents) {\n        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n  function verifySemanticsOfNgModuleImport(type, importingModule) {\n    type = resolveForwardRef(type);\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders) {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return typeOrWithProviders.ngModule || typeOrWithProviders;\n}\nfunction getAnnotation(type, name) {\n  let annotation = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n  function collect(annotations) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n  function readAnnotation(decorator) {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap();\nlet verifiedNgModule = new WeakMap();\nfunction resetCompiledComponents() {\n  ownerNgModule = new WeakMap();\n  verifiedNgModule = new WeakMap();\n  moduleQueue.length = 0;\n}\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type) {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n  return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map(type => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n  const transitiveScopes = transitiveScopesFor(moduleType);\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration;\n      const componentDef = getComponentDef(component);\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      declaration.ngSelectorScope = moduleType;\n    }\n  });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nfunction patchComponentDefWithScope(componentDef, transitiveScopes) {\n  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map(dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter(def => !!def);\n  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef$1(pipe));\n  componentDef.schemas = transitiveScopes.schemas;\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nfunction transitiveScopesFor(type) {\n  if (isNgModule(type)) {\n    return transitiveScopesForNgModule(type);\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set([type]),\n          pipes: new Set()\n        }\n      };\n    }\n    const pipeDef = getPipeDef$1(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set(),\n          pipes: new Set()\n        },\n        exported: {\n          directives: new Set(),\n          pipes: new Set([type])\n        }\n      };\n    }\n  }\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nfunction transitiveScopesForNgModule(moduleType) {\n  const def = getNgModuleDef(moduleType, true);\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n  const scopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set(),\n      pipes: new Set()\n    },\n    exported: {\n      directives: new Set(),\n      pipes: new Set()\n    }\n  };\n  maybeUnwrapFn(def.imports).forEach(imported => {\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n  maybeUnwrapFn(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared;\n    if (getPipeDef$1(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n  maybeUnwrapFn(def.exports).forEach(exported => {\n    const exportedType = exported;\n    // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n    if (isNgModule(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef$1(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\nfunction expandModuleWithProviders(value) {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nfunction compileComponent(type, metadata) {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n  let ngComponentDef = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'component',\n          type: type\n        });\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation$1.Emulated;\n          }\n        }\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const meta = {\n          ...directiveMetadata(type, metadata),\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          // JIT components are always compiled against an empty set of `declarations`. Instead, the\n          // `directiveDefs` and `pipeDefs` are updated at a later point:\n          //  * for NgModule-based components, they're set when the NgModule which declares the\n          //    component resolves in the module scoping queue\n          //  * for standalone components, they're set just below, after `compileComponent`.\n          declarations: [],\n          changeDetection: metadata.changeDetection,\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null\n        };\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);\n          if (metadata.standalone) {\n            // Patch the component definition for standalone components with `directiveDefs` and\n            // `pipeDefs` functions which lazily compute the directives/pipes available in the\n            // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n            const imports = flatten(metadata.imports || EMPTY_ARRAY);\n            const {\n              directiveDefs,\n              pipeDefs\n            } = getStandaloneDefFunctions(type, imports);\n            ngComponentDef.directiveDefs = directiveDefs;\n            ngComponentDef.pipeDefs = pipeDefs;\n            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n          }\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n        if (metadata.schemas) {\n          if (metadata.standalone) {\n            ngComponentDef.schemas = metadata.schemas;\n          } else {\n            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);\n          }\n        } else if (metadata.standalone) {\n          ngComponentDef.schemas = [];\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getDependencyTypeForError(type) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef$1(type)) return 'pipe';\n  return 'type';\n}\nfunction verifyStandaloneImport(depType, importingType) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(`Expected forwardRef function, imported from \"${stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${stringifyForError(depType) || depType}\".`);\n    }\n  }\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        throw new Error(`The \"${stringifyForError(depType)}\" ${getDependencyTypeForError(depType)}, imported from \"${stringifyForError(importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(`A module with providers was imported from \"${stringifyForError(importingType)}\". Modules with providers are not supported in standalone components imports.`);\n      } else {\n        throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${stringifyForError(importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n      }\n    }\n  }\n}\n/**\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\n * standalone component, which process `imports` and filter out directives and pipes. The use of\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\n * component's `imports`.\n */\nfunction getStandaloneDefFunctions(type, imports) {\n  let cachedDirectiveDefs = null;\n  let cachedPipeDefs = null;\n  const directiveDefs = () => {\n    if (cachedDirectiveDefs === null) {\n      // Standalone components are always able to self-reference, so include the component's own\n      // definition in its `directiveDefs`.\n      cachedDirectiveDefs = [getComponentDef(type)];\n      const seen = new Set();\n      for (const rawDep of imports) {\n        ngDevMode && verifyStandaloneImport(rawDep, type);\n        const dep = resolveForwardRef(rawDep);\n        if (seen.has(dep)) {\n          continue;\n        }\n        seen.add(dep);\n        if (!!getNgModuleDef(dep)) {\n          const scope = transitiveScopesFor(dep);\n          for (const dir of scope.exported.directives) {\n            const def = getComponentDef(dir) || getDirectiveDef(dir);\n            if (def && !seen.has(dir)) {\n              seen.add(dir);\n              cachedDirectiveDefs.push(def);\n            }\n          }\n        } else {\n          const def = getComponentDef(dep) || getDirectiveDef(dep);\n          if (def) {\n            cachedDirectiveDefs.push(def);\n          }\n        }\n      }\n    }\n    return cachedDirectiveDefs;\n  };\n  const pipeDefs = () => {\n    if (cachedPipeDefs === null) {\n      cachedPipeDefs = [];\n      const seen = new Set();\n      for (const rawDep of imports) {\n        const dep = resolveForwardRef(rawDep);\n        if (seen.has(dep)) {\n          continue;\n        }\n        seen.add(dep);\n        if (!!getNgModuleDef(dep)) {\n          const scope = transitiveScopesFor(dep);\n          for (const pipe of scope.exported.pipes) {\n            const def = getPipeDef$1(pipe);\n            if (def && !seen.has(pipe)) {\n              seen.add(pipe);\n              cachedPipeDefs.push(def);\n            }\n          }\n        } else {\n          const def = getPipeDef$1(dep);\n          if (def) {\n            cachedPipeDefs.push(def);\n          }\n        }\n      }\n    }\n    return cachedPipeDefs;\n  };\n  return {\n    directiveDefs,\n    pipeDefs\n  };\n}\nfunction hasSelectorScope(component) {\n  return component.ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nfunction compileDirective(type, directive) {\n  let ngDirectiveDef = null;\n  addDirectiveFactoryDef(type, directive || {});\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getDirectiveMetadata(type, metadata) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'directive',\n    type\n  });\n  const facade = directiveMetadata(type, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {\n    metadata: facade,\n    sourceMapUrl\n  };\n}\nfunction addDirectiveFactoryDef(type, metadata) {\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'directive',\n          type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction extendsDirectlyFromObject(type) {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type, metadata) {\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')\n    },\n    typeSourceSpan: null,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    isStandalone: !!metadata.standalone,\n    hostDirectives: metadata.hostDirectives?.map(directive => typeof directive === 'function' ? {\n      directive\n    } : directive) || null\n  };\n}\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\nfunction convertToR3QueryPredicate(selector) {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\nfunction convertToR3QueryMetadata(propertyName, ann) {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly\n  };\n}\nfunction extractQueriesMetadata(type, propMetadata, isQueryAnn) {\n  const queriesMeta = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(`Can't construct a query for the property \"${field}\" of ` + `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\nfunction extractExportAs(exportAs) {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\nfunction isContentQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\nfunction isViewQuery(value) {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\nfunction isInputAnnotation(value) {\n  return value.ngMetadataName === 'Input';\n}\nfunction splitByComma(value) {\n  return value.split(',').map(piece => piece.trim());\n}\nconst LIFECYCLE_HOOKS = ['ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked', 'ngAfterContentInit', 'ngAfterContentChecked'];\nfunction shouldAddAbstractDirective(type) {\n  const reflect = getReflect();\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n  const propMetadata = reflect.propMetadata(type);\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === 'Output' || metadataName === 'HostBinding' || metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction compilePipe(type, meta) {\n  let ngPipeDef = null;\n  let ngFactoryDef = null;\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade({\n          usage: 0 /* JitCompilerUsage.Decorator */,\n          kind: 'pipe',\n          type: metadata.type\n        });\n        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode\n  });\n}\nfunction getPipeMetadata(type, meta) {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: !!meta.standalone\n  };\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nconst Directive = makeDecorator('Directive', (dir = {}) => dir, undefined, undefined, (type, meta) => compileDirective(type, meta));\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nconst Component = makeDecorator('Component', (c = {}) => ({\n  changeDetection: ChangeDetectionStrategy.Default,\n  ...c\n}), Directive, undefined, (type, meta) => compileComponent(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Pipe = makeDecorator('Pipe', p => ({\n  pure: true,\n  ...p\n}), undefined, undefined, (type, meta) => compilePipe(type, meta));\n/**\n * @Annotation\n * @publicApi\n */\nconst Input = makePropDecorator('Input', bindingPropertyName => ({\n  bindingPropertyName\n}));\n/**\n * @Annotation\n * @publicApi\n */\nconst Output = makePropDecorator('Output', bindingPropertyName => ({\n  bindingPropertyName\n}));\n/**\n * @Annotation\n * @publicApi\n */\nconst HostBinding = makePropDecorator('HostBinding', hostPropertyName => ({\n  hostPropertyName\n}));\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * ```\n *\n * The following example registers another DOM event handler that listens for `Enter` key-press\n * events on the global `window`.\n * ``` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key\n * to increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown.enter', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * ```\n * The list of valid key names for `keydown` and `keyup` events\n * can be found here:\n * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values\n *\n * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.\n *\n * The global target names that can be used to prefix an event name are\n * `document:`, `window:` and `body:`.\n *\n * @Annotation\n * @publicApi\n */\nconst HostListener = makePropDecorator('HostListener', (eventName, args) => ({\n  eventName,\n  args\n}));\n\n/**\n * @Annotation\n * @publicApi\n */\nconst NgModule = makeDecorator('NgModule', ngModule => ngModule, undefined, undefined,\n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n(type, meta) => compileNgModule(type, meta));\n\n/**\n * This indirection is needed to free up Component, etc symbols in the public API\n * to be used by the decorator versions of these annotations.\n */\n\nfunction noop(...args) {\n  // Do nothing.\n}\n\n/*\n * This file exists to support compilation of @angular/core in Ivy mode.\n *\n * When the Angular compiler processes a compilation unit, it normally writes imports to\n * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the\n * compiler writes imports to this file.\n *\n * Only a subset of such imports are supported - core is not allowed to declare components or pipes.\n * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used\n * when compiling @angular/core and is responsible for translating an external name (prefixed with\n * ɵ) to the internal symbol name as exported below.\n *\n * The below symbols are used for @Injectable and @NgModule compilation.\n */\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nconst ITS_JUST_ANGULAR = true;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see `ApplicationInitStatus`\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n *\n * ```\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * ```\n *\n * @publicApi\n */\nconst APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\nclass ApplicationInitStatus {\n  constructor(appInits) {\n    this.appInits = appInits;\n    this.resolve = noop;\n    this.reject = noop;\n    this.initialized = false;\n    this.done = false;\n    // TODO: Throw RuntimeErrorCode.INVALID_MULTI_PROVIDER if appInits is not an array\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n    const asyncInitPromises = [];\n    const complete = () => {\n      this.done = true;\n      this.resolve();\n    };\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        } else if (isObservable(initResult)) {\n          const observableAsPromise = new Promise((resolve, reject) => {\n            initResult.subscribe({\n              complete: resolve,\n              error: reject\n            });\n          });\n          asyncInitPromises.push(observableAsPromise);\n        }\n      }\n    }\n    Promise.all(asyncInitPromises).then(() => {\n      complete();\n    }).catch(e => {\n      this.reject(e);\n    });\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\nApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) {\n  return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8));\n};\nApplicationInitStatus.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: ApplicationInitStatus,\n  factory: ApplicationInitStatus.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [APP_INITIALIZER]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a unique string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * BY default, the value is randomly generated and assigned to the application by Angular.\n * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure\n * the root {@link Injector} that uses this token.\n *\n * @publicApi\n */\nconst APP_ID = new InjectionToken('AppId', {\n  providedIn: 'root',\n  factory: _appIdRandomProviderFactory\n});\nfunction _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n/**\n * Providers that generate a random `APP_ID_TOKEN`.\n * @publicApi\n */\nconst APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: []\n};\nfunction _randomChar() {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nconst PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nconst PLATFORM_ID = new InjectionToken('Platform ID', {\n  providedIn: 'platform',\n  factory: () => 'unknown' // set a default platform name, when none set explicitly\n});\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n */\nconst PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nconst ANIMATION_MODULE_TYPE = new InjectionToken('AnimationModuleType');\nclass Console {\n  log(message) {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message) {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\nConsole.ɵfac = function Console_Factory(t) {\n  return new (t || Console)();\n};\nConsole.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Console,\n  factory: Console.ɵfac,\n  providedIn: 'platform'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Console, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nfunction getGlobalLocale() {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode && typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return typeof $localize !== 'undefined' && $localize.locale || DEFAULT_LOCALE_ID;\n  }\n}\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst LOCALE_ID = new InjectionToken('LocaleId', {\n  providedIn: 'root',\n  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()\n});\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode', {\n  providedIn: 'root',\n  factory: () => USD_CURRENCY_CODE\n});\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS = new InjectionToken('Translations');\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nconst TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nvar MissingTranslationStrategy;\n(function (MissingTranslationStrategy) {\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Error\"] = 0] = \"Error\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Warning\"] = 1] = \"Warning\";\n  MissingTranslationStrategy[MissingTranslationStrategy[\"Ignore\"] = 2] = \"Ignore\";\n})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass ModuleWithComponentFactories {\n  constructor(ngModuleFactory, componentFactories) {\n    this.ngModuleFactory = ngModuleFactory;\n    this.componentFactories = componentFactories;\n  }\n}\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync(moduleType) {\n    return new NgModuleFactory(moduleType);\n  }\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync(moduleType) {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync(moduleType) {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType);\n    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {\n      const componentDef = getComponentDef(declaration);\n      componentDef && factories.push(new ComponentFactory(componentDef));\n      return factories;\n    }, []);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync(moduleType) {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n  /**\n   * Clears all caches.\n   */\n  clearCache() {}\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type) {}\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType) {\n    return undefined;\n  }\n}\nCompiler.ɵfac = function Compiler_Factory(t) {\n  return new (t || Compiler)();\n};\nCompiler.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Compiler,\n  factory: Compiler.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Compiler, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nconst COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nclass CompilerFactory {}\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.\n *\n * @publicApi\n * @globalApi ng\n */\nfunction applyChanges(component) {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component));\n  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nconst GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nfunction publishDefaultGlobalUtils$1() {\n  if (!_published) {\n    _published = true;\n    /**\n     * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n     * The contract of the function might be changed in any release and/or the function can be\n     * removed completely.\n     */\n    publishGlobalUtil('ɵsetProfiler', setProfiler);\n    publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata$1);\n    publishGlobalUtil('getComponent', getComponent);\n    publishGlobalUtil('getContext', getContext);\n    publishGlobalUtil('getListeners', getListeners);\n    publishGlobalUtil('getOwningComponent', getOwningComponent);\n    publishGlobalUtil('getHostElement', getHostElement);\n    publishGlobalUtil('getInjector', getInjector);\n    publishGlobalUtil('getRootComponents', getRootComponents);\n    publishGlobalUtil('getDirectives', getDirectives);\n    publishGlobalUtil('applyChanges', applyChanges);\n  }\n}\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nfunction publishGlobalUtil(name, fn) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = _global;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n      let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n      if (!container) {\n        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n      }\n      container[name] = fn;\n    }\n  }\n}\nconst promise = (() => Promise.resolve(0))();\nfunction scheduleMicroTask(fn) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => {\n      fn && fn.apply(null, null);\n    });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\nfunction getNativeRequestAnimationFrame() {\n  let nativeRequestAnimationFrame = _global['requestAnimationFrame'];\n  let nativeCancelAnimationFrame = _global['cancelAnimationFrame'];\n  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {\n    // use unpatched version of requestAnimationFrame(native delegate) if possible\n    // to avoid another Change detection\n    const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n    if (unpatchedRequestAnimationFrame) {\n      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n    }\n    const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];\n    if (unpatchedCancelAnimationFrame) {\n      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n    }\n  }\n  return {\n    nativeRequestAnimationFrame,\n    nativeCancelAnimationFrame\n  };\n}\nclass AsyncStackTaggingZoneSpec {\n  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n  }\n  onScheduleTask(delegate, _current, target, task) {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass NgZone {\n  constructor({\n    enableLongStackTrace = false,\n    shouldCoalesceEventChangeDetection = false,\n    shouldCoalesceRunChangeDetection = false\n  }) {\n    this.hasPendingMacrotasks = false;\n    this.hasPendingMicrotasks = false;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     */\n    this.isStable = true;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     */\n    this.onUnstable = new EventEmitter(false);\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     */\n    this.onMicrotaskEmpty = new EventEmitter(false);\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     */\n    this.onStable = new EventEmitter(false);\n    /**\n     * Notifies that an error has been delivered.\n     */\n    this.onError = new EventEmitter(false);\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(908 /* RuntimeErrorCode.MISSING_ZONEJS */, ngDevMode && `In this configuration Angular requires Zone.js`);\n    }\n    Zone.assertZonePatched();\n    const self = this;\n    self._nesting = 0;\n    self._outer = self._inner = Zone.current;\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n    if (Zone['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new Zone['TaskTrackingZoneSpec']());\n    }\n    if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.lastRequestAnimationFrameId = -1;\n    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n  static isInAngularZone() {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;\n  }\n  static assertInAngularZone() {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n    }\n  }\n  static assertNotInAngularZone() {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(909 /* RuntimeErrorCode.UNEXPECTED_ZONE_STATE */, ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n    }\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run(fn, applyThis, applyArgs) {\n    return this._inner.run(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask(fn, applyThis, applyArgs, name) {\n    const zone = this._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded(fn, applyThis, applyArgs) {\n    return this._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular(fn) {\n    return this._outer.run(fn);\n  }\n}\nconst EMPTY_PAYLOAD = {};\nfunction checkStable(zone) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\nfunction delayChangeDetectionForEvents(zone) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {\n    return;\n  }\n  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {\n    // This is a work around for https://github.com/angular/angular/issues/36839.\n    // The core issue is that when event coalescing is enabled it is possible for microtasks\n    // to get flushed too early (As is the case with `Promise.then`) between the\n    // coalescing eventTasks.\n    //\n    // To workaround this we schedule a \"fake\" eventTask before we process the\n    // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n    //  will prevent the microtasks queue from getting drained in between the coalescing\n    // eventTask execution.\n    if (!zone.fakeTopEventTask) {\n      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n        zone.lastRequestAnimationFrameId = -1;\n        updateMicroTaskStatus(zone);\n        zone.isCheckStableRunning = true;\n        checkStable(zone);\n        zone.isCheckStableRunning = false;\n      }, undefined, () => {}, () => {});\n    }\n    zone.fakeTopEventTask.invoke();\n  });\n  updateMicroTaskStatus(zone);\n}\nfunction forkInnerZoneWithAngularBehavior(zone) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: {\n      'isAngularZone': true\n    },\n    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        if (zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask' || zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        if (zone.shouldCoalesceRunChangeDetection) {\n          delayChangeDetectionForEventsDelegate();\n        }\n        onLeave(zone);\n      }\n    },\n    onHasTask: (delegate, current, target, hasTaskState) => {\n      delegate.hasTask(target, hasTaskState);\n      if (current === target) {\n        // We are only interested in hasTask events which originate from our zone\n        // (A child hasTask event is not interesting to us)\n        if (hasTaskState.change == 'microTask') {\n          zone._hasPendingMicrotasks = hasTaskState.microTask;\n          updateMicroTaskStatus(zone);\n          checkStable(zone);\n        } else if (hasTaskState.change == 'macroTask') {\n          zone.hasPendingMacrotasks = hasTaskState.macroTask;\n        }\n      }\n    },\n    onHandleError: (delegate, current, target, error) => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\nfunction updateMicroTaskStatus(zone) {\n  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\nfunction onEnter(zone) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\nfunction onLeave(zone) {\n  zone._nesting--;\n  checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nclass NoopNgZone {\n  constructor() {\n    this.hasPendingMicrotasks = false;\n    this.hasPendingMacrotasks = false;\n    this.isStable = true;\n    this.onUnstable = new EventEmitter();\n    this.onMicrotaskEmpty = new EventEmitter();\n    this.onStable = new EventEmitter();\n    this.onError = new EventEmitter();\n  }\n  run(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runGuarded(fn, applyThis, applyArgs) {\n    return fn.apply(applyThis, applyArgs);\n  }\n  runOutsideAngular(fn) {\n    return fn();\n  }\n  runTask(fn, applyThis, applyArgs, name) {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nconst TESTABILITY = new InjectionToken('');\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nconst TESTABILITY_GETTER = new InjectionToken('');\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\nclass Testability {\n  constructor(_ngZone, registry, testabilityGetter) {\n    this._ngZone = _ngZone;\n    this.registry = registry;\n    this._pendingCount = 0;\n    this._isZoneStable = true;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * @internal\n     */\n    this._didWork = false;\n    this._callbacks = [];\n    this.taskTrackingZone = null;\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone = typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n  _watchAngularEvents() {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount() {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount() {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n  /**\n   * Whether an associated application is stable\n   */\n  isStable() {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n  _runCallbacksIfReady() {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop();\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter(cb => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n        return true;\n      });\n      this._didWork = true;\n    }\n  }\n  getPendingTasks() {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map(t => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: t.creationLocation,\n        data: t.data\n      };\n    });\n  }\n  addCallback(cb, timeout, updateCb) {\n    let timeoutId = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter(cb => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push({\n      doneCb: cb,\n      timeoutId: timeoutId,\n      updateCb: updateCb\n    });\n  }\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb, timeout, updateCb) {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error('Task tracking zone is required when passing an update callback to ' + 'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb, timeout, updateCb);\n    this._runCallbacksIfReady();\n  }\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount() {\n    return this._pendingCount;\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  registerApplication(token) {\n    this.registry.registerApplication(token, this);\n  }\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  unregisterApplication(token) {\n    this.registry.unregisterApplication(token);\n  }\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using, provider, exactMatch) {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\nTestability.ɵfac = function Testability_Factory(t) {\n  return new (t || Testability)(ɵɵinject(NgZone), ɵɵinject(TestabilityRegistry), ɵɵinject(TESTABILITY_GETTER));\n};\nTestability.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: Testability,\n  factory: Testability.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(Testability, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgZone\n    }, {\n      type: TestabilityRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TESTABILITY_GETTER]\n      }]\n    }];\n  }, null);\n})();\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nclass TestabilityRegistry {\n  constructor() {\n    /** @internal */\n    this._applications = new Map();\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token, testability) {\n    this._applications.set(token, testability);\n  }\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token) {\n    this._applications.delete(token);\n  }\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem) {\n    return this._applications.get(elem) || null;\n  }\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities() {\n    return Array.from(this._applications.values());\n  }\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements() {\n    return Array.from(this._applications.keys());\n  }\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem, findInAncestors = true) {\n    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n  }\n}\nTestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) {\n  return new (t || TestabilityRegistry)();\n};\nTestabilityRegistry.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: TestabilityRegistry,\n  factory: TestabilityRegistry.ɵfac,\n  providedIn: 'platform'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], null, null);\n})();\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nfunction setTestabilityGetter(getter) {\n  _testabilityGetter = getter;\n}\nlet _testabilityGetter;\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\nlet _platformInjector = null;\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nconst ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nconst PLATFORM_DESTROY_LISTENERS = new InjectionToken('PlatformDestroyListeners');\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nconst APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\nfunction compileNgModuleFactory(injector, options, moduleType) {\n  ngDevMode && assertNgModuleType(moduleType);\n  const moduleFactory = new NgModuleFactory(moduleType);\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces))\n  });\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers));\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n  const compiler = getCompilerFacade({\n    usage: 0 /* JitCompilerUsage.Decorator */,\n    kind: 'NgModule',\n    type: moduleType\n  });\n  const compilerInjector = Injector.create({\n    providers: compilerProviders\n  });\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);\n}\nfunction publishDefaultGlobalUtils() {\n  ngDevMode && publishDefaultGlobalUtils$1();\n}\nfunction isBoundToModule(cf) {\n  return cf.isBoundToModule;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nclass NgProbeToken {\n  constructor(name, token) {\n    this.name = name;\n    this.token = token;\n  }\n}\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nfunction createPlatform(injector) {\n  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, ngDevMode && 'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  publishDefaultGlobalUtils();\n  _platformInjector = injector;\n  const platform = injector.get(PlatformRef);\n  runPlatformInitializers(injector);\n  return platform;\n}\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nfunction createOrReusePlatformInjector(providers = []) {\n  // If a platform injector already exists, it means that the platform\n  // is already bootstrapped and no additional actions are required.\n  if (_platformInjector) return _platformInjector;\n  // Otherwise, setup a new platform injector and run platform initializers.\n  const injector = createPlatformInjector(providers);\n  _platformInjector = injector;\n  publishDefaultGlobalUtils();\n  runPlatformInitializers(injector);\n  return injector;\n}\nfunction runPlatformInitializers(injector) {\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) {\n    inits.forEach(init => init());\n  }\n}\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\nfunction internalCreateApplication(config) {\n  const {\n    rootComponent,\n    appProviders,\n    platformProviders\n  } = config;\n  if (NG_DEV_MODE && rootComponent !== undefined) {\n    assertStandaloneComponentType(rootComponent);\n  }\n  const platformInjector = createOrReusePlatformInjector(platformProviders);\n  const ngZone = getNgZone('zone.js', getNgZoneOptions());\n  return ngZone.run(() => {\n    // Create root application injector based on a set of providers configured at the platform\n    // bootstrap level as well as providers passed to the bootstrap call by a user.\n    const allAppProviders = [{\n      provide: NgZone,\n      useValue: ngZone\n    }, ...(appProviders || []) //\n    ];\n\n    const envInjector = createEnvironmentInjector(allAppProviders, platformInjector, 'Environment Injector');\n    const exceptionHandler = envInjector.get(ErrorHandler, null);\n    if (NG_DEV_MODE && !exceptionHandler) {\n      throw new RuntimeError(402 /* RuntimeErrorCode.ERROR_HANDLER_NOT_FOUND */, 'No `ErrorHandler` found in the Dependency Injection tree.');\n    }\n    let onErrorSubscription;\n    ngZone.runOutsideAngular(() => {\n      onErrorSubscription = ngZone.onError.subscribe({\n        next: error => {\n          exceptionHandler.handleError(error);\n        }\n      });\n    });\n    // If the whole platform is destroyed, invoke the `destroy` method\n    // for all bootstrapped applications as well.\n    const destroyListener = () => envInjector.destroy();\n    const onPlatformDestroyListeners = platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n    onPlatformDestroyListeners.add(destroyListener);\n    envInjector.onDestroy(() => {\n      onErrorSubscription.unsubscribe();\n      onPlatformDestroyListeners.delete(destroyListener);\n    });\n    return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n      const initStatus = envInjector.get(ApplicationInitStatus);\n      initStatus.runInitializers();\n      return initStatus.donePromise.then(() => {\n        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n        setLocaleId(localeId || DEFAULT_LOCALE_ID);\n        const appRef = envInjector.get(ApplicationRef);\n        if (rootComponent !== undefined) {\n          appRef.bootstrap(rootComponent);\n        }\n        return appRef;\n      });\n    });\n  });\n}\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nfunction createPlatformFactory(parentPlatformFactory, name, providers = []) {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      const platformProviders = [...providers, ...extraProviders, {\n        provide: marker,\n        useValue: true\n      }];\n      if (parentPlatformFactory) {\n        parentPlatformFactory(platformProviders);\n      } else {\n        createPlatform(createPlatformInjector(platformProviders, desc));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nfunction assertPlatform(requiredToken) {\n  const platform = getPlatform();\n  if (!platform) {\n    throw new RuntimeError(401 /* RuntimeErrorCode.PLATFORM_NOT_FOUND */, ngDevMode && 'No platform exists!');\n  }\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !platform.injector.get(requiredToken, null)) {\n    throw new RuntimeError(400 /* RuntimeErrorCode.MULTIPLE_PLATFORMS */, 'A platform with a different configuration has been created. Please destroy it first.');\n  }\n  return platform;\n}\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nfunction createPlatformInjector(providers = [], name) {\n  return Injector.create({\n    name,\n    providers: [{\n      provide: INJECTOR_SCOPE,\n      useValue: 'platform'\n    }, {\n      provide: PLATFORM_DESTROY_LISTENERS,\n      useValue: new Set([() => _platformInjector = null])\n    }, ...providers]\n  });\n}\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nfunction destroyPlatform() {\n  getPlatform()?.destroy();\n}\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nfunction getPlatform() {\n  return _platformInjector?.get(PlatformRef) ?? null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\nclass PlatformRef {\n  /** @internal */\n  constructor(_injector) {\n    this._injector = _injector;\n    this._modules = [];\n    this._destroyListeners = [];\n    this._destroyed = false;\n  }\n  /**\n   * Creates an instance of an `@NgModule` for the given platform.\n   *\n   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n   */\n  bootstrapModuleFactory(moduleFactory, options) {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZone = getNgZone(options?.ngZone, getNgZoneOptions(options));\n    const providers = [{\n      provide: NgZone,\n      useValue: ngZone\n    }];\n    // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n    // created within the Angular zone\n    // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n    // created outside of the Angular zone.\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create({\n        providers: providers,\n        parent: this.injector,\n        name: moduleFactory.moduleType.name\n      });\n      const moduleRef = moduleFactory.create(ngZoneInjector);\n      const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new RuntimeError(402 /* RuntimeErrorCode.ERROR_HANDLER_NOT_FOUND */, ngDevMode && 'No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      ngZone.runOutsideAngular(() => {\n        const subscription = ngZone.onError.subscribe({\n          next: error => {\n            exceptionHandler.handleError(error);\n          }\n        });\n        moduleRef.onDestroy(() => {\n          remove(this._modules, moduleRef);\n          subscription.unsubscribe();\n        });\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {\n        const initStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n          const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n          setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n  /**\n   * Creates an instance of an `@NgModule` for a given platform.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule(moduleType, compilerOptions = []) {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType).then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n  _moduleDoBootstrap(moduleRef) {\n    const appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new RuntimeError(-403 /* RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND */, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` + `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` + `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n  /**\n   * Registers a listener to be called when the platform is destroyed.\n   */\n  onDestroy(callback) {\n    this._destroyListeners.push(callback);\n  }\n  /**\n   * Retrieves the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector() {\n    return this._injector;\n  }\n  /**\n   * Destroys the current Angular platform and all Angular applications on the page.\n   * Destroys all modules and listeners registered with the platform.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(404 /* RuntimeErrorCode.PLATFORM_ALREADY_DESTROYED */, ngDevMode && 'The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);\n    if (destroyListeners) {\n      destroyListeners.forEach(listener => listener());\n      destroyListeners.clear();\n    }\n    this._destroyed = true;\n  }\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n}\nPlatformRef.ɵfac = function PlatformRef_Factory(t) {\n  return new (t || PlatformRef)(ɵɵinject(Injector));\n};\nPlatformRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: PlatformRef,\n  factory: PlatformRef.ɵfac,\n  providedIn: 'platform'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(PlatformRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'platform'\n    }]\n  }], function () {\n    return [{\n      type: Injector\n    }];\n  }, null);\n})();\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options) {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: !!(options && options.ngZoneEventCoalescing) || false,\n    shouldCoalesceRunChangeDetection: !!(options && options.ngZoneRunCoalescing) || false\n  };\n}\nfunction getNgZone(ngZoneToUse, options) {\n  let ngZone;\n  if (ngZoneToUse === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneToUse === 'zone.js' ? undefined : ngZoneToUse) || new NgZone(options);\n  }\n  return ngZone;\n}\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch(e => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\nfunction optionsReducer(dst, objs) {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {\n      ...dst,\n      ...objs\n    };\n  }\n  return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\nclass ApplicationRef {\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n  /**\n   * The `EnvironmentInjector` used to create this application.\n   */\n  get injector() {\n    return this._injector;\n  }\n  /** @internal */\n  constructor(_zone, _injector, _exceptionHandler) {\n    this._zone = _zone;\n    this._injector = _injector;\n    this._exceptionHandler = _exceptionHandler;\n    /** @internal */\n    this._bootstrapListeners = [];\n    this._views = [];\n    this._runningTick = false;\n    this._stable = true;\n    this._destroyed = false;\n    this._destroyListeners = [];\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     */\n    this.componentTypes = [];\n    /**\n     * Get a list of components registered to this application.\n     */\n    this.components = [];\n    this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this._zone.run(() => {\n          this.tick();\n        });\n      }\n    });\n    const isCurrentlyStable = new Observable(observer => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n    const isStable = new Observable(observer => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks && !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n      const unstableSub = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => {\n            observer.next(false);\n          });\n        }\n      });\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n    this.isStable = merge$1(isCurrentlyStable, isStable.pipe(share()));\n  }\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap(componentOrFactory, rootSelectorOrNode) {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;\n    const initStatus = this._injector.get(ApplicationInitStatus);\n    if (!initStatus.done) {\n      const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n      const errorMessage = 'Cannot bootstrap as there are still asynchronous initializers running.' + (standalone ? '' : ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n      throw new RuntimeError(405 /* RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING */, NG_DEV_MODE && errorMessage);\n    }\n    let componentFactory;\n    if (isComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      const resolver = this._injector.get(ComponentFactoryResolver$1);\n      componentFactory = resolver.resolveComponentFactory(componentOrFactory);\n    }\n    this.componentTypes.push(componentFactory.componentType);\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef$1);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(TESTABILITY, null);\n    testability?.registerApplication(nativeElement);\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      testability?.unregisterApplication(nativeElement);\n    });\n    this._loadComponent(compRef);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const _console = this._injector.get(Console);\n      _console.log(`Angular is running in development mode. Call enableProdMode() to enable production mode.`);\n    }\n    return compRef;\n  }\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick() {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    if (this._runningTick) {\n      throw new RuntimeError(101 /* RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK */, ngDevMode && 'ApplicationRef.tick is called recursively');\n    }\n    try {\n      this._runningTick = true;\n      for (let view of this._views) {\n        view.detectChanges();\n      }\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this._views) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n    }\n  }\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef) {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const view = viewRef;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef) {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const view = viewRef;\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n  _loadComponent(componentRef) {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n    if (ngDevMode && !Array.isArray(listeners)) {\n      throw new RuntimeError(-209 /* RuntimeErrorCode.INVALID_MULTI_PROVIDER */, 'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' + `(expected an array, but got ${typeof listeners}). ` + 'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' + '`multi: true` provider.');\n    }\n    listeners.push(...this._bootstrapListeners);\n    listeners.forEach(listener => listener(componentRef));\n  }\n  /** @internal */\n  ngOnDestroy() {\n    if (this._destroyed) return;\n    try {\n      // Call all the lifecycle hooks.\n      this._destroyListeners.forEach(listener => listener());\n      // Destroy all registered views.\n      this._views.slice().forEach(view => view.destroy());\n      this._onMicrotaskEmptySubscription.unsubscribe();\n    } finally {\n      // Indicate that this instance is destroyed.\n      this._destroyed = true;\n      // Release all references.\n      this._views = [];\n      this._bootstrapListeners = [];\n      this._destroyListeners = [];\n    }\n  }\n  /**\n   * Registers a listener to be called when an instance is destroyed.\n   *\n   * @param callback A callback function to add as a listener.\n   * @returns A function which unregisters a listener.\n   *\n   * @internal\n   */\n  onDestroy(callback) {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    this._destroyListeners.push(callback);\n    return () => remove(this._destroyListeners, callback);\n  }\n  /**\n   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n   * will destroy the associated environment injectors as well as all the bootstrapped components\n   * with their views.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n    }\n    const injector = this._injector;\n    // Check that this injector instance supports destroy operation.\n    if (injector.destroy && !injector.destroyed) {\n      // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n      // hook, which invokes the remaining cleanup actions.\n      injector.destroy();\n    }\n  }\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n  warnIfDestroyed() {\n    if (NG_DEV_MODE && this._destroyed) {\n      console.warn(formatRuntimeError(406 /* RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED */, 'This instance of the `ApplicationRef` has already been destroyed.'));\n    }\n  }\n}\nApplicationRef.ɵfac = function ApplicationRef_Factory(t) {\n  return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(EnvironmentInjector), ɵɵinject(ErrorHandler));\n};\nApplicationRef.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n  token: ApplicationRef,\n  factory: ApplicationRef.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationRef, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: NgZone\n    }, {\n      type: EnvironmentInjector\n    }, {\n      type: ErrorHandler\n    }];\n  }, null);\n})();\nfunction remove(list, el) {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\nfunction _lastDefined(args) {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\nfunction _mergeArrays(parts) {\n  const result = [];\n  parts.forEach(part => part && result.push(...part));\n  return result;\n}\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction isDevMode() {\n  return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nfunction enableProdMode() {\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    _global['ngDevMode'] = false;\n  }\n}\n\n// Public API for Zone\n\n// Public API for render\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use `getNgModuleById` instead.\n */\nfunction getModuleFactory(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return new NgModuleFactory(type);\n}\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nfunction getNgModuleById(id) {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return type;\n}\nfunction noModuleError(id) {\n  return new Error(`No module with ID ${id} loaded`);\n}\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nclass ChangeDetectorRef {}\n/**\n * @internal\n * @nocollapse\n */\nChangeDetectorRef.__NG_ELEMENT_ID__ = injectChangeDetectorRef;\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nfunction injectChangeDetectorRef(flags) {\n  return createViewRef(getCurrentTNode(), getLView(), (flags & 16 /* InternalInjectFlags.ForPipe */) === 16 /* InternalInjectFlags.ForPipe */);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode, lView, isPipe) {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView); // look down\n    return new ViewRef$1(componentView, componentView);\n  } else if (tNode.type & (3 /* TNodeType.AnyRNode */ | 12 /* TNodeType.AnyContainer */ | 32 /* TNodeType.Icu */)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW]; // look up\n    return new ViewRef$1(hostComponentView, lView);\n  }\n  return null;\n}\n\n/**\n * Represents an Angular [view](guide/glossary#view \"Definition\").\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nclass ViewRef extends ChangeDetectorRef {}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-hierarchy) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nclass EmbeddedViewRef extends ViewRef {}\n\n// Public API for compiler\n\n// This file exists for easily patching NgModuleFactoryLoader in g3\nvar ng_module_factory_loader_impl = {};\n\n/**\n * @publicApi\n */\nclass DebugEventListener {\n  constructor(name, callback) {\n    this.name = name;\n    this.callback = callback;\n  }\n}\n/**\n * @publicApi\n */\nfunction asNativeElements(debugEls) {\n  return debugEls.map(el => el.nativeElement);\n}\n/**\n * @publicApi\n */\nclass DebugNode {\n  constructor(nativeNode) {\n    this.nativeNode = nativeNode;\n  }\n  /**\n   * The `DebugElement` parent. Will be `null` if this is the root element.\n   */\n  get parent() {\n    const parent = this.nativeNode.parentNode;\n    return parent ? new DebugElement(parent) : null;\n  }\n  /**\n   * The host dependency injector. For example, the root element's component instance injector.\n   */\n  get injector() {\n    return getInjector(this.nativeNode);\n  }\n  /**\n   * The element's own component instance, if it has one.\n   */\n  get componentInstance() {\n    const nativeElement = this.nativeNode;\n    return nativeElement && (getComponent(nativeElement) || getOwningComponent(nativeElement));\n  }\n  /**\n   * An object that provides parent context for this element. Often an ancestor component instance\n   * that governs this element.\n   *\n   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\n   * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\n   * of heroes\"`.\n   */\n  get context() {\n    return getComponent(this.nativeNode) || getContext(this.nativeNode);\n  }\n  /**\n   * The callbacks attached to the component's @Output properties and/or the element's event\n   * properties.\n   */\n  get listeners() {\n    return getListeners(this.nativeNode).filter(listener => listener.type === 'dom');\n  }\n  /**\n   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n   * variable name.\n   */\n  get references() {\n    return getLocalRefs(this.nativeNode);\n  }\n  /**\n   * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n   * component lists in its providers metadata.\n   */\n  get providerTokens() {\n    return getInjectionTokens(this.nativeNode);\n  }\n}\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing-components-scenarios)\n * @see [Basics of testing components](guide/testing-components-basics)\n * @see [Testing utility APIs](guide/testing-utility-apis)\n */\nclass DebugElement extends DebugNode {\n  constructor(nativeNode) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n  /**\n   * The underlying DOM element at the root of the component.\n   */\n  get nativeElement() {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode : null;\n  }\n  /**\n   * The element tag name, if it is an element.\n   */\n  get name() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView !== null) {\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex];\n      return tNode.value;\n    } else {\n      return this.nativeNode.nodeName;\n    }\n  }\n  /**\n   *  Gets a map of property names to property values for an element.\n   *\n   *  This map includes:\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n   *\n   *  It does not include:\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n   */\n  get properties() {\n    const context = getLContext(this.nativeNode);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex];\n    const properties = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n  /**\n   *  A map of attribute names to attribute values for an element.\n   */\n  get attributes() {\n    const attributes = {};\n    const element = this.nativeElement;\n    if (!element) {\n      return attributes;\n    }\n    const context = getLContext(element);\n    const lView = context ? context.lView : null;\n    if (lView === null) {\n      return {};\n    }\n    const tNodeAttrs = lView[TVIEW].data[context.nodeIndex].attrs;\n    const lowercaseTNodeAttrs = [];\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n        i += 2;\n      }\n    }\n    for (const attr of element.attributes) {\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (!lowercaseTNodeAttrs.includes(attr.name)) {\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n  /**\n   * The inline styles of the DOM element.\n   *\n   * Will be `null` if there is no `style` property on the underlying DOM element.\n   *\n   * @see [ElementCSSInlineStyle](https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style)\n   */\n  get styles() {\n    if (this.nativeElement && this.nativeElement.style) {\n      return this.nativeElement.style;\n    }\n    return {};\n  }\n  /**\n   * A map containing the class names on the element as keys.\n   *\n   * This map is derived from the `className` property of the DOM element.\n   *\n   * Note: The values of this object will always be `true`. The class key will not appear in the KV\n   * object if it does not exist on the element.\n   *\n   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n   */\n  get classes() {\n    const result = {};\n    const element = this.nativeElement;\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className;\n    const classes = typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n    classes.forEach(value => result[value] = true);\n    return result;\n  }\n  /**\n   * The `childNodes` of the DOM element as a `DebugNode` array.\n   *\n   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n   */\n  get childNodes() {\n    const childNodes = this.nativeNode.childNodes;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * The immediate `DebugElement` children. Walk the tree by descending through `children`.\n   */\n  get children() {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element));\n    }\n    return children;\n  }\n  /**\n   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\n   */\n  query(predicate) {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n  /**\n   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\n   */\n  queryAll(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, true);\n    return matches;\n  }\n  /**\n   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\n   */\n  queryAllNodes(predicate) {\n    const matches = [];\n    _queryAll(this, predicate, matches, false);\n    return matches;\n  }\n  /**\n   * Triggers the event by its name if there is a corresponding listener in the element's\n   * `listeners` collection.\n   *\n   * If the event lacks a listener or there's some other problem, consider\n   * calling `nativeElement.dispatchEvent(eventObject)`.\n   *\n   * @param eventName The name of the event to trigger\n   * @param eventObj The _event object_ expected by the handler\n   *\n   * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)\n   */\n  triggerEventHandler(eventName, eventObj) {\n    const node = this.nativeNode;\n    const invokedListeners = [];\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach(listener => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 && unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\nfunction copyDomProperties(element, properties) {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = element[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\nfunction isPrimitiveValue(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' || value === null;\n}\nfunction _queryAll(parentElement, predicate, matches, elementsOnly) {\n  const context = getLContext(parentElement.nativeNode);\n  const lView = context ? context.lView : null;\n  if (lView !== null) {\n    const parentTNode = lView[TVIEW].data[context.nodeIndex];\n    _queryNodeChildren(parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildren(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (3 /* TNodeType.AnyRNode */ | 8 /* TNodeType.ElementContainer */)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildren(componentView[TVIEW].firstChild, componentView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainer(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & 4 /* TNodeType.Container */) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & 16 /* TNodeType.Projection */) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST];\n    const head = componentHost.projection[tNode.projection];\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT];\n      const nextTNode = nextLView[TVIEW].data[head.index];\n      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = tNode.flags & 2 /* TNodeFlags.isProjected */ ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i];\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    }\n  }\n}\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n    if (debugNode) {\n      if (elementsOnly && debugNode instanceof DebugElement && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (!elementsOnly && predicate(debugNode) && matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      }\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(properties, tNode, lView, tData) {\n  let bindingIndexes = tNode.propertyBindings;\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex];\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map();\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n/**\n * @publicApi\n */\nfunction getDebugNode(nativeNode) {\n  if (nativeNode instanceof Node) {\n    if (!nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY)) {\n      nativeNode[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ? new DebugElement(nativeNode) : new DebugNode(nativeNode);\n    }\n    return nativeNode[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\n// TODO: cleanup all references to this function and remove it.\nfunction getDebugNodeR2(_nativeNode) {\n  return null;\n}\nfunction getAllDebugNodes() {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\nfunction indexDebugNode(node) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\nfunction removeDebugNodeFromIndex(node) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\nclass DefaultIterableDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return isListLikeIterable(obj);\n  }\n  create(trackByFn) {\n    return new DefaultIterableDiffer(trackByFn);\n  }\n}\nconst trackByIdentity = (index, item) => item;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nclass DefaultIterableDiffer {\n  constructor(trackByFn) {\n    this.length = 0;\n    // Keeps track of the used records at any point in time (during & across `_check()` calls)\n    this._linkedRecords = null;\n    // Keeps track of the removed records at any point in time during `_check()` calls.\n    this._unlinkedRecords = null;\n    this._previousItHead = null;\n    this._itHead = null;\n    this._itTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._movesHead = null;\n    this._movesTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n    // Keeps track of records where custom track by is the same, but item identity has changed\n    this._identityChangesHead = null;\n    this._identityChangesTail = null;\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachOperation(fn) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachMovedItem(fn) {\n    let record;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  forEachIdentityChange(fn) {\n    let record;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n  diff(collection) {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n  onDestroy() {}\n  check(collection) {\n    this._reset();\n    let record = this._itHead;\n    let mayBeDirty = false;\n    let index;\n    let item;\n    let itemTrackBy;\n    if (Array.isArray(collection)) {\n      this.length = collection.length;\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, item => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      this.length = index;\n    }\n    this._truncate(record);\n    this.collection = collection;\n    return this.isDirty;\n  }\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty() {\n    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record, item, itemTrackBy, index) {\n    // The previous record after which we will append the current one.\n    let previousRecord;\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record, item, itemTrackBy, index) {\n    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n  /** @internal */\n  _reinsertAfter(record, prevRecord, index) {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _moveAfter(record, prevRecord, index) {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n  /** @internal */\n  _addAfter(record, prevRecord, index) {\n    this._insertAfter(record, prevRecord, index);\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _insertAfter(record, prevRecord, index) {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n    const next = prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap();\n    }\n    this._linkedRecords.put(record);\n    record.currentIndex = index;\n    return record;\n  }\n  /** @internal */\n  _remove(record) {\n    return this._addToRemovals(this._unlink(record));\n  }\n  /** @internal */\n  _unlink(record) {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n    const prev = record._prev;\n    const next = record._next;\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n    return record;\n  }\n  /** @internal */\n  _addToMoves(record, toIndex) {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n    return record;\n  }\n  _addToRemovals(record) {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n  /** @internal */\n  _addIdentityChange(record, item) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\nclass IterableChangeRecord_ {\n  constructor(item, trackById) {\n    this.item = item;\n    this.trackById = trackById;\n    this.currentIndex = null;\n    this.previousIndex = null;\n    /** @internal */\n    this._nextPrevious = null;\n    /** @internal */\n    this._prev = null;\n    /** @internal */\n    this._next = null;\n    /** @internal */\n    this._prevDup = null;\n    /** @internal */\n    this._nextDup = null;\n    /** @internal */\n    this._prevRemoved = null;\n    /** @internal */\n    this._nextRemoved = null;\n    /** @internal */\n    this._nextAdded = null;\n    /** @internal */\n    this._nextMoved = null;\n    /** @internal */\n    this._nextIdentityChange = null;\n  }\n}\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList {\n  constructor() {\n    /** @internal */\n    this._head = null;\n    /** @internal */\n    this._tail = null;\n  }\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record) {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById, atOrAfterIndex) {\n    let record;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record) {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n    const prev = record._prevDup;\n    const next = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\nclass _DuplicateMap {\n  constructor() {\n    this.map = new Map();\n  }\n  put(record) {\n    const key = record.trackById;\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById, atOrAfterIndex) {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record) {\n    const key = record.trackById;\n    const recordList = this.map.get(key);\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n  get isEmpty() {\n    return this.map.size === 0;\n  }\n  clear() {\n    this.map.clear();\n  }\n}\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\nclass DefaultKeyValueDifferFactory {\n  constructor() {}\n  supports(obj) {\n    return obj instanceof Map || isJsObject(obj);\n  }\n  create() {\n    return new DefaultKeyValueDiffer();\n  }\n}\nclass DefaultKeyValueDiffer {\n  constructor() {\n    this._records = new Map();\n    this._mapHead = null;\n    // _appendAfter is used in the check loop\n    this._appendAfter = null;\n    this._previousMapHead = null;\n    this._changesHead = null;\n    this._changesTail = null;\n    this._additionsHead = null;\n    this._additionsTail = null;\n    this._removalsHead = null;\n    this._removalsTail = null;\n  }\n  get isDirty() {\n    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;\n  }\n  forEachItem(fn) {\n    let record;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n  forEachPreviousItem(fn) {\n    let record;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n  forEachChangedItem(fn) {\n    let record;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n  forEachAddedItem(fn) {\n    let record;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n  forEachRemovedItem(fn) {\n    let record;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n  diff(map) {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new RuntimeError(900 /* RuntimeErrorCode.INVALID_DIFFER_INPUT */, ngDevMode && `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n    return this.check(map) ? this : null;\n  }\n  onDestroy() {}\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map) {\n    this._reset();\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n    this._forEach(map, (value, key) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n      this._removalsHead = insertBefore;\n      for (let record = insertBefore; record !== null; record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n    return this.isDirty;\n  }\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  _insertBeforeOrAppend(before, record) {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n      this._appendAfter = before;\n      return before;\n    }\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n    this._appendAfter = record;\n    return null;\n  }\n  _getOrCreateRecordForKey(key, value) {\n    if (this._records.has(key)) {\n      const record = this._records.get(key);\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n      return record;\n    }\n    const record = new KeyValueChangeRecord_(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  _maybeAddToChanges(record, newValue) {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n  _addToAdditions(record) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n  _addToChanges(record) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n  /** @internal */\n  _forEach(obj, fn) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\nclass KeyValueChangeRecord_ {\n  constructor(key) {\n    this.key = key;\n    this.previousValue = null;\n    this.currentValue = null;\n    /** @internal */\n    this._nextPrevious = null;\n    /** @internal */\n    this._next = null;\n    /** @internal */\n    this._prev = null;\n    /** @internal */\n    this._nextAdded = null;\n    /** @internal */\n    this._nextRemoved = null;\n    /** @internal */\n    this._nextChanged = null;\n  }\n}\nfunction defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nclass IterableDiffers {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  static create(factories, parent) {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new IterableDiffers(factories);\n  }\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories) {\n    return {\n      provide: IterableDiffers,\n      useFactory: parent => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  find(iterable) {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n/** @nocollapse */\nIterableDiffers.ɵprov = ɵɵdefineInjectable({\n  token: IterableDiffers,\n  providedIn: 'root',\n  factory: defaultIterableDiffersFactory\n});\nfunction getTypeNameForDebugging(type) {\n  return type['name'] || typeof type;\n}\nfunction defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nclass KeyValueDiffers {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  static create(factories, parent) {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories) {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: parent => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n  find(kv) {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new RuntimeError(901 /* RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY */, ngDevMode && `Cannot find a differ supporting object '${kv}'`);\n  }\n}\n/** @nocollapse */\nKeyValueDiffers.ɵprov = ɵɵdefineInjectable({\n  token: KeyValueDiffers,\n  providedIn: 'root',\n  factory: defaultKeyValueDiffersFactory\n});\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff = [new DefaultKeyValueDifferFactory()];\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff = [new DefaultIterableDifferFactory()];\nconst defaultIterableDiffers = new IterableDiffers(iterableDiff);\nconst defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nconst platformCore = createPlatformFactory(null, 'core', []);\n\n/**\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects\n * `ApplicationRef` to instantiate it.\n *\n * @publicApi\n */\nclass ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef) {}\n}\nApplicationModule.ɵfac = function ApplicationModule_Factory(t) {\n  return new (t || ApplicationModule)(ɵɵinject(ApplicationRef));\n};\nApplicationModule.ɵmod = /*@__PURE__*/ɵɵdefineNgModule({\n  type: ApplicationModule\n});\nApplicationModule.ɵinj = /*@__PURE__*/ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && setClassMetadata(ApplicationModule, [{\n    type: NgModule\n  }], function () {\n    return [{\n      type: ApplicationRef\n    }];\n  }, null);\n})();\n\n/** Coerces a value (typically a string) to a boolean. */\nfunction coerceToBoolean(value) {\n  return typeof value === 'boolean' ? value : value != null && value !== 'false';\n}\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareDirective(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'directive',\n    type: decl.type\n  });\n  return compiler.compileDirectiveDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareClassMetadata(decl) {\n  setClassMetadata(decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);\n}\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareComponent(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'component',\n    type: decl.type\n  });\n  return compiler.compileComponentDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareFactory(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: getFactoryKind(decl.target),\n    type: decl.type\n  });\n  return compiler.compileFactoryDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\nfunction getFactoryKind(target) {\n  switch (target) {\n    case FactoryTarget.Directive:\n      return 'directive';\n    case FactoryTarget.Component:\n      return 'component';\n    case FactoryTarget.Injectable:\n      return 'injectable';\n    case FactoryTarget.Pipe:\n      return 'pipe';\n    case FactoryTarget.NgModule:\n      return 'NgModule';\n  }\n}\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjectable(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'injectable',\n    type: decl.type\n  });\n  return compiler.compileInjectableDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);\n}\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareInjector(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileInjectorDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);\n}\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclareNgModule(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'NgModule',\n    type: decl.type\n  });\n  return compiler.compileNgModuleDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);\n}\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nfunction ɵɵngDeclarePipe(decl) {\n  const compiler = getCompilerFacade({\n    usage: 1 /* JitCompilerUsage.PartialDeclaration */,\n    kind: 'pipe',\n    type: decl.type\n  });\n  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);\n}\n\n// clang-format off\n// clang-format on\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const host = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {host, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component, see\n * additional info about it at https://angular.io/guide/standalone-components#environment-injectors.\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it at\n * https://angular.io/guide/hierarchical-dependency-injection#elementinjector.\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nfunction createComponent(component, options) {\n  ngDevMode && assertComponentDef(component);\n  const componentDef = getComponentDef(component);\n  const elementInjector = options.elementInjector || getNullInjector();\n  const factory = new ComponentFactory(componentDef);\n  return factory.create(elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector);\n}\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nfunction reflectComponentType(component) {\n  const componentDef = getComponentDef(component);\n  if (!componentDef) return null;\n  const factory = new ComponentFactory(componentDef);\n  return {\n    get selector() {\n      return factory.selector;\n    },\n    get type() {\n      return factory.componentType;\n    },\n    get inputs() {\n      return factory.inputs;\n    },\n    get outputs() {\n      return factory.outputs;\n    },\n    get ngContentSelectors() {\n      return factory.ngContentSelectors;\n    },\n    get isStandalone() {\n      return componentDef.standalone;\n    }\n  };\n}\n\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  // This helper is to give a reasonable error message to people upgrading to v9 that have not yet\n  // installed `@angular/localize` in their app.\n  // tslint:disable-next-line: no-toplevel-property-access\n  _global.$localize = _global.$localize || function () {\n    throw new Error('It looks like your application or one of its dependencies is using i18n.\\n' + 'Angular 9 introduced a global `$localize()` function that needs to be loaded.\\n' + 'Please run `ng add @angular/localize` from the Angular CLI.\\n' + '(For non-CLI projects, add `import \\'@angular/localize/init\\';` to your `polyfills.ts` file.\\n' + 'For server-side rendering applications add the import to your `main.server.ts` file.)');\n  };\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/* This file is not used to build this module. It is only used during editing\n * by the TypeScript language service and during build for verification. `ngc`\n * replaces this file with production index.ts when it rewrites private symbol\n * names.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANALYZE_FOR_ENTRY_COMPONENTS, ANIMATION_MODULE_TYPE, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory$1 as ComponentFactory, ComponentFactoryResolver$1 as ComponentFactoryResolver, ComponentRef$1 as ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, Directive, ENVIRONMENT_INITIALIZER, ElementRef, EmbeddedViewRef, EnvironmentInjector, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory$1 as NgModuleFactory, NgModuleRef$1 as NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, ReflectiveInjector, ReflectiveKey, Renderer2, RendererFactory2, RendererStyleFlags2, ResolvedReflectiveFactory, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation$1 as ViewEncapsulation, ViewRef, asNativeElements, assertPlatform, createComponent, createEnvironmentInjector, createNgModule, createNgModuleRef, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getNgModuleById, getPlatform, importProvidersFrom, inject, isDevMode, isStandalone, makeEnvironmentProviders, platformCore, reflectComponentType, resolveForwardRef, setTestabilityGetter, ALLOW_MULTIPLE_PLATFORMS as ɵALLOW_MULTIPLE_PLATFORMS, APP_ID_RANDOM_PROVIDER as ɵAPP_ID_RANDOM_PROVIDER, ComponentFactory$1 as ɵComponentFactory, Console as ɵConsole, DEFAULT_LOCALE_ID as ɵDEFAULT_LOCALE_ID, INJECTOR_SCOPE as ɵINJECTOR_SCOPE, LContext as ɵLContext, LifecycleHooksFeature as ɵLifecycleHooksFeature, LocaleDataIndex as ɵLocaleDataIndex, NG_COMP_DEF as ɵNG_COMP_DEF, NG_DIR_DEF as ɵNG_DIR_DEF, NG_ELEMENT_ID as ɵNG_ELEMENT_ID, NG_INJ_DEF as ɵNG_INJ_DEF, NG_MOD_DEF as ɵNG_MOD_DEF, NG_PIPE_DEF as ɵNG_PIPE_DEF, NG_PROV_DEF as ɵNG_PROV_DEF, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, NO_CHANGE as ɵNO_CHANGE, NgModuleFactory as ɵNgModuleFactory, NoopNgZone as ɵNoopNgZone, ReflectionCapabilities as ɵReflectionCapabilities, ComponentFactory as ɵRender3ComponentFactory, ComponentRef as ɵRender3ComponentRef, NgModuleRef as ɵRender3NgModuleRef, RuntimeError as ɵRuntimeError, TESTABILITY as ɵTESTABILITY, TESTABILITY_GETTER as ɵTESTABILITY_GETTER, ViewRef$1 as ɵViewRef, XSS_SECURITY_URL as ɵXSS_SECURITY_URL, _sanitizeHtml as ɵ_sanitizeHtml, _sanitizeUrl as ɵ_sanitizeUrl, allowSanitizationBypassAndThrow as ɵallowSanitizationBypassAndThrow, bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml, bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl, bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript, bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle, bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl, clearResolutionOfComponentResourcesQueue as ɵclearResolutionOfComponentResourcesQueue, coerceToBoolean as ɵcoerceToBoolean, compileComponent as ɵcompileComponent, compileDirective as ɵcompileDirective, compileNgModule as ɵcompileNgModule, compileNgModuleDefs as ɵcompileNgModuleDefs, compileNgModuleFactory as ɵcompileNgModuleFactory, compilePipe as ɵcompilePipe, convertToBitFlags as ɵconvertToBitFlags, createInjector as ɵcreateInjector, defaultIterableDiffers as ɵdefaultIterableDiffers, defaultKeyValueDiffers as ɵdefaultKeyValueDiffers, detectChanges as ɵdetectChanges, devModeEqual as ɵdevModeEqual, findLocaleData as ɵfindLocaleData, flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible, formatRuntimeError as ɵformatRuntimeError, getDebugNode as ɵgetDebugNode, getDebugNodeR2 as ɵgetDebugNodeR2, getDirectives as ɵgetDirectives, getHostElement as ɵgetHostElement, getInjectableDef as ɵgetInjectableDef, getLContext as ɵgetLContext, getLocaleCurrencyCode as ɵgetLocaleCurrencyCode, getLocalePluralCase as ɵgetLocalePluralCase, getSanitizationBypassType as ɵgetSanitizationBypassType, ɵgetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, _global as ɵglobal, injectChangeDetectorRef as ɵinjectChangeDetectorRef, internalCreateApplication as ɵinternalCreateApplication, isBoundToModule as ɵisBoundToModule, isEnvironmentProviders as ɵisEnvironmentProviders, isInjectable as ɵisInjectable, isNgModule as ɵisNgModule, isObservable as ɵisObservable, isPromise as ɵisPromise, isSubscribable as ɵisSubscribable, makeDecorator as ɵmakeDecorator, noSideEffects as ɵnoSideEffects, patchComponentDefWithScope as ɵpatchComponentDefWithScope, publishDefaultGlobalUtils$1 as ɵpublishDefaultGlobalUtils, publishGlobalUtil as ɵpublishGlobalUtil, registerLocaleData as ɵregisterLocaleData, resetCompiledComponents as ɵresetCompiledComponents, resetJitOptions as ɵresetJitOptions, resolveComponentResources as ɵresolveComponentResources, setAllowDuplicateNgModuleIdsForTest as ɵsetAllowDuplicateNgModuleIdsForTest, setClassMetadata as ɵsetClassMetadata, setCurrentInjector as ɵsetCurrentInjector, setDocument as ɵsetDocument, setLocaleId as ɵsetLocaleId, ɵsetUnknownElementStrictMode, ɵsetUnknownPropertyStrictMode, store as ɵstore, stringify as ɵstringify, transitiveScopesFor as ɵtransitiveScopesFor, unregisterAllLocaleData as ɵunregisterLocaleData, unwrapSafeValue as ɵunwrapSafeValue, ɵɵCopyDefinitionFeature, FactoryTarget as ɵɵFactoryTarget, ɵɵHostDirectivesFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵStandaloneFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcontentQuery, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵenableBindings, ɵɵgetCurrentView, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵngDeclareClassMetadata, ɵɵngDeclareComponent, ɵɵngDeclareDirective, ɵɵngDeclareFactory, ɵɵngDeclareInjectable, ɵɵngDeclareInjector, ɵɵngDeclareNgModule, ɵɵngDeclarePipe, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, registerNgModuleType as ɵɵregisterNgModuleType, ɵɵresetView, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵsyntheticHostListener, ɵɵsyntheticHostProperty, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵtrustConstantHtml, ɵɵtrustConstantResourceUrl, ɵɵvalidateIframeAttribute, ɵɵviewQuery };","map":{"version":3,"mappings":"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","names":["getClosureSafeProperty","objWithPropertyToExtract","key","Error","target","source","hasOwnProperty","stringify","token","Array","isArray","map","join","overriddenName","name","res","toString","newLineIndex","indexOf","substring","before","after","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","type","isForwardRef","fn","isEnvironmentProviders","value","ɵproviders","ERROR_DETAILS_PAGE_BASE_URL","XSS_SECURITY_URL","RuntimeError","constructor","message","formatRuntimeError","code","fullCode","Math","abs","errorMessage","trim","ngDevMode","addPeriodSeparator","match","separator","renderStringify","String","stringifyForError","path","depPath","throwMixedMultiProviderError","throwInvalidProviderError","ngModuleType","providers","provider","providerDetail","v","ɵfromNgModule","injectorName","injectorDetails","actual","msg","throwError","assertNumberInRange","minInclusive","maxInclusive","assertNumber","assertLessThanOrEqual","assertGreaterThanOrEqual","assertEqual","expected","assertNotEqual","assertSame","assertNotSame","assertLessThan","assertGreaterThan","comparison","assertDomNode","node","Node","arr","index","assertDefined","maxLen","length","assertOneOf","validValues","ɵɵdefineInjectable","opts","providedIn","factory","undefined","defineInjectable","ɵɵdefineInjector","options","imports","getInjectableDef","getOwnDefinition","NG_PROV_DEF","NG_INJECTABLE_DEF","isInjectable","field","getInheritedInjectableDef","def","console","warn","getInjectorDef","NG_INJ_DEF","NG_INJECTOR_DEF","ɵprov","ɵinj","ngInjectableDef","ngInjectorDef","InjectFlags","_injectImplementation","getInjectImplementation","setInjectImplementation","impl","previous","injectRootLimpMode","notFoundValue","flags","injectableDef","Optional","throwProviderNotFoundError","assertInjectImplementationNotEqual","_global","globalThis","global","window","self","WorkerGlobalScope","ngDevModeResetPerfCounters","locationString","location","newCounters","namedConstructors","firstCreatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererDestroyNode","rendererMoveNode","rendererRemoveNode","rendererAppendChild","rendererInsertBefore","rendererCreateComment","allowNgDevModeTrue","initNgDevMode","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","DI_DECORATOR_FLAG","NG_TEMP_TOKEN_PATH","NG_TOKEN_PATH","NEW_LINE","NO_NEW_LINE","SOURCE","_currentInjector","setCurrentInjector","injector","former","injectInjectorOnly","Default","get","ɵɵinject","ɵɵinvalidFactoryDep","inject","convertToBitFlags","optional","host","skipSelf","injectArgs","types","args","i","arg","j","meta","flag","getInjectFlag","push","decorator","prototype","catchInjectorError","e","injectorErrorName","tokenPath","unshift","formatError","text","obj","charAt","slice","context","parts","JSON","replace","noSideEffects","ChangeDetectionStrategy","ViewEncapsulation","EMPTY_OBJ","EMPTY_ARRAY","Object","freeze","NG_COMP_DEF","ɵcmp","NG_DIR_DEF","ɵdir","NG_PIPE_DEF","ɵpipe","NG_MOD_DEF","ɵmod","NG_FACTORY_DEF","ɵfac","NG_ELEMENT_ID","__NG_ELEMENT_ID__","componentDefCount","ɵɵdefineComponent","componentDefinition","baseDef","getNgDirectiveDef","decls","vars","template","consts","ngContentSelectors","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","dependencies","standalone","getStandaloneInjector","data","encapsulation","Emulated","id","styles","_","schemas","initFeatures","extractDefListOrFactory","ɵɵsetComponentScope","directives","pipes","extractDirectiveDef","getComponentDef","getDirectiveDef","nonNull","ɵɵdefineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","scope","ngModuleDef","getNgModuleDef","invertObject","secondary","newLookup","minifiedKey","publicName","declaredName","ɵɵdefineDirective","directiveDefinition","ɵɵdefinePipe","pipeDef","pure","onDestroy","ngOnDestroy","getPipeDef","isStandalone","throwNotFound","declaredInputs","providersResolver","hostBindings","hostVars","hostAttrs","contentQueries","exportAs","selectors","viewQuery","features","setInput","findHostDirectiveDefs","hostDirectives","inputs","outputs","definition","forEach","defExtractor","dep","filter","HOST","TVIEW","FLAGS","PARENT","NEXT","TRANSPLANTED_VIEWS_TO_REFRESH","T_HOST","CLEANUP","CONTEXT","INJECTOR","RENDERER_FACTORY","RENDERER","SANITIZER","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","DECLARATION_COMPONENT_VIEW","DECLARATION_LCONTAINER","PREORDER_HOOK_FLAGS","QUERIES","ID","EMBEDDED_VIEW_INJECTOR","HEADER_OFFSET","unusedValueExportToPlacateAjd","TYPE","HAS_TRANSPLANTED_VIEWS","NATIVE","VIEW_REFS","MOVED_VIEWS","CONTAINER_HEADER_OFFSET","isLView","isLContainer","isContentQueryHost","isComponentHost","componentOffset","isDirectiveHost","isComponentDef","isRootView","lView","assertTNodeForTView","assertTNode","tView_","assertTIcu","tIcu","currentCaseLViewIndex","assertComponentType","assertNgModuleType","assertCurrentTNodeIsParent","isParent","assertHasParent","parent","assertLContainer","assertLViewOrUndefined","assertLView","errMessage","firstUpdatePass","assertDirectiveDef","assertBetween","bindingStartIndex","expandoStartIndex","lower","upper","projection","injectorIndex","assertIndexInExpandoRange","hasFactoryDef","SimpleChange","previousValue","currentValue","firstChange","isFirstChange","ɵɵNgOnChangesFeature","NgOnChangesFeatureImpl","ngOnChanges","ngOnChangesSetInput","rememberChangeHistoryAndInvokeOnChangesHook","ngInherit","simpleChangesStore","getSimpleChangesStore","current","instance","privateName","assertString","setSimpleChangesStore","previousChange","SIMPLE_CHANGES_STORE","store","profilerCallback","setProfiler","profiler","event","hookOrListener","SVG_NAMESPACE","MATH_ML_NAMESPACE","unwrapRNode","unwrapLView","assertIndexInRange","assertTNodeForLView","view","nodeIndex","hostView","slotValue","isCreationMode","viewAttachedToChangeDetector","viewAttachedToContainer","resetPreOrderHookFlags","lContainer","amount","viewOrContainer","instructionState","lFrame","createLFrame","bindingsEnabled","_isInCheckNoChangesMode","specOnlyIsInstructionStateEmpty","getElementDepthCount","elementDepthCount","increaseElementDepthCount","decreaseElementDepthCount","getBindingsEnabled","ɵɵenableBindings","ɵɵdisableBindings","getLView","getTView","ɵɵrestoreView","viewToRestore","contextLView","ɵɵresetView","getCurrentTNode","currentTNode","getCurrentTNodePlaceholderOk","getCurrentParentTNode","isCurrentTNodeParent","setCurrentTNodeAsNotParent","getContextLView","isInCheckNoChangesMode","setIsInCheckNoChangesMode","mode","getBindingRoot","bindingRootIndex","getBindingIndex","bindingIndex","setBindingIndex","nextBindingIndex","incrementBindingIndex","count","isInI18nBlock","inI18n","setInI18nBlock","currentDirectiveIndex","setCurrentDirectiveIndex","getCurrentDirectiveIndex","getCurrentDirectiveDef","tData","getCurrentQueryIndex","currentQueryIndex","setCurrentQueryIndex","getDeclarationTNode","declTNode","enterDI","SkipSelf","parentTNode","parentLView","Host","allocLFrame","enterView","newView","newLFrame","selectedIndex","currentNamespace","firstChild","currentLFrame","childLFrame","child","leaveViewLight","oldLFrame","leaveDI","leaveView","nextContextImpl","level","walkUpViews","nestingLevel","currentView","getSelectedIndex","setSelectedIndex","getSelectedTNode","getTNode","ɵɵnamespaceSVG","ɵɵnamespaceMathML","ɵɵnamespaceHTML","namespaceHTMLInternal","getNamespace","registerPreOrderHooks","directiveIndex","directiveDef","assertFirstCreatePass","ngOnInit","ngDoCheck","wrappedOnChanges","preOrderHooks","preOrderCheckHooks","directiveStart","end","directiveEnd","lifecycleHooks","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","contentHooks","contentCheckHooks","viewHooks","viewCheckHooks","destroyHooks","executeCheckHooks","hooks","callHooks","executeInitAndCheckHooks","initPhase","currentNodeIndex","startIndex","nodeIndexLimit","max","lastNodeIndexFound","hook","isInitHook","callHook","directive","indexWithintInitPhase","call","NO_PARENT_INJECTOR","NodeInjectorFactory","isViewProvider","injectImplementation","canSeeViewProviders","injectImpl","isFactory","toTNodeTypeAsString","tNodeType","hasClassInput","hasStyleInput","assertTNodeType","expectedTypes","assertPureTNodeType","setUpAttributes","renderer","native","attrs","namespaceURI","attrName","attrVal","setAttribute","isAnimationProp","setProperty","isNameOnlyAttributeMarker","marker","charCodeAt","dst","src","srcMarker","item","mergeHostAttribute","key1","key2","markerInsertPosition","dstValue","splice","hasParentInjector","parentLocation","getParentInjectorIndex","parentInjectorIndex","getParentInjectorViewOffset","startView","viewOffset","parentView","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_SIZE","BLOOM_MASK","BLOOM_BUCKET_BITS","nextNgElementId","NOT_FOUND","bloomAdd","bloomHash","mask","existingInjectorIndex","getInjectorIndex","insertBloom","blueprint","parentLoc","getParentInjectorLocation","parentIndex","getParentInjectorView","parentData","footer","declarationViewOffset","lViewCursor","getTNodeFromLView","diPublicInInjector","attrNameToInject","classes","attrsLength","notFoundValueOrThrow","lookupTokenUsingModuleInjector","Self","moduleInjector","previousInjectImplementation","embeddedInjectorValue","lookupTokenUsingEmbeddedInjector","lookupTokenUsingNodeInjector","bloomHashBitOrFactory","previousTView","hostTElementNode","shouldSearchParent","assertNodeInjector","bloomHasToken","searchTokensOnInjector","currentTView","canAccessViewProviders","isHostSpecialCase","injectableIdx","locateDirectiveOrProvider","getNodeInjectable","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","cptViewProvidersCount","startingIndex","endIndex","providerTokenOrDef","dirDef","resolving","throwCyclicDependencyError","previousIncludeViewProviders","success","tokenId","createNodeInjector","injectorView","isFirstHostTNode","NodeInjector","_lView","_tNode","getOrCreateInjectable","ɵɵgetInheritedFactory","ownConstructor","ownFactory","getFactoryOf","objectPrototype","getPrototypeOf","t","getFactoryDef","currentLView","nodeInjectorValue","embeddedViewInjector","embeddedViewInjectorValue","tViewType","ɵɵinjectAttribute","injectAttributeImpl","ANNOTATIONS","PARAMETERS","PROP_METADATA","makeDecorator","props","parentClass","additionalProcessing","typeFn","metaCtor","makeMetadataCtor","DecoratorFactory","annotationInstance","TypeDecorator","cls","annotations","defineProperty","create","ngMetadataName","annotationCls","ctor","values","propName","makeParamDecorator","ParamDecoratorFactory","apply","ParamDecorator","annotation","unusedKey","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","Attribute","attributeName","InjectionToken","_desc","multi","ANALYZE_FOR_ENTRY_COMPONENTS","emitDistinctChangesOnlyDefaultValue","Query","selector","first","isViewQuery","descendants","emitDistinctChangesOnly","FactoryTarget","R3TemplateDependencyKind","getCompilerFacade","request","globalNg","ɵcompilerFacade","error","kind","usage","Type","Function","isType","arrayEquals","a","b","identityAccessor","valueA","valueB","flatten","list","flat","Number","POSITIVE_INFINITY","input","deepForEach","addToArray","pop","size","arraySplice","array","arrayInsert","previousEnd","arrayInsert2","value1","value2","_arrayIndexOfSorted","keyValueArraySet","keyValueArray","keyValueArrayIndexOf","shift","start","middle","ES5_DELEGATE_CTOR","ES2015_INHERITED_CLASS","ES2015_INHERITED_CLASS_WITH_CTOR","ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR","isDelegateCtor","typeStr","test","ReflectionCapabilities","reflect","_reflect","_zipTypesAndAnnotations","paramTypes","paramAnnotations","result","newArray","concat","_ownParameters","parentCtor","tsickleCtorParams","ctorParameters","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","getOwnMetadata","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","keys","prop","parentPropMetadata","ownPropMetadata","hasLifecycleHook","lcProperty","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","Inject","attachInjectFlag","getReflect","reflectDependencies","convertDependencies","deps","reflectDependency","attribute","param","proto","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","then","unwrapResponse","componentResourceResolutionQueue","component","promises","templateUrl","styleUrls","styleOffset","styleUrl","style","fullyResolved","Promise","all","componentDefResolved","clearResolutionOfComponentResourcesQueue","componentDefPendingResolution","Set","metadata","componentNeedsResolution","add","isComponentDefPendingResolution","has","old","restoreComponentResolutionQueue","queue","clear","isComponentResourceResolutionQueueEmpty","response","delete","modules","checkForDuplicateNgModules","assertSameOrNotExisting","incoming","existing","clearModulesForTest","getRegisteredNgModuleType","setAllowDuplicateNgModuleIdsForTest","allowDuplicates","shouldThrowErrorOnUnknownElement","ɵsetUnknownElementStrictMode","shouldThrow","ɵgetUnknownElementStrictMode","shouldThrowErrorOnUnknownProperty","ɵsetUnknownPropertyStrictMode","ɵgetUnknownPropertyStrictMode","validateElementIsKnown","element","tagName","hasDirectives","isUnknown","HTMLUnknownElement","customElements","matchingSchemas","isHostStandalone","isHostComponentStandalone","templateLocation","getTemplateLocationDetails","isPropertyValid","handleUnknownPropertyError","nodeType","importLocation","KNOWN_CONTROL_FLOW_DIRECTIVES","correspondingImport","reportUnknownPropertyError","getDeclarationComponentDef","declarationLView","componentDef","hostComponentDef","componentClassName","schema","NO_ERRORS_SCHEMA","CUSTOM_ELEMENTS_SCHEMA","RendererStyleFlags2","COMMENT_DISALLOWED","COMMENT_DELIMITER","COMMENT_DELIMITER_ESCAPED","escapeCommentText","TRACKED_LVIEWS","uniqueIdCounter","getUniqueLViewId","registerLView","getLViewById","unregisterLView","LContext","lViewId","getLContext","mpValue","readPatchedData","isComponentInstance","findViaComponent","isDirectiveInstance","findViaDirective","getDirectivesAtNodeIndex","findViaNativeElement","existingCtx","createLContext","attachPatchData","rElement","parentNode","parentContext","getComponentViewByInstance","componentInstance","patchedData","getComponentLViewByIndex","MONKEY_PATCH_KEY_NAME","readPatchedLView","traverseNextElement","next","componentIndices","components","elementComponentIndex","componentView","rootComponentView","rootComponent","directiveInstance","directiveIndexStart","directiveIndexEnd","results","localNames","localIndex","_icuContainerIterate","tIcuContainerNode","ensureIcuContainerVisitorLoaded","loader","getLViewParent","getRootView","componentOrLView","getRootContext","viewOrComponent","rootView","getFirstLContainer","getNearestLContainer","getNextLContainer","container","applyToElementOrContainer","action","lNodeToHandle","beforeNode","isComponent","rNode","nativeAppendChild","nativeInsertBefore","nativeRemoveNode","destroyNode","applyContainer","createText","updateTextNode","setValue","createComment","createElementNode","namespace","createElement","applyView","parentNativeNode","destroyViewTree","lViewOrLContainer","cleanUpView","firstView","insertView","indexInContainer","containerLength","declarationLContainer","trackMovedView","lQueries","declarationContainer","movedViews","insertedLContainer","insertedComponentLView","declaredComponentLView","detachMovedView","declarationViewIndex","insertionLContainer","updateTransplantedViewCount","removeIndex","viewToDetach","removedLView","removeFromArray","removeViewFromContainer","detachView","executeOnDestroys","processCleanups","destroy","tCleanup","cleanup","lCleanup","lastLCleanupIndex","targetIdx","unsubscribe","instanceCleanupFn","assertFunction","toCall","callContext","getParentRElement","getClosestRElement","None","getNativeByTNode","isMove","insertBefore","appendChild","nativeAppendOrInsertBefore","nativeRemoveChild","isHostElement","removeChild","isTemplateNode","content","nextSibling","getInsertInFrontOfRNode","_getInsertInFrontOfRNodeWithI18n","getInsertInFrontOfRNodeWithNoI18n","_processI18nInsertBefore","getInsertInFrontOfRNodeWithI18n","processI18nInsertBefore","childRNode","childTNode","parentRNode","anchorNode","getFirstNativeNode","getBeforeNodeForView","elIcuContainerChild","rNodeOrLContainer","nextRNode","icuContainerIterate","projectionNodes","getProjectionNodes","assertParentView","componentHost","slotIdx","assertProjectionSlots","viewIndexInContainer","nextViewIndex","firstTNodeOfView","nativeParent","nativeParentNode","applyNodes","parentRElement","isProjection","rawSlotValue","applyProjectionRecursive","projectionNext","applyProjection","tProjectionNode","componentLView","componentNode","nodeToProjectOrRNodes","nodeToProject","projectedComponentLView","anchor","applyStyling","isClassBased","removeClass","addClass","DashCase","removeStyle","isImportant","endsWith","Important","setStyle","writeDirectStyle","newValue","writeDirectClass","removeAttribute","setupStaticAttributes","mergedAttrs","policy","getPolicy","trustedTypes","createPolicy","createHTML","s","createScript","createScriptURL","trustedHTMLFromString","html","trustedScriptFromString","script","trustedScriptURLFromString","fnArgs","fnBody","body","bind","ɵɵvalidateIframeAttribute","attrValue","toLowerCase","iframe","srcdoc","DOCUMENT","setDocument","document","getDocument","trustedHTMLFromStringBypass","trustedScriptFromStringBypass","trustedScriptURLFromStringBypass","SafeValueImpl","changingThisBreaksApplicationSecurity","SafeHtmlImpl","getTypeName","SafeStyleImpl","SafeScriptImpl","SafeUrlImpl","SafeResourceUrlImpl","unwrapSafeValue","actualType","getSanitizationBypassType","bypassSanitizationTrustHtml","trustedHtml","bypassSanitizationTrustStyle","trustedStyle","bypassSanitizationTrustScript","trustedScript","bypassSanitizationTrustUrl","trustedUrl","bypassSanitizationTrustResourceUrl","trustedResourceUrl","getInertBodyHelper","defaultDoc","inertDocumentHelper","InertDocumentHelper","isDOMParserAvailable","DOMParserHelper","getInertBodyElement","DOMParser","parseFromString","inertDocument","implementation","createHTMLDocument","templateEl","innerHTML","SAFE_URL_PATTERN","_sanitizeUrl","tagSet","tags","split","merge","sets","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","HTML_ATTRS","ARIA_ATTRS","VALID_ATTRS","SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS","SanitizingHtmlSerializer","sanitizeChildren","el","traverseContent","ELEMENT_NODE","startElement","TEXT_NODE","chars","nodeValue","sanitizedSomething","endElement","checkClobberedElement","buf","nodeName","elAttrs","attributes","elAttr","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","hi","low","inertBodyHelper","unsafeHtmlInput","inertBodyElement","unsafeHtml","mXSSAttempts","parsedHtml","sanitizer","safeHtml","getTemplateContent","isTemplateElement","SecurityContext","ɵɵsanitizeHtml","getSanitizer","sanitize","HTML","allowSanitizationBypassAndThrow","_sanitizeHtml","ɵɵsanitizeStyle","unsafeStyle","STYLE","ɵɵsanitizeUrl","unsafeUrl","URL","ɵɵsanitizeResourceUrl","unsafeResourceUrl","RESOURCE_URL","ɵɵsanitizeScript","unsafeScript","SCRIPT","ɵɵtrustConstantHtml","raw","ɵɵtrustConstantResourceUrl","tag","ɵɵsanitizeUrlOrResourceUrl","getUrlSanitizer","validateAgainstEventProperties","startsWith","validateAgainstEventAttributes","ENVIRONMENT_INITIALIZER","INJECTOR_DEF_TYPES","NullInjector","makeEnvironmentProviders","sources","internalImportProvidersFrom","checkForStandaloneCmp","providersOut","dedup","injectorTypesWithProviders","cmpDef","internalSource","walkProviderTree","processInjectorTypesWithProviders","typesWithProviders","ngModule","deepForEachProvider","validateProvider","parents","defType","injDef","defName","isDuplicate","importTypesWithProviders","imported","provide","useFactory","useValue","defProviders","injectorType","containerType","isTypeProvider","isValueProvider","isFactoryProvider","isExistingProvider","classRef","useClass","USE_VALUE","useExisting","isClassProvider","INJECTOR_SCOPE","NOT_YET","CIRCULAR","NULL_INJECTOR","getNullInjector","EnvironmentInjector","R3Injector","destroyed","_destroyed","scopes","forEachSingleProvider","processProvider","records","makeRecord","record","injectorDefTypes","assertNotDestroyed","service","_ngOnDestroyHooks","_onDestroyHooks","callback","runInContext","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","nextInjector","resolveInjectorInitializers","initializers","initializer","tokens","providerToRecord","multiRecord","hasOnDestroy","getUndecoratedInjectableFactory","paramLength","inheritedInjectableDef","providerToFactory","unwrappedProvider","hasDeps","ComponentRef","ComponentFactory","noComponentFactoryError","ERROR_COMPONENT","getComponent","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver","injectElementRef","createElementRef","ElementRef","nativeElement","unwrapElementRef","RendererFactory2","Renderer2","injectRenderer2","nodeAtIndex","Sanitizer","Version","full","major","minor","patch","VERSION","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ERROR_ORIGINAL_ERROR","originalError","getOriginalError","ErrorHandler","handleError","_findOriginalError","_console","normalizeDebugBindingName","camelCaseToDashCase","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","ɵɵresolveWindow","ownerDocument","defaultView","ɵɵresolveDocument","ɵɵresolveBody","INTERPOLATION_DELIMITER","maybeUnwrapFn","assertStandaloneComponentType","assertComponentDef","throwMultipleComponentError","second","throwErrorIfNoChangesMode","creationMode","currValue","constructDetailsForInterpolation","rootIndex","expressionIndex","changedValue","prefix","chunks","getExpressionChangedErrorDetails","idx","matches","RegExp","classIndexOf","className","classToSearch","foundIndex","NG_TEMPLATE_SELECTOR","isCssClassMatching","cssClassToMatch","isProjectionMode","isImplicitAttrsSection","isInlineTemplate","hasTagAndTypeMatch","currentSelector","tagNameToCompare","isNodeMatchingSelector","nodeAttrs","nameOnlyMarkerIdx","getNameOnlyMarkerIndex","skipToNextSelector","isPositive","selectorAttrValue","attrIndexInNode","findAttrIndexInNode","nodeAttrValue","compareAgainstClassName","bindingsMode","maybeAttrName","matchTemplateAttribute","isNodeMatchingSelectorList","getProjectAsAttrValue","ngProjectAsAttrIdx","nodeAttr","attr","selectorListLoop","currentSelectorInList","maybeWrapInNotSelector","isNegativeMode","chunk","stringifyCSSSelector","currentChunk","valueOrMarker","stringifyCSSSelectorList","selectorList","extractAttrsAndClassesFromSelector","__brand__","ɵɵadvance","delta","selectIndexInternal","checkNoChangesMode","assertIndexInDeclRange","hooksInitPhaseCompleted","angularCoreDiEnv","ngFactoryDef","compiler","compileInjectable","getInjectableMetadata","compileFactory","typeArgumentCount","Injectable","configurable","isUseClassProvider","isUseValueProvider","isUseFactoryProvider","isUseExistingProvider","srcMeta","compilerMeta","createInjector","additionalProviders","createInjectorWithoutInjectorInstances","importProvidersFrom","Injector","findFirstClosedCycle","constructResolvingPath","reversed","reverse","tokenStrs","k","injectionError","constructResolvingMessage","errMsg","wrappedError","addKey","injectors","instantiationError","originalException","originalStack","invalidProviderError","params","signature","ii","parameter","outOfBoundsError","provider1","provider2","ReflectiveKey","displayName","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","newKey","ReflectiveDependency","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","resolvedFactory","ResolvedReflectiveFactory","resolveReflectiveFactory","factoryFn","resolvedDeps","_dependenciesFor","aliasInstance","constructDependencies","resolveReflectiveProvider","resolveReflectiveProviders","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","from","normalizedProvidersMap","mixingMultiProvidersWithRegularProvidersError","resolvedProvider","_extractToken","some","p","noAnnotationError","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","resolve","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","_parent","_providers","len","keyIds","objs","_getByKey","resolveAndCreateChild","createChildFromResolved","inj","resolveAndInstantiate","instantiateResolved","_instantiateProvider","getProviderAtIndex","_new","_constructionCounter","_getMaxNumberOfObjects","cyclicDependencyError","_instantiate","_getByReflectiveDependency","stack","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","noProviderError","inj_","_mapProviders","ɵɵdirectiveInject","ɵɵinvalidFactory","hostBindingOpCodes","opCode","directiveIdx","bindingRootIndx","hostBindingFn","setBindingRootForHostBindings","refreshContentQueries","queryStartIdx","directiveDefIdx","refreshChildComponents","hostLView","refreshComponent","renderChildComponents","renderComponent","createLView","tHostNode","rendererFactory","getOrCreateTNode","createTNodeAtIndex","setCurrentTNode","createTNode","prev","allocExpando","numSlotsToAlloc","initialValue","assertFirstUpdatePass","allocIdx","renderView","executeViewQueryFn","templateFn","executeTemplate","staticContentQueries","staticViewQueries","incompleteFirstPass","refreshView","isInCheckNoChangesPass","incrementInitPhaseFlags","markTransplantedViewsForRefresh","refreshEmbeddedViews","processHostBindingOpCodes","rf","prevSelectedIndex","isUpdatePhase","preHookType","postHookType","executeContentQueries","createDirectivesInstances","instantiateAllDirectives","invokeDirectivesHostBindings","saveResolvedLocalsInData","viewData","localRefExtractor","getOrCreateComponentTView","createTView","constsOrFactory","initialViewLength","createViewBlueprint","queries","fill","directiveRegistry","pipeRegistry","seal","NO_CHANGE","locateHostElement","elementOrSelector","preserveContent","ShadowDom","selectRootElement","storeCleanupWithContext","cleanupFn","getOrCreateLViewCleanup","getOrCreateTViewCleanup","tParent","insertBeforeIndex","directiveStylingLast","propertyBindings","initialInputs","stylesWithoutHost","residualStyles","classesWithoutHost","residualClasses","classBindings","styleBindings","generatePropertyAliases","aliasMap","propertyAliases","hostDirectiveAliasMap","internalName","addPropertyAlias","initializeInputAndOutputAliases","hostDirectiveDefinitionMap","tViewData","tNodeAttrs","inputsFromAttrs","inputsStore","outputsStore","aliasData","aliasedInputs","aliasedOutputs","generateInitialInputs","mapPropName","elementPropertyInternal","nativeOnly","inputData","dataValue","setInputsForProperty","markDirtyIfOnPush","setNgReflectProperties","viewIndex","childComponentLView","setNgReflectProperty","debugValue","textContent","resolveDirectives","localRefs","exportsMap","matchResult","findDirectiveDefMatches","hostDirectiveDefs","initializeDirectives","cacheMatchingLocalNames","mergeHostAttrs","getOrCreateNodeInjectorForNode","initTNodeFlags","preOrderHooksFound","preOrderCheckHooksFound","configureViewWithDirective","saveNameToExportMap","lifeCycleHooks","registerHostBindingOpCodes","directiveVarsIdx","elementIndx","lastSelectedElementIdx","addComponentLogic","setInputsFromAttrs","elementIndex","dirIndex","invokeHostBindingsInCreationMode","registry","find","hostDirectiveMatches","markAsComponentHost","hostTNode","numberOfDirectives","directiveFactory","nodeInjectorFactory","addToViewTree","createRenderer","setElementAttribute","strValue","initialInputData","inputsToStore","inputConfig","createLContainer","hostNative","embeddedLView","embeddedTView","movedLView","componentHostIdx","refreshContainsDirtyView","componentTView","syncViewWithBlueprint","markViewDirty","detectChangesInternal","notifyErrorHandler","begin","checkNoChangesInternal","viewQueryFn","propertyName","interpolationParts","propBindingIdxs","bindingMetadata","loadComponentRenderer","currentDef","errorHandler","textBindingInternal","getNativeByIndex","computeStaticStyling","writeToHost","concatStringsWithSpace","styleValue","lNode","lViewInAContainer","lViewFirstChildTNode","collectNativeNodes","nodesInSlot","ViewRef","rootNodes","_cdRefInjectingView","_appRef","_attachedToViewContainer","viewRefs","destroyLView","markForCheck","detach","reattach","detectChanges","checkNoChanges","attachToViewContainerRef","detachFromAppRef","renderDetachView","attachToAppRef","appRef","RootViewRef","_view","AbstractComponentFactoryResolver","toRefArray","nonMinified","minified","templateName","elementName","ChainedInjector","parentInjector","AbstractComponentFactory","componentType","isBoundToModule","projectableNodes","rootSelectorOrNode","environmentInjector","realEnvironmentInjector","rootViewInjector","hostRenderer","hostRNode","rootFlags","rootTView","rootLView","tElementNode","rootComponentDef","rootDirectives","createRootComponentTNode","createRootComponentView","setRootNodeAttributes","projectNodes","createRootComponent","LifecycleHooksFeature","AbstractComponentRef","_rootLView","changeDetectorRef","cmpNameForError","applyRootComponentStyling","viewRenderer","hostFeatures","rootTNode","feature","nodesforSlot","registerPostOrderHooks","getSuperType","ɵɵInheritDefinitionFeature","superType","shouldInheritFields","inheritanceChain","superDef","writeableDef","maybeUnwrapEmpty","superHostBindings","inheritHostBindings","superViewQuery","superContentQueries","inheritViewQuery","inheritContentQueries","fillProperties","animation","defData","mergeHostAttrsAcrossInheritance","prevViewQuery","ctx","prevContentQueries","prevHostBindings","COPY_DIRECTIVE_FIELDS","COPY_COMPONENT_FIELDS","ɵɵCopyDefinitionFeature","defAny","ɵɵHostDirectivesFeature","rawHostDirectives","dir","bindingArrayToMap","matchedDefs","hostDirectiveConfig","hostDirectiveDef","validateHostDirective","patchDeclaredInputs","bindings","exposedInputs","remappedPublicName","validateMappings","bindingType","hostDirectiveBindings","isIterable","Symbol","iterator","isListLikeIterable","isJsObject","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","o","isListLikeIterableA","isListLikeIterableB","devModeEqual","isAObject","isBObject","is","updateBinding","bindingUpdated","oldValueToCompare","details","bindingUpdated2","exp1","exp2","different","bindingUpdated3","exp3","exp4","ɵɵattribute","elementAttributeInternal","storePropertyBindingMetadata","isBindingUpdated","interpolation1","v0","suffix","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","bindingUpdated4","interpolation5","i3","v4","i4","v5","i5","v6","interpolation8","i6","v7","interpolatedValue","ɵɵattributeInterpolate1","ɵɵattributeInterpolate2","interpolation2","ɵɵattributeInterpolate3","ɵɵattributeInterpolate4","ɵɵattributeInterpolate5","interpolation6","ɵɵattributeInterpolate6","ɵɵattributeInterpolate7","interpolation7","ɵɵattributeInterpolate8","ɵɵattributeInterpolateV","interpolated","interpolationV","interpolationInBetween","templateFirstCreatePass","attrsIndex","localRefsIndex","tViewConsts","getConstant","ɵɵtemplate","adjustedIndex","comment","ɵɵreference","load","ɵɵproperty","setDirectiveInputsWhichShadowsStyling","property","elementStartFirstCreatePass","elementStart","ɵɵelementStart","ɵɵelementEnd","elementEnd","ɵɵelement","elementContainerStartFirstCreatePass","ɵɵelementContainerStart","ɵɵelementContainerEnd","ɵɵelementContainer","ɵɵgetCurrentView","isPromise","isSubscribable","subscribe","isObservable","ɵɵlistener","eventName","listenerFn","useCapture","eventTargetResolver","listenerInternal","ɵɵsyntheticHostListener","findExistingListener","tNodeIdx","cleanupEventName","listenerIdxInLCleanup","isTNodeDirectiveHost","processOutputs","lCleanupIndex","idxOrTargetGetter","existingListener","lastListenerFn","__ngLastListenerFn__","__ngNextListenerFn__","wrapListener","listen","propsLength","minifiedName","output","subscription","executeListenerWithErrorHandling","wrapWithPreventDefault","wrapListenerIn_markDirtyAndPreventDefault","nextListenerFn","preventDefault","returnValue","projectionSlots","wildcardNgContentIndex","ngProjectAsAttrVal","isSelectorInSelectorList","ɵɵprojectionDef","numProjectionSlots","projectionHeads","tails","componentChild","slotIndex","matchingProjectionSlotIndex","ɵɵprojection","selectorIndex","ɵɵpropertyInterpolate","ɵɵpropertyInterpolate1","ɵɵpropertyInterpolate2","ɵɵpropertyInterpolate3","ɵɵpropertyInterpolate4","ɵɵpropertyInterpolate5","ɵɵpropertyInterpolate6","ɵɵpropertyInterpolate7","ɵɵpropertyInterpolate8","ɵɵpropertyInterpolateV","getTStylingRangePrev","tStylingRange","getTStylingRangePrevDuplicate","setTStylingRangePrevDuplicate","getTStylingRangeNext","getTStylingRangeNextDuplicate","setTStylingRangeNextDuplicate","getTStylingRangeTail","__unused_const_as_closure_does_not_like_standalone_comment_blocks__","tStylingKeyWithStatic","isHostBinding","isClassBinding","tBindings","tmplHead","tmplTail","isKeyDuplicateOfStatic","tStylingKey","staticKeyValueArray","hasTemplateBindings","previousNode","toTStylingRange","setTStylingRangeNext","setTStylingRangePrev","markDuplicates","markDuplicateOfResidualStyling","residual","isPrevDir","tStylingAtIndex","isMap","cursor","foundDuplicate","tStylingValueAtCursor","tStyleRangeAtCursor","isStylingMatch","tStylingKeyCursor","parserState","textEnd","keyEnd","valueEnd","getLastParsedKey","getLastParsedValue","parseClassName","resetParserState","parseClassNameNext","consumeWhitespace","consumeClassToken","parseStyle","parseStyleNext","consumeStyleKey","consumeSeparator","consumeStyleValue","ch","malformedStyleError","fromCharCode","ch1","ch2","ch3","lastChIndex","consumeQuotedText","quoteCharCode","expecting","ɵɵstyleProp","checkStylingProperty","ɵɵclassProp","ɵɵstyleMap","checkStylingMap","styleKeyValueArraySet","styleStringParser","ɵɵclassMap","classKeyValueArraySet","classStringParser","stylingFirstUpdatePass","updateStyling","normalizeSuffix","stringParser","hasStylingInputShadow","isInHostBindings","staticPrefix","updateStylingMap","toStylingKeyValueArray","isHostBindings","wrapInStaticStylingKey","insertTStylingBinding","stylingKey","isFirstStylingInstructionInTemplate","collectStylingFromDirectives","collectStylingFromTAttrs","isFirstStylingInstructionInHostBinding","templateStylingKey","getTemplateHeadTStylingKey","setTemplateHeadTStylingKey","collectResidual","currentDirective","desiredMarker","currentMarker","styleKeyValueArray","unwrappedValue","stringKey","includes","oldKeyValueArray","newKeyValueArray","oldIndex","newIndex","oldKey","setKey","tRange","higherPriorityValue","findStylingValue","isStylingValuePresent","isPrevDirection","rawKey","containsStatics","isStylingMap","valueAtLViewIndex","keyValueArrayGet","ɵɵtext","textNative","createTextNode","ɵɵtextInterpolate","ɵɵtextInterpolate1","ɵɵtextInterpolate2","ɵɵtextInterpolate3","ɵɵtextInterpolate4","ɵɵtextInterpolate5","ɵɵtextInterpolate6","ɵɵtextInterpolate7","ɵɵtextInterpolate8","ɵɵtextInterpolateV","ɵɵclassMapInterpolate1","ɵɵclassMapInterpolate2","ɵɵclassMapInterpolate4","ɵɵclassMapInterpolate5","ɵɵclassMapInterpolate6","ɵɵclassMapInterpolateV","ɵɵstyleMapInterpolate1","ɵɵstyleMapInterpolate2","ɵɵstyleMapInterpolate4","ɵɵstyleMapInterpolate5","ɵɵstyleMapInterpolate6","ɵɵstyleMapInterpolateV","ɵɵstylePropInterpolate1","valueSuffix","ɵɵstylePropInterpolate2","ɵɵstylePropInterpolate3","ɵɵstylePropInterpolate4","ɵɵstylePropInterpolate5","ɵɵstylePropInterpolate6","ɵɵstylePropInterpolate7","ɵɵstylePropInterpolate8","ɵɵstylePropInterpolateV","ɵɵhostProperty","ɵɵsyntheticHostProperty","ngI18nClosureMode","goog","getMsg","u","plural","val","n","floor","LOCALE_DATA","registerLocaleData","localeId","extraData","LocaleDataIndex","LocaleId","ExtraData","findLocaleData","locale","normalizedLocale","normalizeLocale","getLocaleData","parentLocale","localeEn","getLocaleCurrencyCode","CurrencyCode","getLocalePluralCase","PluralCase","ng","common","locales","unregisterAllLocaleData","pluralMapping","parseInt","DEFAULT_LOCALE_ID","USD_CURRENCY_CODE","ELEMENT_MARKER","ICU_MARKER","I18nCreateOpCode","LOCALE_ID","setLocaleId","getLocaleId","tNodeInsertBeforeIndex","i18nParent","anchorRNode","i18nChild","previousTNodes","newTNode","existingTNode","isI18nText","isNewTNodeCreatedBefore","getInsertBeforeIndex","setInsertBeforeIndex","setI18nHandling","setTIcu","createTNodePlaceholder","addTNodeAndUpdateInsertBeforeIndex","currentCase","getParentFromIcuCreateOpCode","mergedCode","getRefFromIcuCreateOpCode","getInstructionFromIcuCreateOpCode","icuCreateOpCode","parentIdx","refIdx","changeMask","changeMaskCounter","setMaskBit","hasChange","min","applyI18n","tI18n","updateOpCodes","update","bindingsStartIndex","applyUpdateOpCodes","applyCreateOpCodes","createOpCodes","insertInFrontOf","isComment","COMMENT","appendNow","APPEND_EAGERLY","SHIFT","applyMutableOpCodes","mutableOpCodes","rootIdx","rootRNode","textNodeIndex","getTIcu","caseIndex","getCurrentICUCaseIndex","anchorIdx","elementNodeIndex","commentValue","commentNodeIndex","commentRNode","createCommentNode","elementRNode","checkBit","skipCodes","sanitizeFn","tNodeOrTagName","rText","applyIcuSwitchCase","applyIcuUpdateCase","currentIndex","activeCaseIndex","getCaseIndex","applyIcuSwitchCaseRemove","removeCodes","remove","nodeOrIcuIndex","icuExpression","bindingValue","cases","resolvedCase","getPluralCase","loadIcuContainerVisitor","_stack","_index","_removes","icuContainerIteratorStart","enterIcu","icuContainerIteratorNext","removeOpCode","tIcuIndex","i18nCreateOpCodesToString","opcodes","lines","i18nUpdateOpCodesToString","parser","OpCodeParser","consumeOpCode","ref","consumeString","sanitizationFn","consumeFunction","hasMore","consumeNumber","statements","statement","consumeNumberOrString","opCodeText","icuCreateOpCodesToString","lastRef","consumeNumberStringOrMarker","line","i18nRemoveOpCodesToString","codes","BINDING_REGEXP","ICU_REGEXP","NESTED_ICU","ICU_BLOCK_REGEXP","MARKER","SUBTEMPLATE_REGEXP","PH_REGEXP","NGSP_UNICODE_REGEXP","replaceNgsp","attachDebugGetter","debugGetter","enumerable","parentTNodeIndex","subTemplateIndex","existingTNodeStack","getTranslationForTemplate","msgParts","i18nParseTextIntoPartsAndICU","part","i18nStartFirstCreatePassProcessTextNode","icuContainerTNode","createTNodeAndAddOpCode","mainBinding","icuNodeIndex","icuStart","isClosing","existingTNodes","isICU","i18nNodeIdx","setTNodeInsertBeforeIndex","hasBinding","generateBindingUpdateOpCodes","i18nAttributesFirstPass","previousElement","previousElementIndex","countBindings","str","destinationNode","bindingStart","maskIndex","sizeIndex","textParts","textValue","toMaskBit","opCodes","isRootTemplateMessage","removeInnerTemplateTranslation","inTemplate","tagMatched","exec","search","bindingMask","addUpdateIcuSwitch","valueArr","nestedIcus","icuIndex","parseIcuCase","addUpdateIcuUpdate","parseICUBlock","pattern","icuType","binding","pos","blocks","prevPos","braceStack","braces","lastIndex","block","caseName","unsafeCaseHtml","inertRootNode","walkIcuTree","sharedUpdateOpCodes","depth","currentNode","addCreateNodeAndAppend","lowerAttrName","addCreateAttribute","addRemoveNode","COMMENT_NODE","isNestedIcu","nestedIcuIndex","addRemoveNestedIcu","appendToParentIdx","createAtIdx","ROOT_TEMPLATE_ID","PP_MULTI_VALUE_PLACEHOLDERS_REGEXP","PP_PLACEHOLDERS_REGEXP","PP_ICU_VARS_REGEXP","PP_ICU_PLACEHOLDERS_REGEXP","PP_ICUS_REGEXP","PP_CLOSE_TEMPLATE_REGEXP","PP_TEMPLATE_ID_REGEXP","i18nPostprocess","replacements","templateIdsStack","phs","tmpl","placeholders","placeholder","templateId","isCloseTemplateTag","currentTemplateId","_type","_idx","ɵɵi18nStart","messageIndex","i18nStartFirstCreatePass","sameViewParentTNode","ɵɵi18nEnd","ɵɵi18n","ɵɵi18nExp","ɵɵi18nApply","ɵɵi18nPostprocess","viewProviders","resolveProvider","lInjectablesBlueprint","providerFactory","beginIndex","existingFactoryIndex","registerDestroyHooksIfSupported","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","indexInFactory","multiFactoryAdd","componentProviders","contextIndex","providerIsTypeProvider","providerIsClassProvider","classToken","existingCallbacksIndex","isComponentProvider","lData","multiResolve","factories","componentCount","multiProviders","f","ɵɵProvidersFeature","processProvidersFn","NgModuleRef","NgModuleFactory","createNgModuleRef","createNgModule","viewEngine_NgModuleRef","_bootstrapComponents","_r3Injector","viewEngine_ComponentFactoryResolver","componentFactoryResolver","destroyCbs","viewEngine_NgModuleFactory","moduleType","EnvironmentNgModuleRefAdapter","createEnvironmentInjector","debugName","adapter","StandaloneService","_injector","getOrCreateStandaloneInjector","cachedInjectors","standaloneInjector","ɵɵStandaloneFeature","assertDomElement","getComponentAtNodeIndex","getContext","getOwningComponent","elementOrDir","getRootComponents","getInjector","NULL","getInjectionTokens","providerTokens","isDirectiveDefHack","getDirectives","Text","getDirectiveMetadata","directiveOrComponentInstance","getLocalRefs","discoverLocalRefs","getHostElement","componentOrDirective","getRenderedText","hostElement","getListeners","lContext","listeners","firstParam","secondParam","listenerElement","useCaptureOrIndx","sort","sortListeners","getComponentLView","nodeIndx","Element","setClassMetadata","clazz","ɵɵpureFunction0","slotOffset","pureFn","thisArg","getBinding","ɵɵpureFunction1","exp","pureFunction1Internal","ɵɵpureFunction2","pureFunction2Internal","pureFunction3Internal","pureFunction4Internal","ɵɵpureFunction5","exp5","ɵɵpureFunction6","exp6","ɵɵpureFunction7","exp7","ɵɵpureFunction8","exp8","ɵɵpureFunctionV","exps","pureFunctionVInternal","getPureFunctionReturnValue","returnValueIndex","lastReturnValue","bindingRoot","pipeName","pipeFactory","pipeInstance","getPipeNotFoundErrorMessage","hostIsStandalone","componentInfoMessage","verifyMessage","ɵɵpipeBind1","isPure","transform","ɵɵpipeBind2","ɵɵpipeBind3","ɵɵpipeBindV","EventEmitter_","Subject","isAsync","__isAsync","emit","observerOrNext","complete","nextFn","errorFn","completeFn","observer","_wrapInTimeout","sink","Subscription","setTimeout","EventEmitter","symbolIterator","_results","QueryList","changes","_changes","_emitDistinctChangesOnly","reduce","init","toArray","reset","resultsTree","dirty","newResultFlat","_changesDetected","last","notifyOnChanges","setDirty","TemplateRef","injectTemplateRef","ViewEngineTemplateRef","R3TemplateRef","_declarationLView","_declarationTContainer","elementRef","createEmbeddedView","declarationViewLQueries","R3_ViewRef","createTemplateRef","ViewContainerRef","injectViewContainerRef","previousTNode","createContainerRef","VE_ViewContainerRef","R3ViewContainerRef","_lContainer","_hostTNode","_hostLView","getViewRefs","templateRef","indexOrOptions","viewRef","insert","createComponent","componentFactoryOrType","isComponentFactory","ngModuleRef","componentFactory","R3ComponentFactory","contextInjector","componentRef","prevIdx","prevLContainer","prevVCRef","adjustedIdx","_adjustIndex","addViewToContainer","getOrCreateViewRefs","move","viewRefsArr","detachedView","wasDetached","R3ViewRef","commentNode","parentOfHostNative","nativeNextSibling","LQuery_","queryList","clone","LQueries_","tQueries","noOfInheritedQueries","viewLQueries","tQuery","getByIndex","parentLQuery","indexInDeclarationView","dirtyQueriesWithMatches","getTQuery","TQueryMetadata_","predicate","read","TQueries_","queriesForTemplateRef","childQueryIndex","tqueryClone","track","tquery","TQuery_","_declarationNodeIndex","isApplyingToNode","matchTNode","_appliesToNextNode","crossesNgTemplate","addMatch","declarationNodeIdx","matchTNodeWithReadOption","getIdxOfMatchingSelector","ViewEngine_TemplateRef","nodeMatchIdx","ViewEngine_ElementRef","directiveOrProviderIdx","matchIdx","createResultByTNodeType","createResultForNode","matchingIdx","createSpecialToken","materializeViewResults","queryIndex","lQuery","tQueryMatches","matchedNodeIdx","collectQueryResults","lViewResults","embeddedLViews","ɵɵqueryRefresh","ɵɵviewQuery","createTQuery","createLQuery","ɵɵcontentQuery","saveContentQueryAndDirectiveIndex","ɵɵloadQuery","loadQueryInternal","tViewContentQueries","lastSavedDirectiveIndex","angularCoreEnv","r3.ɵɵattribute","r3.ɵɵattributeInterpolate1","r3.ɵɵattributeInterpolate2","r3.ɵɵattributeInterpolate3","r3.ɵɵattributeInterpolate4","r3.ɵɵattributeInterpolate5","r3.ɵɵattributeInterpolate6","r3.ɵɵattributeInterpolate7","r3.ɵɵattributeInterpolate8","r3.ɵɵattributeInterpolateV","r3.ɵɵdefineComponent","r3.ɵɵdefineDirective","r3.ɵɵdefineNgModule","r3.ɵɵdefinePipe","r3.ɵɵdirectiveInject","r3.ɵɵgetInheritedFactory","r3.ɵɵinjectAttribute","r3.ɵɵinvalidFactory","r3.ɵɵtemplateRefExtractor","r3.ɵɵresetView","r3.ɵɵHostDirectivesFeature","r3.ɵɵNgOnChangesFeature","r3.ɵɵProvidersFeature","r3.ɵɵCopyDefinitionFeature","r3.ɵɵInheritDefinitionFeature","r3.ɵɵStandaloneFeature","r3.ɵɵnextContext","r3.ɵɵnamespaceHTML","r3.ɵɵnamespaceMathML","r3.ɵɵnamespaceSVG","r3.ɵɵenableBindings","r3.ɵɵdisableBindings","r3.ɵɵelementStart","r3.ɵɵelementEnd","r3.ɵɵelement","r3.ɵɵelementContainerStart","r3.ɵɵelementContainerEnd","r3.ɵɵelementContainer","r3.ɵɵpureFunction0","r3.ɵɵpureFunction1","r3.ɵɵpureFunction2","r3.ɵɵpureFunction3","r3.ɵɵpureFunction4","r3.ɵɵpureFunction5","r3.ɵɵpureFunction6","r3.ɵɵpureFunction7","r3.ɵɵpureFunction8","r3.ɵɵpureFunctionV","r3.ɵɵgetCurrentView","r3.ɵɵrestoreView","r3.ɵɵlistener","r3.ɵɵprojection","r3.ɵɵsyntheticHostProperty","r3.ɵɵsyntheticHostListener","r3.ɵɵpipeBind1","r3.ɵɵpipeBind2","r3.ɵɵpipeBind3","r3.ɵɵpipeBind4","r3.ɵɵpipeBindV","r3.ɵɵprojectionDef","r3.ɵɵhostProperty","r3.ɵɵproperty","r3.ɵɵpropertyInterpolate","r3.ɵɵpropertyInterpolate1","r3.ɵɵpropertyInterpolate2","r3.ɵɵpropertyInterpolate3","r3.ɵɵpropertyInterpolate4","r3.ɵɵpropertyInterpolate5","r3.ɵɵpropertyInterpolate6","r3.ɵɵpropertyInterpolate7","r3.ɵɵpropertyInterpolate8","r3.ɵɵpropertyInterpolateV","r3.ɵɵpipe","r3.ɵɵqueryRefresh","r3.ɵɵviewQuery","r3.ɵɵloadQuery","r3.ɵɵcontentQuery","r3.ɵɵreference","r3.ɵɵclassMap","r3.ɵɵclassMapInterpolate1","r3.ɵɵclassMapInterpolate2","r3.ɵɵclassMapInterpolate3","r3.ɵɵclassMapInterpolate4","r3.ɵɵclassMapInterpolate5","r3.ɵɵclassMapInterpolate6","r3.ɵɵclassMapInterpolate7","r3.ɵɵclassMapInterpolate8","r3.ɵɵclassMapInterpolateV","r3.ɵɵstyleMap","r3.ɵɵstyleMapInterpolate1","r3.ɵɵstyleMapInterpolate2","r3.ɵɵstyleMapInterpolate3","r3.ɵɵstyleMapInterpolate4","r3.ɵɵstyleMapInterpolate5","r3.ɵɵstyleMapInterpolate6","r3.ɵɵstyleMapInterpolate7","r3.ɵɵstyleMapInterpolate8","r3.ɵɵstyleMapInterpolateV","r3.ɵɵstyleProp","r3.ɵɵstylePropInterpolate1","r3.ɵɵstylePropInterpolate2","r3.ɵɵstylePropInterpolate3","r3.ɵɵstylePropInterpolate4","r3.ɵɵstylePropInterpolate5","r3.ɵɵstylePropInterpolate6","r3.ɵɵstylePropInterpolate7","r3.ɵɵstylePropInterpolate8","r3.ɵɵstylePropInterpolateV","r3.ɵɵclassProp","r3.ɵɵadvance","r3.ɵɵtemplate","r3.ɵɵtext","r3.ɵɵtextInterpolate","r3.ɵɵtextInterpolate1","r3.ɵɵtextInterpolate2","r3.ɵɵtextInterpolate3","r3.ɵɵtextInterpolate4","r3.ɵɵtextInterpolate5","r3.ɵɵtextInterpolate6","r3.ɵɵtextInterpolate7","r3.ɵɵtextInterpolate8","r3.ɵɵtextInterpolateV","r3.ɵɵi18n","r3.ɵɵi18nAttributes","r3.ɵɵi18nExp","r3.ɵɵi18nStart","r3.ɵɵi18nEnd","r3.ɵɵi18nApply","r3.ɵɵi18nPostprocess","r3.ɵɵresolveWindow","r3.ɵɵresolveDocument","r3.ɵɵresolveBody","r3.ɵɵsetComponentScope","r3.ɵɵsetNgModuleScope","registerNgModuleType","sanitization.ɵɵsanitizeHtml","sanitization.ɵɵsanitizeStyle","sanitization.ɵɵsanitizeResourceUrl","sanitization.ɵɵsanitizeScript","sanitization.ɵɵsanitizeUrl","sanitization.ɵɵsanitizeUrlOrResourceUrl","sanitization.ɵɵtrustConstantHtml","sanitization.ɵɵtrustConstantResourceUrl","iframe_attrs_validation.ɵɵvalidateIframeAttribute","jitOptions","setJitOptions","defaultEncapsulation","preserveWhitespaces","getJitOptions","resetJitOptions","patchModuleCompilation","isModuleWithProviders","isNgModule","moduleQueue","enqueueModuleForDelayedScoping","flushingModuleQueue","flushModuleScopingQueueAsMuchAsPossible","every","isResolvedDeclaration","setScopeOnDeclaredComponents","declaration","compileNgModule","compileNgModuleDefs","allowDuplicateDeclarationsInRoot","expandModuleWithProviders","NgModule","verifySemanticsOfNgModuleDef","compileInjector","importingModule","verifiedNgModule","errors","unwrapModuleWithProvidersImports","modOrStandaloneCmpt","verifySemanticsOfNgModuleImport","verifyDeclarationsHaveDefinitions","verifyDirectivesHaveSelector","declarationType","verifyNotStandalone","combinedDeclarations","computeCombinedExports","verifyExportsAreDeclaredOrReExported","decl","verifyDeclarationIsUnique","verifyComponentEntryComponentsIsPartOfNgModule","getAnnotation","mod","verifyCorrectBootstrapType","verifyComponentIsPartOfNgModule","entryComponents","generateStandaloneInDeclarationsError","lastIndexOf","suppressErrors","existingModule","ownerNgModule","typeOrWithProviders","collect","__annotations__","readAnnotation","WeakMap","resetCompiledComponents","transitiveScopes","transitiveScopesFor","patchComponentDefWithScope","ngSelectorScope","compilation","pipe","transitiveScopesForNgModule","exported","importedScope","entry","declared","declaredWithDefs","exportedType","exportedScope","compilationDepth","ngComponentDef","maybeQueueResolutionOfComponentResources","addDirectiveFactoryDef","directiveMetadata","typeSourceSpan","createParseSourceSpan","animations","interpolation","usesInheritance","addDirectiveDefToUndecoratedParents","compileComponent","getStandaloneDefFunctions","hasSelectorScope","getDependencyTypeForError","verifyStandaloneImport","depType","importingType","cachedDirectiveDefs","cachedPipeDefs","seen","rawDep","ngDirectiveDef","compileDirective","sourceMapUrl","facade","Directive","extendsDirectlyFromObject","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","extractExportAs","viewQueries","objPrototype","shouldAddAbstractDirective","convertToR3QueryPredicate","splitByComma","ann","static","isQueryAnn","queriesMeta","isInputAnnotation","convertToR3QueryMetadata","piece","LIFECYCLE_HOOKS","hookName","metadataName","ngPipeDef","getPipeMetadata","Pipe","compilePipe","Component","c","bindingPropertyName","hostPropertyName","HostListener","ITS_JUST_ANGULAR","APP_INITIALIZER","ApplicationInitStatus","appInits","noop","donePromise","rej","reject","runInitializers","initialized","asyncInitPromises","initResult","observableAsPromise","catch","APP_ID","_appIdRandomProviderFactory","_randomChar","random","PLATFORM_INITIALIZER","PLATFORM_ID","PACKAGE_ROOT_URL","ANIMATION_MODULE_TYPE","Console","log","getGlobalLocale","LOCALE","$localize","DEFAULT_CURRENCY_CODE","TRANSLATIONS","TRANSLATIONS_FORMAT","MissingTranslationStrategy","ModuleWithComponentFactories","componentFactories","ngModuleFactory","Compiler","compileModuleSync","NgModuleFactoryR3","compileModuleAsync","compileModuleAndAllComponentsSync","moduleDef","ComponentFactoryR3","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","COMPILER_OPTIONS","CompilerFactory","applyChanges","GLOBAL_PUBLISH_EXPANDO_KEY","_published","publishDefaultGlobalUtils","publishGlobalUtil","COMPILED","w","scheduleMicroTask","Zone","getNativeRequestAnimationFrame","nativeRequestAnimationFrame","nativeCancelAnimationFrame","unpatchedRequestAnimationFrame","__symbol__","unpatchedCancelAnimationFrame","AsyncStackTaggingZoneSpec","consoleAsyncStackTaggingImpl","namePrefix","createTask","onScheduleTask","delegate","_current","task","consoleTask","scheduleTask","onInvokeTask","_currentZone","targetZone","applyThis","applyArgs","ret","run","invokeTask","NgZone","enableLongStackTrace","shouldCoalesceEventChangeDetection","shouldCoalesceRunChangeDetection","assertZonePatched","_nesting","_outer","_inner","fork","lastRequestAnimationFrameId","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","runTask","zone","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","runOutsideAngular","checkStable","hasPendingMicrotasks","isStable","onMicrotaskEmpty","onStable","delayChangeDetectionForEvents","isCheckStableRunning","fakeTopEventTask","root","updateMicroTaskStatus","invoke","delayChangeDetectionForEventsDelegate","properties","onEnter","onLeave","onInvoke","onHasTask","hasTaskState","hasTask","change","_hasPendingMicrotasks","microTask","hasPendingMacrotasks","macroTask","onHandleError","onError","onUnstable","NoopNgZone","TESTABILITY","TESTABILITY_GETTER","Testability","_ngZone","testabilityGetter","_testabilityGetter","setTestabilityGetter","addToWindow","_watchAngularEvents","taskTrackingZone","_didWork","_isZoneStable","_runCallbacksIfReady","increasePendingRequestCount","_pendingCount","decreasePendingRequestCount","_callbacks","cb","clearTimeout","timeoutId","doneCb","pending","getPendingTasks","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","registerApplication","unregisterApplication","findProviders","using","exactMatch","TestabilityRegistry","testability","_applications","unregisterAllApplications","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","getter","NG_DEV_MODE","_platformInjector","ALLOW_MULTIPLE_PLATFORMS","PLATFORM_DESTROY_LISTENERS","APP_BOOTSTRAP_LISTENER","compileNgModuleFactory","moduleFactory","R3NgModuleFactory","ngJitMode","compilerOptions","_lastDefined","compilerProviders","_mergeArrays","compilerInjector","resourceLoader","ResourceLoader","_publishDefaultGlobalUtils","cf","NgProbeToken","createPlatform","platform","PlatformRef","runPlatformInitializers","createPlatformInjector","inits","internalCreateApplication","config","appProviders","platformProviders","platformInjector","createOrReusePlatformInjector","ngZone","getNgZone","getNgZoneOptions","allAppProviders","envInjector","exceptionHandler","onErrorSubscription","destroyListener","onPlatformDestroyListeners","_callAndReportToErrorHandler","initStatus","ApplicationRef","createPlatformFactory","parentPlatformFactory","desc","extraProviders","getPlatform","assertPlatform","requiredToken","destroyPlatform","bootstrapModuleFactory","ngZoneInjector","moduleRef","_modules","_moduleDoBootstrap","bootstrapModule","optionsReducer","ngDoBootstrap","_destroyListeners","module","listener","destroyListeners","ngZoneEventCoalescing","ngZoneRunCoalescing","ngZoneToUse","_zone","_exceptionHandler","_onMicrotaskEmptySubscription","tick","isCurrentlyStable","Observable","_stable","stableSub","unstableSub","share","componentOrFactory","warnIfDestroyed","resolver","componentTypes","selectorOrNode","compRef","_loadComponent","_runningTick","_views","attachView","_bootstrapListeners","viewCount","isDevMode","enableProdMode","getModuleFactory","noModuleError","getNgModuleById","ChangeDetectorRef","injectChangeDetectorRef","createViewRef","isPipe","hostComponentView","EmbeddedViewRef","DebugEventListener","asNativeElements","debugEls","DebugNode","nativeNode","DebugElement","references","copyDomProperties","collectPropertyBindings","lowercaseTNodeAttrs","baseVal","childNodes","children","getDebugNode","query","queryAll","_queryAll","queryAllNodes","triggerEventHandler","eventObj","invokedListeners","eventListeners","unwrappedListener","NodePrototype","descriptors","getOwnPropertyDescriptors","isPrimitiveValue","parentElement","elementsOnly","_queryNodeChildren","_queryNativeNodeDescendants","rootNativeNode","getNativeByTNodeOrNull","_addQueryMatch","nodeOrContainer","_queryNodeChildrenInContainer","head","nextLView","nextTNode","childView","debugNode","nodes","bindingIndexes","metadataParts","_nativeNodeToDebugNode","NG_DEBUG_PROPERTY","getDebugNodeR2","_nativeNode","getAllDebugNodes","indexDebugNode","removeDebugNodeFromIndex","DefaultIterableDifferFactory","supports","trackByFn","DefaultIterableDiffer","trackByIdentity","_trackByFn","forEachItem","_itHead","_next","forEachOperation","nextIt","nextRemove","_removalsHead","addRemoveOffset","moveOffsets","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_previousItHead","_nextPrevious","forEachAddedItem","_additionsHead","_nextAdded","forEachMovedItem","_movesHead","_nextMoved","forEachRemovedItem","forEachIdentityChange","_identityChangesHead","_nextIdentityChange","diff","collection","check","_reset","mayBeDirty","itemTrackBy","trackById","_mismatch","_verifyReinsertion","_addIdentityChange","iterateListLike","_truncate","isDirty","_additionsTail","_movesTail","_removalsTail","_identityChangesTail","previousRecord","_itTail","_prev","_remove","_unlinkedRecords","_reinsertAfter","_linkedRecords","_moveAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","nextRecord","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_DuplicateItemRecordList","_head","_tail","_nextDup","_prevDup","atOrAfterIndex","duplicates","recordList","isEmpty","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_changesHead","_mapHead","_previousMapHead","forEachChangedItem","_nextChanged","_appendAfter","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","_records","_changesTail","KeyValueChangeRecord_","_addToAdditions","_addToChanges","defaultIterableDiffersFactory","IterableDiffers","copied","extend","iterable","getTypeNameForDebugging","defaultKeyValueDiffersFactory","KeyValueDiffers","kv","keyValDiff","iterableDiff","defaultIterableDiffers","defaultKeyValueDiffers","platformCore","ApplicationModule","coerceToBoolean","ɵɵngDeclareDirective","compileDirectiveDeclaration","ɵɵngDeclareClassMetadata","ɵɵngDeclareComponent","compileComponentDeclaration","ɵɵngDeclareFactory","getFactoryKind","compileFactoryDeclaration","ɵɵngDeclareInjectable","compileInjectableDeclaration","ɵɵngDeclareInjector","compileInjectorDeclaration","ɵɵngDeclareNgModule","compileNgModuleDeclaration","ɵɵngDeclarePipe","compilePipeDeclaration","elementInjector","reflectComponentType"],"sources":["/var/projects/packages/core/src/util/property.ts","/var/projects/packages/core/src/util/stringify.ts","/var/projects/packages/core/src/di/forward_ref.ts","/var/projects/packages/core/src/di/interface/provider.ts","/var/projects/packages/core/src/error_details_base_url.ts","/var/projects/packages/core/src/errors.ts","/var/projects/packages/core/src/render3/util/stringify_utils.ts","/var/projects/packages/core/src/render3/errors_di.ts","/var/projects/packages/core/src/util/assert.ts","/var/projects/packages/core/src/di/interface/defs.ts","/var/projects/packages/core/src/di/interface/injector.ts","/var/projects/packages/core/src/di/inject_switch.ts","/var/projects/packages/core/src/util/global.ts","/var/projects/packages/core/src/util/ng_dev_mode.ts","/var/projects/packages/core/src/di/injector_compatibility.ts","/var/projects/packages/core/src/util/closure.ts","/var/projects/packages/core/src/change_detection/constants.ts","/var/projects/packages/core/src/metadata/view.ts","/var/projects/packages/core/src/util/empty.ts","/var/projects/packages/core/src/render3/fields.ts","/var/projects/packages/core/src/render3/definition.ts","/var/projects/packages/core/src/render3/interfaces/view.ts","/var/projects/packages/core/src/render3/interfaces/container.ts","/var/projects/packages/core/src/render3/interfaces/type_checks.ts","/var/projects/packages/core/src/render3/assert.ts","/var/projects/packages/core/src/render3/definition_factory.ts","/var/projects/packages/core/src/interface/simple_change.ts","/var/projects/packages/core/src/render3/features/ng_onchanges_feature.ts","/var/projects/packages/core/src/render3/profiler.ts","/var/projects/packages/core/src/render3/namespaces.ts","/var/projects/packages/core/src/render3/util/view_utils.ts","/var/projects/packages/core/src/render3/state.ts","/var/projects/packages/core/src/render3/hooks.ts","/var/projects/packages/core/src/render3/interfaces/injector.ts","/var/projects/packages/core/src/render3/interfaces/node.ts","/var/projects/packages/core/src/render3/node_assert.ts","/var/projects/packages/core/src/render3/util/attrs_utils.ts","/var/projects/packages/core/src/render3/util/injector_utils.ts","/var/projects/packages/core/src/render3/di.ts","/var/projects/packages/core/src/render3/instructions/di_attr.ts","/var/projects/packages/core/src/util/decorators.ts","/var/projects/packages/core/src/di/metadata_attr.ts","/var/projects/packages/core/src/di/injection_token.ts","/var/projects/packages/core/src/metadata/di.ts","/var/projects/packages/core/src/compiler/compiler_facade_interface.ts","/var/projects/packages/core/src/compiler/compiler_facade.ts","/var/projects/packages/core/src/interface/type.ts","/var/projects/packages/core/src/util/array_utils.ts","/var/projects/packages/core/src/reflection/reflection_capabilities.ts","/var/projects/packages/core/src/di/metadata.ts","/var/projects/packages/core/src/di/jit/util.ts","/var/projects/packages/core/src/metadata/resource_loading.ts","/var/projects/packages/core/src/linker/ng_module_registration.ts","/var/projects/packages/core/src/metadata/schema.ts","/var/projects/packages/core/src/render3/instructions/element_validation.ts","/var/projects/packages/core/src/render/api_flags.ts","/var/projects/packages/core/src/util/dom.ts","/var/projects/packages/core/src/render3/interfaces/lview_tracking.ts","/var/projects/packages/core/src/render3/interfaces/context.ts","/var/projects/packages/core/src/render3/context_discovery.ts","/var/projects/packages/core/src/render3/i18n/i18n_tree_shaking.ts","/var/projects/packages/core/src/render3/util/view_traversal_utils.ts","/var/projects/packages/core/src/render3/node_manipulation.ts","/var/projects/packages/core/src/util/security/trusted_types.ts","/var/projects/packages/core/src/sanitization/iframe_attrs_validation.ts","/var/projects/packages/core/src/render3/interfaces/document.ts","/var/projects/packages/core/src/util/security/trusted_types_bypass.ts","/var/projects/packages/core/src/sanitization/bypass.ts","/var/projects/packages/core/src/sanitization/inert_body.ts","/var/projects/packages/core/src/sanitization/url_sanitizer.ts","/var/projects/packages/core/src/sanitization/html_sanitizer.ts","/var/projects/packages/core/src/sanitization/security.ts","/var/projects/packages/core/src/sanitization/sanitization.ts","/var/projects/packages/core/src/di/initializer_token.ts","/var/projects/packages/core/src/di/injector_token.ts","/var/projects/packages/core/src/di/internal_tokens.ts","/var/projects/packages/core/src/di/null_injector.ts","/var/projects/packages/core/src/di/provider_collection.ts","/var/projects/packages/core/src/di/scope.ts","/var/projects/packages/core/src/di/r3_injector.ts","/var/projects/packages/core/src/linker/component_factory.ts","/var/projects/packages/core/src/linker/component_factory_resolver.ts","/var/projects/packages/core/src/linker/element_ref.ts","/var/projects/packages/core/src/render/api.ts","/var/projects/packages/core/src/sanitization/sanitizer.ts","/var/projects/packages/core/src/version.ts","/var/projects/packages/core/src/view/provider_flags.ts","/var/projects/packages/core/src/util/errors.ts","/var/projects/packages/core/src/error_handler.ts","/var/projects/packages/core/src/util/ng_reflect.ts","/var/projects/packages/core/src/render3/util/misc_utils.ts","/var/projects/packages/core/src/render3/errors.ts","/var/projects/packages/core/src/render3/styling/class_differ.ts","/var/projects/packages/core/src/render3/node_selector_matcher.ts","/var/projects/packages/core/src/render3/tokens.ts","/var/projects/packages/core/src/render3/instructions/advance.ts","/var/projects/packages/core/src/di/jit/environment.ts","/var/projects/packages/core/src/di/jit/injectable.ts","/var/projects/packages/core/src/di/injectable.ts","/var/projects/packages/core/src/di/create_injector.ts","/var/projects/packages/core/src/di/injector.ts","/var/projects/packages/core/src/di/reflective_errors.ts","/var/projects/packages/core/src/di/reflective_key.ts","/var/projects/packages/core/src/di/reflective_provider.ts","/var/projects/packages/core/src/di/reflective_injector.ts","/var/projects/packages/core/src/di/index.ts","/var/projects/packages/core/src/di.ts","/var/projects/packages/core/src/render3/instructions/di.ts","/var/projects/packages/core/src/render3/instructions/shared.ts","/var/projects/packages/core/src/render3/styling/static_styling.ts","/var/projects/packages/core/src/render3/collect_native_nodes.ts","/var/projects/packages/core/src/render3/view_ref.ts","/var/projects/packages/core/src/render3/component_ref.ts","/var/projects/packages/core/src/render3/features/inherit_definition_feature.ts","/var/projects/packages/core/src/render3/features/copy_definition_feature.ts","/var/projects/packages/core/src/render3/features/host_directives_feature.ts","/var/projects/packages/core/src/util/iterable.ts","/var/projects/packages/core/src/util/comparison.ts","/var/projects/packages/core/src/render3/bindings.ts","/var/projects/packages/core/src/render3/instructions/attribute.ts","/var/projects/packages/core/src/render3/instructions/interpolation.ts","/var/projects/packages/core/src/render3/instructions/attribute_interpolation.ts","/var/projects/packages/core/src/render3/instructions/change_detection.ts","/var/projects/packages/core/src/render3/instructions/template.ts","/var/projects/packages/core/src/render3/instructions/storage.ts","/var/projects/packages/core/src/render3/instructions/property.ts","/var/projects/packages/core/src/render3/instructions/element.ts","/var/projects/packages/core/src/render3/instructions/element_container.ts","/var/projects/packages/core/src/render3/instructions/get_current_view.ts","/var/projects/packages/core/src/util/lang.ts","/var/projects/packages/core/src/render3/instructions/listener.ts","/var/projects/packages/core/src/render3/instructions/next_context.ts","/var/projects/packages/core/src/render3/instructions/projection.ts","/var/projects/packages/core/src/render3/instructions/property_interpolation.ts","/var/projects/packages/core/src/render3/interfaces/styling.ts","/var/projects/packages/core/src/render3/styling/style_binding_list.ts","/var/projects/packages/core/src/render3/styling/styling_parser.ts","/var/projects/packages/core/src/render3/instructions/styling.ts","/var/projects/packages/core/src/render3/instructions/text.ts","/var/projects/packages/core/src/render3/instructions/text_interpolation.ts","/var/projects/packages/core/src/render3/instructions/class_map_interpolation.ts","/var/projects/packages/core/src/render3/instructions/style_map_interpolation.ts","/var/projects/packages/core/src/render3/instructions/style_prop_interpolation.ts","/var/projects/packages/core/src/render3/instructions/host_property.ts","/var/projects/packages/core/src/util/ng_i18n_closure_mode.ts","/var/projects/packages/core/src/i18n/locale_en.ts","/var/projects/packages/core/src/i18n/locale_data_api.ts","/var/projects/packages/core/src/i18n/localization.ts","/var/projects/packages/core/src/render3/interfaces/i18n.ts","/var/projects/packages/core/src/render3/i18n/i18n_locale_id.ts","/var/projects/packages/core/src/render3/node_manipulation_i18n.ts","/var/projects/packages/core/src/render3/i18n/i18n_insert_before_index.ts","/var/projects/packages/core/src/render3/i18n/i18n_util.ts","/var/projects/packages/core/src/render3/i18n/i18n_apply.ts","/var/projects/packages/core/src/render3/instructions/i18n_icu_container_visitor.ts","/var/projects/packages/core/src/render3/i18n/i18n_debug.ts","/var/projects/packages/core/src/render3/i18n/i18n_parse.ts","/var/projects/packages/core/src/render3/i18n/i18n_postprocess.ts","/var/projects/packages/core/src/render3/instructions/i18n.ts","/var/projects/packages/core/src/render3/instructions/all.ts","/var/projects/packages/core/src/render3/di_setup.ts","/var/projects/packages/core/src/render3/features/providers_feature.ts","/var/projects/packages/core/src/linker/ng_module_factory.ts","/var/projects/packages/core/src/render3/ng_module_ref.ts","/var/projects/packages/core/src/render3/features/standalone_feature.ts","/var/projects/packages/core/src/render3/util/discovery_utils.ts","/var/projects/packages/core/src/render3/metadata.ts","/var/projects/packages/core/src/render3/pure_function.ts","/var/projects/packages/core/src/render3/pipe.ts","/var/projects/packages/core/src/event_emitter.ts","/var/projects/packages/core/src/linker/query_list.ts","/var/projects/packages/core/src/linker/template_ref.ts","/var/projects/packages/core/src/linker/view_container_ref.ts","/var/projects/packages/core/src/render3/query.ts","/var/projects/packages/core/src/render3/view_engine_compatibility_prebound.ts","/var/projects/packages/core/src/render3/jit/environment.ts","/var/projects/packages/core/src/render3/jit/jit_options.ts","/var/projects/packages/core/src/render3/jit/module_patch.ts","/var/projects/packages/core/src/render3/jit/util.ts","/var/projects/packages/core/src/render3/jit/module.ts","/var/projects/packages/core/src/render3/jit/directive.ts","/var/projects/packages/core/src/render3/jit/pipe.ts","/var/projects/packages/core/src/metadata/directives.ts","/var/projects/packages/core/src/metadata/ng_module.ts","/var/projects/packages/core/src/metadata.ts","/var/projects/packages/core/src/util/noop.ts","/var/projects/packages/core/src/r3_symbols.ts","/var/projects/packages/core/src/application_init.ts","/var/projects/packages/core/src/application_tokens.ts","/var/projects/packages/core/src/console.ts","/var/projects/packages/core/src/i18n/tokens.ts","/var/projects/packages/core/src/linker/compiler.ts","/var/projects/packages/core/src/render3/util/change_detection_utils.ts","/var/projects/packages/core/src/render3/util/global_utils.ts","/var/projects/packages/core/src/util/microtask.ts","/var/projects/packages/core/src/util/raf.ts","/var/projects/packages/core/src/zone/async-stack-tagging.ts","/var/projects/packages/core/src/zone/ng_zone.ts","/var/projects/packages/core/src/testability/testability.ts","/var/projects/packages/core/src/application_ref.ts","/var/projects/packages/core/src/util/is_dev_mode.ts","/var/projects/packages/core/src/zone.ts","/var/projects/packages/core/src/render.ts","/var/projects/packages/core/src/linker/ng_module_factory_loader.ts","/var/projects/packages/core/src/change_detection/change_detector_ref.ts","/var/projects/packages/core/src/linker/view_ref.ts","/var/projects/packages/core/src/linker.ts","/var/projects/packages/core/src/linker/ng_module_factory_loader_impl.ts","/var/projects/packages/core/src/debug/debug_node.ts","/var/projects/packages/core/src/change_detection/differs/default_iterable_differ.ts","/var/projects/packages/core/src/change_detection/differs/default_keyvalue_differ.ts","/var/projects/packages/core/src/change_detection/differs/iterable_differs.ts","/var/projects/packages/core/src/change_detection/differs/keyvalue_differs.ts","/var/projects/packages/core/src/change_detection/change_detection.ts","/var/projects/packages/core/src/change_detection.ts","/var/projects/packages/core/src/platform_core_providers.ts","/var/projects/packages/core/src/application_module.ts","/var/projects/packages/core/src/util/coercion.ts","/var/projects/packages/core/src/render3/jit/partial.ts","/var/projects/packages/core/src/core_render3_private_export.ts","/var/projects/packages/core/src/render3/component.ts","/var/projects/packages/core/src/core.ts","/var/projects/packages/core/public_api.ts","/var/projects/packages/core/index.ts","/var/projects/packages/core/core.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * Concatenates two strings with separator, allocating new strings only when necessary.\n *\n * @param before before string.\n * @param separator separator string.\n * @param after after string.\n * @returns concatenated string.\n */\nexport function concatStringsWithSpace(before: string|null, after: string|null): string {\n  return (before == null || before === '') ?\n      (after === null ? '' : after) :\n      ((after == null || after === '') ? before : before + ' ' + after);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn {\n  (): any;\n}\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() {\n    return stringify(this());\n  };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../interface/type';\n\n/**\n * Configures the `Injector` to return a value for a token.\n * Base for `ValueProvider` decorator.\n *\n * @publicApi\n */\nexport interface ValueSansProvider {\n  /**\n   * The value to inject.\n   */\n  useValue: any;\n}\n\n/**\n * Configures the `Injector` to return a value for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ValueProvider extends ValueSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * Base for `StaticClassProvider` decorator.\n *\n * @publicApi\n */\nexport interface StaticClassSansProvider {\n  /**\n   * An optional class to instantiate for the `token`. By default, the `provide`\n   * class is instantiated.\n   */\n  useClass: Type<any>;\n\n  /**\n   * A list of `token`s to be resolved by the injector. The list of values is then\n   * used as arguments to the `useClass` constructor.\n   */\n  deps: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface StaticClassProvider extends StaticClassSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * ```ts\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * ```\n *\n * @publicApi\n */\nexport interface ConstructorSansProvider {\n  /**\n   * A list of `token`s to be resolved by the injector.\n   */\n  deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ConstructorProvider extends ConstructorSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: Type<any>;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see `ExistingProvider`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface ExistingSansProvider {\n  /**\n   * Existing `token` to return. (Equivalent to `injector.get(useExisting)`)\n   */\n  useExisting: any;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ExistingProvider extends ExistingSansProvider {\n  /**\n   * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * @see `FactoryProvider`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface FactorySansProvider {\n  /**\n   * A function to invoke to create a value for this `token`. The function is invoked with\n   * resolved values of `token`s in the `deps` field.\n   */\n  useFactory: Function;\n\n  /**\n   * A list of `token`s to be resolved by the injector. The list of values is then\n   * used as arguments to the `useFactory` function.\n   */\n  deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface FactoryProvider extends FactorySansProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Describes how an `Injector` should be configured as static (that is, without reflection).\n * A static provider provides tokens to an injector for various types of dependencies.\n *\n * @see `Injector.create()`.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection-providers).\n *\n * @publicApi\n */\nexport type StaticProvider =\n    ValueProvider|ExistingProvider|StaticClassProvider|ConstructorProvider|FactoryProvider|any[];\n\n\n/**\n * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @publicApi\n */\nexport interface TypeProvider extends Type<any> {}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useClass` function.\n * Base for `ClassProvider` decorator.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface ClassSansProvider {\n  /**\n   * Class to instantiate for the `token`.\n   */\n  useClass: Type<any>;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ClassProvider extends ClassSansProvider {\n  /**\n   * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n   */\n  provide: any;\n\n  /**\n   * When true, injector returns an array of instances. This is useful to allow multiple\n   * providers spread across many files to provide configuration information to a common token.\n   */\n  multi?: boolean;\n}\n\n/**\n * Describes how the `Injector` should be configured.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `StaticProvider`\n *\n * @publicApi\n */\nexport type Provider = TypeProvider|ValueProvider|ClassProvider|ConstructorProvider|\n    ExistingProvider|FactoryProvider|any[];\n\n/**\n * Encapsulated `Provider`s that are only accepted during creation of an `EnvironmentInjector` (e.g.\n * in an `NgModule`).\n *\n * Using this wrapper type prevents providers which are only designed to work in\n * application/environment injectors from being accidentally included in\n * `@Component.providers` and ending up in a component injector.\n *\n * This wrapper type prevents access to the `Provider`s inside.\n *\n * @see `makeEnvironmentProviders`\n * @see `importProvidersFrom`\n *\n * @publicApi\n */\nexport type EnvironmentProviders = {\n  ɵbrand: 'EnvironmentProviders';\n};\n\nexport interface InternalEnvironmentProviders extends EnvironmentProviders {\n  ɵproviders: (Provider|EnvironmentProviders)[];\n\n  /**\n   * If present, indicates that the `EnvironmentProviders` were derived from NgModule providers.\n   *\n   * This is used to produce clearer error messages.\n   */\n  ɵfromNgModule?: true;\n}\n\nexport function isEnvironmentProviders(\n    value: Provider|EnvironmentProviders|\n    InternalEnvironmentProviders): value is InternalEnvironmentProviders {\n  return value && !!(value as InternalEnvironmentProviders).ɵproviders;\n}\n\n/**\n * Describes a function that is used to process provider lists (such as provider\n * overrides).\n */\nexport type ProcessProvidersFunction = (providers: Provider[]) => Provider[];\n\n\n/**\n * A wrapper around an NgModule that associates it with [providers](guide/glossary#provider\n * \"Definition\"). Usage without a generic type is deprecated.\n *\n * @see [Deprecations](guide/deprecations#modulewithproviders-type-without-a-generic)\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<T> {\n  ngModule: Type<T>;\n  providers?: Array<Provider|EnvironmentProviders>;\n}\n\n/**\n * Providers that were imported from NgModules via the `importProvidersFrom` function.\n *\n * These providers are meant for use in an application injector (or other environment injectors) and\n * should not be used in component injectors.\n *\n * This type cannot be directly implemented. It's returned from the `importProvidersFrom` function\n * and serves to prevent the extracted NgModule providers from being used in the wrong contexts.\n *\n * @see `importProvidersFrom`\n *\n * @publicApi\n * @deprecated replaced by `EnvironmentProviders`\n */\nexport type ImportedNgModuleProviders = EnvironmentProviders;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Base URL for the error details page.\n *\n * Keep this constant in sync across:\n *  - packages/compiler-cli/src/ngtsc/diagnostics/src/error_details_base_url.ts\n *  - packages/core/src/error_details_base_url.ts\n */\nexport const ERROR_DETAILS_PAGE_BASE_URL = 'https://angular.io/errors';\n\n/**\n * URL for the XSS security documentation.\n */\nexport const XSS_SECURITY_URL = 'https://g.co/ng/security#xss';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DETAILS_PAGE_BASE_URL} from './error_details_base_url';\n\n/**\n * The list of error codes used in runtime code of the `core` package.\n * Reserved error code range: 100-999.\n *\n * Note: the minus sign denotes the fact that a particular code has a detailed guide on\n * angular.io. This extra annotation is needed to avoid introducing a separate set to store\n * error codes which have guides, which might leak into runtime code.\n *\n * Full list of available error guides can be found at https://angular.io/errors.\n */\nexport const enum RuntimeErrorCode {\n  // Change Detection Errors\n  EXPRESSION_CHANGED_AFTER_CHECKED = -100,\n  RECURSIVE_APPLICATION_REF_TICK = 101,\n\n  // Dependency Injection Errors\n  CYCLIC_DI_DEPENDENCY = -200,\n  PROVIDER_NOT_FOUND = -201,\n  INVALID_FACTORY_DEPENDENCY = 202,\n  MISSING_INJECTION_CONTEXT = -203,\n  INVALID_INJECTION_TOKEN = 204,\n  INJECTOR_ALREADY_DESTROYED = 205,\n  PROVIDER_IN_WRONG_CONTEXT = 207,\n  MISSING_INJECTION_TOKEN = 208,\n  INVALID_MULTI_PROVIDER = -209,\n\n  // Template Errors\n  MULTIPLE_COMPONENTS_MATCH = -300,\n  EXPORT_NOT_FOUND = -301,\n  PIPE_NOT_FOUND = -302,\n  UNKNOWN_BINDING = 303,\n  UNKNOWN_ELEMENT = 304,\n  TEMPLATE_STRUCTURE_ERROR = 305,\n  INVALID_EVENT_BINDING = 306,\n  HOST_DIRECTIVE_UNRESOLVABLE = 307,\n  HOST_DIRECTIVE_NOT_STANDALONE = 308,\n  DUPLICATE_DIRECTITVE = 309,\n  HOST_DIRECTIVE_COMPONENT = 310,\n  HOST_DIRECTIVE_UNDEFINED_BINDING = 311,\n  HOST_DIRECTIVE_CONFLICTING_ALIAS = 312,\n\n  // Bootstrap Errors\n  MULTIPLE_PLATFORMS = 400,\n  PLATFORM_NOT_FOUND = 401,\n  ERROR_HANDLER_NOT_FOUND = 402,\n  BOOTSTRAP_COMPONENTS_NOT_FOUND = -403,\n  PLATFORM_ALREADY_DESTROYED = 404,\n  ASYNC_INITIALIZERS_STILL_RUNNING = 405,\n  APPLICATION_REF_ALREADY_DESTROYED = 406,\n  RENDERER_NOT_FOUND = 407,\n\n  // Styling Errors\n\n  // Declarations Errors\n\n  // i18n Errors\n  INVALID_I18N_STRUCTURE = 700,\n  MISSING_LOCALE_DATA = 701,\n\n  // standalone errors\n  IMPORT_PROVIDERS_FROM_STANDALONE = 800,\n\n  // JIT Compilation Errors\n  // Other\n  INVALID_DIFFER_INPUT = 900,\n  NO_SUPPORTING_DIFFER_FACTORY = 901,\n  VIEW_ALREADY_ATTACHED = 902,\n  INVALID_INHERITANCE = 903,\n  UNSAFE_VALUE_IN_RESOURCE_URL = 904,\n  UNSAFE_VALUE_IN_SCRIPT = 905,\n  MISSING_GENERATED_DEF = 906,\n  TYPE_IS_NOT_STANDALONE = 907,\n  MISSING_ZONEJS = 908,\n  UNEXPECTED_ZONE_STATE = 909,\n  UNSAFE_IFRAME_ATTRS = -910,\n}\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * ```\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * ```\n *\n * Note: the `message` argument contains a descriptive error message as a string in development\n * mode (when the `ngDevMode` is defined). In production mode (after tree-shaking pass), the\n * `message` argument becomes `false`, thus we account for it in the typings and the runtime logic.\n */\nexport class RuntimeError<T extends number = RuntimeErrorCode> extends Error {\n  constructor(public code: T, message: null|false|string) {\n    super(formatRuntimeError<T>(code, message));\n  }\n}\n\n/**\n * Called to format a runtime error.\n * See additional info on the `message` argument type in the `RuntimeError` class description.\n */\nexport function formatRuntimeError<T extends number = RuntimeErrorCode>(\n    code: T, message: null|false|string): string {\n  // Error code might be a negative number, which is a special marker that instructs the logic to\n  // generate a link to the error details page on angular.io.\n  // We also prepend `0` to non-compile-time errors.\n  const fullCode = `NG0${Math.abs(code)}`;\n\n  let errorMessage = `${fullCode}${message ? ': ' + message.trim() : ''}`;\n\n  if (ngDevMode && code < 0) {\n    const addPeriodSeparator = !errorMessage.match(/[.,;!?]$/);\n    const separator = addPeriodSeparator ? '.' : '';\n    errorMessage =\n        `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;\n  }\n  return errorMessage;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Used for stringify render output in Ivy.\n * Important! This function is very performance-sensitive and we should\n * be extra careful not to introduce megamorphic reads in it.\n * Check `core/test/render3/perf/render_stringify` for benchmarks and alternate implementations.\n */\nexport function renderStringify(value: any): string {\n  if (typeof value === 'string') return value;\n  if (value == null) return '';\n  // Use `String` so that it invokes the `toString` method of the value. Note that this\n  // appears to be faster than calling `value.toString` (see `render_stringify` benchmark).\n  return String(value);\n}\n\n\n/**\n * Used to stringify a value so that it can be displayed in an error message.\n * Important! This function contains a megamorphic read and should only be\n * used for error messages.\n */\nexport function stringifyForError(value: any): string {\n  if (typeof value === 'function') return value.name || value.toString();\n  if (typeof value === 'object' && value != null && typeof value.type === 'function') {\n    return value.type.name || value.type.toString();\n  }\n\n  return renderStringify(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isEnvironmentProviders} from '../di/interface/provider';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {stringifyForError} from './util/stringify_utils';\n\n\n/** Called when directives inject each other (creating a circular dependency) */\nexport function throwCyclicDependencyError(token: string, path?: string[]): never {\n  const depPath = path ? `. Dependency path: ${path.join(' > ')} > ${token}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.CYCLIC_DI_DEPENDENCY,\n      `Circular dependency in DI detected for ${token}${depPath}`);\n}\n\nexport function throwMixedMultiProviderError() {\n  throw new Error(`Cannot mix multi providers and regular providers`);\n}\n\nexport function throwInvalidProviderError(\n    ngModuleType?: Type<unknown>, providers?: any[], provider?: any): never {\n  if (ngModuleType && providers) {\n    const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n    throw new Error(`Invalid provider for the NgModule '${\n        stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${\n        providerDetail.join(', ')}]`);\n  } else if (isEnvironmentProviders(provider)) {\n    if (provider.ɵfromNgModule) {\n      throw new RuntimeError(\n          RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT,\n          `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);\n    } else {\n      throw new RuntimeError(\n          RuntimeErrorCode.PROVIDER_IN_WRONG_CONTEXT,\n          `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);\n    }\n  } else {\n    throw new Error('Invalid provider');\n  }\n}\n\n\n/** Throws an error when a token is not found in DI. */\nexport function throwProviderNotFoundError(token: any, injectorName?: string): never {\n  const injectorDetails = injectorName ? ` in ${injectorName}` : '';\n  throw new RuntimeError(\n      RuntimeErrorCode.PROVIDER_NOT_FOUND,\n      ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nimport {stringify} from './stringify';\n\nexport function assertNumber(actual: any, msg: string): asserts actual is number {\n  if (!(typeof actual === 'number')) {\n    throwError(msg, typeof actual, 'number', '===');\n  }\n}\n\nexport function assertNumberInRange(\n    actual: any, minInclusive: number, maxInclusive: number): asserts actual is number {\n  assertNumber(actual, 'Expected a number');\n  assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');\n  assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');\n}\n\nexport function assertString(actual: any, msg: string): asserts actual is string {\n  if (!(typeof actual === 'string')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');\n  }\n}\n\nexport function assertFunction(actual: any, msg: string): asserts actual is Function {\n  if (!(typeof actual === 'function')) {\n    throwError(msg, actual === null ? 'null' : typeof actual, 'function', '===');\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (!(actual == expected)) {\n    throwError(msg, actual, expected, '==');\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual != expected)) {\n    throwError(msg, actual, expected, '!=');\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual === expected)) {\n    throwError(msg, actual, expected, '===');\n  }\n}\n\nexport function assertNotSame<T>(actual: T, expected: T, msg: string) {\n  if (!(actual !== expected)) {\n    throwError(msg, actual, expected, '!==');\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual < expected)) {\n    throwError(msg, actual, expected, '<');\n  }\n}\n\nexport function assertLessThanOrEqual<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual <= expected)) {\n    throwError(msg, actual, expected, '<=');\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual > expected)) {\n    throwError(msg, actual, expected, '>');\n  }\n}\n\nexport function assertGreaterThanOrEqual<T>(\n    actual: T, expected: T, msg: string): asserts actual is T {\n  if (!(actual >= expected)) {\n    throwError(msg, actual, expected, '>=');\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg, actual, null, '==');\n  }\n}\n\nexport function assertDefined<T>(actual: T|null|undefined, msg: string): asserts actual is T {\n  if (actual == null) {\n    throwError(msg, actual, null, '!=');\n  }\n}\n\nexport function throwError(msg: string): never;\nexport function throwError(msg: string, actual: any, expected: any, comparison: string): never;\nexport function throwError(msg: string, actual?: any, expected?: any, comparison?: string): never {\n  throw new Error(\n      `ASSERTION ERROR: ${msg}` +\n      (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));\n}\n\nexport function assertDomNode(node: any): asserts node is Node {\n  // If we're in a worker, `Node` will not be defined.\n  if (!(typeof Node !== 'undefined' && node instanceof Node) &&\n      !(typeof node === 'object' && node != null &&\n        node.constructor.name === 'WebWorkerRenderNode')) {\n    throwError(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);\n  }\n}\n\n\nexport function assertIndexInRange(arr: any[], index: number) {\n  assertDefined(arr, 'Array must be defined.');\n  const maxLen = arr.length;\n  if (index < 0 || index >= maxLen) {\n    throwError(`Index expected to be less than ${maxLen} but got ${index}`);\n  }\n}\n\n\nexport function assertOneOf(value: any, ...validValues: any[]) {\n  if (validValues.indexOf(value) !== -1) return true;\n  throwError(`Expected value to be one of ${JSON.stringify(validValues)} but was ${\n      JSON.stringify(value)}.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\n\nimport {ClassProvider, ConstructorProvider, EnvironmentProviders, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider} from './provider';\n\n\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `Injector`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * @codeGenApi\n * @publicApi The ViewEngine compiler emits code with this type for injectables. This code is\n *   deployed to npm, and should be treated as public api.\n\n */\nexport interface ɵɵInjectableDeclaration<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|'environment'|null;\n\n  /**\n   * The token to which this definition belongs.\n   *\n   * Note that this may not be the same as the type that the `factory` will create.\n   */\n  token: unknown;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: (t?: Type<any>) => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T|undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n *\n * @codeGenApi\n */\nexport interface ɵɵInjectorDef<T> {\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ɵprov property for example).\n  providers: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n              StaticClassProvider|ClassProvider|EnvironmentProviders|any[])[];\n\n  imports: (InjectorType<any>|InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has a `ɵprov: ɵɵInjectableDeclaration` static field.\n *\n * `InjectableType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ɵprov: unknown;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorTypes` can be used to configure a `StaticInjector`.\n *\n * This is an opaque type whose structure is highly version dependent. Do not rely on any\n * properties.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  ɵfac?: unknown;\n  ɵinj: unknown;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n               StaticClassProvider|ClassProvider|EnvironmentProviders|any[])[];\n}\n\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ɵprov` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵdefineInjectable<T>(opts: {\n  token: unknown,\n  providedIn?: Type<any>|'root'|'platform'|'any'|'environment'|null, factory: () => T,\n}): unknown {\n  return {\n    token: opts.token,\n    providedIn: opts.providedIn as any || null,\n    factory: opts.factory,\n    value: undefined,\n  } as ɵɵInjectableDeclaration<T>;\n}\n\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nexport const defineInjectable = ɵɵdefineInjectable;\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a `ɵprov` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nexport function ɵɵdefineInjector(options: {providers?: any[], imports?: any[]}): unknown {\n  return {providers: options.providers || [], imports: options.imports || []};\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) `ɵprov`.\n */\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T>|null {\n  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);\n}\n\nexport function isInjectable(type: any): boolean {\n  return getInjectableDef(type) !== null;\n}\n\n/**\n * Return definition only if it is defined directly on `type` and is not inherited from a base\n * class of `type`.\n */\nfunction getOwnDefinition<T>(type: any, field: string): ɵɵInjectableDeclaration<T>|null {\n  return type.hasOwnProperty(field) ? type[field] : null;\n}\n\n/**\n * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.\n *\n * @param type A type which may have `ɵprov`, via inheritance.\n *\n * @deprecated Will be removed in a future version of Angular, where an error will occur in the\n *     scenario if we find the `ɵprov` on an ancestor only.\n */\nexport function getInheritedInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T>|null {\n  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);\n\n  if (def) {\n    ngDevMode &&\n        console.warn(\n            `DEPRECATED: DI is instantiating a token \"${\n                type.name}\" that inherits its @Injectable decorator but does not provide one itself.\\n` +\n            `This will become an error in a future version of Angular. Please add @Injectable() to the \"${\n                type.name}\" class.`);\n    return def;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Read the injector def type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have an injector def (`ɵinj`)\n */\nexport function getInjectorDef<T>(type: any): ɵɵInjectorDef<T>|null {\n  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?\n      (type as any)[NG_INJ_DEF] :\n      null;\n}\n\nexport const NG_PROV_DEF = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\nexport const NG_INJ_DEF = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\n\n// We need to keep these around so we can read off old defs if new defs are unavailable\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Special flag indicating that a decorator is of type `Inject`. It's used to make `Inject`\n * decorator tree-shakable (so we don't have to rely on the `instanceof` checks).\n * Note: this flag is not included into the `InjectFlags` since it's an internal-only API.\n */\nexport const enum DecoratorFlags {\n  Inject = -1\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for `inject` instead.\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' (and remove `InternalInjectFlags` enum) when ngc no longer\n  // writes exports of it into ngfactory files.\n\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n\n/**\n * This enum is an exact copy of the `InjectFlags` enum above, but the difference is that this is a\n * const enum, so actual enum values would be inlined in generated code. The `InjectFlags` enum can\n * be turned into a const enum when ViewEngine is removed (see TODO at the `InjectFlags` enum\n * above). The benefit of inlining is that we can use these flags at the top level without affecting\n * tree-shaking (see \"no-toplevel-property-access\" tslint rule for more info).\n * Keep this enum in sync with `InjectFlags` enum above.\n */\nexport const enum InternalInjectFlags {\n  /** Check self and check parent injector if needed */\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n\n  /**\n   * This token is being injected into a pipe.\n   *\n   * This flag is intentionally not in the public facing `InjectFlags` because it is only added by\n   * the compiler and is not a developer applicable flag.\n   */\n  ForPipe = 0b10000,\n}\n\n/**\n * Type of the options argument to `inject`.\n *\n * @publicApi\n */\nexport interface InjectOptions {\n  /**\n   * Use optional injection, and return `null` if the requested token is not found.\n   */\n  optional?: boolean;\n\n  /**\n   * Start injection at the parent of the current injector.\n   */\n  skipSelf?: boolean;\n\n  /**\n   * Only query the current injector for the token, and don't fall back to the parent injector if\n   * it's not found.\n   */\n  self?: boolean;\n\n  /**\n   * Stop injection at the host component's injector. Only relevant when injecting from an element\n   * injector, and a no-op for environment injectors.\n   */\n  host?: boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {throwProviderNotFoundError} from '../render3/errors_di';\nimport {assertNotEqual} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {getInjectableDef, ɵɵInjectableDeclaration} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ProviderToken} from './provider_token';\n\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|\n    undefined;\nexport function getInjectImplementation() {\n  return _injectImplementation;\n}\n\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n    impl: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|\n    undefined): (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)|undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * injectable definition.\n */\nexport function injectRootLimpMode<T>(\n    token: ProviderToken<T>, notFoundValue: T|undefined, flags: InjectFlags): T|null {\n  const injectableDef: ɵɵInjectableDeclaration<T>|null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                                               injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throwProviderNotFoundError(stringify(token), 'Injector');\n}\n\n\n/**\n * Assert that `_injectImplementation` is not `fn`.\n *\n * This is useful, to prevent infinite recursion.\n *\n * @param fn Function which it should not equal to\n */\nexport function assertInjectImplementationNotEqual(\n    fn: (<T>(token: ProviderToken<T>, flags?: InjectFlags) => T | null)) {\n  ngDevMode &&\n      assertNotEqual(_injectImplementation, fn, 'Calling ɵɵinject would cause infinite recursion');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any;\n\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\nconst _global: any = (/* @__PURE__ */ (\n    () => (typeof globalThis !== 'undefined' && globalThis) ||\n        (typeof global !== 'undefined' && global) || (typeof window !== 'undefined' && window) ||\n        (typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n         self instanceof WorkerGlobalScope && self))());\n\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from './global';\n\ndeclare global {\n  /**\n   * Values of ngDevMode\n   * Depending on the current state of the application, ngDevMode may have one of several values.\n   *\n   * For convenience, the “truthy” value which enables dev mode is also an object which contains\n   * Angular’s performance counters. This is not necessary, but cuts down on boilerplate for the\n   * perf counters.\n   *\n   * ngDevMode may also be set to false. This can happen in one of a few ways:\n   * - The user explicitly sets `window.ngDevMode = false` somewhere in their app.\n   * - The user calls `enableProdMode()`.\n   * - The URL contains a `ngDevMode=false` text.\n   * Finally, ngDevMode may not have been defined at all.\n   */\n  const ngDevMode: null|NgDevModePerfCounters;\n  interface NgDevModePerfCounters {\n    namedConstructors: boolean;\n    firstCreatePass: number;\n    tNode: number;\n    tView: number;\n    rendererCreateTextNode: number;\n    rendererSetText: number;\n    rendererCreateElement: number;\n    rendererAddEventListener: number;\n    rendererSetAttribute: number;\n    rendererRemoveAttribute: number;\n    rendererSetProperty: number;\n    rendererSetClassName: number;\n    rendererAddClass: number;\n    rendererRemoveClass: number;\n    rendererSetStyle: number;\n    rendererRemoveStyle: number;\n    rendererDestroy: number;\n    rendererDestroyNode: number;\n    rendererMoveNode: number;\n    rendererRemoveNode: number;\n    rendererAppendChild: number;\n    rendererInsertBefore: number;\n    rendererCreateComment: number;\n  }\n}\n\nexport function ngDevModeResetPerfCounters(): NgDevModePerfCounters {\n  const locationString = typeof location !== 'undefined' ? location.toString() : '';\n  const newCounters: NgDevModePerfCounters = {\n    namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,\n    firstCreatePass: 0,\n    tNode: 0,\n    tView: 0,\n    rendererCreateTextNode: 0,\n    rendererSetText: 0,\n    rendererCreateElement: 0,\n    rendererAddEventListener: 0,\n    rendererSetAttribute: 0,\n    rendererRemoveAttribute: 0,\n    rendererSetProperty: 0,\n    rendererSetClassName: 0,\n    rendererAddClass: 0,\n    rendererRemoveClass: 0,\n    rendererSetStyle: 0,\n    rendererRemoveStyle: 0,\n    rendererDestroy: 0,\n    rendererDestroyNode: 0,\n    rendererMoveNode: 0,\n    rendererRemoveNode: 0,\n    rendererAppendChild: 0,\n    rendererInsertBefore: 0,\n    rendererCreateComment: 0,\n  };\n\n  // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n  const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;\n  global['ngDevMode'] = allowNgDevModeTrue && newCounters;\n  return newCounters;\n}\n\n/**\n * This function checks to see if the `ngDevMode` has been set. If yes,\n * then we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n *\n * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions\n * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode\n * is defined for the entire instruction set.\n *\n * When checking `ngDevMode` on toplevel, always init it before referencing it\n * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can\n *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.\n *\n * Details on possible values for `ngDevMode` can be found on its docstring.\n *\n * NOTE:\n * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nexport function initNgDevMode(): boolean {\n  // The below checks are to ensure that calling `initNgDevMode` multiple times does not\n  // reset the counters.\n  // If the `ngDevMode` is not an object, then it means we have not created the perf counters\n  // yet.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    if (typeof ngDevMode !== 'object') {\n      ngDevModeResetPerfCounters();\n    }\n    return typeof ngDevMode !== 'undefined' && !!ngDevMode;\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {getInjectImplementation, injectRootLimpMode} from './inject_switch';\nimport {Injector} from './injector';\nimport {DecoratorFlags, InjectFlags, InjectOptions, InternalInjectFlags} from './interface/injector';\nimport {ProviderToken} from './provider_token';\n\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n/*\n * Name of a property (that we patch onto DI decorator), which is used as an annotation of which\n * InjectFlag this decorator represents. This allows to avoid direct references to the DI decorators\n * in the code, thus making them tree-shakable.\n */\nconst DI_DECORATOR_FLAG = '__NG_DI_FLAG__';\n\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'ɵ';\nexport const SOURCE = '__source';\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\nexport function injectInjectorOnly<T>(token: ProviderToken<T>): T;\nexport function injectInjectorOnly<T>(token: ProviderToken<T>, flags?: InjectFlags): T|null;\nexport function injectInjectorOnly<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|\n    null {\n  if (_currentInjector === undefined) {\n    throw new RuntimeError(\n        RuntimeErrorCode.MISSING_INJECTION_CONTEXT,\n        ngDevMode &&\n            `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \\`EnvironmentInjector#runInContext\\`.`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\n/**\n * Generated instruction: injects a token from the currently active injector.\n *\n * (Additional documentation moved to `inject`, as it is the public API, and an alias for this\n * instruction)\n *\n * @see inject\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport function ɵɵinject<T>(token: ProviderToken<T>): T;\nexport function ɵɵinject<T>(token: ProviderToken<T>, flags?: InjectFlags): T|null;\nexport function ɵɵinject<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|null {\n  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactoryDep(index: number): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.INVALID_FACTORY_DEPENDENCY,\n      ngDevMode &&\n          `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${\n              index} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${\n              index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);\n}\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>): T;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param flags Control how injection is executed. The flags correspond to injection strategies that\n *     can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n * @deprecated prefer an options object instead of `InjectFlags`\n */\nexport function inject<T>(token: ProviderToken<T>, flags?: InjectFlags): T|null;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and\n *     `@Optional`.\n * @returns the injected value if operation is successful.\n * @throws if called outside of a supported context, or if the token is not found.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>, options: InjectOptions&{optional?: false}): T;\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators `@Host`, `@Self`, `@SkipSelf`, and\n *     `@Optional`.\n * @returns the injected value if operation is successful,  `null` if the token is not\n *     found and optional injection has been requested.\n * @throws if called outside of a supported context, or if the token is not found and optional\n *     injection was not requested.\n *\n * @publicApi\n */\nexport function inject<T>(token: ProviderToken<T>, options: InjectOptions): T|null;\n/**\n * Injects a token from the currently active injector.\n * `inject` is only supported during instantiation of a dependency by the DI system. It can be used\n * during:\n * - Construction (via the `constructor`) of a class being instantiated by the DI system, such\n * as an `@Injectable` or `@Component`.\n * - In the initializer for fields of such classes.\n * - In the factory function specified for `useFactory` of a `Provider` or an `@Injectable`.\n * - In the `factory` function specified for an `InjectionToken`.\n *\n * @param token A token that represents a dependency that should be injected.\n * @param flags Optional flags that control how injection is executed.\n * The flags correspond to injection strategies that can be specified with\n * parameter decorators `@Host`, `@Self`, `@SkipSelf`, and `@Optional`.\n * @returns the injected value if operation is successful, `null` otherwise.\n * @throws if called outside of a supported context.\n *\n * @usageNotes\n * In practice the `inject()` calls are allowed in a constructor, a constructor parameter and a\n * field initializer:\n *\n * ```typescript\n * @Injectable({providedIn: 'root'})\n * export class Car {\n *   radio: Radio|undefined;\n *   // OK: field initializer\n *   spareTyre = inject(Tyre);\n *\n *   constructor() {\n *     // OK: constructor body\n *     this.radio = inject(Radio);\n *   }\n * }\n * ```\n *\n * It is also legal to call `inject` from a provider's factory:\n *\n * ```typescript\n * providers: [\n *   {provide: Car, useFactory: () => {\n *     // OK: a class factory\n *     const engine = inject(Engine);\n *     return new Car(engine);\n *   }}\n * ]\n * ```\n *\n * Calls to the `inject()` function outside of the class creation context will result in error. Most\n * notably, calls to `inject()` are disallowed after a class instance was created, in methods\n * (including lifecycle hooks):\n *\n * ```typescript\n * @Component({ ... })\n * export class CarComponent {\n *   ngOnInit() {\n *     // ERROR: too late, the component instance was already created\n *     const engine = inject(Engine);\n *     engine.start();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport function inject<T>(\n    token: ProviderToken<T>, flags: InjectFlags|InjectOptions = InjectFlags.Default): T|null {\n  return ɵɵinject(token, convertToBitFlags(flags));\n}\n\n// Converts object-based DI flags (`InjectOptions`) to bit flags (`InjectFlags`).\nexport function convertToBitFlags(flags: InjectOptions|InjectFlags|undefined): InjectFlags|\n    undefined {\n  if (typeof flags === 'undefined' || typeof flags === 'number') {\n    return flags;\n  }\n\n  // While TypeScript doesn't accept it without a cast, bitwise OR with false-y values in\n  // JavaScript is a no-op. We can use that for a very codesize-efficient conversion from\n  // `InjectOptions` to `InjectFlags`.\n  return (InternalInjectFlags.Default |  // comment to force a line break in the formatter\n          ((flags.optional && InternalInjectFlags.Optional) as number) |\n          ((flags.host && InternalInjectFlags.Host) as number) |\n          ((flags.self && InternalInjectFlags.Self) as number) |\n          ((flags.skipSelf && InternalInjectFlags.SkipSelf) as number)) as InjectFlags;\n}\n\nexport function injectArgs(types: (ProviderToken<any>|any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = resolveForwardRef(types[i]);\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new RuntimeError(\n            RuntimeErrorCode.INVALID_DIFFER_INPUT,\n            ngDevMode && 'Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        const flag = getInjectFlag(meta);\n        if (typeof flag === 'number') {\n          // Special case when we handle @Inject decorator.\n          if (flag === DecoratorFlags.Inject) {\n            type = meta.token;\n          } else {\n            flags |= flag;\n          }\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(ɵɵinject(type!, flags));\n    } else {\n      args.push(ɵɵinject(arg));\n    }\n  }\n  return args;\n}\n\n/**\n * Attaches a given InjectFlag to a given decorator using monkey-patching.\n * Since DI decorators can be used in providers `deps` array (when provider is configured using\n * `useFactory`) without initialization (e.g. `Host`) and as an instance (e.g. `new Host()`), we\n * attach the flag to make it available both as a static property and as a field on decorator\n * instance.\n *\n * @param decorator Provided DI decorator.\n * @param flag InjectFlag that should be applied.\n */\nexport function attachInjectFlag(decorator: any, flag: InternalInjectFlags|DecoratorFlags): any {\n  decorator[DI_DECORATOR_FLAG] = flag;\n  decorator.prototype[DI_DECORATOR_FLAG] = flag;\n  return decorator;\n}\n\n/**\n * Reads monkey-patched property that contains InjectFlag attached to a decorator.\n *\n * @param token Token that may contain monkey-patched DI flags property.\n */\nexport function getInjectFlag(token: any): number|undefined {\n  return token[DI_DECORATOR_FLAG];\n}\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string|null): never {\n  const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n  if (token[SOURCE]) {\n    tokenPath.unshift(token[SOURCE]);\n  }\n  e.message = formatError('\\n' + e.message, tokenPath, injectorErrorName, source);\n  e[NG_TOKEN_PATH] = tokenPath;\n  e[NG_TEMP_TOKEN_PATH] = null;\n  throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string|null = null): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\n      text.replace(NEW_LINE, '\\n  ')}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects<T>(fn: () => T): T {\n  return {toString: fn}.toString() as unknown as T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   * This strategy applies to all child directives and cannot be overridden.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * `encapsulation` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport enum ViewEncapsulation {\n  // TODO: consider making `ViewEncapsulation` a `const enum` instead. See\n  // https://github.com/angular/angular/issues/44119 for additional information.\n\n  /**\n   * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n   * component's host element and applying the same attribute to all the CSS selectors provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n\n  /**\n   * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n   * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n   * to any HTML element of the application regardless of their host Component.\n   */\n  None = 2,\n\n  /**\n   * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n   * a ShadowRoot for the component's host element which is then used to encapsulate\n   * all the Component's styling.\n   */\n  ShadowDom = 3\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {initNgDevMode} from './ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: {} = {};\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {\n  // These property accesses can be ignored because ngDevMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_OBJ);\n  // tslint:disable-next-line:no-toplevel-property-access\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMP_DEF = getClosureSafeProperty({ɵcmp: getClosureSafeProperty});\nexport const NG_DIR_DEF = getClosureSafeProperty({ɵdir: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ɵpipe: getClosureSafeProperty});\nexport const NG_MOD_DEF = getClosureSafeProperty({ɵmod: getClosureSafeProperty});\nexport const NG_FACTORY_DEF = getClosureSafeProperty({ɵfac: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Mutable, Type} from '../interface/type';\nimport {NgModuleDef} from '../metadata/ng_module_def';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {noSideEffects} from '../util/closure';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../util/empty';\nimport {initNgDevMode} from '../util/ng_dev_mode';\nimport {stringify} from '../util/stringify';\n\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_MOD_DEF, NG_PIPE_DEF} from './fields';\nimport {ComponentDef, ComponentDefFeature, ComponentTemplate, ComponentType, ContentQueriesFunction, DependencyTypeList, DirectiveDef, DirectiveDefFeature, DirectiveDefListOrFactory, HostBindingsFunction, PipeDef, PipeDefListOrFactory, TypeOrFactory, ViewQueriesFunction} from './interfaces/definition';\nimport {TAttributes, TConstantsOrFactory} from './interfaces/node';\nimport {CssSelectorList} from './interfaces/projection';\n\ninterface DirectiveDefinition<T> {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors?: CssSelectorList;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['declared', 'public']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string|[string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * The number of bindings in this directive `hostBindings` (including pure fn bindings).\n   *\n   * Used to calculate the length of the component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  hostVars?: number;\n\n  /**\n   * Assign static attribute values to a host element.\n   *\n   * This property will assign static attribute values as well as class and style\n   * values to a host element. Since attribute values can consist of different types of values,\n   * the `hostAttrs` array must include the values in the following format:\n   *\n   * attrs = [\n   *   // static attributes (like `title`, `name`, `id`...)\n   *   attr1, value1, attr2, value,\n   *\n   *   // a single namespace value (like `x:id`)\n   *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n   *\n   *   // another single namespace value (like `x:name`)\n   *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n   *\n   *   // a series of CSS classes that will be applied to the element (no spaces)\n   *   CLASSES_MARKER, class1, class2, class3,\n   *\n   *   // a series of CSS styles (property + value) that will be applied to the element\n   *   STYLES_MARKER, prop1, value1, prop2, value2\n   * ]\n   *\n   * All non-class and non-style attributes must be defined at the start of the list\n   * first before all class and style values are set. When there is a change in value\n   * type (like when classes and styles are introduced) a marker must be used to separate\n   * the entries. The marker values themselves are set via entries found in the\n   * [AttributeMarker] enum.\n   */\n  hostAttrs?: TAttributes;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ContentQueriesFunction<T>;\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instructions to be inserted into the template function.\n   */\n  viewQuery?: ViewQueriesFunction<T>|null;\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Whether this directive/component is standalone.\n   */\n  standalone?: boolean;\n}\n\ninterface ComponentDefinition<T> extends Omit<DirectiveDefinition<T>, 'features'> {\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  decls: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * Constants for the nodes in the component's view.\n   * Includes attribute arrays, local definition arrays etc.\n   */\n  consts?: TConstantsOrFactory;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives, components, and pipes that may be found in this component's view.\n   *\n   * This property is either an array of types or a function that returns the array of types. This\n   * function may be necessary to support forward declarations.\n   */\n  dependencies?: TypeOrFactory<DependencyTypeList>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the component's template.\n   */\n  schemas?: SchemaMetadata[]|null;\n}\n\n/** Counter used to generate unique IDs for component definitions. */\nlet componentDefCount = 0;\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyComponent {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @codeGenApi\n */\nexport function ɵɵdefineComponent<T>(componentDefinition: ComponentDefinition<T>):\n    Mutable<ComponentDef<any>, keyof ComponentDef<any>> {\n  return noSideEffects(() => {\n    // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.\n    // See the `initNgDevMode` docstring for more information.\n    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n    const baseDef = getNgDirectiveDef(componentDefinition as DirectiveDefinition<T>);\n    const def: Mutable<ComponentDef<unknown>, keyof ComponentDef<unknown>> = {\n      ...baseDef,\n      decls: componentDefinition.decls,\n      vars: componentDefinition.vars,\n      template: componentDefinition.template,\n      consts: componentDefinition.consts || null,\n      ngContentSelectors: componentDefinition.ngContentSelectors,\n      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n      directiveDefs: null!,  // assigned in noSideEffects\n      pipeDefs: null!,       // assigned in noSideEffects\n      dependencies: baseDef.standalone && componentDefinition.dependencies || null,\n      getStandaloneInjector: null,\n      data: componentDefinition.data || {},\n      encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n      id: `c${componentDefCount++}`,\n      styles: componentDefinition.styles || EMPTY_ARRAY,\n      _: null,\n      schemas: componentDefinition.schemas || null,\n      tView: null,\n    };\n\n    initFeatures(def);\n    const dependencies = componentDefinition.dependencies;\n    def.directiveDefs = extractDefListOrFactory(dependencies, /* pipeDef */ false);\n    def.pipeDefs = extractDefListOrFactory(dependencies, /* pipeDef */ true);\n    return def;\n  });\n}\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nexport function ɵɵsetComponentScope(\n    type: ComponentType<any>, directives: Type<any>[]|(() => Type<any>[]),\n    pipes: Type<any>[]|(() => Type<any>[])): void {\n  const def = type.ɵcmp as ComponentDef<any>;\n  def.directiveDefs = extractDefListOrFactory(directives, /* pipeDef */ false);\n  def.pipeDefs = extractDefListOrFactory(pipes, /* pipeDef */ true);\n}\n\nexport function extractDirectiveDef(type: Type<any>): DirectiveDef<any>|ComponentDef<any>|null {\n  return getComponentDef(type) || getDirectiveDef(type);\n}\n\nfunction nonNull<T>(value: T|null): value is T {\n  return value !== null;\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵdefineNgModule<T>(def: {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[] | (() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n\n  /** The set of schemas that declare elements to be allowed in the NgModule. */\n  schemas?: SchemaMetadata[] | null;\n\n  /** Unique ID for the module that is used with `getModuleFactory`. */\n  id?: string | null;\n}): unknown {\n  return noSideEffects(() => {\n    const res: NgModuleDef<T> = {\n      type: def.type,\n      bootstrap: def.bootstrap || EMPTY_ARRAY,\n      declarations: def.declarations || EMPTY_ARRAY,\n      imports: def.imports || EMPTY_ARRAY,\n      exports: def.exports || EMPTY_ARRAY,\n      transitiveCompileScopes: null,\n      schemas: def.schemas || null,\n      id: def.id || null,\n    };\n    return res;\n  });\n}\n\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nexport function ɵɵsetNgModuleScope(type: any, scope: {\n  /** List of components, directives, and pipes declared by this module. */\n  declarations?: Type<any>[]|(() => Type<any>[]);\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports?: Type<any>[] | (() => Type<any>[]);\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports?: Type<any>[] | (() => Type<any>[]);\n}): unknown {\n  return noSideEffects(() => {\n    const ngModuleDef = getNgModuleDef(type, true);\n    ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;\n    ngModuleDef.imports = scope.imports || EMPTY_ARRAY;\n    ngModuleDef.exports = scope.exports || EMPTY_ARRAY;\n  });\n}\n\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject<T>(\n    obj?: {[P in keyof T]?: string|[string, string]},\n    secondary?: {[key: string]: string}): {[P in keyof T]: string} {\n  if (obj == null) return EMPTY_OBJ as any;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName: string|[string, string] = obj[minifiedKey]!;\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        (secondary[publicName] = declaredName as string);\n      }\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdefineDirective<T>(directiveDefinition: DirectiveDefinition<T>):\n    Mutable<DirectiveDef<any>, keyof DirectiveDef<any>> {\n  return noSideEffects(() => {\n    const def = getNgDirectiveDef(directiveDefinition);\n    initFeatures(def);\n\n    return def;\n  });\n}\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport function ɵɵdefinePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string;\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>;\n\n  /** Whether the pipe is pure. */\n  pure?: boolean;\n\n  /**\n   * Whether the pipe is standalone.\n   */\n  standalone?: boolean;\n}): unknown {\n  return (<PipeDef<T>>{\n    type: pipeDef.type,\n    name: pipeDef.name,\n    factory: null,\n    pure: pipeDef.pure !== false,\n    standalone: pipeDef.standalone === true,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  });\n}\n\n/**\n * The following getter methods retrieve the definition from the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\nexport function getComponentDef<T>(type: any): ComponentDef<T>|null {\n  return type[NG_COMP_DEF] || null;\n}\n\nexport function getDirectiveDef<T>(type: any): DirectiveDef<T>|null {\n  return type[NG_DIR_DEF] || null;\n}\n\nexport function getPipeDef<T>(type: any): PipeDef<T>|null {\n  return type[NG_PIPE_DEF] || null;\n}\n\n/**\n * Checks whether a given Component, Directive or Pipe is marked as standalone.\n * This will return false if passed anything other than a Component, Directive, or Pipe class\n * See this guide for additional information: https://angular.io/guide/standalone-components\n *\n * @param type A reference to a Component, Directive or Pipe.\n * @publicApi\n */\nexport function isStandalone(type: Type<unknown>): boolean {\n  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n  return def !== null ? def.standalone : false;\n}\n\nexport function getNgModuleDef<T>(type: any, throwNotFound: true): NgModuleDef<T>;\nexport function getNgModuleDef<T>(type: any): NgModuleDef<T>|null;\nexport function getNgModuleDef<T>(type: any, throwNotFound?: boolean): NgModuleDef<T>|null {\n  const ngModuleDef = type[NG_MOD_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);\n  }\n  return ngModuleDef;\n}\n\nfunction getNgDirectiveDef<T>(directiveDefinition: DirectiveDefinition<T>):\n    Mutable<DirectiveDef<unknown>, keyof DirectiveDef<unknown>> {\n  const declaredInputs: Record<string, string> = {};\n\n  return {\n    type: directiveDefinition.type,\n    providersResolver: null,\n    factory: null,\n    hostBindings: directiveDefinition.hostBindings || null,\n    hostVars: directiveDefinition.hostVars || 0,\n    hostAttrs: directiveDefinition.hostAttrs || null,\n    contentQueries: directiveDefinition.contentQueries || null,\n    declaredInputs,\n    exportAs: directiveDefinition.exportAs || null,\n    standalone: directiveDefinition.standalone === true,\n    selectors: directiveDefinition.selectors || EMPTY_ARRAY,\n    viewQuery: directiveDefinition.viewQuery || null,\n    features: directiveDefinition.features || null,\n    setInput: null,\n    findHostDirectiveDefs: null,\n    hostDirectives: null,\n    inputs: invertObject(directiveDefinition.inputs, declaredInputs),\n    outputs: invertObject(directiveDefinition.outputs),\n  };\n}\n\nfunction initFeatures(definition:|Mutable<DirectiveDef<unknown>, keyof DirectiveDef<unknown>>|\n                      Mutable<ComponentDef<unknown>, keyof ComponentDef<unknown>>): void {\n  definition.features?.forEach((fn) => fn(definition));\n}\n\nfunction extractDefListOrFactory(\n    dependencies: TypeOrFactory<DependencyTypeList>|undefined,\n    pipeDef: false): DirectiveDefListOrFactory|null;\nfunction extractDefListOrFactory(\n    dependencies: TypeOrFactory<DependencyTypeList>|undefined, pipeDef: true): PipeDefListOrFactory|\n    null;\nfunction extractDefListOrFactory(\n    dependencies: TypeOrFactory<DependencyTypeList>|undefined, pipeDef: boolean): unknown {\n  if (!dependencies) {\n    return null;\n  }\n\n  const defExtractor = pipeDef ? getPipeDef : extractDirectiveDef;\n\n  return () => (typeof dependencies === 'function' ? dependencies() : dependencies)\n                   .map(dep => defExtractor(dep))\n                   .filter(nonNull);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../../di/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {Sanitizer} from '../../sanitization/sanitizer';\n\nimport {LContainer} from './container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList, ViewQueriesFunction} from './definition';\nimport {I18nUpdateOpCodes, TI18n, TIcu} from './i18n';\nimport {TConstants, TNode} from './node';\nimport {LQueries, TQueries} from './query';\nimport {Renderer, RendererFactory} from './renderer';\nimport {RElement} from './renderer_dom';\nimport {TStylingKey, TStylingRange} from './styling';\n\n\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport const HOST = 0;\nexport const TVIEW = 1;\nexport const FLAGS = 2;\nexport const PARENT = 3;\nexport const NEXT = 4;\nexport const TRANSPLANTED_VIEWS_TO_REFRESH = 5;\nexport const T_HOST = 6;\nexport const CLEANUP = 7;\nexport const CONTEXT = 8;\nexport const INJECTOR = 9;\nexport const RENDERER_FACTORY = 10;\nexport const RENDERER = 11;\nexport const SANITIZER = 12;\nexport const CHILD_HEAD = 13;\nexport const CHILD_TAIL = 14;\n// FIXME(misko): Investigate if the three declarations aren't all same thing.\nexport const DECLARATION_VIEW = 15;\nexport const DECLARATION_COMPONENT_VIEW = 16;\nexport const DECLARATION_LCONTAINER = 17;\nexport const PREORDER_HOOK_FLAGS = 18;\nexport const QUERIES = 19;\nexport const ID = 20;\nexport const EMBEDDED_VIEW_INJECTOR = 21;\n/**\n * Size of LView's header. Necessary to adjust for it when setting slots.\n *\n * IMPORTANT: `HEADER_OFFSET` should only be referred to the in the `ɵɵ*` instructions to translate\n * instruction index into `LView` index. All other indexes should be in the `LView` index space and\n * there should be no need to refer to `HEADER_OFFSET` anywhere else.\n */\nexport const HEADER_OFFSET = 22;\n\n\n// This interface replaces the real LView interface if it is an arg or a\n// return value of a public instruction. This ensures we don't need to expose\n// the actual interface, which should be kept private.\nexport interface OpaqueViewState {\n  '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LView<T = unknown> extends Array<any> {\n  /**\n   * The node into which this `LView` is inserted.\n   */\n  [HOST]: RElement|null;\n\n  /**\n   * The static data for this view. We need a reference to this so we can easily walk up the\n   * node tree in DI and get the TView.data array associated with a node (where the\n   * directive defs are stored).\n   */\n  readonly[TVIEW]: TView;\n\n  /** Flags for this view. See LViewFlags for more info. */\n  [FLAGS]: LViewFlags;\n\n  /**\n   * This may store an {@link LView} or {@link LContainer}.\n   *\n   * `LView` - The parent view. This is needed when we exit the view and must restore the previous\n   * LView. Without this, the render method would have to keep a stack of\n   * views as it is recursively rendering templates.\n   *\n   * `LContainer` - The current view is part of a container, and is an embedded view.\n   */\n  [PARENT]: LView|LContainer|null;\n\n  /**\n   *\n   * The next sibling LView or LContainer.\n   *\n   * Allows us to propagate between sibling view states that aren't in the same\n   * container. Embedded views already have a node.next, but it is only set for\n   * views in the same container. We need a way to link component views and views\n   * across containers as well.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /** Queries active for this view - nodes from a view are reported to those queries. */\n  [QUERIES]: LQueries|null;\n\n  /**\n   * Store the `TNode` of the location where the current `LView` is inserted into.\n   *\n   * Given:\n   * ```\n   * <div>\n   *   <ng-template><span></span></ng-template>\n   * </div>\n   * ```\n   *\n   * We end up with two `TView`s.\n   * - `parent` `TView` which contains `<div><!-- anchor --></div>`\n   * - `child` `TView` which contains `<span></span>`\n   *\n   * Typically the `child` is inserted into the declaration location of the `parent`, but it can be\n   * inserted anywhere. Because it can be inserted anywhere it is not possible to store the\n   * insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.\n   *\n   * So to determine where is our insertion parent we would execute:\n   * ```\n   * const parentLView = lView[PARENT];\n   * const parentTNode = lView[T_HOST];\n   * const insertionParent = parentLView[parentTNode.index];\n   * ```\n   *\n   *\n   * If `null`, this is the root view of an application (root component is in this view) and it has\n   * no parents.\n   */\n  [T_HOST]: TNode|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This context array stores both listener functions wrapped with\n   * their context and output subscription instances for a particular view.\n   *\n   * These change per LView instance, so they cannot be stored on TView. Instead,\n   * TView.cleanup saves an index to the necessary context in this array.\n   *\n   * After `LView` is created it is possible to attach additional instance specific functions at the\n   * end of the `lView[CLEANUP]` because we know that no more `T` level cleanup functions will be\n   * added here.\n   */\n  [CLEANUP]: any[]|null;\n\n  /**\n   * - For dynamic views, this is the context with which to render the template (e.g.\n   *   `NgForContext`), or `{}` if not defined explicitly.\n   * - For root view of the root component it's a reference to the component instance itself.\n   * - For components, the context is a reference to the component instance itself.\n   * - For inline views, the context is null.\n   */\n  [CONTEXT]: T;\n\n  /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n  readonly[INJECTOR]: Injector|null;\n\n  /** Factory to be used for creating Renderer. */\n  [RENDERER_FACTORY]: RendererFactory;\n\n  /** Renderer to be used for this view. */\n  [RENDERER]: Renderer;\n\n  /** An optional custom sanitizer. */\n  [SANITIZER]: Sanitizer|null;\n\n  /**\n   * Reference to the first LView or LContainer beneath this LView in\n   * the hierarchy.\n   *\n   * Necessary to store this so views can traverse through their nested views\n   * to remove listeners and call onDestroy callbacks.\n   */\n  [CHILD_HEAD]: LView|LContainer|null;\n\n  /**\n   * The last LView or LContainer beneath this LView in the hierarchy.\n   *\n   * The tail allows us to quickly add a new state to the end of the view list\n   * without having to propagate starting from the first child.\n   */\n  [CHILD_TAIL]: LView|LContainer|null;\n\n  /**\n   * View where this view's template was declared.\n   *\n   * The template for a dynamically created view may be declared in a different view than\n   * it is inserted. We already track the \"insertion view\" (view where the template was\n   * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n   * (view where the template was declared). Otherwise, we wouldn't be able to call the\n   * view's template function with the proper contexts. Context should be inherited from\n   * the declaration view tree, not the insertion view tree.\n   *\n   * Example (AppComponent template):\n   *\n   * <ng-template #foo></ng-template>       <-- declared here -->\n   * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n   *\n   * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n   * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n   * but the insertion view would be SomeComp. When we are removing views, we would want to\n   * traverse through the insertion view to clean up listeners. When we are calling the\n   * template function during change detection, we need the declaration view to get inherited\n   * context.\n   */\n  [DECLARATION_VIEW]: LView|null;\n\n\n  /**\n   * Points to the declaration component view, used to track transplanted `LView`s.\n   *\n   * See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas\n   * `DECLARATION_COMPONENT_VIEW` points to the component which may not be same as\n   * `DECLARATION_VIEW`.\n   *\n   * Example:\n   * ```\n   * <#VIEW #myComp>\n   *  <div *ngIf=\"true\">\n   *   <ng-template #myTmpl>...</ng-template>\n   *  </div>\n   * </#VIEW>\n   * ```\n   * In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas\n   * `DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.\n   *\n   * The reason for this is that all embedded views are always check-always whereas the component\n   * view can be check-always or on-push. When we have a transplanted view it is important to\n   * determine if we have transplanted a view from check-always declaration to on-push insertion\n   * point. In such a case the transplanted view needs to be added to the `LContainer` in the\n   * declared `LView` and CD during the declared view CD (in addition to the CD at the insertion\n   * point.) (Any transplanted views which are intra Component are of no interest because the CD\n   * strategy of declaration and insertion will always be the same, because it is the same\n   * component.)\n   *\n   * Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and\n   * `LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same\n   * component `LView`. Transplanted views are a subset of moved views, and we use\n   * `DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.\n   *\n   * Example showing intra component `LView` movement.\n   * ```\n   * <#VIEW #myComp>\n   *   <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n   *   <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n   *   <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n   * </#VIEW>\n   * ```\n   * The `thenBlock` and `elseBlock` is moved but not transplanted.\n   *\n   * Example showing inter component `LView` movement (transplanted view).\n   * ```\n   * <#VIEW #myComp>\n   *   <ng-template #myTmpl>...</ng-template>\n   *   <insertion-component [template]=\"myTmpl\"></insertion-component>\n   * </#VIEW>\n   * ```\n   * In the above example `myTmpl` is passed into a different component. If `insertion-component`\n   * instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be\n   * marked as containing transplanted views and those views need to be CD as part of the\n   * declaration CD.\n   *\n   *\n   * When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where\n   * the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match\n   * (it has been transplanted across components.)\n   *\n   * Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the\n   *       simplest / most common case).\n   *\n   * see also:\n   *   - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem\n   *   - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.\n   *   - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted\n   *   - `LView[DECLARATION_LCONTAINER]` similar problem for queries\n   *   - `LContainer[MOVED_VIEWS]` similar problem for queries\n   */\n  [DECLARATION_COMPONENT_VIEW]: LView;\n\n  /**\n   * A declaration point of embedded views (ones instantiated based on the content of a\n   * <ng-template>), null for other types of views.\n   *\n   * We need to track all embedded views created from a given declaration point so we can prepare\n   * query matches in a proper order (query matches are ordered based on their declaration point and\n   * _not_ the insertion point).\n   */\n  [DECLARATION_LCONTAINER]: LContainer|null;\n\n  /**\n   * More flags for this view. See PreOrderHookFlags for more info.\n   */\n  [PREORDER_HOOK_FLAGS]: PreOrderHookFlags;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\n  /** Unique ID of the view. Used for `__ngContext__` lookups in the `LView` registry. */\n  [ID]: number;\n\n  /**\n   * Optional injector assigned to embedded views that takes\n   * precedence over the element and module injectors.\n   */\n  readonly[EMBEDDED_VIEW_INJECTOR]: Injector|null;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\nexport const enum LViewFlags {\n  /** The state of the init phase on the first 2 bits */\n  InitPhaseStateIncrementer = 0b00000000001,\n  InitPhaseStateMask = 0b00000000011,\n\n  /**\n   * Whether or not the view is in creationMode.\n   *\n   * This must be stored in the view rather than using `data` as a marker so that\n   * we can properly support embedded views. Otherwise, when exiting a child view\n   * back into the parent view, `data` will be defined and `creationMode` will be\n   * improperly reported as false.\n   */\n  CreationMode = 0b00000000100,\n\n  /**\n   * Whether or not this LView instance is on its first processing pass.\n   *\n   * An LView instance is considered to be on its \"first pass\" until it\n   * has completed one creation mode run and one update mode run. At this\n   * time, the flag is turned off.\n   */\n  FirstLViewPass = 0b00000001000,\n\n  /** Whether this view has default change detection strategy (checks always) or onPush */\n  CheckAlways = 0b00000010000,\n\n  /** Whether or not this view is currently dirty (needing check) */\n  Dirty = 0b00000100000,\n\n  /** Whether or not this view is currently attached to change detection tree. */\n  Attached = 0b000001000000,\n\n  /** Whether or not this view is destroyed. */\n  Destroyed = 0b000010000000,\n\n  /** Whether or not this view is the root view */\n  IsRoot = 0b000100000000,\n\n  /**\n   * Whether this moved LView was needs to be refreshed at the insertion location because the\n   * declaration was dirty.\n   */\n  RefreshTransplantedView = 0b001000000000,\n\n  /** Indicates that the view **or any of its ancestors** have an embedded view injector. */\n  HasEmbeddedViewInjector = 0b0010000000000,\n\n  /**\n   * Index of the current init phase on last 21 bits\n   */\n  IndexWithinInitPhaseIncrementer = 0b0100000000000,\n  IndexWithinInitPhaseShift = 11,\n  IndexWithinInitPhaseReset = 0b0011111111111,\n}\n\n/**\n * Possible states of the init phase:\n * - 00: OnInit hooks to be run.\n * - 01: AfterContentInit hooks to be run\n * - 10: AfterViewInit hooks to be run\n * - 11: All init hooks have been run\n */\nexport const enum InitPhaseState {\n  OnInitHooksToBeRun = 0b00,\n  AfterContentInitHooksToBeRun = 0b01,\n  AfterViewInitHooksToBeRun = 0b10,\n  InitPhaseCompleted = 0b11,\n}\n\n/** More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS]) */\nexport const enum PreOrderHookFlags {\n  /**\n     The index of the next pre-order hook to be called in the hooks array, on the first 16\n     bits\n   */\n  IndexOfTheNextPreOrderHookMaskMask = 0b01111111111111111,\n\n  /**\n   * The number of init hooks that have already been called, on the last 16 bits\n   */\n  NumberOfInitHooksCalledIncrementer = 0b010000000000000000,\n  NumberOfInitHooksCalledShift = 16,\n  NumberOfInitHooksCalledMask = 0b11111111111111110000000000000000,\n}\n\n/**\n * Stores a set of OpCodes to process `HostBindingsFunction` associated with a current view.\n *\n * In order to invoke `HostBindingsFunction` we need:\n * 1. 'elementIdx`: Index to the element associated with the `HostBindingsFunction`.\n * 2. 'directiveIdx`: Index to the directive associated with the `HostBindingsFunction`. (This will\n *    become the context for the `HostBindingsFunction` invocation.)\n * 3. `bindingRootIdx`: Location where the bindings for the `HostBindingsFunction` start. Internally\n *    `HostBindingsFunction` binding indexes start from `0` so we need to add `bindingRootIdx` to\n *    it.\n * 4. `HostBindingsFunction`: A host binding function to execute.\n *\n * The above information needs to be encoded into the `HostBindingOpCodes` in an efficient manner.\n *\n * 1. `elementIdx` is encoded into the `HostBindingOpCodes` as `~elementIdx` (so a negative number);\n * 2. `directiveIdx`\n * 3. `bindingRootIdx`\n * 4. `HostBindingsFunction` is passed in as is.\n *\n * The `HostBindingOpCodes` array contains:\n * - negative number to select the element index.\n * - followed by 1 or more of:\n *    - a number to select the directive index\n *    - a number to select the bindingRoot index\n *    - and a function to invoke.\n *\n * ## Example\n *\n * ```\n * const hostBindingOpCodes = [\n *   ~30,                               // Select element 30\n *   40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;\n *                                      // directiveIdx = 40; bindingRootIdx = 45;\n *   50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30\n *                                      // directiveIdx = 50; bindingRootIdx = 55;\n * ]\n * ```\n *\n * ## Pseudocode\n * ```\n * const hostBindingOpCodes = tView.hostBindingOpCodes;\n * if (hostBindingOpCodes === null) return;\n * for (let i = 0; i < hostBindingOpCodes.length; i++) {\n *   const opCode = hostBindingOpCodes[i] as number;\n *   if (opCode < 0) {\n *     // Negative numbers are element indexes.\n *     setSelectedIndex(~opCode);\n *   } else {\n *     // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n *     const directiveIdx = opCode;\n *     const bindingRootIndx = hostBindingOpCodes[++i] as number;\n *     const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n *     setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n *     const context = lView[directiveIdx];\n *     hostBindingFn(RenderFlags.Update, context);\n *   }\n * }\n * ```\n *\n */\nexport interface HostBindingOpCodes extends Array<number|HostBindingsFunction<any>> {\n  __brand__: 'HostBindingOpCodes';\n  debug?: string[];\n}\n\n/**\n * Explicitly marks `TView` as a specific type in `ngDevMode`\n *\n * It is useful to know conceptually what time of `TView` we are dealing with when\n * debugging an application (even if the runtime does not need it.) For this reason\n * we store this information in the `ngDevMode` `TView` and than use it for\n * better debugging experience.\n */\nexport const enum TViewType {\n  /**\n   * Root `TView` is the used to bootstrap components into. It is used in conjunction with\n   * `LView` which takes an existing DOM node not owned by Angular and wraps it in `TView`/`LView`\n   * so that other components can be loaded into it.\n   */\n  Root = 0,\n\n  /**\n   * `TView` associated with a Component. This would be the `TView` directly associated with the\n   * component view (as opposed an `Embedded` `TView` which would be a child of `Component` `TView`)\n   */\n  Component = 1,\n\n  /**\n   * `TView` associated with a template. Such as `*ngIf`, `<ng-template>` etc... A `Component`\n   * can have zero or more `Embedded` `TView`s.\n   */\n  Embedded = 2,\n}\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the `ComponentDef.tView`.\n */\nexport interface TView {\n  /**\n   * Type of `TView` (`Root`|`Component`|`Embedded`).\n   */\n  type: TViewType;\n\n  /**\n   * This is a blueprint used to generate LView instances for this TView. Copying this\n   * blueprint is faster than creating a new LView from scratch.\n   */\n  blueprint: LView;\n\n  /**\n   * The template function used to refresh the view of dynamically created views\n   * and components. Will be null for inline views.\n   */\n  template: ComponentTemplate<{}>|null;\n\n  /**\n   * A function containing query-related instructions.\n   */\n  viewQuery: ViewQueriesFunction<{}>|null;\n\n  /**\n   * A `TNode` representing the declaration location of this `TView` (not part of this TView).\n   */\n  declTNode: TNode|null;\n\n  // FIXME(misko): Why does `TView` not have `declarationTView` property?\n\n  /** Whether or not this template has been processed in creation mode. */\n  firstCreatePass: boolean;\n\n  /**\n   *  Whether or not this template has been processed in update mode (e.g. change detected)\n   *\n   * `firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling\n   * instructions. (Mainly to build up a linked list of styling priority order.)\n   *\n   * Typically this function gets cleared after first execution. If exception is thrown then this\n   * flag can remain turned un until there is first successful (no exception) pass. This means that\n   * individual styling instructions keep track of if they have already been added to the linked\n   * list to prevent double adding.\n   */\n  firstUpdatePass: boolean;\n\n  /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n  data: TData;\n\n  /**\n   * The binding start index is the index at which the data array\n   * starts to store bindings only. Saving this value ensures that we\n   * will begin reading bindings at the correct point in the array when\n   * we are in update mode.\n   *\n   * -1 means that it has not been initialized.\n   */\n  bindingStartIndex: number;\n\n  /**\n   * The index where the \"expando\" section of `LView` begins. The expando\n   * section contains injectors, directive instances, and host binding values.\n   * Unlike the \"decls\" and \"vars\" sections of `LView`, the length of this\n   * section cannot be calculated at compile-time because directives are matched\n   * at runtime to preserve locality.\n   *\n   * We store this start index so we know where to start checking host bindings\n   * in `setHostBindings`.\n   */\n  expandoStartIndex: number;\n\n  /**\n   * Whether or not there are any static view queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a view query\n   * refresh after creation mode to collect static query results.\n   */\n  staticViewQueries: boolean;\n\n  /**\n   * Whether or not there are any static content queries tracked on this view.\n   *\n   * We store this so we know whether or not we should do a content query\n   * refresh after creation mode to collect static query results.\n   */\n  staticContentQueries: boolean;\n\n  /**\n   * A reference to the first child node located in the view.\n   */\n  firstChild: TNode|null;\n\n  /**\n   * Stores the OpCodes to be replayed during change-detection to process the `HostBindings`\n   *\n   * See `HostBindingOpCodes` for encoding details.\n   */\n  hostBindingOpCodes: HostBindingOpCodes|null;\n\n  /**\n   * Full registry of directives and components that may be found in this view.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  directiveRegistry: DirectiveDefList|null;\n\n  /**\n   * Full registry of pipes that may be found in this view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  pipeRegistry: PipeDefList|null;\n\n  /**\n   * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n   * creation mode.\n   *\n   * This array has a flat structure and contains TNode indices, directive indices (where an\n   * instance can be found in `LView`) and hook functions. TNode index is followed by the directive\n   * index and a hook function. If there are multiple hooks for a given TNode, the TNode index is\n   * not repeated and the next lifecycle hook information is stored right after the previous hook\n   * function. This is done so that at runtime the system can efficiently iterate over all of the\n   * functions to invoke without having to make any decisions/lookups.\n   */\n  preOrderHooks: HookData|null;\n\n  /**\n   * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n   *\n   * This array has the same structure as the `preOrderHooks` one.\n   */\n  preOrderCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n   * for this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentChecked hooks that should be executed for this view in update\n   * mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n   * this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewChecked hooks that should be executed for this view in\n   * update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewCheckHooks: HookData|null;\n\n  /**\n   * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  destroyHooks: DestroyHookData|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n   * and output data (in chunks of 2) for a particular view. Combining the arrays\n   * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n   * separate for loops).\n   *\n   * If it's a native DOM listener or output subscription being stored:\n   * 1st index is: event name  `name = tView.cleanup[i+0]`\n   * 2nd index is: index of native element or a function that retrieves global target (window,\n   *               document or body) reference based on the native element:\n   *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n   *    `typeof idxOrTargetGetter === 'number'`: index of native element\n   *\n   * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n   * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n   *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n   *    `typeof useCaptureOrIndx == 'number':\n   *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n   *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n   *\n   * If it's an output subscription or query list destroy hook:\n   * 1st index is: output unsubscribe function / query list destroy function\n   * 2nd index is: index of function context in LView.cleanupInstances[]\n   *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n   */\n  cleanup: any[]|null;\n\n  /**\n   * A list of element indices for child components that will need to be\n   * refreshed when the current view has finished its check. These indices have\n   * already been adjusted for the HEADER_OFFSET.\n   *\n   */\n  components: number[]|null;\n\n  /**\n   * A collection of queries tracked in a given view.\n   */\n  queries: TQueries|null;\n\n  /**\n   * An array of indices pointing to directives with content queries alongside with the\n   * corresponding query index. Each entry in this array is a tuple of:\n   * - index of the first content query index declared by a given directive;\n   * - index of a directive.\n   *\n   * We are storing those indexes so we can refresh content queries as part of a view refresh\n   * process.\n   */\n  contentQueries: number[]|null;\n\n  /**\n   * Set of schemas that declare elements to be allowed inside the view.\n   */\n  schemas: SchemaMetadata[]|null;\n\n  /**\n   * Array of constants for the view. Includes attribute arrays, local definition arrays etc.\n   * Used for directive matching, attribute bindings, local definitions and more.\n   */\n  consts: TConstants|null;\n\n  /**\n   * Indicates that there was an error before we managed to complete the first create pass of the\n   * view. This means that the view is likely corrupted and we should try to recover it.\n   */\n  incompleteFirstPass: boolean;\n}\n\n/** Single hook callback function. */\nexport type HookFn = () => void;\n\n/**\n * Information necessary to call a hook. E.g. the callback that\n * needs to invoked and the index at which to find its context.\n */\nexport type HookEntry = number|HookFn;\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * For each node of the view, the following data is stored:\n * 1) Node index (optional)\n * 2) A series of number/function pairs where:\n *  - even indices are directive indices\n *  - odd indices are hook functions\n *\n * Special cases:\n *  - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\n */\nexport type HookData = HookEntry[];\n\n/**\n * Array of destroy hooks that should be executed for a view and their directive indices.\n *\n * The array is set up as a series of number/function or number/(number|function)[]:\n * - Even indices represent the context with which hooks should be called.\n * - Odd indices are the hook functions themselves. If a value at an odd index is an array,\n *   it represents the destroy hooks of a `multi` provider where:\n *     - Even indices represent the index of the provider for which we've registered a destroy hook,\n *       inside of the `multi` provider array.\n *     - Odd indices are the destroy hook functions.\n * For example:\n * LView: `[0, 1, 2, AService, 4, [BService, CService, DService]]`\n * destroyHooks: `[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]`\n *\n * In the example above `AService` is a type provider with an `ngOnDestroy`, whereas `BService`,\n * `CService` and `DService` are part of a `multi` provider where only `BService` and `DService`\n * have an `ngOnDestroy` hook.\n */\nexport type DestroyHookData = (HookEntry|HookData)[];\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Each host property's name is stored here at the same index as its value in the\n * data array.\n *\n * Each property binding name is stored here at the same index as its value in\n * the data array. If the binding is an interpolation, the static string values\n * are stored parallel to the dynamic values. Example:\n *\n * id=\"prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix\"\n *\n * LView       |   TView.data\n *------------------------\n *  v0 value   |   'a'\n *  v1 value   |   'b'\n *  v2 value   |   id � prefix � suffix\n *\n * Injector bloom filters are also stored here.\n */\nexport type TData = (TNode|PipeDef<any>|DirectiveDef<any>|ComponentDef<any>|number|TStylingRange|\n                     TStylingKey|ProviderToken<any>|TI18n|I18nUpdateOpCodes|TIcu|null|string)[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from './node';\nimport {RComment, RElement} from './renderer_dom';\nimport {HOST, LView, NEXT, PARENT, T_HOST, TRANSPLANTED_VIEWS_TO_REFRESH} from './view';\n\n\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\nexport const TYPE = 1;\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\n/**\n * Flag to signify that this `LContainer` may have transplanted views which need to be change\n * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n *\n * This flag, once set, is never unset for the `LContainer`. This means that when unset we can skip\n * a lot of work in `refreshEmbeddedViews`. But when set we still need to verify\n * that the `MOVED_VIEWS` are transplanted and on-push.\n */\nexport const HAS_TRANSPLANTED_VIEWS = 2;\n\n// PARENT, NEXT, TRANSPLANTED_VIEWS_TO_REFRESH are indices 3, 4, and 5\n// As we already have these constants in LView, we don't need to re-create them.\n\n// T_HOST is index 6\n// We already have this constants in LView, we don't need to re-create it.\n\nexport const NATIVE = 7;\nexport const VIEW_REFS = 8;\nexport const MOVED_VIEWS = 9;\n\n\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\nexport const CONTAINER_HEADER_OFFSET = 10;\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n  /**\n   * The host element of this LContainer.\n   *\n   * The host could be an LView if this container is on a component node.\n   * In that case, the component LView is its HOST.\n   */\n  readonly[HOST]: RElement|RComment|LView;\n\n  /**\n   * This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an\n   * efficient way. The value is always set to `true`\n   */\n  [TYPE]: true;\n\n  /**\n   * Flag to signify that this `LContainer` may have transplanted views which need to be change\n   * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.\n   *\n   * This flag, once set, is never unset for the `LContainer`.\n   */\n  [HAS_TRANSPLANTED_VIEWS]: boolean;\n\n  /**\n   * Access to the parent view is necessary so we can propagate back\n   * up from inside a container to parent[NEXT].\n   */\n  [PARENT]: LView;\n\n  /**\n   * This allows us to jump from a container to a sibling container or component\n   * view with the same parent, so we can remove listeners efficiently.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /**\n   * The number of direct transplanted views which need a refresh or have descendants themselves\n   * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n   * change detection we should still descend to find those children to refresh, even if the parents\n   * are not `Dirty`/`CheckAlways`.\n   */\n  [TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\n  /**\n   * A collection of views created based on the underlying `<ng-template>` element but inserted into\n   * a different `LContainer`. We need to track views created from a given declaration point since\n   * queries collect matches from the embedded view declaration point and _not_ the insertion point.\n   */\n  [MOVED_VIEWS]: LView[]|null;\n\n  /**\n   * Pointer to the `TNode` which represents the host of the container.\n   */\n  [T_HOST]: TNode;\n\n  /** The comment element that serves as an anchor for this LContainer. */\n  readonly[NATIVE]:\n      RComment;  // TODO(misko): remove as this value can be gotten by unwrapping `[HOST]`\n\n  /**\n   * Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.\n   *\n   * This is lazily initialized by `ViewContainerRef` when the first view is inserted.\n   *\n   * NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and\n   * doing so creates circular dependency.\n   */\n  [VIEW_REFS]: unknown[]|null;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LContainer, TYPE} from './container';\nimport {ComponentDef, DirectiveDef} from './definition';\nimport {TNode, TNodeFlags} from './node';\nimport {RNode} from './renderer_dom';\nimport {FLAGS, LView, LViewFlags} from './view';\n\n\n/**\n * True if `value` is `LView`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLView(value: RNode|LView|LContainer|{}|null): value is LView {\n  return Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n\n/**\n * True if `value` is `LContainer`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function isLContainer(value: RNode|LView|LContainer|{}|null): value is LContainer {\n  return Array.isArray(value) && value[TYPE] === true;\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponentHost(tNode: TNode): boolean {\n  return tNode.componentOffset > -1;\n}\n\nexport function isDirectiveHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isDirectiveHost) === TNodeFlags.isDirectiveHost;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return !!(def as ComponentDef<T>).template;\n}\n\nexport function isRootView(target: LView): boolean {\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertEqual, assertNumber, throwError} from '../util/assert';\n\nimport {getComponentDef, getNgModuleDef} from './definition';\nimport {LContainer} from './interfaces/container';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TIcu} from './interfaces/i18n';\nimport {NodeInjectorOffset} from './interfaces/injector';\nimport {TNode} from './interfaces/node';\nimport {isLContainer, isLView} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, LView, T_HOST, TVIEW, TView} from './interfaces/view';\n\n// [Assert functions do not constraint type when they are guarded by a truthy\n// expression.](https://github.com/microsoft/TypeScript/issues/37295)\n\n\nexport function assertTNodeForLView(tNode: TNode, lView: LView) {\n  assertTNodeForTView(tNode, lView[TVIEW]);\n}\n\nexport function assertTNodeForTView(tNode: TNode, tView: TView) {\n  assertTNode(tNode);\n  tNode.hasOwnProperty('tView_') &&\n      assertEqual(\n          (tNode as any as {tView_: TView}).tView_, tView,\n          'This TNode does not belong to this TView.');\n}\n\nexport function assertTNode(tNode: TNode) {\n  assertDefined(tNode, 'TNode must be defined');\n  if (!(tNode && typeof tNode === 'object' && tNode.hasOwnProperty('directiveStylingLast'))) {\n    throwError('Not of type TNode, got: ' + tNode);\n  }\n}\n\n\nexport function assertTIcu(tIcu: TIcu) {\n  assertDefined(tIcu, 'Expected TIcu to be defined');\n  if (!(typeof tIcu.currentCaseLViewIndex === 'number')) {\n    throwError('Object is not of TIcu type.');\n  }\n}\n\nexport function assertComponentType(\n    actual: any,\n    msg: string = 'Type passed in is not ComponentType, it does not have \\'ɵcmp\\' property.') {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\n\nexport function assertNgModuleType(\n    actual: any,\n    msg: string = 'Type passed in is not NgModuleType, it does not have \\'ɵmod\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\n\nexport function assertCurrentTNodeIsParent(isParent: boolean) {\n  assertEqual(isParent, true, 'currentTNode should be a parent');\n}\n\nexport function assertHasParent(tNode: TNode|null) {\n  assertDefined(tNode, 'currentTNode should exist!');\n  assertDefined(tNode!.parent, 'currentTNode should have a parent');\n}\n\nexport function assertLContainer(value: any): asserts value is LContainer {\n  assertDefined(value, 'LContainer must be defined');\n  assertEqual(isLContainer(value), true, 'Expecting LContainer');\n}\n\nexport function assertLViewOrUndefined(value: any): asserts value is LView|null|undefined {\n  value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');\n}\n\nexport function assertLView(value: any): asserts value is LView {\n  assertDefined(value, 'LView must be defined');\n  assertEqual(isLView(value), true, 'Expecting LView');\n}\n\nexport function assertFirstCreatePass(tView: TView, errMessage?: string) {\n  assertEqual(\n      tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');\n}\n\nexport function assertFirstUpdatePass(tView: TView, errMessage?: string) {\n  assertEqual(\n      tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');\n}\n\n/**\n * This is a basic sanity check that an object is probably a directive def. DirectiveDef is\n * an interface, so we can't do a direct instanceof check.\n */\nexport function assertDirectiveDef<T>(obj: any): asserts obj is DirectiveDef<T> {\n  if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {\n    throwError(\n        `Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);\n  }\n}\n\nexport function assertIndexInDeclRange(lView: LView, index: number) {\n  const tView = lView[1];\n  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);\n}\n\nexport function assertIndexInExpandoRange(lView: LView, index: number) {\n  const tView = lView[1];\n  assertBetween(tView.expandoStartIndex, lView.length, index);\n}\n\nexport function assertBetween(lower: number, upper: number, index: number) {\n  if (!(lower <= index && index < upper)) {\n    throwError(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);\n  }\n}\n\nexport function assertProjectionSlots(lView: LView, errMessage?: string) {\n  assertDefined(lView[DECLARATION_COMPONENT_VIEW], 'Component views should exist.');\n  assertDefined(\n      lView[DECLARATION_COMPONENT_VIEW][T_HOST]!.projection,\n      errMessage ||\n          'Components with projection nodes (<ng-content>) must have projection slots defined.');\n}\n\nexport function assertParentView(lView: LView|null, errMessage?: string) {\n  assertDefined(\n      lView,\n      errMessage || 'Component views should always have a parent view (component\\'s host view)');\n}\n\n\n/**\n * This is a basic sanity check that the `injectorIndex` seems to point to what looks like a\n * NodeInjector data structure.\n *\n * @param lView `LView` which should be checked.\n * @param injectorIndex index into the `LView` where the `NodeInjector` is expected.\n */\nexport function assertNodeInjector(lView: LView, injectorIndex: number) {\n  assertIndexInExpandoRange(lView, injectorIndex);\n  assertIndexInExpandoRange(lView, injectorIndex + NodeInjectorOffset.PARENT);\n  assertNumber(lView[injectorIndex + 0], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 1], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 2], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 3], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 4], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 5], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 6], 'injectorIndex should point to a bloom filter');\n  assertNumber(lView[injectorIndex + 7], 'injectorIndex should point to a bloom filter');\n  assertNumber(\n      lView[injectorIndex + NodeInjectorOffset.PARENT],\n      'injectorIndex should point to parent injector');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\nimport {NG_FACTORY_DEF} from './fields';\n\n\n/**\n * Definition of what a factory function should look like.\n */\nexport type FactoryFn<T> = {\n  /**\n   * Subclasses without an explicit constructor call through to the factory of their base\n   * definition, providing it with their own constructor to instantiate.\n   */\n  <U extends T>(t?: Type<U>): U;\n\n  /**\n   * If no constructor to instantiate is provided, an instance of type T itself is created.\n   */\n  (t?: undefined): T;\n};\n\n\nexport function getFactoryDef<T>(type: any, throwNotFound: true): FactoryFn<T>;\nexport function getFactoryDef<T>(type: any): FactoryFn<T>|null;\nexport function getFactoryDef<T>(type: any, throwNotFound?: boolean): FactoryFn<T>|null {\n  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);\n  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {\n    throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);\n  }\n  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport class SimpleChange {\n  constructor(public previousValue: any, public currentValue: any, public firstChange: boolean) {}\n  /**\n   * Check whether the new value is the first value assigned.\n   */\n  isFirstChange(): boolean {\n    return this.firstChange;\n  }\n}\n\n/**\n * A hashtable of changes represented by {@link SimpleChange} objects stored\n * at the declared property name they belong to on a Directive or Component. This is\n * the type passed to the `ngOnChanges` hook.\n *\n * @see `OnChanges`\n *\n * @publicApi\n */\nexport interface SimpleChanges {\n  [propName: string]: SimpleChange;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnChanges} from '../../interface/lifecycle_hooks';\nimport {SimpleChange, SimpleChanges} from '../../interface/simple_change';\nimport {assertString} from '../../util/assert';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {DirectiveDef, DirectiveDefFeature} from '../interfaces/definition';\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵNgOnChangesFeature<T>(): DirectiveDefFeature {\n  return NgOnChangesFeatureImpl;\n}\n\nexport function NgOnChangesFeatureImpl<T>(definition: DirectiveDef<T>) {\n  if (definition.type.prototype.ngOnChanges) {\n    definition.setInput = ngOnChangesSetInput;\n  }\n  return rememberChangeHistoryAndInvokeOnChangesHook;\n}\n\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n/** @nocollapse */\n// tslint:disable-next-line:no-toplevel-property-access\n(ɵɵNgOnChangesFeature as DirectiveDefFeature).ngInherit = true;\n\n/**\n * This is a synthetic lifecycle hook which gets inserted into `TView.preOrderHooks` to simulate\n * `ngOnChanges`.\n *\n * The hook reads the `NgSimpleChangesStore` data from the component instance and if changes are\n * found it invokes `ngOnChanges` on the component instance.\n *\n * @param this Component instance. Because this function gets inserted into `TView.preOrderHooks`,\n *     it is guaranteed to be called with component instance.\n */\nfunction rememberChangeHistoryAndInvokeOnChangesHook(this: OnChanges) {\n  const simpleChangesStore = getSimpleChangesStore(this);\n  const current = simpleChangesStore?.current;\n\n  if (current) {\n    const previous = simpleChangesStore!.previous;\n    if (previous === EMPTY_OBJ) {\n      simpleChangesStore!.previous = current;\n    } else {\n      // New changes are copied to the previous store, so that we don't lose history for inputs\n      // which were not changed this time\n      for (let key in current) {\n        previous[key] = current[key];\n      }\n    }\n    simpleChangesStore!.current = null;\n    this.ngOnChanges(current);\n  }\n}\n\n\nfunction ngOnChangesSetInput<T>(\n    this: DirectiveDef<T>, instance: T, value: any, publicName: string, privateName: string): void {\n  const declaredName = (this.declaredInputs as {[key: string]: string})[publicName];\n  ngDevMode && assertString(declaredName, 'Name of input in ngOnChanges has to be a string');\n  const simpleChangesStore = getSimpleChangesStore(instance) ||\n      setSimpleChangesStore(instance, {previous: EMPTY_OBJ, current: null});\n  const current = simpleChangesStore.current || (simpleChangesStore.current = {});\n  const previous = simpleChangesStore.previous;\n  const previousChange = previous[declaredName];\n  current[declaredName] = new SimpleChange(\n      previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);\n\n  (instance as any)[privateName] = value;\n}\n\nconst SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';\n\nfunction getSimpleChangesStore(instance: any): null|NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] || null;\n}\n\nfunction setSimpleChangesStore(instance: any, store: NgSimpleChangesStore): NgSimpleChangesStore {\n  return instance[SIMPLE_CHANGES_STORE] = store;\n}\n\n/**\n * Data structure which is monkey-patched on the component instance and used by `ngOnChanges`\n * life-cycle hook to track previous input values.\n */\ninterface NgSimpleChangesStore {\n  previous: SimpleChanges;\n  current: SimpleChanges|null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Profiler events is an enum used by the profiler to distinguish between different calls of user\n * code invoked throughout the application lifecycle.\n */\nexport const enum ProfilerEvent {\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Create`.\n   */\n  TemplateCreateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called the template function of a\n   * component with `RenderFlags.Update`.\n   */\n  TemplateUpdateEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has called a lifecycle hook of a component\n   * or directive.\n   */\n  LifecycleHookEnd,\n\n  /**\n   * Corresponds to the point in time before the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputStart,\n\n  /**\n   * Corresponds to the point in time after the runtime has evaluated an expression associated with\n   * an event or an output.\n   */\n  OutputEnd,\n}\n\n/**\n * Profiler function which the runtime will invoke before and after user code.\n */\nexport interface Profiler {\n  (event: ProfilerEvent, instance: {}|null, hookOrListener?: (e?: any) => any): void;\n}\n\n\nlet profilerCallback: Profiler|null = null;\n\n/**\n * Sets the callback function which will be invoked before and after performing certain actions at\n * runtime (for example, before and after running change detection).\n *\n * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n * The contract of the function might be changed in any release and/or the function can be removed\n * completely.\n *\n * @param profiler function provided by the caller or null value to disable profiling.\n */\nexport const setProfiler = (profiler: Profiler|null) => {\n  profilerCallback = profiler;\n};\n\n/**\n * Profiler function which wraps user code executed by the runtime.\n *\n * @param event ProfilerEvent corresponding to the execution context\n * @param instance component instance\n * @param hookOrListener lifecycle hook function or output listener. The value depends on the\n *  execution context\n * @returns\n */\nexport const profiler: Profiler = function(\n    event: ProfilerEvent, instance: {}|null, hookOrListener?: (e?: any) => any) {\n  if (profilerCallback != null /* both `null` and `undefined` */) {\n    profilerCallback(event, instance, hookOrListener);\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const SVG_NAMESPACE = 'svg';\nexport const MATH_ML_NAMESPACE = 'math';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertGreaterThan, assertGreaterThanOrEqual, assertIndexInRange, assertLessThan} from '../../util/assert';\nimport {assertTNode, assertTNodeForLView} from '../assert';\nimport {LContainer, TYPE} from '../interfaces/container';\nimport {TConstants, TNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {FLAGS, HEADER_OFFSET, HOST, LView, LViewFlags, PARENT, PREORDER_HOOK_FLAGS, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TView} from '../interfaces/view';\n\n\n\n/**\n * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)\n * in same location in `LView`. This is because we don't want to pre-allocate space for it\n * because the storage is sparse. This file contains utilities for dealing with such data types.\n *\n * How do we know what is stored at a given location in `LView`.\n * - `Array.isArray(value) === false` => `RNode` (The normal storage value)\n * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.\n *   - `typeof value[TYPE] === 'object'` => `LView`\n *      - This happens when we have a component at a given location\n *   - `typeof value[TYPE] === true` => `LContainer`\n *      - This happens when we have `LContainer` binding at a given location.\n *\n *\n * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.\n */\n\n/**\n * Returns `RNode`.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapRNode(value: RNode|LView|LContainer): RNode {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value as RNode;\n}\n\n/**\n * Returns `LView` or `null` if not found.\n * @param value wrapped value of `RNode`, `LView`, `LContainer`\n */\nexport function unwrapLView(value: RNode|LView|LContainer): LView|null {\n  while (Array.isArray(value)) {\n    // This check is same as `isLView()` but we don't call at as we don't want to call\n    // `Array.isArray()` twice and give JITer more work for inlining.\n    if (typeof value[TYPE] === 'object') return value as LView;\n    value = value[HOST] as any;\n  }\n  return null;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RNode {\n  ngDevMode && assertIndexInRange(lView, index);\n  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Expected to be past HEADER_OFFSET');\n  return unwrapRNode(lView[index]);\n}\n\n/**\n * Retrieve an `RNode` for a given `TNode` and `LView`.\n *\n * This function guarantees in dev mode to retrieve a non-null `RNode`.\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNode(tNode: TNode, lView: LView): RNode {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  ngDevMode && assertIndexInRange(lView, tNode.index);\n  const node: RNode = unwrapRNode(lView[tNode.index]);\n  return node;\n}\n\n/**\n * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.\n *\n * Some `TNode`s don't have associated `RNode`s. For example `Projection`\n *\n * @param tNode\n * @param lView\n */\nexport function getNativeByTNodeOrNull(tNode: TNode|null, lView: LView): RNode|null {\n  const index = tNode === null ? -1 : tNode.index;\n  if (index !== -1) {\n    ngDevMode && assertTNodeForLView(tNode!, lView);\n    const node: RNode|null = unwrapRNode(lView[index]);\n    return node;\n  }\n  return null;\n}\n\n\n// fixme(misko): The return Type should be `TNode|null`\nexport function getTNode(tView: TView, index: number): TNode {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');\n  const tNode = tView.data[index] as TNode;\n  ngDevMode && tNode !== null && assertTNode(tNode);\n  return tNode;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function load<T>(view: LView|TData, index: number): T {\n  ngDevMode && assertIndexInRange(view, index);\n  return view[index];\n}\n\nexport function getComponentLViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  ngDevMode && assertIndexInRange(hostView, nodeIndex);\n  const slotValue = hostView[nodeIndex];\n  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n  return lView;\n}\n\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\n/**\n * Returns a boolean for whether the view is attached to the change detection tree.\n *\n * Note: This determines whether a view should be checked, not whether it's inserted\n * into a container. For that, you'll want `viewAttachedToContainer` below.\n */\nexport function viewAttachedToChangeDetector(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\n/** Returns a boolean for whether the view is attached to a container. */\nexport function viewAttachedToContainer(view: LView): boolean {\n  return isLContainer(view[PARENT]);\n}\n\n/** Returns a constant from `TConstants` instance. */\nexport function getConstant<T>(consts: TConstants|null, index: null|undefined): null;\nexport function getConstant<T>(consts: TConstants, index: number): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null;\nexport function getConstant<T>(consts: TConstants|null, index: number|null|undefined): T|null {\n  if (index === null || index === undefined) return null;\n  ngDevMode && assertIndexInRange(consts!, index);\n  return consts![index] as unknown as T;\n}\n\n/**\n * Resets the pre-order hook flags of the view.\n * @param lView the LView on which the flags are reset\n */\nexport function resetPreOrderHookFlags(lView: LView) {\n  lView[PREORDER_HOOK_FLAGS] = 0;\n}\n\n/**\n * Updates the `TRANSPLANTED_VIEWS_TO_REFRESH` counter on the `LContainer` as well as the parents\n * whose\n *  1. counter goes from 0 to 1, indicating that there is a new child that has a view to refresh\n *  or\n *  2. counter goes from 1 to 0, indicating there are no more descendant views to refresh\n */\nexport function updateTransplantedViewCount(lContainer: LContainer, amount: 1|- 1) {\n  lContainer[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n  let viewOrContainer: LView|LContainer = lContainer;\n  let parent: LView|LContainer|null = lContainer[PARENT];\n  while (parent !== null &&\n         ((amount === 1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 1) ||\n          (amount === -1 && viewOrContainer[TRANSPLANTED_VIEWS_TO_REFRESH] === 0))) {\n    parent[TRANSPLANTED_VIEWS_TO_REFRESH] += amount;\n    viewOrContainer = parent;\n    parent = parent[PARENT];\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../di/interface/injector';\nimport {assertDefined, assertEqual, assertGreaterThanOrEqual, assertLessThan, assertNotEqual, throwError} from '../util/assert';\n\nimport {assertLViewOrUndefined, assertTNodeForLView, assertTNodeForTView} from './assert';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode, TNodeType} from './interfaces/node';\nimport {CONTEXT, DECLARATION_VIEW, HEADER_OFFSET, LView, OpaqueViewState, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {getTNode} from './util/view_utils';\n\n\n/**\n *\n */\ninterface LFrame {\n  /**\n   * Parent LFrame.\n   *\n   * This is needed when `leaveView` is called to restore the previous state.\n   */\n  parent: LFrame;\n\n  /**\n   * Child LFrame.\n   *\n   * This is used to cache existing LFrames to relieve the memory pressure.\n   */\n  child: LFrame|null;\n\n  /**\n   * State of the current view being processed.\n   *\n   * An array of nodes (text, element, container, etc), pipes, their bindings, and\n   * any local variables that need to be stored between invocations.\n   */\n  lView: LView;\n\n  /**\n   * Current `TView` associated with the `LFrame.lView`.\n   *\n   * One can get `TView` from `lFrame[TVIEW]` however because it is so common it makes sense to\n   * store it in `LFrame` for perf reasons.\n   */\n  tView: TView;\n\n  /**\n   * Used to set the parent property when nodes are created and track query results.\n   *\n   * This is used in conjunction with `isParent`.\n   */\n  currentTNode: TNode|null;\n\n  /**\n   * If `isParent` is:\n   *  - `true`: then `currentTNode` points to a parent node.\n   *  - `false`: then `currentTNode` points to previous node (sibling).\n   */\n  isParent: boolean;\n\n  /**\n   * Index of currently selected element in LView.\n   *\n   * Used by binding instructions. Updated as part of advance instruction.\n   */\n  selectedIndex: number;\n\n  /**\n   * Current pointer to the binding index.\n   */\n  bindingIndex: number;\n\n  /**\n   * The last viewData retrieved by nextContext().\n   * Allows building nextContext() and reference() calls.\n   *\n   * e.g. const inner = x().$implicit; const outer = x().$implicit;\n   */\n  contextLView: LView|null;\n\n  /**\n   * Store the element depth count. This is used to identify the root elements of the template\n   * so that we can then attach patch data `LView` to only those elements. We know that those\n   * are the only places where the patch data could change, this way we will save on number\n   * of places where tha patching occurs.\n   */\n  elementDepthCount: number;\n\n  /**\n   * Current namespace to be used when creating elements\n   */\n  currentNamespace: string|null;\n\n\n  /**\n   * The root index from which pure function instructions should calculate their binding\n   * indices. In component views, this is TView.bindingStartIndex. In a host binding\n   * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n   */\n  bindingRootIndex: number;\n\n  /**\n   * Current index of a View or Content Query which needs to be processed next.\n   * We iterate over the list of Queries and increment current query index at every step.\n   */\n  currentQueryIndex: number;\n\n  /**\n   * When host binding is executing this points to the directive index.\n   * `TView.data[currentDirectiveIndex]` is `DirectiveDef`\n   * `LView[currentDirectiveIndex]` is directive instance.\n   */\n  currentDirectiveIndex: number;\n\n  /**\n   * Are we currently in i18n block as denoted by `ɵɵelementStart` and `ɵɵelementEnd`.\n   *\n   * This information is needed because while we are in i18n block all elements must be pre-declared\n   * in the translation. (i.e. `Hello �#2�World�/#2�!` pre-declares element at `�#2�` location.)\n   * This allocates `TNodeType.Placeholder` element at location `2`. If translator removes `�#2�`\n   * from translation than the runtime must also ensure tha element at `2` does not get inserted\n   * into the DOM. The translation does not carry information about deleted elements. Therefor the\n   * only way to know that an element is deleted is that it was not pre-declared in the translation.\n   *\n   * This flag works by ensuring that elements which are created without pre-declaration\n   * (`TNodeType.Placeholder`) are not inserted into the DOM render tree. (It does mean that the\n   * element still gets instantiated along with all of its behavior [directives])\n   */\n  inI18n: boolean;\n}\n\n/**\n * All implicit instruction state is stored here.\n *\n * It is useful to have a single object where all of the state is stored as a mental model\n * (rather it being spread across many different variables.)\n *\n * PERF NOTE: Turns out that writing to a true global variable is slower than\n * having an intermediate object with properties.\n */\ninterface InstructionState {\n  /**\n   * Current `LFrame`\n   *\n   * `null` if we have not called `enterView`\n   */\n  lFrame: LFrame;\n\n  /**\n   * Stores whether directives should be matched to elements.\n   *\n   * When template contains `ngNonBindable` then we need to prevent the runtime from matching\n   * directives on children of that element.\n   *\n   * Example:\n   * ```\n   * <my-comp my-directive>\n   *   Should match component / directive.\n   * </my-comp>\n   * <div ngNonBindable>\n   *   <my-comp my-directive>\n   *     Should not match component / directive because we are in ngNonBindable.\n   *   </my-comp>\n   * </div>\n   * ```\n   */\n  bindingsEnabled: boolean;\n}\n\nconst instructionState: InstructionState = {\n  lFrame: createLFrame(null),\n  bindingsEnabled: true,\n};\n\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n *\n * The `checkNoChanges` function is invoked only in ngDevMode=true and verifies that no unintended\n * changes exist in the change detector or its children.\n */\nlet _isInCheckNoChangesMode = false;\n\n/**\n * Returns true if the instruction state stack is empty.\n *\n * Intended to be called from tests only (tree shaken otherwise).\n */\nexport function specOnlyIsInstructionStateEmpty(): boolean {\n  return instructionState.lFrame.parent === null;\n}\n\n\nexport function getElementDepthCount() {\n  return instructionState.lFrame.elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  instructionState.lFrame.elementDepthCount--;\n}\n\nexport function getBindingsEnabled(): boolean {\n  return instructionState.bindingsEnabled;\n}\n\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵenableBindings(): void {\n  instructionState.bindingsEnabled = true;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵdisableBindings(): void {\n  instructionState.bindingsEnabled = false;\n}\n\n/**\n * Return the current `LView`.\n */\nexport function getLView<T>(): LView<T> {\n  return instructionState.lFrame.lView as LView<T>;\n}\n\n/**\n * Return the current `TView`.\n */\nexport function getTView(): TView {\n  return instructionState.lFrame.tView;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nexport function ɵɵrestoreView<T = any>(viewToRestore: OpaqueViewState): T {\n  instructionState.lFrame.contextLView = viewToRestore as any as LView;\n  return (viewToRestore as any as LView)[CONTEXT] as unknown as T;\n}\n\n\n/**\n * Clears the view set in `ɵɵrestoreView` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nexport function ɵɵresetView<T>(value?: T): T|undefined {\n  instructionState.lFrame.contextLView = null;\n  return value;\n}\n\n\nexport function getCurrentTNode(): TNode|null {\n  let currentTNode = getCurrentTNodePlaceholderOk();\n  while (currentTNode !== null && currentTNode.type === TNodeType.Placeholder) {\n    currentTNode = currentTNode.parent;\n  }\n  return currentTNode;\n}\n\nexport function getCurrentTNodePlaceholderOk(): TNode|null {\n  return instructionState.lFrame.currentTNode;\n}\n\nexport function getCurrentParentTNode(): TNode|null {\n  const lFrame = instructionState.lFrame;\n  const currentTNode = lFrame.currentTNode;\n  return lFrame.isParent ? currentTNode : currentTNode!.parent;\n}\n\nexport function setCurrentTNode(tNode: TNode|null, isParent: boolean) {\n  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);\n  const lFrame = instructionState.lFrame;\n  lFrame.currentTNode = tNode;\n  lFrame.isParent = isParent;\n}\n\nexport function isCurrentTNodeParent(): boolean {\n  return instructionState.lFrame.isParent;\n}\n\nexport function setCurrentTNodeAsNotParent(): void {\n  instructionState.lFrame.isParent = false;\n}\n\nexport function getContextLView(): LView {\n  const contextLView = instructionState.lFrame.contextLView;\n  ngDevMode && assertDefined(contextLView, 'contextLView must be defined.');\n  return contextLView!;\n}\n\nexport function isInCheckNoChangesMode(): boolean {\n  !ngDevMode && throwError('Must never be called in production mode');\n  return _isInCheckNoChangesMode;\n}\n\nexport function setIsInCheckNoChangesMode(mode: boolean): void {\n  !ngDevMode && throwError('Must never be called in production mode');\n  _isInCheckNoChangesMode = mode;\n}\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  const lFrame = instructionState.lFrame;\n  let index = lFrame.bindingRootIndex;\n  if (index === -1) {\n    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;\n  }\n  return index;\n}\n\nexport function getBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex;\n}\n\nexport function setBindingIndex(value: number): number {\n  return instructionState.lFrame.bindingIndex = value;\n}\n\nexport function nextBindingIndex(): number {\n  return instructionState.lFrame.bindingIndex++;\n}\n\nexport function incrementBindingIndex(count: number): number {\n  const lFrame = instructionState.lFrame;\n  const index = lFrame.bindingIndex;\n  lFrame.bindingIndex = lFrame.bindingIndex + count;\n  return index;\n}\n\nexport function isInI18nBlock() {\n  return instructionState.lFrame.inI18n;\n}\n\nexport function setInI18nBlock(isInI18nBlock: boolean): void {\n  instructionState.lFrame.inI18n = isInI18nBlock;\n}\n\n/**\n * Set a new binding root index so that host template functions can execute.\n *\n * Bindings inside the host template are 0 index. But because we don't know ahead of time\n * how many host bindings we have we can't pre-compute them. For this reason they are all\n * 0 index and we just shift the root so that they match next available location in the LView.\n *\n * @param bindingRootIndex Root index for `hostBindings`\n * @param currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive\n *        whose `hostBindings` are being processed.\n */\nexport function setBindingRootForHostBindings(\n    bindingRootIndex: number, currentDirectiveIndex: number) {\n  const lFrame = instructionState.lFrame;\n  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;\n  setCurrentDirectiveIndex(currentDirectiveIndex);\n}\n\n/**\n * When host binding is executing this points to the directive index.\n * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`\n * `LView[getCurrentDirectiveIndex()]` is directive instance.\n */\nexport function getCurrentDirectiveIndex(): number {\n  return instructionState.lFrame.currentDirectiveIndex;\n}\n\n/**\n * Sets an index of a directive whose `hostBindings` are being processed.\n *\n * @param currentDirectiveIndex `TData` index where current directive instance can be found.\n */\nexport function setCurrentDirectiveIndex(currentDirectiveIndex: number): void {\n  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;\n}\n\n/**\n * Retrieve the current `DirectiveDef` which is active when `hostBindings` instruction is being\n * executed.\n *\n * @param tData Current `TData` where the `DirectiveDef` will be looked up at.\n */\nexport function getCurrentDirectiveDef(tData: TData): DirectiveDef<any>|null {\n  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;\n  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex] as DirectiveDef<any>;\n}\n\nexport function getCurrentQueryIndex(): number {\n  return instructionState.lFrame.currentQueryIndex;\n}\n\nexport function setCurrentQueryIndex(value: number): void {\n  instructionState.lFrame.currentQueryIndex = value;\n}\n\n/**\n * Returns a `TNode` of the location where the current `LView` is declared at.\n *\n * @param lView an `LView` that we want to find parent `TNode` for.\n */\nfunction getDeclarationTNode(lView: LView): TNode|null {\n  const tView = lView[TVIEW];\n\n  // Return the declaration parent for embedded views\n  if (tView.type === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode;\n  }\n\n  // Components don't have `TView.declTNode` because each instance of component could be\n  // inserted in different location, hence `TView.declTNode` is meaningless.\n  // Falling back to `T_HOST` in case we cross component boundary.\n  if (tView.type === TViewType.Component) {\n    return lView[T_HOST];\n  }\n\n  // Remaining TNode type is `TViewType.Root` which doesn't have a parent TNode.\n  return null;\n}\n\n/**\n * This is a light weight version of the `enterView` which is needed by the DI system.\n *\n * @param lView `LView` location of the DI context.\n * @param tNode `TNode` for DI context\n * @param flags DI context flags. if `SkipSelf` flag is set than we walk up the declaration\n *     tree from `tNode`  until we find parent declared `TElementNode`.\n * @returns `true` if we have successfully entered DI associated with `tNode` (or with declared\n *     `TNode` if `flags` has  `SkipSelf`). Failing to enter DI implies that no associated\n *     `NodeInjector` can be found and we should instead use `ModuleInjector`.\n *     - If `true` than this call must be fallowed by `leaveDI`\n *     - If `false` than this call failed and we should NOT call `leaveDI`\n */\nexport function enterDI(lView: LView, tNode: TNode, flags: InjectFlags) {\n  ngDevMode && assertLViewOrUndefined(lView);\n\n  if (flags & InjectFlags.SkipSelf) {\n    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);\n\n    let parentTNode = tNode as TNode | null;\n    let parentLView = lView;\n\n    while (true) {\n      ngDevMode && assertDefined(parentTNode, 'Parent TNode should be defined');\n      parentTNode = parentTNode!.parent as TNode | null;\n      if (parentTNode === null && !(flags & InjectFlags.Host)) {\n        parentTNode = getDeclarationTNode(parentLView);\n        if (parentTNode === null) break;\n\n        // In this case, a parent exists and is definitely an element. So it will definitely\n        // have an existing lView as the declaration view, which is why we can assume it's defined.\n        ngDevMode && assertDefined(parentLView, 'Parent LView should be defined');\n        parentLView = parentLView[DECLARATION_VIEW]!;\n\n        // In Ivy there are Comment nodes that correspond to ngIf and NgFor embedded directives\n        // We want to skip those and look only at Elements and ElementContainers to ensure\n        // we're looking at true parent nodes, and not content or other types.\n        if (parentTNode.type & (TNodeType.Element | TNodeType.ElementContainer)) {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n    if (parentTNode === null) {\n      // If we failed to find a parent TNode this means that we should use module injector.\n      return false;\n    } else {\n      tNode = parentTNode;\n      lView = parentLView;\n    }\n  }\n\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const lFrame = instructionState.lFrame = allocLFrame();\n  lFrame.currentTNode = tNode;\n  lFrame.lView = lView;\n\n  return true;\n}\n\n/**\n * Swap the current lView with a new lView.\n *\n * For performance reasons we store the lView in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the lView for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New lView to become active\n * @returns the previously active lView;\n */\nexport function enterView(newView: LView): void {\n  ngDevMode && assertNotEqual(newView[0], newView[1] as any, '????');\n  ngDevMode && assertLViewOrUndefined(newView);\n  const newLFrame = allocLFrame();\n  if (ngDevMode) {\n    assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');\n    assertEqual(newLFrame.lView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.tView, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.selectedIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');\n    assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');\n    assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');\n  }\n  const tView = newView[TVIEW];\n  instructionState.lFrame = newLFrame;\n  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);\n  newLFrame.currentTNode = tView.firstChild!;\n  newLFrame.lView = newView;\n  newLFrame.tView = tView;\n  newLFrame.contextLView = newView;\n  newLFrame.bindingIndex = tView.bindingStartIndex;\n  newLFrame.inI18n = false;\n}\n\n/**\n * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.\n */\nfunction allocLFrame() {\n  const currentLFrame = instructionState.lFrame;\n  const childLFrame = currentLFrame === null ? null : currentLFrame.child;\n  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;\n  return newLFrame;\n}\n\nfunction createLFrame(parent: LFrame|null): LFrame {\n  const lFrame: LFrame = {\n    currentTNode: null,\n    isParent: true,\n    lView: null!,\n    tView: null!,\n    selectedIndex: -1,\n    contextLView: null,\n    elementDepthCount: 0,\n    currentNamespace: null,\n    currentDirectiveIndex: -1,\n    bindingRootIndex: -1,\n    bindingIndex: -1,\n    currentQueryIndex: 0,\n    parent: parent!,\n    child: null,\n    inI18n: false,\n  };\n  parent !== null && (parent.child = lFrame);  // link the new LFrame for reuse.\n  return lFrame;\n}\n\n/**\n * A lightweight version of leave which is used with DI.\n *\n * This function only resets `currentTNode` and `LView` as those are the only properties\n * used with DI (`enterDI()`).\n *\n * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where\n * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.\n */\nfunction leaveViewLight(): LFrame {\n  const oldLFrame = instructionState.lFrame;\n  instructionState.lFrame = oldLFrame.parent;\n  oldLFrame.currentTNode = null!;\n  oldLFrame.lView = null!;\n  return oldLFrame;\n}\n\n/**\n * This is a lightweight version of the `leaveView` which is needed by the DI system.\n *\n * NOTE: this function is an alias so that we can change the type of the function to have `void`\n * return type.\n */\nexport const leaveDI: () => void = leaveViewLight;\n\n/**\n * Leave the current `LView`\n *\n * This pops the `LFrame` with the associated `LView` from the stack.\n *\n * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is\n * because for performance reasons we don't release `LFrame` but rather keep it for next use.\n */\nexport function leaveView() {\n  const oldLFrame = leaveViewLight();\n  oldLFrame.isParent = true;\n  oldLFrame.tView = null!;\n  oldLFrame.selectedIndex = -1;\n  oldLFrame.contextLView = null;\n  oldLFrame.elementDepthCount = 0;\n  oldLFrame.currentDirectiveIndex = -1;\n  oldLFrame.currentNamespace = null;\n  oldLFrame.bindingRootIndex = -1;\n  oldLFrame.bindingIndex = -1;\n  oldLFrame.currentQueryIndex = 0;\n}\n\nexport function nextContextImpl<T = any>(level: number): T {\n  const contextLView = instructionState.lFrame.contextLView =\n      walkUpViews(level, instructionState.lFrame.contextLView!);\n  return contextLView[CONTEXT] as unknown as T;\n}\n\nfunction walkUpViews(nestingLevel: number, currentView: LView): LView {\n  while (nestingLevel > 0) {\n    ngDevMode &&\n        assertDefined(\n            currentView[DECLARATION_VIEW],\n            'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW]!;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\n/**\n * Gets the currently selected element index.\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n */\nexport function getSelectedIndex() {\n  return instructionState.lFrame.selectedIndex;\n}\n\n/**\n * Sets the most recent index passed to {@link select}\n *\n * Used with {@link property} instruction (and more in the future) to identify the index in the\n * current `LView` to act on.\n *\n * (Note that if an \"exit function\" was set earlier (via `setElementExitFn()`) then that will be\n * run if and when the provided `index` value is different from the current selected index value.)\n */\nexport function setSelectedIndex(index: number) {\n  ngDevMode && index !== -1 &&\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'Index must be past HEADER_OFFSET (or -1).');\n  ngDevMode &&\n      assertLessThan(\n          index, instructionState.lFrame.lView.length, 'Can\\'t set index passed end of LView');\n  instructionState.lFrame.selectedIndex = index;\n}\n\n/**\n * Gets the `tNode` that represents currently selected element.\n */\nexport function getSelectedTNode() {\n  const lFrame = instructionState.lFrame;\n  return getTNode(lFrame.tView, lFrame.selectedIndex);\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceSVG() {\n  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceMathML() {\n  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n *\n * @codeGenApi\n */\nexport function ɵɵnamespaceHTML() {\n  namespaceHTMLInternal();\n}\n\n/**\n * Sets the namespace used to create elements to `null`, which forces element creation to use\n * `createElement` rather than `createElementNS`.\n */\nexport function namespaceHTMLInternal() {\n  instructionState.lFrame.currentNamespace = null;\n}\n\nexport function getNamespace(): string|null {\n  return instructionState.lFrame.currentNamespace;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit} from '../interface/lifecycle_hooks';\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\nimport {assertFirstCreatePass} from './assert';\nimport {NgOnChangesFeatureImpl} from './features/ng_onchanges_feature';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode} from './interfaces/node';\nimport {FLAGS, HookData, InitPhaseState, LView, LViewFlags, PREORDER_HOOK_FLAGS, PreOrderHookFlags, TView} from './interfaces/view';\nimport {profiler, ProfilerEvent} from './profiler';\nimport {isInCheckNoChangesMode} from './state';\n\n\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * Sets up the pre-order hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nexport function registerPreOrderHooks(\n    directiveIndex: number, directiveDef: DirectiveDef<any>, tView: TView): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  const {ngOnChanges, ngOnInit, ngDoCheck} =\n      directiveDef.type.prototype as OnChanges & OnInit & DoCheck;\n\n  if (ngOnChanges as Function | undefined) {\n    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);\n    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);\n  }\n\n  if (ngOnInit) {\n    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);\n  }\n\n  if (ngDoCheck) {\n    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);\n    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);\n  }\n}\n\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView`,\n * see {@link HookData} for details about the data structure.\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView: TView, tNode: TNode): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  // It's necessary to loop through the directives at elementEnd() (rather than processing in\n  // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n  // hooks for projected components and directives must be called *before* their hosts.\n  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n    const directiveDef = tView.data[i] as DirectiveDef<any>;\n    ngDevMode && assertDefined(directiveDef, 'Expecting DirectiveDef');\n    const lifecycleHooks: AfterContentInit&AfterContentChecked&AfterViewInit&AfterViewChecked&\n        OnDestroy = directiveDef.type.prototype;\n    const {\n      ngAfterContentInit,\n      ngAfterContentChecked,\n      ngAfterViewInit,\n      ngAfterViewChecked,\n      ngOnDestroy\n    } = lifecycleHooks;\n\n    if (ngAfterContentInit) {\n      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);\n    }\n\n    if (ngAfterContentChecked) {\n      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);\n      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);\n    }\n\n    if (ngAfterViewInit) {\n      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);\n    }\n\n    if (ngAfterViewChecked) {\n      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);\n      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);\n    }\n\n    if (ngOnDestroy != null) {\n      (tView.destroyHooks ??= []).push(i, ngOnDestroy);\n    }\n  }\n}\n\n/**\n * Executing hooks requires complex logic as we need to deal with 2 constraints.\n *\n * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only\n * once, across many change detection cycles. This must be true even if some hooks throw, or if\n * some recursively trigger a change detection cycle.\n * To solve that, it is required to track the state of the execution of these init hooks.\n * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},\n * and the index within that phase. They can be seen as a cursor in the following structure:\n * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]\n * They are are stored as flags in LView[FLAGS].\n *\n * 2. Pre-order hooks can be executed in batches, because of the select instruction.\n * To be able to pause and resume their execution, we also need some state about the hook's array\n * that is being processed:\n * - the index of the next hook to be executed\n * - the number of init hooks already found in the processed part of the  array\n * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].\n */\n\n\n/**\n * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were\n * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read\n * / write of the init-hooks related flags.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeCheckHooks(lView: LView, hooks: HookData, nodeIndex?: number|null) {\n  callHooks(lView, hooks, InitPhaseState.InitPhaseCompleted, nodeIndex);\n}\n\n/**\n * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,\n * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.\n * @param lView The LView where hooks are defined\n * @param hooks Hooks to be run\n * @param initPhase A phase for which hooks should be run\n * @param nodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nexport function executeInitAndCheckHooks(\n    lView: LView, hooks: HookData, initPhase: InitPhaseState, nodeIndex?: number|null) {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init pre-order hooks should not be called more than once');\n  if ((lView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n    callHooks(lView, hooks, initPhase, nodeIndex);\n  }\n}\n\nexport function incrementInitPhaseFlags(lView: LView, initPhase: InitPhaseState): void {\n  ngDevMode &&\n      assertNotEqual(\n          initPhase, InitPhaseState.InitPhaseCompleted,\n          'Init hooks phase should not be incremented after all init hooks have been run.');\n  let flags = lView[FLAGS];\n  if ((flags & LViewFlags.InitPhaseStateMask) === initPhase) {\n    flags &= LViewFlags.IndexWithinInitPhaseReset;\n    flags += LViewFlags.InitPhaseStateIncrementer;\n    lView[FLAGS] = flags;\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n * @param initPhaseState the current state of the init phase\n * @param currentNodeIndex 3 cases depending on the value:\n * - undefined: all hooks from the array should be executed (post-order case)\n * - null: execute hooks only from the saved index until the end of the array (pre-order case, when\n * flushing the remaining hooks)\n * - number: execute hooks only from the saved index until that node index exclusive (pre-order\n * case, when executing select(number))\n */\nfunction callHooks(\n    currentView: LView, arr: HookData, initPhase: InitPhaseState,\n    currentNodeIndex: number|null|undefined): void {\n  ngDevMode &&\n      assertEqual(\n          isInCheckNoChangesMode(), false,\n          'Hooks should never be run when in check no changes mode.');\n  const startIndex = currentNodeIndex !== undefined ?\n      (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.IndexOfTheNextPreOrderHookMaskMask) :\n      0;\n  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;\n  const max = arr.length - 1;  // Stop the loop at length - 1, because we look for the hook at i + 1\n  let lastNodeIndexFound = 0;\n  for (let i = startIndex; i < max; i++) {\n    const hook = arr[i + 1] as number | (() => void);\n    if (typeof hook === 'number') {\n      lastNodeIndexFound = arr[i] as number;\n      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {\n        break;\n      }\n    } else {\n      const isInitHook = arr[i] < 0;\n      if (isInitHook)\n        currentView[PREORDER_HOOK_FLAGS] += PreOrderHookFlags.NumberOfInitHooksCalledIncrementer;\n      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {\n        callHook(currentView, initPhase, arr, i);\n        currentView[PREORDER_HOOK_FLAGS] =\n            (currentView[PREORDER_HOOK_FLAGS] & PreOrderHookFlags.NumberOfInitHooksCalledMask) + i +\n            2;\n      }\n      i++;\n    }\n  }\n}\n\n/**\n * Execute one hook against the current `LView`.\n *\n * @param currentView The current view\n * @param initPhaseState the current state of the init phase\n * @param arr The array in which the hooks are found\n * @param i The current index within the hook data array\n */\nfunction callHook(currentView: LView, initPhase: InitPhaseState, arr: HookData, i: number) {\n  const isInitHook = arr[i] < 0;\n  const hook = arr[i + 1] as () => void;\n  const directiveIndex = isInitHook ? -arr[i] : arr[i] as number;\n  const directive = currentView[directiveIndex];\n  if (isInitHook) {\n    const indexWithintInitPhase = currentView[FLAGS] >> LViewFlags.IndexWithinInitPhaseShift;\n    // The init phase state must be always checked here as it may have been recursively updated.\n    if (indexWithintInitPhase <\n            (currentView[PREORDER_HOOK_FLAGS] >> PreOrderHookFlags.NumberOfInitHooksCalledShift) &&\n        (currentView[FLAGS] & LViewFlags.InitPhaseStateMask) === initPhase) {\n      currentView[FLAGS] += LViewFlags.IndexWithinInitPhaseIncrementer;\n      profiler(ProfilerEvent.LifecycleHookStart, directive, hook);\n      try {\n        hook.call(directive);\n      } finally {\n        profiler(ProfilerEvent.LifecycleHookEnd, directive, hook);\n      }\n    }\n  } else {\n    profiler(ProfilerEvent.LifecycleHookStart, directive, hook);\n    try {\n      hook.call(directive);\n    } finally {\n      profiler(ProfilerEvent.LifecycleHookEnd, directive, hook);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../../di/interface/injector';\nimport {ProviderToken} from '../../di/provider_token';\nimport {assertDefined, assertEqual} from '../../util/assert';\n\nimport {TDirectiveHostNode} from './node';\nimport {LView, TData} from './view';\n\n/**\n * Offsets of the `NodeInjector` data structure in the expando.\n *\n * `NodeInjector` is stored in both `LView` as well as `TView.data`. All storage requires 9 words.\n * First 8 are reserved for bloom filter and the 9th is reserved for the associated `TNode` as well\n * as parent `NodeInjector` pointer. All indexes are starting with `index` and have an offset as\n * shown.\n *\n * `LView` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + PARENT: Index to the parent injector. See `RelativeInjectorLocation`\n *                 `const parent = lView[index + NodeInjectorOffset.PARENT]`\n * ```\n *\n * `TViewData` layout:\n * ```\n * index + 0: cumulative bloom filter\n * index + 1: cumulative bloom filter\n * index + 2: cumulative bloom filter\n * index + 3: cumulative bloom filter\n * index + 4: cumulative bloom filter\n * index + 5: cumulative bloom filter\n * index + 6: cumulative bloom filter\n * index + 7: cumulative bloom filter\n * index + 8: cumulative bloom filter\n * index + TNODE: TNode associated with this `NodeInjector`\n *                `const tNode = tView.data[index + NodeInjectorOffset.TNODE]`\n * ```\n */\nexport const enum NodeInjectorOffset {\n  TNODE = 8,\n  PARENT = 8,\n  BLOOM_SIZE = 8,\n  SIZE = 9,\n}\n\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n */\nexport interface RelativeInjectorLocation {\n  __brand__: 'RelativeInjectorLocationFlags';\n}\n\nexport const enum RelativeInjectorLocationFlags {\n  InjectorIndexMask = 0b111111111111111,\n  ViewOffsetShift = 16,\n  NO_PARENT = -1,\n}\n\nexport const NO_PARENT_INJECTOR: RelativeInjectorLocation = -1 as any;\n\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport class NodeInjectorFactory {\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl: null|(<T>(token: ProviderToken<T>, flags?: InjectFlags) => T);\n\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders: boolean;\n\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi?: Array<() => any>;\n\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```\n   * component:\n   *   providers: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProviders: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   providers: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders?: number;\n\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index?: number;\n\n  /**\n   * Because the same `multi` provider can be declared in `providers` and `viewProviders` it is\n   * possible for `viewProviders` to shadow the `providers`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```\n   * providers: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProviders: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProviders`\n   * `Factory` has a pointer to the shadowed `providers` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory?: NodeInjectorFactory|null;\n\n\n  constructor(\n      /**\n       * Factory to invoke in order to create a new instance.\n       */\n      public factory:\n          (this: NodeInjectorFactory, _: undefined,\n           /**\n            * array where injectables tokens are stored. This is used in\n            * case of an error reporting to produce friendlier errors.\n            */\n           tData: TData,\n           /**\n            * array where existing instances of injectables are stored. This is used in case\n            * of multi shadow is needed. See `multi` field documentation.\n            */\n           lView: LView,\n           /**\n            * The TNode of the same element injector.\n            */\n           tNode: TDirectiveHostNode) => any,\n      /**\n       * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n       */\n      isViewProvider: boolean,\n      injectImplementation: null|(<T>(token: ProviderToken<T>, flags?: InjectFlags) => T)) {\n    ngDevMode && assertDefined(factory, 'Factory not specified');\n    ngDevMode && assertEqual(typeof factory, 'function', 'Expected factory function.');\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\nexport function isFactory(obj: any): obj is NodeInjectorFactory {\n  return obj instanceof NodeInjectorFactory;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {KeyValueArray} from '../../util/array_utils';\nimport {TStylingRange} from '../interfaces/styling';\n\nimport {TIcu} from './i18n';\nimport {CssSelector} from './projection';\nimport {RNode} from './renderer_dom';\nimport {LView, TView} from './view';\n\n\n/**\n * TNodeType corresponds to the {@link TNode} `type` property.\n *\n * NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily\n * check if the `TNode` is of more than one type.\n *\n * `if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)`\n * can be written as:\n * `if (tNode.type & (TNodeType.Text | TNodeType.Element))`\n *\n * However any given `TNode` can only be of one type.\n */\nexport const enum TNodeType {\n  /**\n   * The TNode contains information about a DOM element aka {@link RText}.\n   */\n  Text = 0b1,\n\n  /**\n   * The TNode contains information about a DOM element aka {@link RElement}.\n   */\n  Element = 0b10,\n\n  /**\n   * The TNode contains information about an {@link LContainer} for embedded views.\n   */\n  Container = 0b100,\n\n  /**\n   * The TNode contains information about an `<ng-container>` element {@link RNode}.\n   */\n  ElementContainer = 0b1000,\n\n  /**\n   * The TNode contains information about an `<ng-content>` projection\n   */\n  Projection = 0b10000,\n\n  /**\n   * The TNode contains information about an ICU comment used in `i18n`.\n   */\n  Icu = 0b100000,\n\n  /**\n   * Special node type representing a placeholder for future `TNode` at this location.\n   *\n   * I18n translation blocks are created before the element nodes which they contain. (I18n blocks\n   * can span over many elements.) Because i18n `TNode`s (representing text) are created first they\n   * often may need to point to element `TNode`s which are not yet created. In such a case we create\n   * a `Placeholder` `TNode`. This allows the i18n to structurally link the `TNode`s together\n   * without knowing any information about the future nodes which will be at that location.\n   *\n   * On `firstCreatePass` When element instruction executes it will try to create a `TNode` at that\n   * location. Seeing a `Placeholder` `TNode` already there tells the system that it should reuse\n   * existing `TNode` (rather than create a new one) and just update the missing information.\n   */\n  Placeholder = 0b1000000,\n\n  // Combined Types These should never be used for `TNode.type` only as a useful way to check\n  // if `TNode.type` is one of several choices.\n\n  // See: https://github.com/microsoft/TypeScript/issues/35875 why we can't refer to existing enum.\n  AnyRNode = 0b11,        // Text | Element,\n  AnyContainer = 0b1100,  // Container | ElementContainer, // See:\n}\n\n/**\n * Converts `TNodeType` into human readable text.\n * Make sure this matches with `TNodeType`\n */\nexport function toTNodeTypeAsString(tNodeType: TNodeType): string {\n  let text = '';\n  (tNodeType & TNodeType.Text) && (text += '|Text');\n  (tNodeType & TNodeType.Element) && (text += '|Element');\n  (tNodeType & TNodeType.Container) && (text += '|Container');\n  (tNodeType & TNodeType.ElementContainer) && (text += '|ElementContainer');\n  (tNodeType & TNodeType.Projection) && (text += '|Projection');\n  (tNodeType & TNodeType.Icu) && (text += '|IcuContainer');\n  (tNodeType & TNodeType.Placeholder) && (text += '|Placeholder');\n  return text.length > 0 ? text.substring(1) : text;\n}\n\n/**\n * Corresponds to the TNode.flags property.\n */\nexport const enum TNodeFlags {\n  /** Bit #1 - This bit is set if the node is a host for any directive (including a component) */\n  isDirectiveHost = 0x1,\n\n  /** Bit #2 - This bit is set if the node has been projected */\n  isProjected = 0x2,\n\n  /** Bit #3 - This bit is set if any directive on this node has content queries */\n  hasContentQuery = 0x4,\n\n  /** Bit #4 - This bit is set if the node has any \"class\" inputs */\n  hasClassInput = 0x8,\n\n  /** Bit #5 - This bit is set if the node has any \"style\" inputs */\n  hasStyleInput = 0x10,\n\n  /** Bit #6 This bit is set if the node has been detached by i18n */\n  isDetached = 0x20,\n\n  /**\n   * Bit #7 - This bit is set if the node has directives with host bindings.\n   *\n   * This flags allows us to guard host-binding logic and invoke it only on nodes\n   * that actually have directives with host bindings.\n   */\n  hasHostBindings = 0x40,\n}\n\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\nexport const enum TNodeProviderIndexes {\n  /** The index of the first provider on this node is encoded on the least significant bits. */\n  ProvidersStartIndexMask = 0b00000000000011111111111111111111,\n\n  /**\n   * The count of view providers from the component on this node is\n   * encoded on the 20 most significant bits.\n   */\n  CptViewProvidersCountShift = 20,\n  CptViewProvidersCountShifter = 0b00000000000100000000000000000000,\n}\n\n/**\n * A set of marker values to be used in the attributes arrays. These markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport const enum AttributeMarker {\n  /**\n   * An implicit marker which indicates that the value in the array are of `attributeKey`,\n   * `attributeValue` format.\n   *\n   * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that\n   * it should not be present at runtime by the negative number.\n   */\n  ImplicitAttributes = -1,\n\n  /**\n   * Marker indicates that the following 3 values in the attributes array are:\n   * namespaceUri, attributeName, attributeValue\n   * in that order.\n   */\n  NamespaceURI = 0,\n\n  /**\n   * Signals class declaration.\n   *\n   * Each value following `Classes` designates a class name to include on the element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div class=\"foo bar baz\">...<d/vi>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n   * ```\n   */\n  Classes = 1,\n\n  /**\n   * Signals style declaration.\n   *\n   * Each pair of values following `Styles` designates a style name and value to include on the\n   * element.\n   * ## Example:\n   *\n   * Given:\n   * ```\n   * <div style=\"width:100px; height:200px; color:red\">...</div>\n   * ```\n   *\n   * the generated code is:\n   * ```\n   * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n   * ```\n   */\n  Styles = 2,\n\n  /**\n   * Signals that the following attribute names were extracted from input or output bindings.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n   * ```\n   */\n  Bindings = 3,\n\n  /**\n   * Signals that the following attribute names were hoisted from an inline-template declaration.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n   * ```\n   *\n   * the generated code for the `template()` instruction would include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n   * 'ngForTrackBy', 'let-value']\n   * ```\n   *\n   * while the generated code for the `element()` instruction inside the template function would\n   * include:\n   *\n   * ```\n   * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n   * ```\n   */\n  Template = 4,\n\n  /**\n   * Signals that the following attribute is `ngProjectAs` and its value is a parsed\n   * `CssSelector`.\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n   * ```\n   *\n   * the generated code for the `element()` instruction would include:\n   *\n   * ```\n   * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n   * ```\n   */\n  ProjectAs = 5,\n\n  /**\n   * Signals that the following attribute will be translated by runtime i18n\n   *\n   * For example, given the following HTML:\n   *\n   * ```\n   * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n   * ```\n   *\n   * the generated code is:\n   *\n   * ```\n   * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n   */\n  I18n = 6,\n}\n\n/**\n * A combination of:\n * - Attribute names and values.\n * - Special markers acting as flags to alter attributes processing.\n * - Parsed ngProjectAs selectors.\n */\nexport type TAttributes = (string|AttributeMarker|CssSelector)[];\n\n/**\n * Constants that are associated with a view. Includes:\n * - Attribute arrays.\n * - Local definition arrays.\n * - Translated messages (i18n).\n */\nexport type TConstants = (TAttributes|string)[];\n\n/**\n * Factory function that returns an array of consts. Consts can be represented as a function in\n * case any additional statements are required to define consts in the list. An example is i18n\n * where additional i18n calls are generated, which should be executed when consts are requested\n * for the first time.\n */\nexport type TConstantsFactory = () => TConstants;\n\n/**\n * TConstants type that describes how the `consts` field is generated on ComponentDef: it can be\n * either an array or a factory function that returns that array.\n */\nexport type TConstantsOrFactory = TConstants|TConstantsFactory;\n\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\nexport interface TNode {\n  /** The type of the TNode. See TNodeType. */\n  type: TNodeType;\n\n  /**\n   * Index of the TNode in TView.data and corresponding native element in LView.\n   *\n   * This is necessary to get from any TNode to its corresponding native element when\n   * traversing the node tree.\n   *\n   * If index is -1, this is a dynamically created container node or embedded view node.\n   */\n  index: number;\n\n  /**\n   * Insert before existing DOM node index.\n   *\n   * When DOM nodes are being inserted, normally they are being appended as they are created.\n   * Under i18n case, the translated text nodes are created ahead of time as part of the\n   * `ɵɵi18nStart` instruction which means that this `TNode` can't just be appended and instead\n   * needs to be inserted using `insertBeforeIndex` semantics.\n   *\n   * Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In\n   * such a case the value stores an array of text nodes to insert.\n   *\n   * Example:\n   * ```\n   * <div i18n>\n   *   Hello <span>World</span>!\n   * </div>\n   * ```\n   * In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text\n   * nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can't\n   * insert `World` because the `<span>` node has not yet been created. In such a case the\n   * `<span>` `TNode` will have an array which will direct the `<span>` to not only insert\n   * itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into\n   * `<span>` itself.\n   *\n   * Pseudo code:\n   * ```\n   *   if (insertBeforeIndex === null) {\n   *     // append as normal\n   *   } else if (Array.isArray(insertBeforeIndex)) {\n   *     // First insert current `TNode` at correct location\n   *     const currentNode = lView[this.index];\n   *     parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);\n   *     // Now append all of the children\n   *     for(let i=1; i<this.insertBeforeIndex; i++) {\n   *       currentNode.appendChild(lView[this.insertBeforeIndex[i]]);\n   *     }\n   *   } else {\n   *     parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\n   *   }\n   * ```\n   * - null: Append as normal using `parentNode.appendChild`\n   * - `number`: Append using\n   *      `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`\n   *\n   * *Initialization*\n   *\n   * Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not\n   * possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`\n   * has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`\n   * `TNode` at that location. See `TNodeType.Placeholder` for more information.\n   */\n  insertBeforeIndex: InsertBeforeIndex;\n\n  /**\n   * The index of the closest injector in this node's LView.\n   *\n   * If the index === -1, there is no injector on this node or any ancestor node in this view.\n   *\n   * If the index !== -1, it is the index of this node's injector OR the index of a parent\n   * injector in the same view. We pass the parent injector index down the node tree of a view so\n   * it's possible to find the parent injector without walking a potentially deep node tree.\n   * Injector indices are not set across view boundaries because there could be multiple component\n   * hosts.\n   *\n   * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n   * injector.\n   */\n  injectorIndex: number;\n\n  /** Stores starting index of the directives. */\n  directiveStart: number;\n\n  /**\n   * Stores final exclusive index of the directives.\n   *\n   * The area right behind the `directiveStart-directiveEnd` range is used to allocate the\n   * `HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set\n   * `LFrame.bindingRootIndex` before `HostBindingFunction` is executed.\n   */\n  directiveEnd: number;\n\n  /**\n   * Offset from the `directiveStart` at which the component (one at most) of the node is stored.\n   * Set to -1 if no components have been applied to the node. Component index can be found using\n   * `directiveStart + componentOffset`.\n   */\n  componentOffset: number;\n\n  /**\n   * Stores the last directive which had a styling instruction.\n   *\n   * Initial value of this is `-1` which means that no `hostBindings` styling instruction has\n   * executed. As `hostBindings` instructions execute they set the value to the index of the\n   * `DirectiveDef` which contained the last `hostBindings` styling instruction.\n   *\n   * Valid values are:\n   * - `-1` No `hostBindings` instruction has executed.\n   * - `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of\n   * the last styling instruction which executed in the `hostBindings`.\n   *\n   * This data is needed so that styling instructions know which static styling data needs to be\n   * collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data\n   * since last styling instruction.\n   */\n  directiveStylingLast: number;\n\n  /**\n   * Stores indexes of property bindings. This field is only set in the ngDevMode and holds\n   * indexes of property bindings so TestBed can get bound property metadata for a given node.\n   */\n  propertyBindings: number[]|null;\n\n  /**\n   * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n   * etc.\n   */\n  flags: TNodeFlags;\n\n  /**\n   * This number stores two values using its bits:\n   *\n   * - the index of the first provider on that node (first 16 bits)\n   * - the count of view providers from the component on this node (last 16 bits)\n   */\n  // TODO(misko): break this into actual vars.\n  providerIndexes: TNodeProviderIndexes;\n\n  /**\n   * The value name associated with this node.\n   * if type:\n   *   `TNodeType.Text`: text value\n   *   `TNodeType.Element`: tag name\n   *   `TNodeType.ICUContainer`: `TIcu`\n   */\n  value: any;\n\n  /**\n   * Attributes associated with an element. We need to store attributes to support various\n   * use-cases (attribute injection, content projection with selectors, directives matching).\n   * Attributes are stored statically because reading them from the DOM would be way too slow for\n   * content projection and queries.\n   *\n   * Since attrs will always be calculated first, they will never need to be marked undefined by\n   * other instructions.\n   *\n   * For regular attributes a name of an attribute and its value alternate in the array.\n   * e.g. ['role', 'checkbox']\n   * This array can contain flags that will indicate \"special attributes\" (attributes with\n   * namespaces, attributes extracted from bindings and outputs).\n   */\n  attrs: TAttributes|null;\n\n  /**\n   * Same as `TNode.attrs` but contains merged data across all directive host bindings.\n   *\n   * We need to keep `attrs` as unmerged so that it can be used for attribute selectors.\n   * We merge attrs here so that it can be used in a performant way for initial rendering.\n   *\n   * The `attrs` are merged in first pass in following order:\n   * - Component's `hostAttrs`\n   * - Directives' `hostAttrs`\n   * - Template `TNode.attrs` associated with the current `TNode`.\n   */\n  mergedAttrs: TAttributes|null;\n\n  /**\n   * A set of local names under which a given element is exported in a template and\n   * visible to queries. An entry in this array can be created for different reasons:\n   * - an element itself is referenced, ex.: `<div #foo>`\n   * - a component is referenced, ex.: `<my-cmpt #foo>`\n   * - a directive is referenced, ex.: `<my-cmpt #foo=\"directiveExportAs\">`.\n   *\n   * A given element might have different local names and those names can be associated\n   * with a directive. We store local names at even indexes while odd indexes are reserved\n   * for directive index in a view (or `-1` if there is no associated directive).\n   *\n   * Some examples:\n   * - `<div #foo>` => `[\"foo\", -1]`\n   * - `<my-cmpt #foo>` => `[\"foo\", myCmptIdx]`\n   * - `<my-cmpt #foo #bar=\"directiveExportAs\">` => `[\"foo\", myCmptIdx, \"bar\", directiveIdx]`\n   * - `<div #foo #bar=\"directiveExportAs\">` => `[\"foo\", -1, \"bar\", directiveIdx]`\n   */\n  localNames: (string|number)[]|null;\n\n  /** Information about input properties that need to be set once from attribute data. */\n  initialInputs: InitialInputData|null|undefined;\n\n  /**\n   * Input data for all directives on this node. `null` means that there are no directives with\n   * inputs on this node.\n   */\n  inputs: PropertyAliases|null;\n\n  /**\n   * Output data for all directives on this node. `null` means that there are no directives with\n   * outputs on this node.\n   */\n  outputs: PropertyAliases|null;\n\n  /**\n   * The TView attached to this node.\n   *\n   * If this TNode corresponds to an LContainer with a template (e.g. structural\n   * directive), the template's TView will be stored here.\n   *\n   * If this TNode corresponds to an element, tView will be `null`.\n   */\n  tView: TView|null;\n\n  /**\n   * The next sibling node. Necessary so we can propagate through the root nodes of a view\n   * to insert them or remove them from the DOM.\n   */\n  next: TNode|null;\n\n  /**\n   * The previous sibling node.\n   * This simplifies operations when we need a pointer to the previous node.\n   */\n  prev: TNode|null;\n\n  /**\n   * The next projected sibling. Since in Angular content projection works on the node-by-node\n   * basis the act of projecting nodes might change nodes relationship at the insertion point\n   * (target view). At the same time we need to keep initial relationship between nodes as\n   * expressed in content view.\n   */\n  projectionNext: TNode|null;\n\n  /**\n   * First child of the current node.\n   *\n   * For component nodes, the child will always be a ContentChild (in same view).\n   * For embedded view nodes, the child will be in their child view.\n   */\n  child: TNode|null;\n\n  /**\n   * Parent node (in the same view only).\n   *\n   * We need a reference to a node's parent so we can append the node to its parent's native\n   * element at the appropriate time.\n   *\n   * If the parent would be in a different view (e.g. component host), this property will be null.\n   * It's important that we don't try to cross component boundaries when retrieving the parent\n   * because the parent will change (e.g. index, attrs) depending on where the component was\n   * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n   * LView.node instead (which will be instance-specific).\n   *\n   * If this is an inline view node (V), the parent will be its container.\n   */\n  parent: TElementNode|TContainerNode|null;\n\n  /**\n   * List of projected TNodes for a given component host element OR index into the said nodes.\n   *\n   * For easier discussion assume this example:\n   * `<parent>`'s view definition:\n   * ```\n   * <child id=\"c1\">content1</child>\n   * <child id=\"c2\"><span>content2</span></child>\n   * ```\n   * `<child>`'s view definition:\n   * ```\n   * <ng-content id=\"cont1\"></ng-content>\n   * ```\n   *\n   * If `Array.isArray(projection)` then `TNode` is a host element:\n   * - `projection` stores the content nodes which are to be projected.\n   *    - The nodes represent categories defined by the selector: For example:\n   *      `<ng-content/><ng-content select=\"abc\"/>` would represent the heads for `<ng-content/>`\n   *      and `<ng-content select=\"abc\"/>` respectively.\n   *    - The nodes we store in `projection` are heads only, we used `.next` to get their\n   *      siblings.\n   *    - The nodes `.next` is sorted/rewritten as part of the projection setup.\n   *    - `projection` size is equal to the number of projections `<ng-content>`. The size of\n   *      `c1` will be `1` because `<child>` has only one `<ng-content>`.\n   * - we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)\n   *   because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and\n   * as a result have different set of nodes to project.\n   * - without `projection` it would be difficult to efficiently traverse nodes to be projected.\n   *\n   * If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:\n   * - `projection` is an index of the host's `projection`Nodes.\n   *   - This would return the first head node to project:\n   *     `getHost(currentTNode).projection[currentTNode.projection]`.\n   * - When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case\n   *   the process is recursive in nature.\n   *\n   * If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as\n   * projectable nodes during dynamic component creation.\n   */\n  projection: (TNode|RNode[])[]|number|null;\n\n  /**\n   * A collection of all `style` static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial `style`s on an element (e.g. `<div style=\"width:200px;\">`)\n   * - There are one or more initial `style`s on a directive/component host\n   *   (e.g. `@Directive({host: {style: \"width:200px;\" } }`)\n   */\n  styles: string|null;\n\n\n  /**\n   * A collection of all `style` static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial `style`s on an element\n   * (e.g. `<div style=\"width:200px;\">`)\n   * Must be stored separately from `tNode.styles` to facilitate setting directive\n   * inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,\n   * we would feed host styles back into directives as \"inputs\". If we used `tNode.attrs`, we\n   * would have to concatenate the attributes on every template pass. Instead, we process once on\n   * first create pass and store here.\n   */\n  stylesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `styles`.\n   *\n   * When there are styling instructions than each instruction stores the static styling\n   * which is of lower priority than itself. This means that there may be a higher priority\n   * styling than the instruction.\n   *\n   * Imagine:\n   * ```\n   * <div style=\"color: highest;\" my-dir>\n   *\n   * @Directive({\n   *   host: {\n   *     style: 'color: lowest; ',\n   *     '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);\n   *   }\n   * })\n   * ```\n   *\n   * In the above case:\n   * - `color: lowest` is stored with `ɵɵstyleProp('color', ctx.exp);` instruction\n   * -  `color: highest` is the residual and is stored here.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `styles` is `null`\n   * - `KeyValueArray`: parsed version of `styles`.\n   */\n  residualStyles: KeyValueArray<any>|undefined|null;\n\n  /**\n   * A collection of all class static values for an element (including from host).\n   *\n   * This field will be populated if and when:\n   *\n   * - There are one or more initial classes on an element (e.g. `<div class=\"one two three\">`)\n   * - There are one or more initial classes on an directive/component host\n   *   (e.g. `@Directive({host: {class: \"SOME_CLASS\" } }`)\n   */\n  classes: string|null;\n\n  /**\n   * A collection of all class static values for an element excluding host sources.\n   *\n   * Populated when there are one or more initial classes on an element\n   * (e.g. `<div class=\"SOME_CLASS\">`)\n   * Must be stored separately from `tNode.classes` to facilitate setting directive\n   * inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed\n   * inputs, we would feed host classes back into directives as \"inputs\". If we used\n   * `tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,\n   * we process once on first create pass and store here.\n   */\n  classesWithoutHost: string|null;\n\n  /**\n   * A `KeyValueArray` version of residual `classes`.\n   *\n   * Same as `TNode.residualStyles` but for classes.\n   *\n   * - `undefined': not initialized.\n   * - `null`: initialized but `classes` is `null`\n   * - `KeyValueArray`: parsed version of `classes`.\n   */\n  residualClasses: KeyValueArray<any>|undefined|null;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the class bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"class\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  classBindings: TStylingRange;\n\n  /**\n   * Stores the head/tail index of the class bindings.\n   *\n   * - If no bindings, the head and tail will both be 0.\n   * - If there are template bindings, stores the head/tail of the style bindings in the template.\n   * - If no template bindings but there are host bindings, the head value will point to the last\n   *   host binding for \"style\" (not the head of the linked list), tail will be 0.\n   *\n   * See: `style_binding_list.ts` for details.\n   *\n   * This is used by `insertTStylingBinding` to know where the next styling binding should be\n   * inserted so that they can be sorted in priority order.\n   */\n  styleBindings: TStylingRange;\n}\n\n/**\n * See `TNode.insertBeforeIndex`\n */\nexport type InsertBeforeIndex = null|number|number[];\n\n/** Static data for an element  */\nexport interface TElementNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: TElementNode|TTextNode|TElementContainerNode|TContainerNode|TProjectionNode|null;\n  /**\n   * Element nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using viewData[HOST_NODE]).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tView: null;\n\n  /**\n   * If this is a component TNode with projection, this will be an array of projected\n   * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node\n   * or a component without projection, it will be null.\n   */\n  projection: (TNode|RNode[])[]|null;\n\n  /**\n   * Stores TagName\n   */\n  value: string;\n}\n\n/** Static data for a text node */\nexport interface TTextNode extends TNode {\n  /** Index in the data[] array */\n  index: number;\n  child: null;\n  /**\n   * Text nodes will have parents unless they are the first node of a component or\n   * embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tView: null;\n  projection: null;\n}\n\n/** Static data for an LContainer */\nexport interface TContainerNode extends TNode {\n  /**\n   * Index in the data[] array.\n   *\n   * If it's -1, this is a dynamically created container node that isn't stored in\n   * data[] (e.g. when you inject ViewContainerRef) .\n   */\n  index: number;\n  child: null;\n\n  /**\n   * Container nodes will have parents unless:\n   *\n   * - They are the first node of a component or embedded view\n   * - They are dynamically created\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tView: TView|null;\n  projection: null;\n  value: null;\n}\n\n/** Static data for an <ng-container> */\nexport interface TElementContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: TElementNode|TTextNode|TContainerNode|TElementContainerNode|TProjectionNode|null;\n  parent: TElementNode|TElementContainerNode|null;\n  tView: null;\n  projection: null;\n}\n\n/** Static data for an ICU expression */\nexport interface TIcuContainerNode extends TNode {\n  /** Index in the LView[] array. */\n  index: number;\n  child: null;\n  parent: TElementNode|TElementContainerNode|null;\n  tView: null;\n  projection: null;\n  value: TIcu;\n}\n\n/** Static data for an LProjectionNode  */\nexport interface TProjectionNode extends TNode {\n  /** Index in the data[] array */\n  child: null;\n  /**\n   * Projection nodes will have parents unless they are the first node of a component\n   * or embedded view (which means their parent is in a different view and must be\n   * retrieved using LView.node).\n   */\n  parent: TElementNode|TElementContainerNode|null;\n  tView: null;\n\n  /** Index of the projection node. (See TNode.projection for more info.) */\n  projection: number;\n  value: null;\n}\n\n/**\n * A union type representing all TNode types that can host a directive.\n */\nexport type TDirectiveHostNode = TElementNode|TContainerNode|TElementContainerNode;\n\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\nexport type PropertyAliases = {\n  // This uses an object map because using the Map type would be too slow\n  [key: string]: PropertyAliasValue\n};\n\n/**\n * Store the runtime input or output names for all the directives.\n *\n * i+0: directive instance index\n * i+1: privateName\n *\n * e.g. [0, 'change-minified']\n */\nexport type PropertyAliasValue = (number|string)[];\n\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'minified-input', 'button']]\n */\nexport type InitialInputData = (InitialInputs|null)[];\n\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * e.g. ['role-min', 'minified-input', 'button']\n */\nexport type InitialInputs = string[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\n */\nexport type TNodeWithLocalRefs = TContainerNode|TElementNode|TElementContainerNode;\n\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;\n * - `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\n */\nexport type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any;\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `class` binding.\n *\n * ```\n * <div my-dir [class]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasClassInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasClassInput) !== 0;\n}\n\n/**\n * Returns `true` if the `TNode` has a directive which has `@Input()` for `style` binding.\n *\n * ```\n * <div my-dir [style]=\"exp\"></div>\n * ```\n * and\n * ```\n * @Directive({\n * })\n * class MyDirective {\n *   @Input()\n *   class: string;\n * }\n * ```\n *\n * In the above case it is necessary to write the reconciled styling information into the\n * directive's input.\n *\n * @param tNode\n */\nexport function hasStyleInput(tNode: TNode) {\n  return (tNode.flags & TNodeFlags.hasStyleInput) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, throwError} from '../util/assert';\nimport {TNode, TNodeType, toTNodeTypeAsString} from './interfaces/node';\n\nexport function assertTNodeType(\n    tNode: TNode|null, expectedTypes: TNodeType, message?: string): void {\n  assertDefined(tNode, 'should be called with a TNode');\n  if ((tNode.type & expectedTypes) === 0) {\n    throwError(\n        message ||\n        `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${\n            toTNodeTypeAsString(tNode.type)}.`);\n  }\n}\n\nexport function assertPureTNodeType(type: TNodeType) {\n  if (!(type === TNodeType.Element ||           //\n        type === TNodeType.Text ||              //\n        type === TNodeType.Container ||         //\n        type === TNodeType.ElementContainer ||  //\n        type === TNodeType.Icu ||               //\n        type === TNodeType.Projection ||        //\n        type === TNodeType.Placeholder)) {\n    throwError(`Expected TNodeType to have only a single type selected, but got ${\n        toTNodeTypeAsString(type)}.`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CharCode} from '../../util/char_code';\nimport {AttributeMarker, TAttributes} from '../interfaces/node';\nimport {CssSelector} from '../interfaces/projection';\nimport {Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\n\n\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n * @param renderer The renderer to be used\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nexport function setUpAttributes(renderer: Renderer, native: RElement, attrs: TAttributes): number {\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== AttributeMarker.NamespaceURI) {\n        break;\n      }\n\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n\n      const namespaceURI = attrs[i++] as string;\n      const attrName = attrs[i++] as string;\n      const attrVal = attrs[i++] as string;\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      renderer.setAttribute(native, attrName, attrVal, namespaceURI);\n    } else {\n      // attrName is string;\n      const attrName = value as string;\n      const attrVal = attrs[++i];\n      // Standard attributes\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      if (isAnimationProp(attrName)) {\n        renderer.setProperty(native, attrName, attrVal);\n      } else {\n        renderer.setAttribute(native, attrName, attrVal as string);\n      }\n      i++;\n    }\n  }\n\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n\n/**\n * Test whether the given value is a marker that indicates that the following\n * attribute values in a `TAttributes` array are only the names of attributes,\n * and not name-value pairs.\n * @param marker The attribute marker to test.\n * @returns true if the marker is a \"name-only\" marker (e.g. `Bindings`, `Template` or `I18n`).\n */\nexport function isNameOnlyAttributeMarker(marker: string|AttributeMarker|CssSelector) {\n  return marker === AttributeMarker.Bindings || marker === AttributeMarker.Template ||\n      marker === AttributeMarker.I18n;\n}\n\nexport function isAnimationProp(name: string): boolean {\n  // Perf note: accessing charCodeAt to check for the first character of a string is faster as\n  // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that\n  // charCodeAt doesn't allocate memory to return a substring.\n  return name.charCodeAt(0) === CharCode.AT_SIGN;\n}\n\n/**\n * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.\n *\n * This merge function keeps the order of attrs same.\n *\n * @param dst Location of where the merged `TAttributes` should end up.\n * @param src `TAttributes` which should be appended to `dst`\n */\nexport function mergeHostAttrs(dst: TAttributes|null, src: TAttributes|null): TAttributes|null {\n  if (src === null || src.length === 0) {\n    // do nothing\n  } else if (dst === null || dst.length === 0) {\n    // We have source, but dst is empty, just make a copy.\n    dst = src.slice();\n  } else {\n    let srcMarker: AttributeMarker = AttributeMarker.ImplicitAttributes;\n    for (let i = 0; i < src.length; i++) {\n      const item = src[i];\n      if (typeof item === 'number') {\n        srcMarker = item;\n      } else {\n        if (srcMarker === AttributeMarker.NamespaceURI) {\n          // Case where we need to consume `key1`, `key2`, `value` items.\n        } else if (\n            srcMarker === AttributeMarker.ImplicitAttributes ||\n            srcMarker === AttributeMarker.Styles) {\n          // Case where we have to consume `key1` and `value` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, src[++i] as string);\n        } else {\n          // Case where we have to consume `key1` only.\n          mergeHostAttribute(dst, srcMarker, item as string, null, null);\n        }\n      }\n    }\n  }\n  return dst;\n}\n\n/**\n * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.\n *\n * @param dst `TAttributes` to append to.\n * @param marker Region where the `key`/`value` should be added.\n * @param key1 Key to add to `TAttributes`\n * @param key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)\n * @param value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.\n */\nexport function mergeHostAttribute(\n    dst: TAttributes, marker: AttributeMarker, key1: string, key2: string|null,\n    value: string|null): void {\n  let i = 0;\n  // Assume that new markers will be inserted at the end.\n  let markerInsertPosition = dst.length;\n  // scan until correct type.\n  if (marker === AttributeMarker.ImplicitAttributes) {\n    markerInsertPosition = -1;\n  } else {\n    while (i < dst.length) {\n      const dstValue = dst[i++];\n      if (typeof dstValue === 'number') {\n        if (dstValue === marker) {\n          markerInsertPosition = -1;\n          break;\n        } else if (dstValue > marker) {\n          // We need to save this as we want the markers to be inserted in specific order.\n          markerInsertPosition = i - 1;\n          break;\n        }\n      }\n    }\n  }\n\n  // search until you find place of insertion\n  while (i < dst.length) {\n    const item = dst[i];\n    if (typeof item === 'number') {\n      // since `i` started as the index after the marker, we did not find it if we are at the next\n      // marker\n      break;\n    } else if (item === key1) {\n      // We already have same token\n      if (key2 === null) {\n        if (value !== null) {\n          dst[i + 1] = value;\n        }\n        return;\n      } else if (key2 === dst[i + 1]) {\n        dst[i + 2] = value!;\n        return;\n      }\n    }\n    // Increment counter.\n    i++;\n    if (key2 !== null) i++;\n    if (value !== null) i++;\n  }\n\n  // insert at location.\n  if (markerInsertPosition !== -1) {\n    dst.splice(markerInsertPosition, 0, marker);\n    i = markerInsertPosition + 1;\n  }\n  dst.splice(i++, 0, key1);\n  if (key2 !== null) {\n    dst.splice(i++, 0, key2);\n  }\n  if (value !== null) {\n    dst.splice(i++, 0, value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertGreaterThan, assertNotEqual, assertNumber} from '../../util/assert';\nimport {NO_PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags} from '../interfaces/injector';\nimport {DECLARATION_VIEW, HEADER_OFFSET, LView} from '../interfaces/view';\n\n\n/// Parent Injector Utils ///////////////////////////////////////////////////////////////\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  ngDevMode && assertNumber(parentLocation, 'Number expected');\n  ngDevMode && assertNotEqual(parentLocation as any, -1, 'Not a valid state.');\n  const parentInjectorIndex =\n      (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n  ngDevMode &&\n      assertGreaterThan(\n          parentInjectorIndex, HEADER_OFFSET,\n          'Parent injector must be pointing past HEADER_OFFSET.');\n  return (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW]!;\n    viewOffset--;\n  }\n  return parentView;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isForwardRef, resolveForwardRef} from '../di/forward_ref';\nimport {injectRootLimpMode, setInjectImplementation} from '../di/inject_switch';\nimport {Injector} from '../di/injector';\nimport {convertToBitFlags} from '../di/injector_compatibility';\nimport {InjectorMarkers} from '../di/injector_marker';\nimport {InjectFlags, InjectOptions} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {Type} from '../interface/type';\nimport {assertDefined, assertEqual, assertIndexInRange} from '../util/assert';\nimport {noSideEffects} from '../util/closure';\n\nimport {assertDirectiveDef, assertNodeInjector, assertTNodeForLView} from './assert';\nimport {FactoryFn, getFactoryDef} from './definition_factory';\nimport {throwCyclicDependencyError, throwProviderNotFoundError} from './errors_di';\nimport {NG_ELEMENT_ID, NG_FACTORY_DEF} from './fields';\nimport {registerPreOrderHooks} from './hooks';\nimport {DirectiveDef} from './interfaces/definition';\nimport {isFactory, NO_PARENT_INJECTOR, NodeInjectorFactory, NodeInjectorOffset, RelativeInjectorLocation, RelativeInjectorLocationFlags} from './interfaces/injector';\nimport {AttributeMarker, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNode, TNodeProviderIndexes, TNodeType} from './interfaces/node';\nimport {isComponentDef, isComponentHost} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, EMBEDDED_VIEW_INJECTOR, FLAGS, INJECTOR, LView, LViewFlags, T_HOST, TData, TVIEW, TView, TViewType} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {enterDI, getCurrentTNode, getLView, leaveDI} from './state';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from './util/injector_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\n\nexport function setIncludeViewProviders(v: boolean): boolean {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n\n/**\n * The number of bits that is represented by a single bloom bucket. JS bit operations are 32 bits,\n * so each bucket represents 32 distinct tokens which accounts for log2(32) = 5 bits of a bloom hash\n * number.\n */\nconst BLOOM_BUCKET_BITS = 5;\n\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n\n/** Value used when something wasn't found by an injector. */\nconst NOT_FOUND = {};\n\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(\n    injectorIndex: number, tView: TView, type: ProviderToken<any>|string): void {\n  ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');\n  let id: number|undefined;\n  if (typeof type === 'string') {\n    id = type.charCodeAt(0) || 0;\n  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {\n    id = (type as any)[NG_ELEMENT_ID];\n  }\n\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = (type as any)[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomHash = id & BLOOM_MASK;\n\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `tData` represents `BLOOM_BUCKET_BITS` number of bits of `bloomHash`.\n  // Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset that the mask\n  // should be written to.\n  (tView.data as number[])[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;\n}\n\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param lView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(\n    tNode: TElementNode|TContainerNode|TElementContainerNode, lView: LView): number {\n  const existingInjectorIndex = getInjectorIndex(tNode, lView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = lView[TVIEW];\n  if (tView.firstCreatePass) {\n    tNode.injectorIndex = lView.length;\n    insertBloom(tView.data, tNode);  // foundation for node bloom\n    insertBloom(lView, null);        // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, lView);\n  const injectorIndex = tNode.injectorIndex;\n\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentIndex = getParentInjectorIndex(parentLoc);\n    const parentLView = getParentInjectorView(parentLoc, lView);\n    const parentData = parentLView[TVIEW].data as any;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < NodeInjectorOffset.BLOOM_SIZE; i++) {\n      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  lView[injectorIndex + NodeInjectorOffset.PARENT] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr: any[], footer: TNode|null): void {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\n\nexport function getInjectorIndex(tNode: TNode, lView: LView): number {\n  if (tNode.injectorIndex === -1 ||\n      // If the injector index is the same as its parent's injector index, then the index has been\n      // copied down from the parent node. No injector has been created yet on this node.\n      (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n      // After the first template pass, the injector index might exist but the parent values\n      // might not have been calculated yet for this instance\n      lView[tNode.injectorIndex + NodeInjectorOffset.PARENT] === null) {\n    return -1;\n  } else {\n    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);\n    return tNode.injectorIndex;\n  }\n}\n\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * @returns Returns a number that is the combination of the number of LViews that we have to go up\n * to find the LView containing the parent inject AND the index of the injector within that LView.\n */\nexport function getParentInjectorLocation(tNode: TNode, lView: LView): RelativeInjectorLocation {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    // If we have a parent `TNode` and there is an injector associated with it we are done, because\n    // the parent injector is within the current `LView`.\n    return tNode.parent.injectorIndex as any;  // ViewOffset is 0\n  }\n\n  // When parent injector location is computed it may be outside of the current view. (ie it could\n  // be pointing to a declared parent location). This variable stores number of declaration parents\n  // we need to walk up in order to find the parent injector location.\n  let declarationViewOffset = 0;\n  let parentTNode: TNode|null = null;\n  let lViewCursor: LView|null = lView;\n\n  // The parent injector is not in the current `LView`. We will have to walk the declared parent\n  // `LView` hierarchy and look for it. If we walk of the top, that means that there is no parent\n  // `NodeInjector`.\n  while (lViewCursor !== null) {\n    parentTNode = getTNodeFromLView(lViewCursor);\n\n    if (parentTNode === null) {\n      // If we have no parent, than we are done.\n      return NO_PARENT_INJECTOR;\n    }\n\n    ngDevMode && parentTNode && assertTNodeForLView(parentTNode!, lViewCursor[DECLARATION_VIEW]!);\n    // Every iteration of the loop requires that we go to the declared parent.\n    declarationViewOffset++;\n    lViewCursor = lViewCursor[DECLARATION_VIEW];\n\n    if (parentTNode.injectorIndex !== -1) {\n      // We found a NodeInjector which points to something.\n      return (parentTNode.injectorIndex |\n              (declarationViewOffset << RelativeInjectorLocationFlags.ViewOffsetShift)) as any;\n    }\n  }\n  return NO_PARENT_INJECTOR;\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(\n    injectorIndex: number, tView: TView, token: ProviderToken<any>): void {\n  bloomAdd(injectorIndex, tView, token);\n}\n\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ɵcmp = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string|null {\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  if (attrNameToInject === 'class') {\n    return tNode.classes;\n  }\n  if (attrNameToInject === 'style') {\n    return tNode.styles;\n  }\n\n  const attrs = tNode.attrs;\n  if (attrs) {\n    const attrsLength = attrs.length;\n    let i = 0;\n    while (i < attrsLength) {\n      const value = attrs[i];\n\n      // If we hit a `Bindings` or `Template` marker then we are done.\n      if (isNameOnlyAttributeMarker(value)) break;\n\n      // Skip namespaced attributes\n      if (value === AttributeMarker.NamespaceURI) {\n        // we skip the next two values\n        // as namespaced attributes looks like\n        // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',\n        // 'existValue', ...]\n        i = i + 2;\n      } else if (typeof value === 'number') {\n        // Skip to the first value of the marked attribute.\n        i++;\n        while (i < attrsLength && typeof attrs[i] === 'string') {\n          i++;\n        }\n      } else if (value === attrNameToInject) {\n        return attrs[i + 1] as string;\n      } else {\n        i = i + 2;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction notFoundValueOrThrow<T>(\n    notFoundValue: T|null, token: ProviderToken<T>, flags: InjectFlags): T|null {\n  if ((flags & InjectFlags.Optional) || notFoundValue !== undefined) {\n    return notFoundValue;\n  } else {\n    throwProviderNotFoundError(token, 'NodeInjector');\n  }\n}\n\n/**\n * Returns the value associated to the given token from the ModuleInjector or throws exception\n *\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector or throws an exception\n */\nfunction lookupTokenUsingModuleInjector<T>(\n    lView: LView, token: ProviderToken<T>, flags: InjectFlags, notFoundValue?: any): T|null {\n  if ((flags & InjectFlags.Optional) && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    // switch to `injectInjectorOnly` implementation for module injector, since module injector\n    // should not have access to Component/Directive DI scope (that may happen through\n    // `directiveInject` implementation)\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      if (moduleInjector) {\n        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n      } else {\n        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n      }\n    } finally {\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n  return notFoundValueOrThrow<T>(notFoundValue, token, flags);\n}\n\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable<T>(\n    tNode: TDirectiveHostNode|null, lView: LView, token: ProviderToken<T>,\n    flags: InjectFlags = InjectFlags.Default, notFoundValue?: any): T|null {\n  if (tNode !== null) {\n    // If the view or any of its ancestors have an embedded\n    // view injector, we have to look it up there first.\n    if (lView[FLAGS] & LViewFlags.HasEmbeddedViewInjector) {\n      const embeddedInjectorValue =\n          lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);\n      if (embeddedInjectorValue !== NOT_FOUND) {\n        return embeddedInjectorValue;\n      }\n    }\n\n    // Otherwise try the node injector.\n    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);\n    if (value !== NOT_FOUND) {\n      return value;\n    }\n  }\n\n  // Finally, fall back to the module injector.\n  return lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n}\n\n/**\n * Returns the value associated to the given token from the node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingNodeInjector<T>(\n    tNode: TDirectiveHostNode, lView: LView, token: ProviderToken<T>, flags: InjectFlags,\n    notFoundValue?: any) {\n  const bloomHash = bloomHashBitOrFactory(token);\n  // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n  // so just call the factory function to create it.\n  if (typeof bloomHash === 'function') {\n    if (!enterDI(lView, tNode, flags)) {\n      // Failed to enter DI, try module injector instead. If a token is injected with the @Host\n      // flag, the module injector is not searched for that token in Ivy.\n      return (flags & InjectFlags.Host) ?\n          notFoundValueOrThrow<T>(notFoundValue, token, flags) :\n          lookupTokenUsingModuleInjector<T>(lView, token, flags, notFoundValue);\n    }\n    try {\n      const value = bloomHash(flags);\n      if (value == null && !(flags & InjectFlags.Optional)) {\n        throwProviderNotFoundError(token);\n      } else {\n        return value;\n      }\n    } finally {\n      leaveDI();\n    }\n  } else if (typeof bloomHash === 'number') {\n    // A reference to the previous injector TView that was found while climbing the element\n    // injector tree. This is used to know if viewProviders can be accessed on the current\n    // injector.\n    let previousTView: TView|null = null;\n    let injectorIndex = getInjectorIndex(tNode, lView);\n    let parentLocation: RelativeInjectorLocation = NO_PARENT_INJECTOR;\n    let hostTElementNode: TNode|null =\n        flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;\n\n    // If we should skip this injector, or if there is no injector on this node, start by\n    // searching the parent injector.\n    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                                              lView[injectorIndex + NodeInjectorOffset.PARENT];\n\n      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {\n        injectorIndex = -1;\n      } else {\n        previousTView = lView[TVIEW];\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      }\n    }\n\n    // Traverse up the injector tree until we find a potential match or until we know there\n    // *isn't* a match.\n    while (injectorIndex !== -1) {\n      ngDevMode && assertNodeInjector(lView, injectorIndex);\n\n      // Check the current injector. If it matches, see if it contains token.\n      const tView = lView[TVIEW];\n      ngDevMode &&\n          assertTNodeForLView(tView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode, lView);\n      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n        // At this point, we have an injector which *may* contain the token, so we step through\n        // the providers and directives associated with the injector's corresponding node to get\n        // the instance.\n        const instance: T|{}|null = searchTokensOnInjector<T>(\n            injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n        if (instance !== NOT_FOUND) {\n          return instance;\n        }\n      }\n      parentLocation = lView[injectorIndex + NodeInjectorOffset.PARENT];\n      if (parentLocation !== NO_PARENT_INJECTOR &&\n          shouldSearchParent(\n              flags,\n              lView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] === hostTElementNode) &&\n          bloomHasToken(bloomHash, injectorIndex, lView)) {\n        // The def wasn't found anywhere on this node, so it was a false positive.\n        // Traverse up the tree and continue searching.\n        previousTView = tView;\n        injectorIndex = getParentInjectorIndex(parentLocation);\n        lView = getParentInjectorView(parentLocation, lView);\n      } else {\n        // If we should not search parent OR If the ancestor bloom filter value does not have the\n        // bit corresponding to the directive we can give up on traversing up to find the specific\n        // injector.\n        injectorIndex = -1;\n      }\n    }\n  }\n\n  return notFoundValue;\n}\n\nfunction searchTokensOnInjector<T>(\n    injectorIndex: number, lView: LView, token: ProviderToken<T>, previousTView: TView|null,\n    flags: InjectFlags, hostTElementNode: TNode|null) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + NodeInjectorOffset.TNODE] as TNode;\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibilities\n  const canAccessViewProviders = previousTView == null ?\n      // 1) This is the first invocation `previousTView == null` which means that we are at the\n      // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n      // to look into the ViewProviders is if:\n      // - we are on a component\n      // - AND the injector set `includeViewProviders` to true (implying that the token can see\n      // ViewProviders because it is the Component or a Service which itself was declared in\n      // ViewProviders)\n      (isComponentHost(tNode) && includeViewProviders) :\n      // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n      // In such a case we are only allowed to look into the ViewProviders if:\n      // - We just crossed from child View to Parent View `previousTView != currentTView`\n      // - AND the parent TNode is an Element.\n      // This means that we just came from the Component's View and therefore are allowed to see\n      // into the ViewProviders.\n      (previousTView != currentTView && ((tNode.type & TNodeType.AnyRNode) !== 0));\n\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n\n  const injectableIdx = locateDirectiveOrProvider(\n      tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(lView, currentTView, injectableIdx, tNode as TElementNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param tView The tView we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider<T>(\n    tNode: TNode, tView: TView, token: ProviderToken<T>|string, canAccessViewProviders: boolean,\n    isHostSpecialCase: boolean|number): number|null {\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n\n  const injectablesStart = nodeProviderIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount =\n      nodeProviderIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n  const startingIndex =\n      canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i] as ProviderToken<any>| DirectiveDef<any>| string;\n    if (i < directivesStart && token === providerTokenOrDef ||\n        i >= directivesStart && (providerTokenOrDef as DirectiveDef<any>).type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart] as DirectiveDef<any>;\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n\n/**\n * Retrieve or instantiate the injectable from the `LView` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n */\nexport function getNodeInjectable(\n    lView: LView, tView: TView, index: number, tNode: TDirectiveHostNode): any {\n  let value = lView[index];\n  const tData = tView.data;\n  if (isFactory(value)) {\n    const factory: NodeInjectorFactory = value;\n    if (factory.resolving) {\n      throwCyclicDependencyError(stringifyForError(tData[index]));\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    const previousInjectImplementation =\n        factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;\n    const success = enterDI(lView, tNode, InjectFlags.Default);\n    ngDevMode &&\n        assertEqual(\n            success, true,\n            'Because flags do not contain \\`SkipSelf\\' we expect this to always succeed.');\n    try {\n      value = lView[index] = factory.factory(undefined, tData, lView, tNode);\n      // This code path is hit for both directives and providers.\n      // For perf reasons, we want to avoid searching for hooks on providers.\n      // It does no harm to try (the hooks just won't exist), but the extra\n      // checks are unnecessary and this is a hot path. So we check to see\n      // if the index of the dependency is in the directive range for this\n      // tNode. If it's not, we know it's a provider and skip hook registration.\n      if (tView.firstCreatePass && index >= tNode.directiveStart) {\n        ngDevMode && assertDirectiveDef(tData[index]);\n        registerPreOrderHooks(index, tData[index] as DirectiveDef<any>, tView);\n      }\n    } finally {\n      previousInjectImplementation !== null &&\n          setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      leaveDI();\n    }\n  }\n  return value;\n}\n\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token: ProviderToken<any>|string): number|Function|undefined {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId: number|undefined =\n      // First check with `hasOwnProperty` so we don't get an inherited ID.\n      token.hasOwnProperty(NG_ELEMENT_ID) ? (token as any)[NG_ELEMENT_ID] : undefined;\n  // Negative token IDs are used for special objects such as `Injector`\n  if (typeof tokenId === 'number') {\n    if (tokenId >= 0) {\n      return tokenId & BLOOM_MASK;\n    } else {\n      ngDevMode &&\n          assertEqual(tokenId, InjectorMarkers.Injector, 'Expecting to get Special Injector Id');\n      return createNodeInjector;\n    }\n  } else {\n    return tokenId;\n  }\n}\n\nexport function bloomHasToken(bloomHash: number, injectorIndex: number, injectorView: LView|TData) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n\n  // Each bloom bucket in `injectorView` represents `BLOOM_BUCKET_BITS` number of bits of\n  // `bloomHash`. Any bits in `bloomHash` beyond `BLOOM_BUCKET_BITS` indicate the bucket offset\n  // that should be used.\n  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];\n\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags: InjectFlags, isFirstHostTNode: boolean): boolean|number {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode|null,\n      private _lView: LView) {}\n\n  get(token: any, notFoundValue?: any, flags?: InjectFlags|InjectOptions): any {\n    return getOrCreateInjectable(\n        this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);\n  }\n}\n\n/** Creates a `NodeInjector` for the current node. */\nexport function createNodeInjector(): Injector {\n  return new NodeInjector(getCurrentTNode()! as TDirectiveHostNode, getLView()) as any;\n}\n\n/**\n * @codeGenApi\n */\nexport function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T {\n  return noSideEffects(() => {\n    const ownConstructor = type.prototype.constructor;\n    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);\n    const objectPrototype = Object.prototype;\n    let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n    // Go up the prototype until we hit `Object`.\n    while (parent && parent !== objectPrototype) {\n      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);\n\n      // If we hit something that has a factory and the factory isn't the same as the type,\n      // we've found the inherited factory. Note the check that the factory isn't the type's\n      // own factory is redundant in most cases, but if the user has custom decorators on the\n      // class, this lookup will start one level down in the prototype chain, causing us to\n      // find the own factory first and potentially triggering an infinite loop downstream.\n      if (factory && factory !== ownFactory) {\n        return factory;\n      }\n\n      parent = Object.getPrototypeOf(parent);\n    }\n\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return t => new t();\n  });\n}\n\nfunction getFactoryOf<T>(type: Type<any>): ((type?: Type<T>) => T | null)|null {\n  if (isForwardRef(type)) {\n    return () => {\n      const factory = getFactoryOf<T>(resolveForwardRef(type));\n      return factory && factory();\n    };\n  }\n  return getFactoryDef<T>(type);\n}\n\n/**\n * Returns a value from the closest embedded or node injector.\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nfunction lookupTokenUsingEmbeddedInjector<T>(\n    tNode: TDirectiveHostNode, lView: LView, token: ProviderToken<T>, flags: InjectFlags,\n    notFoundValue?: any) {\n  let currentTNode: TDirectiveHostNode|null = tNode;\n  let currentLView: LView|null = lView;\n\n  // When an LView with an embedded view injector is inserted, it'll likely be interlaced with\n  // nodes who may have injectors (e.g. node injector -> embedded view injector -> node injector).\n  // Since the bloom filters for the node injectors have already been constructed and we don't\n  // have a way of extracting the records from an injector, the only way to maintain the correct\n  // hierarchy when resolving the value is to walk it node-by-node while attempting to resolve\n  // the token at each level.\n  while (currentTNode !== null && currentLView !== null &&\n         (currentLView[FLAGS] & LViewFlags.HasEmbeddedViewInjector) &&\n         !(currentLView[FLAGS] & LViewFlags.IsRoot)) {\n    ngDevMode && assertTNodeForLView(currentTNode, currentLView);\n\n    // Note that this lookup on the node injector is using the `Self` flag, because\n    // we don't want the node injector to look at any parent injectors since we\n    // may hit the embedded view injector first.\n    const nodeInjectorValue = lookupTokenUsingNodeInjector(\n        currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);\n    if (nodeInjectorValue !== NOT_FOUND) {\n      return nodeInjectorValue;\n    }\n\n    // Has an explicit type due to a TS bug: https://github.com/microsoft/TypeScript/issues/33191\n    let parentTNode: TElementNode|TContainerNode|null = currentTNode.parent;\n\n    // `TNode.parent` includes the parent within the current view only. If it doesn't exist,\n    // it means that we've hit the view boundary and we need to go up to the next view.\n    if (!parentTNode) {\n      // Before we go to the next LView, check if the token exists on the current embedded injector.\n      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];\n      if (embeddedViewInjector) {\n        const embeddedViewInjectorValue =\n            embeddedViewInjector.get(token, NOT_FOUND as T | {}, flags);\n        if (embeddedViewInjectorValue !== NOT_FOUND) {\n          return embeddedViewInjectorValue;\n        }\n      }\n\n      // Otherwise keep going up the tree.\n      parentTNode = getTNodeFromLView(currentLView);\n      currentLView = currentLView[DECLARATION_VIEW];\n    }\n\n    currentTNode = parentTNode;\n  }\n\n  return notFoundValue;\n}\n\n/** Gets the TNode associated with an LView inside of the declaration view. */\nfunction getTNodeFromLView(lView: LView): TElementNode|TElementContainerNode|null {\n  const tView = lView[TVIEW];\n  const tViewType = tView.type;\n\n  // The parent pointer differs based on `TView.type`.\n  if (tViewType === TViewType.Embedded) {\n    ngDevMode && assertDefined(tView.declTNode, 'Embedded TNodes should have declaration parents.');\n    return tView.declTNode as TElementContainerNode;\n  } else if (tViewType === TViewType.Component) {\n    // Components don't have `TView.declTNode` because each instance of component could be\n    // inserted in different location, hence `TView.declTNode` is meaningless.\n    return lView[T_HOST] as TElementNode;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {injectAttributeImpl} from '../di';\nimport {getCurrentTNode} from '../state';\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nexport function ɵɵinjectAttribute(attrNameToInject: string): string|null {\n  return injectAttributeImpl(getCurrentTNode()!, attrNameToInject);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {noSideEffects} from './closure';\n\n\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as\n * decorators as well as Angular syntax.\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (type: Type<T>) => void,\n    typeFn?: (type: Type<T>, ...args: any[]) => void):\n    {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any;} {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(\n        this: unknown|typeof DecoratorFactory, ...args: any[]): (cls: Type<T>) => any {\n      if (this instanceof DecoratorFactory) {\n        metaCtor.call(this, ...args);\n        return this as typeof DecoratorFactory;\n      }\n\n      const annotationInstance = new (DecoratorFactory as any)(...args);\n      return function TypeDecorator(cls: Type<T>) {\n        if (typeFn) typeFn(cls, ...args);\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n            (cls as any)[ANNOTATIONS] :\n            (Object.defineProperty(cls, ANNOTATIONS, {value: []}) as any)[ANNOTATIONS];\n        annotations.push(annotationInstance);\n\n\n        if (additionalProcessing) additionalProcessing(cls);\n\n        return cls;\n      };\n    }\n\n    if (parentClass) {\n      DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (DecoratorFactory as any).annotationCls = DecoratorFactory;\n    return DecoratorFactory as any;\n  });\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(this: any, ...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(\n        this: unknown|typeof ParamDecoratorFactory, ...args: any[]): any {\n      if (this instanceof ParamDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n      const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n      (<any>ParamDecorator).annotation = annotationInstance;\n      return ParamDecorator;\n\n      function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n        // Use of Object.defineProperty is important since it creates non-enumerable property which\n        // prevents the property is copied during subclassing.\n        const parameters = cls.hasOwnProperty(PARAMETERS) ?\n            (cls as any)[PARAMETERS] :\n            Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n        // there might be gaps if some in between parameters do not have annotations.\n        // we pad with nulls.\n        while (parameters.length <= index) {\n          parameters.push(null);\n        }\n\n        (parameters[index] = parameters[index] || []).push(annotationInstance);\n        return cls;\n      }\n    }\n    if (parentClass) {\n      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n  });\n}\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any {\n  return noSideEffects(() => {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(this: unknown|typeof PropDecoratorFactory, ...args: any[]): any {\n      if (this instanceof PropDecoratorFactory) {\n        metaCtor.apply(this, args);\n        return this;\n      }\n\n      const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n      function PropDecorator(target: any, name: string) {\n        const constructor = target.constructor;\n        // Use of Object.defineProperty is important because it creates a non-enumerable property\n        // which prevents the property from being copied during subclassing.\n        const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n            (constructor as any)[PROP_METADATA] :\n            Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n        meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n        meta[name].unshift(decoratorInstance);\n\n        if (additionalProcessing) additionalProcessing(target, name, ...args);\n      }\n\n      return PropDecorator;\n    }\n\n    if (parentClass) {\n      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵinjectAttribute} from '../render3/instructions/di_attr';\nimport {makeParamDecorator} from '../util/decorators';\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Parameter decorator for a directive constructor that designates\n   * a host-element attribute whose value is injected as a constant string literal.\n   *\n   * @usageNotes\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * The following example uses the decorator to inject the string literal `text` in a directive.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * The following example uses the decorator in a component constructor.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   */\n  (name: string): any;\n  new(name: string): Attribute;\n}\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute {\n  /**\n   * The name of the attribute whose value can be injected.\n   */\n  attributeName: string;\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Attribute: AttributeDecorator = makeParamDecorator(\n    'Attribute',\n    (attributeName?: string) =>\n        ({attributeName, __NG_ELEMENT_ID__: () => ɵɵinjectAttribute(attributeName!)}));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {assertLessThan} from '../util/assert';\n\nimport {ɵɵdefineInjectable} from './interface/defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides an additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule` (note:\n * this option is now deprecated). As mentioned above, `'root'` is the default value for\n * `providedIn`.\n *\n * The `providedIn: NgModule` and `providedIn: 'any'` options are deprecated.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ɵprov: unknown;\n\n  /**\n   * @param _desc   Description for the token,\n   *                used only for debugging purposes,\n   *                it should but does not need to be unique\n   * @param options Options for the token's usage, as described above\n   */\n  constructor(protected _desc: string, options?: {\n    providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T\n  }) {\n    this.ɵprov = undefined;\n    if (typeof options == 'number') {\n      (typeof ngDevMode === 'undefined' || ngDevMode) &&\n          assertLessThan(options, 0, 'Only negative numbers are supported here');\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // See `InjectorMarkers`\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  /**\n   * @internal\n   */\n  get multi(): InjectionToken<Array<T>> {\n    return this as InjectionToken<Array<T>>;\n  }\n\n  toString(): string {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> {\n  ɵprov: unknown;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {ProviderToken} from '../di/provider_token';\nimport {makePropDecorator} from '../util/decorators';\n\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the `entryComponents` field of components and NgModules\n * based on its `useValue` property value.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) are added to the `entryComponents` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n/**\n * Type of the `Attribute` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * @usageNotes\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` as in the following example.\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * @publicApi\n   */\n  (name: string): any;\n  new(name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute {\n  /**\n   * The name of the attribute to be injected into the constructor.\n   */\n  attributeName?: string;\n}\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport interface Query {\n  descendants: boolean;\n  emitDistinctChangesOnly: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n  static?: boolean;\n}\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nexport const emitDistinctChangesOnlyDefaultValue = true;\n\n\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * @description\n   * Property decorator that configures a content query.\n   *\n   * Use to get the `QueryList` of elements or directives from the content DOM.\n   * Any time a child element is added, removed, or moved, the query list will be\n   * updated, and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **descendants** - If `true` include all descendants of the element. If `false` then only\n   * query direct children of the element.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. When `false` the `changes` observable might emit even\n   *   if the QueryList has not changed.\n   *   ** Note: *** This config option is **deprecated**, it will be permanently set to `true` and\n   *   removed in future versions of Angular.\n   * * **read** - Used to read a different token from the queried elements.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ContentChildren('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ContentChildren(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ContentChildren('someToken')\n   * someTokenVal: any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with\n   * `@ContentChildren(TemplateRef) template;`)\n   *\n   * In addition, multiple string selectors can be separated with a comma (e.g.\n   * `@ContentChildren('cmp1,cmp2')`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * ### Tab-pane example\n   *\n   * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n   * can be used to implement a tab pane component.\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string, opts?: {\n    descendants?: boolean,\n    emitDistinctChangesOnly?: boolean,\n    read?: any,\n  }): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {descendants?: boolean, emitDistinctChangesOnly?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren', (selector?: any, data: any = {}) => ({\n                         selector,\n                         first: false,\n                         isViewQuery: false,\n                         descendants: false,\n                         emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                         ...data\n                       }),\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a content query.\n   *\n   * Use to get the first element or the directive matching the selector from the content DOM.\n   * If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * Does not retrieve elements or directives that are in other components' templates,\n   * since a component's template is always a black box to its ancestors.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **descendants** - If `true` (default) include all descendants of the element. If `false` then\n   * only query direct children of the element.\n   * * **read** - Used to read a different token from the queried element.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ContentChild('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ContentChild(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ContentChild('someToken') someTokenVal:\n   * any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ContentChild(TemplateRef)\n   * template;`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string,\n   opts?: {descendants?: boolean, read?: any, static?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {descendants?: boolean, read?: any, static?: boolean}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @publicApi\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   *\n   * Use to get the `QueryList` of elements or directives from the view DOM.\n   * Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **emitDistinctChangesOnly** - The ` QueryList#changes` observable will emit new values only\n   *   if the QueryList result has changed. When `false` the `changes` observable might emit even\n   *   if the QueryList has not changed.\n   *   ** Note: *** This config option is **deprecated**, it will be permanently set to `true` and\n   * removed in future versions of Angular.\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChildren('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChildren(SomeService) someService!: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ViewChildren('someToken')\n   * someTokenVal!: any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChildren(TemplateRef)\n   * template;`)\n   *\n   * In addition, multiple string selectors can be separated with a comma (e.g.\n   * `@ViewChildren('cmp1,cmp2')`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * ### Another example\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string,\n   opts?: {read?: any, emitDistinctChangesOnly?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {read?: any, emitDistinctChangesOnly?: boolean}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) => ({\n                      selector,\n                      first: false,\n                      isViewQuery: true,\n                      descendants: true,\n                      emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue,\n                      ...data\n                    }),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   * The change detector looks for the first element or the directive matching the selector\n   * in the view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property is updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - The directive type or the name used for querying.\n   * * **read** - Used to read a different token from the queried elements.\n   * * **static** - True to resolve query results before change detection runs,\n   * false to resolve after change detection. Defaults to false.\n   *\n   *\n   * The following selectors are supported.\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * A template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChild('cmp')`)\n   *   * Any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChild(SomeService) someService: SomeService`)\n   *   * Any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n   * any`)\n   *   * A `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n   * template;`)\n   *\n   * The following values are supported by `read`:\n   *   * Any class with the `@Component` or `@Directive` decorator\n   *   * Any provider defined on the injector of the component that is matched by the `selector` of\n   * this query\n   *   * Any provider defined through a string token (e.g. `{provide: 'token', useValue: 'val'}`)\n   *   * `TemplateRef`, `ElementRef`, and `ViewContainerRef`\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * ### Example 2\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * @Annotation\n   */\n  (selector: ProviderToken<unknown>|Function|string, opts?: {read?: any, static?: boolean}): any;\n  new(selector: ProviderToken<unknown>|Function|string,\n      opts?: {read?: any, static?: boolean}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild',\n    (selector: any, data: any) =>\n        ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A set of interfaces which are shared between `@angular/core` and `@angular/compiler` to allow\n * for late binding of `@angular/compiler` for JIT purposes.\n *\n * This file has two copies. Please ensure that they are in sync:\n *  - packages/compiler/src/compiler_facade_interface.ts          (main)\n *  - packages/core/src/compiler/compiler_facade_interface.ts     (replica)\n *\n * Please ensure that the two files are in sync using this command:\n * ```\n * cp packages/compiler/src/compiler_facade_interface.ts \\\n *    packages/core/src/compiler/compiler_facade_interface.ts\n * ```\n */\n\nexport interface ExportedCompilerFacade {\n  ɵcompilerFacade: CompilerFacade;\n}\n\nexport interface CompilerFacade {\n  compilePipe(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3PipeMetadataFacade):\n      any;\n  compilePipeDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, declaration: R3DeclarePipeFacade): any;\n  compileInjectable(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectableMetadataFacade): any;\n  compileInjectableDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DeclareInjectableFacade): any;\n  compileInjector(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectorMetadataFacade): any;\n  compileInjectorDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      declaration: R3DeclareInjectorFacade): any;\n  compileNgModule(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3NgModuleMetadataFacade): any;\n  compileNgModuleDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      declaration: R3DeclareNgModuleFacade): any;\n  compileDirective(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DirectiveMetadataFacade): any;\n  compileDirectiveDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      declaration: R3DeclareDirectiveFacade): any;\n  compileComponent(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3ComponentMetadataFacade): any;\n  compileComponentDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string,\n      declaration: R3DeclareComponentFacade): any;\n  compileFactory(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3FactoryDefMetadataFacade): any;\n  compileFactoryDeclaration(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DeclareFactoryFacade): any;\n\n  createParseSourceSpan(kind: string, typeName: string, sourceUrl: string): ParseSourceSpan;\n\n  FactoryTarget: typeof FactoryTarget;\n  // Note that we do not use `{new(): ResourceLoader}` here because\n  // the resource loader class is abstract and not constructable.\n  ResourceLoader: Function&{prototype: ResourceLoader};\n}\n\nexport interface CoreEnvironment {\n  [name: string]: Function;\n}\n\nexport type ResourceLoader = {\n  get(url: string): Promise<string>|string;\n};\n\nexport type StringMap = {\n  [key: string]: string;\n};\n\nexport type StringMapWithRename = {\n  [key: string]: string|[string, string];\n};\n\nexport type Provider = unknown;\nexport type Type = Function;\nexport type OpaqueValue = unknown;\n\nexport enum FactoryTarget {\n  Directive = 0,\n  Component = 1,\n  Injectable = 2,\n  Pipe = 3,\n  NgModule = 4,\n}\n\nexport interface R3DependencyMetadataFacade {\n  token: OpaqueValue;\n  attribute: string|null;\n  host: boolean;\n  optional: boolean;\n  self: boolean;\n  skipSelf: boolean;\n}\n\nexport interface R3DeclareDependencyMetadataFacade {\n  token: OpaqueValue;\n  attribute?: boolean;\n  host?: boolean;\n  optional?: boolean;\n  self?: boolean;\n  skipSelf?: boolean;\n}\n\nexport interface R3PipeMetadataFacade {\n  name: string;\n  type: Type;\n  pipeName: string;\n  pure: boolean;\n  isStandalone: boolean;\n}\n\nexport interface R3InjectableMetadataFacade {\n  name: string;\n  type: Type;\n  typeArgumentCount: number;\n  providedIn?: Type|'root'|'platform'|'any'|null;\n  useClass?: OpaqueValue;\n  useFactory?: OpaqueValue;\n  useExisting?: OpaqueValue;\n  useValue?: OpaqueValue;\n  deps?: R3DependencyMetadataFacade[];\n}\n\nexport interface R3NgModuleMetadataFacade {\n  type: Type;\n  bootstrap: Function[];\n  declarations: Function[];\n  imports: Function[];\n  exports: Function[];\n  schemas: {name: string}[]|null;\n  id: string|null;\n}\n\nexport interface R3InjectorMetadataFacade {\n  name: string;\n  type: Type;\n  providers: Provider[];\n  imports: OpaqueValue[];\n}\n\nexport interface R3HostDirectiveMetadataFacade {\n  directive: Type;\n  inputs?: string[];\n  outputs?: string[];\n}\n\nexport interface R3DirectiveMetadataFacade {\n  name: string;\n  type: Type;\n  typeSourceSpan: ParseSourceSpan;\n  selector: string|null;\n  queries: R3QueryMetadataFacade[];\n  host: {[key: string]: string};\n  propMetadata: {[key: string]: OpaqueValue[]};\n  lifecycle: {usesOnChanges: boolean;};\n  inputs: string[];\n  outputs: string[];\n  usesInheritance: boolean;\n  exportAs: string[]|null;\n  providers: Provider[]|null;\n  viewQueries: R3QueryMetadataFacade[];\n  isStandalone: boolean;\n  hostDirectives: R3HostDirectiveMetadataFacade[]|null;\n}\n\nexport interface R3ComponentMetadataFacade extends R3DirectiveMetadataFacade {\n  template: string;\n  preserveWhitespaces: boolean;\n  animations: OpaqueValue[]|undefined;\n  declarations: R3TemplateDependencyFacade[];\n  styles: string[];\n  encapsulation: ViewEncapsulation;\n  viewProviders: Provider[]|null;\n  interpolation?: [string, string];\n  changeDetection?: ChangeDetectionStrategy;\n}\n\nexport interface R3DeclareDirectiveFacade {\n  selector?: string;\n  type: Type;\n  inputs?: {[classPropertyName: string]: string|[string, string]};\n  outputs?: {[classPropertyName: string]: string};\n  host?: {\n    attributes?: {[key: string]: OpaqueValue};\n    listeners?: {[key: string]: string};\n    properties?: {[key: string]: string};\n    classAttribute?: string;\n    styleAttribute?: string;\n  };\n  queries?: R3DeclareQueryMetadataFacade[];\n  viewQueries?: R3DeclareQueryMetadataFacade[];\n  providers?: OpaqueValue;\n  exportAs?: string[];\n  usesInheritance?: boolean;\n  usesOnChanges?: boolean;\n  isStandalone?: boolean;\n  hostDirectives?: R3HostDirectiveMetadataFacade[]|null;\n}\n\nexport interface R3DeclareComponentFacade extends R3DeclareDirectiveFacade {\n  template: string;\n  isInline?: boolean;\n  styles?: string[];\n\n  // Post-standalone libraries use a unified dependencies field.\n  dependencies?: R3DeclareTemplateDependencyFacade[];\n\n  // Pre-standalone libraries have separate component/directive/pipe fields:\n  components?: R3DeclareDirectiveDependencyFacade[];\n  directives?: R3DeclareDirectiveDependencyFacade[];\n  pipes?: {[pipeName: string]: OpaqueValue|(() => OpaqueValue)};\n\n\n  viewProviders?: OpaqueValue;\n  animations?: OpaqueValue;\n  changeDetection?: ChangeDetectionStrategy;\n  encapsulation?: ViewEncapsulation;\n  interpolation?: [string, string];\n  preserveWhitespaces?: boolean;\n}\n\nexport type R3DeclareTemplateDependencyFacade = {\n  kind: string\n}&(R3DeclareDirectiveDependencyFacade|R3DeclarePipeDependencyFacade|\n   R3DeclareNgModuleDependencyFacade);\n\nexport interface R3DeclareDirectiveDependencyFacade {\n  kind?: 'directive'|'component';\n  selector: string;\n  type: OpaqueValue|(() => OpaqueValue);\n  inputs?: string[];\n  outputs?: string[];\n  exportAs?: string[];\n}\n\nexport interface R3DeclarePipeDependencyFacade {\n  kind?: 'pipe';\n  name: string;\n  type: OpaqueValue|(() => OpaqueValue);\n}\n\nexport interface R3DeclareNgModuleDependencyFacade {\n  kind: 'ngmodule';\n  type: OpaqueValue|(() => OpaqueValue);\n}\n\nexport enum R3TemplateDependencyKind {\n  Directive = 0,\n  Pipe = 1,\n  NgModule = 2,\n}\n\nexport interface R3TemplateDependencyFacade {\n  kind: R3TemplateDependencyKind;\n  type: OpaqueValue|(() => OpaqueValue);\n}\nexport interface R3FactoryDefMetadataFacade {\n  name: string;\n  type: Type;\n  typeArgumentCount: number;\n  deps: R3DependencyMetadataFacade[]|null;\n  target: FactoryTarget;\n}\n\nexport interface R3DeclareFactoryFacade {\n  type: Type;\n  deps: R3DeclareDependencyMetadataFacade[]|'invalid'|null;\n  target: FactoryTarget;\n}\n\nexport interface R3DeclareInjectableFacade {\n  type: Type;\n  providedIn?: Type|'root'|'platform'|'any'|null;\n  useClass?: OpaqueValue;\n  useFactory?: OpaqueValue;\n  useExisting?: OpaqueValue;\n  useValue?: OpaqueValue;\n  deps?: R3DeclareDependencyMetadataFacade[];\n}\n\nexport enum ViewEncapsulation {\n  Emulated = 0,\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  None = 2,\n  ShadowDom = 3\n}\n\nexport type ChangeDetectionStrategy = number;\n\nexport interface R3QueryMetadataFacade {\n  propertyName: string;\n  first: boolean;\n  predicate: OpaqueValue|string[];\n  descendants: boolean;\n  emitDistinctChangesOnly: boolean;\n  read: OpaqueValue|null;\n  static: boolean;\n}\n\nexport interface R3DeclareQueryMetadataFacade {\n  propertyName: string;\n  first?: boolean;\n  predicate: OpaqueValue|string[];\n  descendants?: boolean;\n  read?: OpaqueValue;\n  static?: boolean;\n  emitDistinctChangesOnly?: boolean;\n}\n\nexport interface R3DeclareInjectorFacade {\n  type: Type;\n  imports?: OpaqueValue[];\n  providers?: OpaqueValue[];\n}\n\nexport interface R3DeclareNgModuleFacade {\n  type: Type;\n  bootstrap?: OpaqueValue[]|(() => OpaqueValue[]);\n  declarations?: OpaqueValue[]|(() => OpaqueValue[]);\n  imports?: OpaqueValue[]|(() => OpaqueValue[]);\n  exports?: OpaqueValue[]|(() => OpaqueValue[]);\n  schemas?: OpaqueValue[];\n  id?: OpaqueValue;\n}\n\nexport interface R3DeclarePipeFacade {\n  type: Type;\n  name: string;\n  pure?: boolean;\n  isStandalone?: boolean;\n}\n\nexport interface ParseSourceSpan {\n  start: any;\n  end: any;\n  details: any;\n  fullStart: any;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from '../util/global';\nimport {CompilerFacade, ExportedCompilerFacade, Type} from './compiler_facade_interface';\nexport * from './compiler_facade_interface';\n\nexport const enum JitCompilerUsage {\n  Decorator,\n  PartialDeclaration,\n}\n\ninterface JitCompilerUsageRequest {\n  usage: JitCompilerUsage;\n  kind: 'directive'|'component'|'pipe'|'injectable'|'NgModule';\n  type: Type;\n}\n\nexport function getCompilerFacade(request: JitCompilerUsageRequest): CompilerFacade {\n  const globalNg: ExportedCompilerFacade = global['ng'];\n  if (globalNg && globalNg.ɵcompilerFacade) {\n    return globalNg.ɵcompilerFacade;\n  }\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    // Log the type as an error so that a developer can easily navigate to the type from the\n    // console.\n    console.error(`JIT compilation failed for ${request.kind}`, request.type);\n\n    let message = `The ${request.kind} '${\n        request\n            .type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\\n\\n`;\n    if (request.usage === JitCompilerUsage.PartialDeclaration) {\n      message += `The ${request.kind} is part of a library that has been partially compiled.\\n`;\n      message +=\n          `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\\n`;\n      message += '\\n';\n      message +=\n          `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\\n`;\n    } else {\n      message +=\n          `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\\n`;\n    }\n    message +=\n        `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\\n`;\n    message +=\n        `or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.`;\n    throw new Error(message);\n  } else {\n    throw new Error('JIT compiler unavailable');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\nexport interface Type<T> extends Function {\n  new(...args: any[]): T;\n}\n\nexport type Mutable<T extends {[x: string]: any}, K extends string> = {\n  [P in K]: T[P];\n};\n\n/**\n * Returns a writable type version of type.\n *\n * USAGE:\n * Given:\n * ```\n * interface Person {readonly name: string}\n * ```\n *\n * We would like to get a read/write version of `Person`.\n * ```\n * const WritablePerson = Writable<Person>;\n * ```\n *\n * The result is that you can do:\n *\n * ```\n * const readonlyPerson: Person = {name: 'Marry'};\n * readonlyPerson.name = 'John'; // TypeError\n * (readonlyPerson as WritablePerson).name = 'John'; // OK\n *\n * // Error: Correctly detects that `Person` did not have `age` property.\n * (readonlyPerson as WritablePerson).age = 30;\n * ```\n */\nexport type Writable<T> = {\n  -readonly[K in keyof T]: T[K];\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThanOrEqual} from './assert';\n\n/**\n * Determines if the contents of two arrays is identical\n *\n * @param a first array\n * @param b second array\n * @param identityAccessor Optional function for extracting stable object identity from a value in\n *     the array.\n */\nexport function arrayEquals<T>(a: T[], b: T[], identityAccessor?: (value: T) => unknown): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    let valueA = a[i];\n    let valueB = b[i];\n    if (identityAccessor) {\n      valueA = identityAccessor(valueA) as any;\n      valueB = identityAccessor(valueB) as any;\n    }\n    if (valueB !== valueA) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Flattens an array.\n */\nexport function flatten(list: any[]): any[] {\n  return list.flat(Number.POSITIVE_INFINITY);\n}\n\nexport function deepForEach<T>(input: (T|any[])[], fn: (value: T) => void): void {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n\nexport function addToArray(arr: any[], index: number, value: any): void {\n  // perf: array.push is faster than array.splice!\n  if (index >= arr.length) {\n    arr.push(value);\n  } else {\n    arr.splice(index, 0, value);\n  }\n}\n\nexport function removeFromArray(arr: any[], index: number): any {\n  // perf: array.pop is faster than array.splice!\n  if (index >= arr.length - 1) {\n    return arr.pop();\n  } else {\n    return arr.splice(index, 1)[0];\n  }\n}\n\nexport function newArray<T = any>(size: number): T[];\nexport function newArray<T>(size: number, value: T): T[];\nexport function newArray<T>(size: number, value?: T): T[] {\n  const list: T[] = [];\n  for (let i = 0; i < size; i++) {\n    list.push(value!);\n  }\n  return list;\n}\n\n/**\n * Remove item from array (Same as `Array.splice()` but faster.)\n *\n * `Array.splice()` is not as fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * https://jsperf.com/fast-array-splice (About 20x faster)\n *\n * @param array Array to splice\n * @param index Index of element in array to remove.\n * @param count Number of items to remove.\n */\nexport function arraySplice(array: any[], index: number, count: number): void {\n  const length = array.length - count;\n  while (index < length) {\n    array[index] = array[index + count];\n    index++;\n  }\n  while (count--) {\n    array.pop();  // shrink the array\n  }\n}\n\n/**\n * Same as `Array.splice(index, 0, value)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value Value to add to array.\n */\nexport function arrayInsert(array: any[], index: number, value: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  while (end > index) {\n    const previousEnd = end - 1;\n    array[end] = array[previousEnd];\n    end = previousEnd;\n  }\n  array[index] = value;\n}\n\n/**\n * Same as `Array.splice2(index, 0, value1, value2)` but faster.\n *\n * `Array.splice()` is not fast because it has to allocate an array for the elements which were\n * removed. This causes memory pressure and slows down code when most of the time we don't\n * care about the deleted items array.\n *\n * @param array Array to splice.\n * @param index Index in array where the `value` should be added.\n * @param value1 Value to add to array.\n * @param value2 Value to add to array.\n */\nexport function arrayInsert2(array: any[], index: number, value1: any, value2: any): void {\n  ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\\'t insert past array end.');\n  let end = array.length;\n  if (end == index) {\n    // inserting at the end.\n    array.push(value1, value2);\n  } else if (end === 1) {\n    // corner case when we have less items in array than we have items to insert.\n    array.push(value2, array[0]);\n    array[0] = value1;\n  } else {\n    end--;\n    array.push(array[end - 1], array[end]);\n    while (end > index) {\n      const previousEnd = end - 2;\n      array[end] = array[previousEnd];\n      end--;\n    }\n    array[index] = value1;\n    array[index + 1] = value2;\n  }\n}\n\n\n/**\n * Get an index of an `value` in a sorted `array`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n *     located)\n */\nexport function arrayIndexOfSorted(array: string[], value: string): number {\n  return _arrayIndexOfSorted(array, value, 0);\n}\n\n\n/**\n * `KeyValueArray` is an array where even positions contain keys and odd positions contain values.\n *\n * `KeyValueArray` provides a very efficient way of iterating over its contents. For small\n * sets (~10) the cost of binary searching an `KeyValueArray` has about the same performance\n * characteristics that of a `Map` with significantly better memory footprint.\n *\n * If used as a `Map` the keys are stored in alphabetical order so that they can be binary searched\n * for retrieval.\n *\n * See: `keyValueArraySet`, `keyValueArrayGet`, `keyValueArrayIndexOf`, `keyValueArrayDelete`.\n */\nexport interface KeyValueArray<VALUE> extends Array<VALUE|string> {\n  __brand__: 'array-map';\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or create.\n * @param value The value to set for a `key`.\n * @returns index (always even) of where the value vas set.\n */\nexport function keyValueArraySet<V>(\n    keyValueArray: KeyValueArray<V>, key: string, value: V): number {\n  let index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it set it.\n    keyValueArray[index | 1] = value;\n  } else {\n    index = ~index;\n    arrayInsert2(keyValueArray, index, key, value);\n  }\n  return index;\n}\n\n/**\n * Retrieve a `value` for a `key` (on `undefined` if not found.)\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @return The `value` stored at the `key` location or `undefined if not found.\n */\nexport function keyValueArrayGet<V>(keyValueArray: KeyValueArray<V>, key: string): V|undefined {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it retrieve it.\n    return keyValueArray[index | 1] as V;\n  }\n  return undefined;\n}\n\n/**\n * Retrieve a `key` index value in the array or `-1` if not found.\n *\n * @param keyValueArray to search.\n * @param key The key to locate.\n * @returns index of where the key is (or should have been.)\n *   - positive (even) index if key found.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been inserted.)\n */\nexport function keyValueArrayIndexOf<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  return _arrayIndexOfSorted(keyValueArray as string[], key, 1);\n}\n\n/**\n * Delete a `key` (and `value`) from the `KeyValueArray`.\n *\n * @param keyValueArray to modify.\n * @param key The key to locate or delete (if exist).\n * @returns index of where the key was (or should have been.)\n *   - positive (even) index if key found and deleted.\n *   - negative index if key not found. (`~index` (even) to get the index where it should have\n *     been.)\n */\nexport function keyValueArrayDelete<V>(keyValueArray: KeyValueArray<V>, key: string): number {\n  const index = keyValueArrayIndexOf(keyValueArray, key);\n  if (index >= 0) {\n    // if we found it remove it.\n    arraySplice(keyValueArray, index, 2);\n  }\n  return index;\n}\n\n\n/**\n * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.\n *\n * NOTE:\n * - This uses binary search algorithm for fast removals.\n *\n * @param array A sorted array to binary search.\n * @param value The value to look for.\n * @param shift grouping shift.\n *   - `0` means look at every location\n *   - `1` means only look at every other (even) location (the odd locations are to be ignored as\n *         they are values.)\n * @returns index of the value.\n *   - positive index if value found.\n *   - negative index if value not found. (`~index` to get the value where it should have been\n * inserted)\n */\nfunction _arrayIndexOfSorted(array: string[], value: string, shift: number): number {\n  ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');\n  let start = 0;\n  let end = array.length >> shift;\n  while (end !== start) {\n    const middle = start + ((end - start) >> 1);  // find the middle.\n    const current = array[middle << shift];\n    if (value === current) {\n      return (middle << shift);\n    } else if (current > value) {\n      end = middle;\n    } else {\n      start = middle + 1;  // We already searched middle so make it non-inclusive by adding 1\n    }\n  }\n  return ~(end << shift);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isType, Type} from '../interface/type';\nimport {newArray} from '../util/array_utils';\nimport {ANNOTATIONS, PARAMETERS, PROP_METADATA} from '../util/decorators';\nimport {global} from '../util/global';\n\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\n\n\n\n/*\n * #########################\n * Attention: These Regular expressions have to hold even if the code is minified!\n * ##########################\n */\n\n/**\n * Regular expression that detects pass-through constructors for ES5 output. This Regex\n * intends to capture the common delegation pattern emitted by TypeScript and Babel. Also\n * it intends to capture the pattern where existing constructors have been downleveled from\n * ES2015 to ES5 using TypeScript w/ downlevel iteration. e.g.\n *\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, arguments) || this;\n * ```\n *\n * downleveled to ES5 with `downlevelIteration` for TypeScript < 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spread(arguments)) || this;\n * ```\n *\n * or downleveled to ES5 with `downlevelIteration` for TypeScript >= 4.2:\n * ```\n *   function MyClass() {\n *     var _this = _super.apply(this, __spreadArray([], __read(arguments), false)) || this;\n * ```\n *\n * More details can be found in: https://github.com/angular/angular/issues/38453.\n */\nexport const ES5_DELEGATE_CTOR =\n    /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*(arguments|(?:[^()]+\\(\\[\\],)?[^()]+\\(arguments\\).*)\\)/;\n/** Regular expression that detects ES2015 classes which extend from other classes. */\nexport const ES2015_INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes and\n * have an explicit constructor defined.\n */\nexport const ES2015_INHERITED_CLASS_WITH_CTOR =\n    /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n/**\n * Regular expression that detects ES2015 classes which extend from other classes\n * and inherit a constructor.\n */\nexport const ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR =\n    /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(\\)\\s*{[^}]*super\\(\\.\\.\\.arguments\\)/;\n\n/**\n * Determine whether a stringified type is a class which delegates its constructor\n * to its parent.\n *\n * This is not trivial since compiled code can actually contain a constructor function\n * even if the original source code did not. For instance, when the child class contains\n * an initialized instance property.\n */\nexport function isDelegateCtor(typeStr: string): boolean {\n  return ES5_DELEGATE_CTOR.test(typeStr) ||\n      ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||\n      (ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr));\n}\n\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\n  private _reflect: any;\n\n  constructor(reflect?: any) {\n    this._reflect = reflect || global['Reflect'];\n  }\n\n  factory<T>(t: Type<T>): (args: any[]) => T {\n    return (...args: any[]) => new t(...args);\n  }\n\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    let result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = newArray(paramAnnotations.length);\n    } else {\n      result = newArray(paramTypes.length);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] && paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n\n  private _ownParameters(type: Type<any>, parentCtor: any): any[][]|null {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (isDelegateCtor(typeStr)) {\n      return null;\n    }\n\n    // Prefer the direct API.\n    if ((<any>type).parameters && (<any>type).parameters !== parentCtor.parameters) {\n      return (<any>type).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = (<any>type).ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters =\n          typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && (type as any)[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n        this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return newArray<any[]>(type.length);\n  }\n\n  parameters(type: Type<any>): any[][] {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n\n  private _ownAnnotations(typeOrFunc: Type<any>, parentCtor: any): any[]|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).annotations && (<any>typeOrFunc).annotations !== parentCtor.annotations) {\n      let annotations = (<any>typeOrFunc).annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).decorators && (<any>typeOrFunc).decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata((<any>typeOrFunc).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return (typeOrFunc as any)[ANNOTATIONS];\n    }\n    return null;\n  }\n\n  annotations(typeOrFunc: Type<any>): any[] {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n\n  private _ownPropMetadata(typeOrFunc: any, parentCtor: any): {[key: string]: any[]}|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).propMetadata &&\n        (<any>typeOrFunc).propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = (<any>typeOrFunc).propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).propDecorators &&\n        (<any>typeOrFunc).propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = (<any>typeOrFunc).propDecorators;\n      const propMetadata = <{[key: string]: any[]}>{};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return (typeOrFunc as any)[PROP_METADATA];\n    }\n    return null;\n  }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata: {[key: string]: any[]} = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach((propName) => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach((propName) => {\n        const decorators: any[] = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n\n  ownPropMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n}\n\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n\nfunction getParentCtor(ctor: Function): Type<any> {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {makeParamDecorator} from '../util/decorators';\n\nimport {attachInjectFlag} from './injector_compatibility';\nimport {DecoratorFlags, InternalInjectFlags} from './interface/injector';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * Parameter decorator on a dependency parameter of a class constructor\n   * that specifies a custom provider of the dependency.\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * When `@Inject()` is not present, the injector uses the type annotation of the\n   * parameter as the provider.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"InjectWithoutDecorator\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection)\n   *\n   */\n  (token: any): any;\n  new(token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * A [DI token](guide/glossary#di-token) that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = attachInjectFlag(\n    // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    makeParamDecorator('Inject', (token: any) => ({token})), DecoratorFlags.Inject);\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which marks the parameter as being an optional dependency.\n   * The DI framework provides `null` if the dependency is not found.\n   *\n   * Can be used together with other parameter decorators\n   * that modify how dependency injection operates.\n   *\n   * @usageNotes\n   *\n   * The following code allows the possibility of a `null` result:\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Optional\">\n   * </code-example>\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   */\n  (): any;\n  new(): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Optional'), InternalInjectFlags.Optional);\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the local injector.\n   *\n   * Resolution works upward through the injector hierarchy, so the children\n   * of this class must configure their own providers or be prepared for a `null` result.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Self\">\n   * </code-example>\n   *\n   * @see `SkipSelf`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Self'), InternalInjectFlags.Self);\n\n\n/**\n * Type of the `SkipSelf` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * Parameter decorator to be used on constructor parameters,\n   * which tells the DI framework to start dependency resolution from the parent injector.\n   * Resolution works upward through the injector hierarchy, so the local injector\n   * is not checked for a provider.\n   *\n   * @usageNotes\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"SkipSelf\">\n   * </code-example>\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection-in-action#skip).\n   * @see `Self`\n   * @see `Optional`\n   *\n   */\n  (): any;\n  new(): SkipSelf;\n}\n\n/**\n * Type of the `SkipSelf` metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * `SkipSelf` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('SkipSelf'), InternalInjectFlags.SkipSelf);\n\n/**\n * Type of the `Host` decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * Parameter decorator on a view-provider parameter of a class constructor\n   * that tells the DI framework to resolve the view by checking injectors of child\n   * elements, and stop when reaching the host element of the current component.\n   *\n   * @usageNotes\n   *\n   * The following shows use with the `@Optional` decorator, and allows for a `null` result.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Host\">\n   * </code-example>\n   *\n   * For an extended example, see [\"Dependency Injection\n   * Guide\"](guide/dependency-injection-in-action#optional).\n   */\n  (): any;\n  new(): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator =\n    // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.\n    // tslint:disable-next-line: no-toplevel-property-access\n    attachInjectFlag(makeParamDecorator('Host'), InternalInjectFlags.Host);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {R3DependencyMetadataFacade} from '../../compiler/compiler_facade';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type} from '../../interface/type';\nimport {ReflectionCapabilities} from '../../reflection/reflection_capabilities';\nimport {Host, Inject, Optional, Self, SkipSelf} from '../metadata';\nimport {Attribute} from '../metadata_attr';\n\nlet _reflect: ReflectionCapabilities|null = null;\n\nexport function getReflect(): ReflectionCapabilities {\n  return (_reflect = _reflect || new ReflectionCapabilities());\n}\n\nexport function reflectDependencies(type: Type<any>): R3DependencyMetadataFacade[] {\n  return convertDependencies(getReflect().parameters(type));\n}\n\nexport function convertDependencies(deps: any[]): R3DependencyMetadataFacade[] {\n  return deps.map(dep => reflectDependency(dep));\n}\n\nfunction reflectDependency(dep: any|any[]): R3DependencyMetadataFacade {\n  const meta: R3DependencyMetadataFacade = {\n    token: null,\n    attribute: null,\n    host: false,\n    optional: false,\n    self: false,\n    skipSelf: false,\n  };\n\n  if (Array.isArray(dep) && dep.length > 0) {\n    for (let j = 0; j < dep.length; j++) {\n      const param = dep[j];\n      if (param === undefined) {\n        // param may be undefined if type of dep is not set by ngtsc\n        continue;\n      }\n\n      const proto = Object.getPrototypeOf(param);\n\n      if (param instanceof Optional || proto.ngMetadataName === 'Optional') {\n        meta.optional = true;\n      } else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {\n        meta.skipSelf = true;\n      } else if (param instanceof Self || proto.ngMetadataName === 'Self') {\n        meta.self = true;\n      } else if (param instanceof Host || proto.ngMetadataName === 'Host') {\n        meta.host = true;\n      } else if (param instanceof Inject) {\n        meta.token = param.token;\n      } else if (param instanceof Attribute) {\n        if (param.attributeName === undefined) {\n          throw new RuntimeError(\n              RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n              ngDevMode && `Attribute name must be defined.`);\n        }\n        meta.attribute = param.attributeName;\n      } else {\n        meta.token = param;\n      }\n    }\n  } else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {\n    meta.token = null;\n  } else {\n    meta.token = dep;\n  }\n  return meta;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {Component} from './directives';\n\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n *\n * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n *\n * // Use browser's `fetch()` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into `template` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a `Promise` to the\n * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n */\nexport function resolveComponentResources(\n    resourceResolver: (url: string) => (Promise<string|{text(): Promise<string>}>)): Promise<void> {\n  // Store all promises which are fetching the resources.\n  const componentResolved: Promise<void>[] = [];\n\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map<string, Promise<string>>();\n  function cachedResourceResolve(url: string): Promise<string> {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n    }\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component: Component, type: Type<any>) => {\n    const promises: Promise<void>[] = [];\n    if (component.templateUrl) {\n      promises.push(cachedResourceResolve(component.templateUrl).then((template) => {\n        component.template = template;\n      }));\n    }\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push('');  // pre-allocate array.\n      promises.push(cachedResourceResolve(styleUrl).then((style) => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      }));\n    });\n    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));\n    componentResolved.push(fullyResolved);\n  });\n  clearResolutionOfComponentResourcesQueue();\n  return Promise.all(componentResolved).then(() => undefined);\n}\n\nlet componentResourceResolutionQueue = new Map<Type<any>, Component>();\n\n// Track when existing ɵcmp for a Type is waiting on resources.\nconst componentDefPendingResolution = new Set<Type<any>>();\n\nexport function maybeQueueResolutionOfComponentResources(type: Type<any>, metadata: Component) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.set(type, metadata);\n    componentDefPendingResolution.add(type);\n  }\n}\n\nexport function isComponentDefPendingResolution(type: Type<any>): boolean {\n  return componentDefPendingResolution.has(type);\n}\n\nexport function componentNeedsResolution(component: Component): boolean {\n  return !!(\n      (component.templateUrl && !component.hasOwnProperty('template')) ||\n      component.styleUrls && component.styleUrls.length);\n}\nexport function clearResolutionOfComponentResourcesQueue(): Map<Type<any>, Component> {\n  const old = componentResourceResolutionQueue;\n  componentResourceResolutionQueue = new Map();\n  return old;\n}\n\nexport function restoreComponentResolutionQueue(queue: Map<Type<any>, Component>): void {\n  componentDefPendingResolution.clear();\n  queue.forEach((_, type) => componentDefPendingResolution.add(type));\n  componentResourceResolutionQueue = queue;\n}\n\nexport function isComponentResourceResolutionQueueEmpty() {\n  return componentResourceResolutionQueue.size === 0;\n}\n\nfunction unwrapResponse(response: string|{text(): Promise<string>}): string|Promise<string> {\n  return typeof response == 'string' ? response : response.text();\n}\n\nfunction componentDefResolved(type: Type<any>): void {\n  componentDefPendingResolution.delete(type);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '../interface/type';\nimport {NgModuleType} from '../metadata/ng_module_def';\nimport {getNgModuleDef} from '../render3/definition';\nimport {stringify} from '../util/stringify';\n\n/**\n * Map of module-id to the corresponding NgModule.\n */\nconst modules = new Map<string, NgModuleType>();\n\n/**\n * Whether to check for duplicate NgModule registrations.\n *\n * This can be disabled for testing.\n */\nlet checkForDuplicateNgModules = true;\n\nfunction assertSameOrNotExisting(id: string, type: Type<any>|null, incoming: Type<any>): void {\n  if (type && type !== incoming && checkForDuplicateNgModules) {\n    throw new Error(\n        `Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);\n  }\n}\n\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the `id` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nexport function registerNgModuleType(ngModuleType: NgModuleType, id: string): void {\n  const existing = modules.get(id) || null;\n  assertSameOrNotExisting(id, existing, ngModuleType);\n  modules.set(id, ngModuleType);\n}\n\nexport function clearModulesForTest(): void {\n  modules.clear();\n}\n\nexport function getRegisteredNgModuleType(id: string): NgModuleType|undefined {\n  return modules.get(id);\n}\n\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nexport function setAllowDuplicateNgModuleIdsForTest(allowDuplicates: boolean): void {\n  checkForDuplicateNgModules = !allowDuplicates;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * @publicApi\n */\nexport interface SchemaMetadata {\n  name: string;\n}\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the `CUSTOM_ELEMENTS_SCHEMA` instead.\n *\n * @publicApi\n */\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type} from '../../interface/type';\nimport {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SchemaMetadata} from '../../metadata/schema';\nimport {throwError} from '../../util/assert';\nimport {getComponentDef} from '../definition';\nimport {ComponentDef} from '../interfaces/definition';\nimport {TNodeType} from '../interfaces/node';\nimport {RComment, RElement} from '../interfaces/renderer_dom';\nimport {CONTEXT, DECLARATION_COMPONENT_VIEW, LView} from '../interfaces/view';\nimport {isAnimationProp} from '../util/attrs_utils';\n\nlet shouldThrowErrorOnUnknownElement = false;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport function ɵsetUnknownElementStrictMode(shouldThrow: boolean) {\n  shouldThrowErrorOnUnknownElement = shouldThrow;\n}\n\n/**\n * Gets the current value of the strict mode.\n */\nexport function ɵgetUnknownElementStrictMode() {\n  return shouldThrowErrorOnUnknownElement;\n}\n\nlet shouldThrowErrorOnUnknownProperty = false;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport function ɵsetUnknownPropertyStrictMode(shouldThrow: boolean) {\n  shouldThrowErrorOnUnknownProperty = shouldThrow;\n}\n\n/**\n * Gets the current value of the strict mode.\n */\nexport function ɵgetUnknownPropertyStrictMode() {\n  return shouldThrowErrorOnUnknownProperty;\n}\n\n/**\n * Validates that the element is known at runtime and produces\n * an error if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The element is considered known if either:\n * - it's a known HTML element\n * - it's a known custom element\n * - the element matches any directive\n * - the element is allowed by one of the schemas\n *\n * @param element Element to validate\n * @param lView An `LView` that represents a current component that is being rendered\n * @param tagName Name of the tag to check\n * @param schemas Array of schemas\n * @param hasDirectives Boolean indicating that the element matches any directive\n */\nexport function validateElementIsKnown(\n    element: RElement, lView: LView, tagName: string|null, schemas: SchemaMetadata[]|null,\n    hasDirectives: boolean): void {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return;\n\n  // If the element matches any directive, it's considered as valid.\n  if (!hasDirectives && tagName !== null) {\n    // The element is unknown if it's an instance of HTMLUnknownElement, or it isn't registered\n    // as a custom element. Note that unknown elements with a dash in their name won't be instances\n    // of HTMLUnknownElement in browsers that support web components.\n    const isUnknown =\n        // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because\n        // Domino doesn't expose HTMLUnknownElement globally.\n        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&\n         element instanceof HTMLUnknownElement) ||\n        (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&\n         !customElements.get(tagName));\n\n    if (isUnknown && !matchingSchemas(schemas, tagName)) {\n      const isHostStandalone = isHostComponentStandalone(lView);\n      const templateLocation = getTemplateLocationDetails(lView);\n      const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n\n      let message = `'${tagName}' is not a known element${templateLocation}:\\n`;\n      message += `1. If '${tagName}' is an Angular component, then verify that it is ${\n          isHostStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n                             'a part of an @NgModule where this component is declared'}.\\n`;\n      if (tagName && tagName.indexOf('-') > -1) {\n        message +=\n            `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${\n                schemas} of this component to suppress this message.`;\n      } else {\n        message +=\n            `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;\n      }\n      if (shouldThrowErrorOnUnknownElement) {\n        throw new RuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message);\n      } else {\n        console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_ELEMENT, message));\n      }\n    }\n  }\n}\n\n/**\n * Validates that the property of the element is known at runtime and returns\n * false if it's not the case.\n * This check is relevant for JIT-compiled components (for AOT-compiled\n * ones this check happens at build time).\n *\n * The property is considered known if either:\n * - it's a known property of the element\n * - the element is allowed by one of the schemas\n * - the property is used for animations\n *\n * @param element Element to validate\n * @param propName Name of the property to check\n * @param tagName Name of the tag hosting the property\n * @param schemas Array of schemas\n */\nexport function isPropertyValid(\n    element: RElement|RComment, propName: string, tagName: string|null,\n    schemas: SchemaMetadata[]|null): boolean {\n  // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT\n  // mode where this check happens at compile time. In JIT mode, `schemas` is always present and\n  // defined as an array (as an empty array in case `schemas` field is not defined) and we should\n  // execute the check below.\n  if (schemas === null) return true;\n\n  // The property is considered valid if the element matches the schema, it exists on the element,\n  // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).\n  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {\n    return true;\n  }\n\n  // Note: `typeof Node` returns 'function' in most browsers, but is undefined with domino.\n  return typeof Node === 'undefined' || Node === null || !(element instanceof Node);\n}\n\n/**\n * Logs or throws an error that a property is not supported on an element.\n *\n * @param propName Name of the invalid property\n * @param tagName Name of the tag hosting the property\n * @param nodeType Type of the node hosting the property\n * @param lView An `LView` that represents a current component\n */\nexport function handleUnknownPropertyError(\n    propName: string, tagName: string|null, nodeType: TNodeType, lView: LView): void {\n  // Special-case a situation when a structural directive is applied to\n  // an `<ng-template>` element, for example: `<ng-template *ngIf=\"true\">`.\n  // In this case the compiler generates the `ɵɵtemplate` instruction with\n  // the `null` as the tagName. The directive matching logic at runtime relies\n  // on this effect (see `isInlineTemplate`), thus using the 'ng-template' as\n  // a default value of the `tNode.value` is not feasible at this moment.\n  if (!tagName && nodeType === TNodeType.Container) {\n    tagName = 'ng-template';\n  }\n\n  const isHostStandalone = isHostComponentStandalone(lView);\n  const templateLocation = getTemplateLocationDetails(lView);\n\n  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${\n      templateLocation}.`;\n\n  const schemas = `'${isHostStandalone ? '@Component' : '@NgModule'}.schemas'`;\n  const importLocation = isHostStandalone ?\n      'included in the \\'@Component.imports\\' of this component' :\n      'a part of an @NgModule where this component is declared';\n  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {\n    // Most likely this is a control flow directive (such as `*ngIf`) used in\n    // a template, but the directive or the `CommonModule` is not imported.\n    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);\n    message += `\\nIf the '${propName}' is an Angular control flow directive, ` +\n        `please make sure that either the '${\n                   correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;\n  } else {\n    // May be an Angular component, which is not imported/declared?\n    message += `\\n1. If '${tagName}' is an Angular component and it has the ` +\n        `'${propName}' input, then verify that it is ${importLocation}.`;\n    // May be a Web Component?\n    if (tagName && tagName.indexOf('-') > -1) {\n      message += `\\n2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' ` +\n          `to the ${schemas} of this component to suppress this message.`;\n      message += `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n          `the ${schemas} of this component.`;\n    } else {\n      // If it's expected, the error can be suppressed by the `NO_ERRORS_SCHEMA` schema.\n      message += `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to ` +\n          `the ${schemas} of this component.`;\n    }\n  }\n\n  reportUnknownPropertyError(message);\n}\n\nexport function reportUnknownPropertyError(message: string) {\n  if (shouldThrowErrorOnUnknownProperty) {\n    throw new RuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message);\n  } else {\n    console.error(formatRuntimeError(RuntimeErrorCode.UNKNOWN_BINDING, message));\n  }\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode and also it relies on the constructor function being available.\n *\n * Gets a reference to the host component def (where a current component is declared).\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nfunction getDeclarationComponentDef(lView: LView): ComponentDef<unknown>|null {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW] as LView<Type<unknown>>;\n  const context = declarationLView[CONTEXT];\n\n  // Unable to obtain a context.\n  if (!context) return null;\n\n  return context.constructor ? getComponentDef(context.constructor) : null;\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Checks if the current component is declared inside of a standalone component template.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nexport function isHostComponentStandalone(lView: LView): boolean {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const componentDef = getDeclarationComponentDef(lView);\n  // Treat host component as non-standalone if we can't obtain the def.\n  return !!componentDef?.standalone;\n}\n\n/**\n * WARNING: this is a **dev-mode only** function (thus should always be guarded by the `ngDevMode`)\n * and must **not** be used in production bundles. The function makes megamorphic reads, which might\n * be too slow for production mode.\n *\n * Constructs a string describing the location of the host component template. The function is used\n * in dev mode to produce error messages.\n *\n * @param lView An `LView` that represents a current component that is being rendered.\n */\nexport function getTemplateLocationDetails(lView: LView): string {\n  !ngDevMode && throwError('Must never be called in production mode');\n\n  const hostComponentDef = getDeclarationComponentDef(lView);\n  const componentClassName = hostComponentDef?.type?.name;\n  return componentClassName ? ` (used in the '${componentClassName}' component template)` : '';\n}\n\n/**\n * The set of known control flow directives and their corresponding imports.\n * We use this set to produce a more precises error message with a note\n * that the `CommonModule` should also be included.\n */\nexport const KNOWN_CONTROL_FLOW_DIRECTIVES = new Map([\n  ['ngIf', 'NgIf'], ['ngFor', 'NgFor'], ['ngSwitchCase', 'NgSwitchCase'],\n  ['ngSwitchDefault', 'NgSwitchDefault']\n]);\n/**\n * Returns true if the tag name is allowed by specified schemas.\n * @param schemas Array of schemas\n * @param tagName Name of the tag\n */\nexport function matchingSchemas(schemas: SchemaMetadata[]|null, tagName: string|null): boolean {\n  if (schemas !== null) {\n    for (let i = 0; i < schemas.length; i++) {\n      const schema = schemas[i];\n      if (schema === NO_ERRORS_SCHEMA ||\n          schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\n\n\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n  /**\n   * A unique identifying string for the new renderer, used when creating\n   * unique styles for encapsulation.\n   */\n  id: string;\n  /**\n   * The view encapsulation type, which determines how styles are applied to\n   * DOM elements. One of\n   * - `Emulated` (default): Emulate native scoping of styles.\n   * - `Native`: Use the native encapsulation mechanism of the renderer.\n   * - `ShadowDom`: Use modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * create a ShadowRoot for component's host element.\n   * - `None`: Do not provide any template or style encapsulation.\n   */\n  encapsulation: ViewEncapsulation;\n  /**\n   * Defines CSS styles to be stored on a renderer instance.\n   */\n  styles: (string|any[])[];\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  data: {[kind: string]: any};\n}\n\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport enum RendererStyleFlags2 {\n  // TODO(misko): This needs to be refactored into a separate file so that it can be imported from\n  // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails\n  // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Disallowed strings in the comment.\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n */\nconst COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n/**\n * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n */\nconst COMMENT_DELIMITER = /(<|>)/;\nconst COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n\n/**\n * Escape the content of comment strings so that it can be safely inserted into a comment node.\n *\n * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n *\n * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n *\n * ```\n * div.innerHTML = div.innerHTML\n * ```\n *\n * One would expect that the above code would be safe to do, but it turns out that because comment\n * text is not escaped, the comment may contain text which will prematurely close the comment\n * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n * may contain such text and expect them to be safe.)\n *\n * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n * text it will render normally but it will not cause the HTML parser to close/open the comment.\n *\n * @param value text to make safe for comment node by escaping the comment open/close character\n *     sequence.\n */\nexport function escapeCommentText(value: string): string {\n  return value.replace(\n      COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertNumber} from '../../util/assert';\n\nimport {ID, LView} from './view';\n\n// Keeps track of the currently-active LViews.\nconst TRACKED_LVIEWS = new Map<number, LView>();\n\n// Used for generating unique IDs for LViews.\nlet uniqueIdCounter = 0;\n\n/** Gets a unique ID that can be assigned to an LView. */\nexport function getUniqueLViewId(): number {\n  return uniqueIdCounter++;\n}\n\n/** Starts tracking an LView. */\nexport function registerLView(lView: LView): void {\n  ngDevMode && assertNumber(lView[ID], 'LView must have an ID in order to be registered');\n  TRACKED_LVIEWS.set(lView[ID], lView);\n}\n\n/** Gets an LView by its unique ID. */\nexport function getLViewById(id: number): LView|null {\n  ngDevMode && assertNumber(id, 'ID used for LView lookup must be a number');\n  return TRACKED_LVIEWS.get(id) || null;\n}\n\n/** Stops tracking an LView. */\nexport function unregisterLView(lView: LView): void {\n  ngDevMode && assertNumber(lView[ID], 'Cannot stop tracking an LView that does not have an ID');\n  TRACKED_LVIEWS.delete(lView[ID]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {getLViewById} from './lview_tracking';\nimport {RNode} from './renderer_dom';\nimport {LView} from './view';\n\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport class LContext {\n  /**\n   * The instance of the Component node.\n   */\n  public component: {}|null|undefined;\n\n  /**\n   * The list of active directives that exist on this element.\n   */\n  public directives: any[]|null|undefined;\n\n  /**\n   * The map of local references (local reference name => element or directive instance) that\n   * exist on this element.\n   */\n  public localRefs: {[key: string]: any}|null|undefined;\n\n  /** Component's parent view data. */\n  get lView(): LView|null {\n    return getLViewById(this.lViewId);\n  }\n\n  constructor(\n      /**\n       * ID of the component's parent view data.\n       */\n      private lViewId: number,\n\n      /**\n       * The index instance of the node.\n       */\n      public nodeIndex: number,\n\n      /**\n       * The instance of the DOM node that is attached to the lNode.\n       */\n      public native: RNode) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertDomNode} from '../util/assert';\nimport {EMPTY_ARRAY} from '../util/empty';\n\nimport {assertLView} from './assert';\nimport {LContext} from './interfaces/context';\nimport {getLViewById, registerLView} from './interfaces/lview_tracking';\nimport {TNode, TNodeFlags} from './interfaces/node';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {isLView} from './interfaces/type_checks';\nimport {CONTEXT, HEADER_OFFSET, HOST, ID, LView, TVIEW} from './interfaces/view';\nimport {getComponentLViewByIndex, unwrapRNode} from './util/view_utils';\n\n\n\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target: any): LContext|null {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (isLView(mpValue)) {\n      const lView: LView = mpValue!;\n      let nodeIndex: number;\n      let component: any = undefined;\n      let directives: any[]|null|undefined = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target as RElement);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = unwrapRNode(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context: LContext = (existingCtx && !Array.isArray(existingCtx)) ?\n          existingCtx :\n          createLContext(lView, nodeIndex, native);\n\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target as RElement;\n    ngDevMode && assertDomNode(rElement);\n\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement as any;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        const lView = Array.isArray(parentContext) ? parentContext as LView : parentContext.lView;\n\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = unwrapRNode(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (mpValue as LContext) || null;\n}\n\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView: LView, nodeIndex: number, native: RNode): LContext {\n  return new LContext(lView[ID], nodeIndex, native);\n}\n\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance: {}): LView {\n  let patchedData = readPatchedData(componentInstance);\n  let lView: LView;\n\n  if (isLView(patchedData)) {\n    const contextLView: LView = patchedData;\n    const nodeIndex = findViaComponent(contextLView, componentInstance);\n    lView = getComponentLViewByIndex(nodeIndex, contextLView);\n    const context = createLContext(contextLView, nodeIndex, lView[HOST] as RElement);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = patchedData as unknown as LContext;\n    const contextLView = context.lView!;\n    ngDevMode && assertLView(contextLView);\n    lView = getComponentLViewByIndex(context.nodeIndex, contextLView);\n  }\n  return lView;\n}\n\n/**\n * This property will be monkey-patched on elements, components and directives.\n */\nconst MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target: any, data: LView|LContext) {\n  ngDevMode && assertDefined(target, 'Target expected');\n  // Only attach the ID of the view in order to avoid memory leaks (see #41047). We only do this\n  // for `LView`, because we have control over when an `LView` is created and destroyed, whereas\n  // we can't know when to remove an `LContext`.\n  if (isLView(data)) {\n    target[MONKEY_PATCH_KEY_NAME] = data[ID];\n    registerLView(data);\n  } else {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n  }\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView|LContext|null {\n  ngDevMode && assertDefined(target, 'Target expected');\n  const data = target[MONKEY_PATCH_KEY_NAME];\n  return (typeof data === 'number') ? getLViewById(data) : data || null;\n}\n\nexport function readPatchedLView<T>(target: any): LView<T>|null {\n  const value = readPatchedData(target);\n  if (value) {\n    return (isLView(value) ? value : value.lView) as LView<T>;\n  }\n  return null;\n}\n\nexport function isComponentInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵcmp;\n}\n\nexport function isDirectiveInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ɵdir;\n}\n\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView: LView, target: RElement): number {\n  const tView = lView[TVIEW];\n  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {\n    if (unwrapRNode(lView[i]) === target) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode: TNode): TNode|null {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView: LView, componentInstance: {}): number {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView: LView, directiveInstance: {}): number {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (lView[i] === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n\n/**\n * Returns a list of directives applied to a node at a specific index. The list includes\n * directives matched by selector and any host directives, but it excludes components.\n * Use `getComponentAtNodeIndex` to find the component applied to a node.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n */\nexport function getDirectivesAtNodeIndex(nodeIndex: number, lView: LView): any[]|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode.directiveStart === 0) return EMPTY_ARRAY;\n  const results: any[] = [];\n  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {\n    const directiveInstance = lView[i];\n    if (!isComponentInstance(directiveInstance)) {\n      results.push(directiveInstance);\n    }\n  }\n  return results;\n}\n\nexport function getComponentAtNodeIndex(nodeIndex: number, lView: LView): {}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  const {directiveStart, componentOffset} = tNode;\n  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;\n}\n\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView: LView, nodeIndex: number): {[key: string]: any}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode && tNode.localNames) {\n    const result: {[key: string]: any} = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n *\n * This file provides mechanism by which code relevant to the `TIcuContainerNode` is only loaded if\n * ICU is present in the template.\n */\n\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView} from '../interfaces/view';\n\n\nlet _icuContainerIterate: (tIcuContainerNode: TIcuContainerNode, lView: LView) =>\n    (() => RNode | null);\n\n/**\n * Iterator which provides ability to visit all of the `TIcuContainerNode` root `RNode`s.\n */\nexport function icuContainerIterate(tIcuContainerNode: TIcuContainerNode, lView: LView): () =>\n    RNode | null {\n  return _icuContainerIterate(tIcuContainerNode, lView);\n}\n\n/**\n * Ensures that `IcuContainerVisitor`'s implementation is present.\n *\n * This function is invoked when i18n instruction comes across an ICU. The purpose is to allow the\n * bundler to tree shake ICU logic and only load it if ICU instruction is executed.\n */\nexport function ensureIcuContainerVisitorLoaded(\n    loader: () => ((tIcuContainerNode: TIcuContainerNode, lView: LView) => (() => RNode | null))) {\n  if (_icuContainerIterate === undefined) {\n    // Do not inline this function. We want to keep `ensureIcuContainerVisitorLoaded` light, so it\n    // can be inlined into call-site.\n    _icuContainerIterate = loader();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined} from '../../util/assert';\nimport {assertLView} from '../assert';\nimport {readPatchedLView} from '../context_discovery';\nimport {LContainer} from '../interfaces/container';\nimport {isLContainer, isLView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CONTEXT, FLAGS, LView, LViewFlags, NEXT, PARENT} from '../interfaces/view';\n\n\n/**\n * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of\n * that LContainer, which is an LView\n * @param lView the lView whose parent to get\n */\nexport function getLViewParent(lView: LView): LView|null {\n  ngDevMode && assertLView(lView);\n  const parent = lView[PARENT];\n  return isLContainer(parent) ? parent[PARENT]! : parent;\n}\n\n/**\n * Retrieve the root view from any component or `LView` by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrLView any component or `LView`\n */\nexport function getRootView<T>(componentOrLView: LView|{}): LView<T> {\n  ngDevMode && assertDefined(componentOrLView, 'component');\n  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView)!;\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = getLViewParent(lView)!;\n  }\n  ngDevMode && assertLView(lView);\n  return lView as LView<T>;\n}\n\n/**\n * Returns the context information associated with the application where the target is situated. It\n * does this by walking the parent views until it gets to the root view, then getting the context\n * off of that.\n *\n * @param viewOrComponent the `LView` or component to get the root context for.\n */\nexport function getRootContext<T>(viewOrComponent: LView<T>|{}): T {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n      assertDefined(rootView[CONTEXT], 'Root view has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as T;\n}\n\n\n/**\n * Gets the first `LContainer` in the LView or `null` if none exists.\n */\nexport function getFirstLContainer(lView: LView): LContainer|null {\n  return getNearestLContainer(lView[CHILD_HEAD]);\n}\n\n/**\n * Gets the next `LContainer` that is a sibling of the given container.\n */\nexport function getNextLContainer(container: LContainer): LContainer|null {\n  return getNearestLContainer(container[NEXT]);\n}\n\nfunction getNearestLContainer(viewOrContainer: LContainer|LView|null) {\n  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {\n    viewOrContainer = viewOrContainer[NEXT];\n  }\n  return viewOrContainer as LContainer | null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewEncapsulation} from '../metadata/view';\nimport {RendererStyleFlags2} from '../render/api_flags';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertDefined, assertEqual, assertFunction, assertNumber, assertString} from '../util/assert';\nimport {escapeCommentText} from '../util/dom';\n\nimport {assertLContainer, assertLView, assertParentView, assertProjectionSlots, assertTNodeForLView} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS, NATIVE} from './interfaces/container';\nimport {ComponentDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {unregisterLView} from './interfaces/lview_tracking';\nimport {TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode} from './interfaces/node';\nimport {Renderer} from './interfaces/renderer';\nimport {RComment, RElement, RNode, RTemplate, RText} from './interfaces/renderer_dom';\nimport {isLContainer, isLView} from './interfaces/type_checks';\nimport {CHILD_HEAD, CLEANUP, DECLARATION_COMPONENT_VIEW, DECLARATION_LCONTAINER, DestroyHookData, FLAGS, HookData, HookFn, HOST, LView, LViewFlags, NEXT, PARENT, QUERIES, RENDERER, T_HOST, TVIEW, TView, TViewType} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {profiler, ProfilerEvent} from './profiler';\nimport {setUpAttributes} from './util/attrs_utils';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {getNativeByTNode, unwrapRNode, updateTransplantedViewCount} from './util/view_utils';\n\nconst enum WalkTNodeTreeAction {\n  /** node create in the native environment. Run on initial creation. */\n  Create = 0,\n\n  /**\n   * node insert in the native environment.\n   * Run when existing node has been detached and needs to be re-attached.\n   */\n  Insert = 1,\n\n  /** node detach from the native environment */\n  Detach = 2,\n\n  /** node destruction using the renderer's API */\n  Destroy = 3,\n}\n\n\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction applyToElementOrContainer(\n    action: WalkTNodeTreeAction, renderer: Renderer, parent: RElement|null,\n    lNodeToHandle: RNode|LContainer|LView, beforeNode?: RNode|null) {\n  // If this slot was allocated for a text node dynamically created by i18n, the text node itself\n  // won't be created until i18nApply() in the update block, so this node should be skipped.\n  // For more info, see \"ICU expressions should work inside an ngTemplateOutlet inside an ngFor\"\n  // in `i18n_spec.ts`.\n  if (lNodeToHandle != null) {\n    let lContainer: LContainer|undefined;\n    let isComponent = false;\n    // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is\n    // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if\n    // it has LContainer so that we can process all of those cases appropriately.\n    if (isLContainer(lNodeToHandle)) {\n      lContainer = lNodeToHandle;\n    } else if (isLView(lNodeToHandle)) {\n      isComponent = true;\n      ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');\n      lNodeToHandle = lNodeToHandle[HOST]!;\n    }\n    const rNode: RNode = unwrapRNode(lNodeToHandle);\n\n    if (action === WalkTNodeTreeAction.Create && parent !== null) {\n      if (beforeNode == null) {\n        nativeAppendChild(renderer, parent, rNode);\n      } else {\n        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n      }\n    } else if (action === WalkTNodeTreeAction.Insert && parent !== null) {\n      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);\n    } else if (action === WalkTNodeTreeAction.Detach) {\n      nativeRemoveNode(renderer, rNode, isComponent);\n    } else if (action === WalkTNodeTreeAction.Destroy) {\n      ngDevMode && ngDevMode.rendererDestroyNode++;\n      renderer.destroyNode!(rNode);\n    }\n    if (lContainer != null) {\n      applyContainer(renderer, action, lContainer, parent, beforeNode);\n    }\n  }\n}\n\nexport function createTextNode(renderer: Renderer, value: string): RText {\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  ngDevMode && ngDevMode.rendererSetText++;\n  return renderer.createText(value);\n}\n\nexport function updateTextNode(renderer: Renderer, rNode: RText, value: string): void {\n  ngDevMode && ngDevMode.rendererSetText++;\n  renderer.setValue(rNode, value);\n}\n\nexport function createCommentNode(renderer: Renderer, value: string): RComment {\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  return renderer.createComment(escapeCommentText(value));\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param renderer A renderer to use\n * @param name the tag name\n * @param namespace Optional namespace for element.\n * @returns the element created\n */\nexport function createElementNode(\n    renderer: Renderer, name: string, namespace: string|null): RElement {\n  ngDevMode && ngDevMode.rendererCreateElement++;\n  return renderer.createElement(name, namespace);\n}\n\n\n/**\n * Removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param lView The view from which elements should be added or removed\n */\nexport function removeViewFromContainer(tView: TView, lView: LView): void {\n  const renderer = lView[RENDERER];\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Detach, null, null);\n  lView[HOST] = null;\n  lView[T_HOST] = null;\n}\n\n/**\n * Adds all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to add all elements in the\n * views beneath it.\n *\n * @param tView The `TView' of the `LView` from which elements should be added or removed\n * @param parentTNode The `TNode` where the `LView` should be attached to.\n * @param renderer Current renderer to use for DOM manipulations.\n * @param lView The view from which elements should be added or removed\n * @param parentNativeNode The parent `RElement` where it should be inserted into.\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport function addViewToContainer(\n    tView: TView, parentTNode: TNode, renderer: Renderer, lView: LView, parentNativeNode: RElement,\n    beforeNode: RNode|null): void {\n  lView[HOST] = parentNativeNode;\n  lView[T_HOST] = parentTNode;\n  applyView(tView, lView, renderer, WalkTNodeTreeAction.Insert, parentNativeNode, beforeNode);\n}\n\n\n/**\n * Detach a `LView` from the DOM by detaching its nodes.\n *\n * @param tView The `TView' of the `LView` to be detached\n * @param lView the `LView` to be detached.\n */\nexport function renderDetachView(tView: TView, lView: LView) {\n  applyView(tView, lView, lView[RENDERER], WalkTNodeTreeAction.Detach, null, null);\n}\n\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView: LView): void {\n  // If the view has no children, we can clean it up and return early.\n  let lViewOrLContainer = rootView[CHILD_HEAD];\n  if (!lViewOrLContainer) {\n    return cleanUpView(rootView[TVIEW], rootView);\n  }\n\n  while (lViewOrLContainer) {\n    let next: LView|LContainer|null = null;\n\n    if (isLView(lViewOrLContainer)) {\n      // If LView, traverse down to child.\n      next = lViewOrLContainer[CHILD_HEAD];\n    } else {\n      ngDevMode && assertLContainer(lViewOrLContainer);\n      // If container, traverse down to its first LView.\n      const firstView: LView|undefined = lViewOrLContainer[CONTAINER_HEADER_OFFSET];\n      if (firstView) next = firstView;\n    }\n\n    if (!next) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (lViewOrLContainer && !lViewOrLContainer![NEXT] && lViewOrLContainer !== rootView) {\n        if (isLView(lViewOrLContainer)) {\n          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n        }\n        lViewOrLContainer = lViewOrLContainer[PARENT];\n      }\n      if (lViewOrLContainer === null) lViewOrLContainer = rootView;\n      if (isLView(lViewOrLContainer)) {\n        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);\n      }\n      next = lViewOrLContainer && lViewOrLContainer![NEXT];\n    }\n    lViewOrLContainer = next;\n  }\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param tView The `TView' of the `LView` to insert\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param index Which index in the container to insert the child view into\n */\nexport function insertView(tView: TView, lView: LView, lContainer: LContainer, index: number) {\n  ngDevMode && assertLView(lView);\n  ngDevMode && assertLContainer(lContainer);\n  const indexInContainer = CONTAINER_HEADER_OFFSET + index;\n  const containerLength = lContainer.length;\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    lContainer[indexInContainer - 1][NEXT] = lView;\n  }\n  if (index < containerLength - CONTAINER_HEADER_OFFSET) {\n    lView[NEXT] = lContainer[indexInContainer];\n    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);\n  } else {\n    lContainer.push(lView);\n    lView[NEXT] = null;\n  }\n\n  lView[PARENT] = lContainer;\n\n  // track views where declaration and insertion points are different\n  const declarationLContainer = lView[DECLARATION_LCONTAINER];\n  if (declarationLContainer !== null && lContainer !== declarationLContainer) {\n    trackMovedView(declarationLContainer, lView);\n  }\n\n  // notify query that a new view has been added\n  const lQueries = lView[QUERIES];\n  if (lQueries !== null) {\n    lQueries.insertView(tView);\n  }\n\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Track views created from the declaration container (TemplateRef) and inserted into a\n * different LContainer.\n */\nfunction trackMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertDefined(lView, 'LView required');\n  ngDevMode && assertLContainer(declarationContainer);\n  const movedViews = declarationContainer[MOVED_VIEWS];\n  const insertedLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertedLContainer);\n  const insertedComponentLView = insertedLContainer[PARENT]![DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');\n  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];\n  ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');\n  if (declaredComponentLView !== insertedComponentLView) {\n    // At this point the declaration-component is not same as insertion-component; this means that\n    // this is a transplanted view. Mark the declared lView as having transplanted views so that\n    // those views can participate in CD.\n    declarationContainer[HAS_TRANSPLANTED_VIEWS] = true;\n  }\n  if (movedViews === null) {\n    declarationContainer[MOVED_VIEWS] = [lView];\n  } else {\n    movedViews.push(lView);\n  }\n}\n\nfunction detachMovedView(declarationContainer: LContainer, lView: LView) {\n  ngDevMode && assertLContainer(declarationContainer);\n  ngDevMode &&\n      assertDefined(\n          declarationContainer[MOVED_VIEWS],\n          'A projected view should belong to a non-empty projected views collection');\n  const movedViews = declarationContainer[MOVED_VIEWS]!;\n  const declarationViewIndex = movedViews.indexOf(lView);\n  const insertionLContainer = lView[PARENT] as LContainer;\n  ngDevMode && assertLContainer(insertionLContainer);\n\n  // If the view was marked for refresh but then detached before it was checked (where the flag\n  // would be cleared and the counter decremented), we need to decrement the view counter here\n  // instead.\n  if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n    lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n    updateTransplantedViewCount(insertionLContainer, -1);\n  }\n\n  movedViews.splice(declarationViewIndex, 1);\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method removes the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number): LView|undefined {\n  if (lContainer.length <= CONTAINER_HEADER_OFFSET) return;\n\n  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;\n  const viewToDetach = lContainer[indexInContainer];\n\n  if (viewToDetach) {\n    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];\n    if (declarationLContainer !== null && declarationLContainer !== lContainer) {\n      detachMovedView(declarationLContainer, viewToDetach);\n    }\n\n\n    if (removeIndex > 0) {\n      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT] as LView;\n    }\n    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);\n    removeViewFromContainer(viewToDetach[TVIEW], viewToDetach);\n\n    // notify query that a view has been removed\n    const lQueries = removedLView[QUERIES];\n    if (lQueries !== null) {\n      lQueries.detachView(removedLView[TVIEW]);\n    }\n\n    viewToDetach[PARENT] = null;\n    viewToDetach[NEXT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  }\n  return viewToDetach;\n}\n\n/**\n * A standalone function which destroys an LView,\n * conducting clean up (e.g. removing listeners, calling onDestroys).\n *\n * @param tView The `TView' of the `LView` to be destroyed\n * @param lView The view to be destroyed.\n */\nexport function destroyLView(tView: TView, lView: LView) {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    const renderer = lView[RENDERER];\n    if (renderer.destroyNode) {\n      applyView(tView, lView, renderer, WalkTNodeTreeAction.Destroy, null, null);\n    }\n\n    destroyViewTree(lView);\n  }\n}\n\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param tView `TView` for the `LView` to clean up.\n * @param lView The LView to clean up\n */\nfunction cleanUpView(tView: TView, lView: LView): void {\n  if (!(lView[FLAGS] & LViewFlags.Destroyed)) {\n    // Usually the Attached flag is removed when the view is detached from its parent, however\n    // if it's a root view, the flag won't be unset hence why we're also removing on destroy.\n    lView[FLAGS] &= ~LViewFlags.Attached;\n\n    // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook\n    // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If\n    // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.\n    // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is\n    // really more of an \"afterDestroy\" hook if you think about it.\n    lView[FLAGS] |= LViewFlags.Destroyed;\n\n    executeOnDestroys(tView, lView);\n    processCleanups(tView, lView);\n    // For component views only, the local renderer is destroyed at clean up time.\n    if (lView[TVIEW].type === TViewType.Component) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      lView[RENDERER].destroy();\n    }\n\n    const declarationContainer = lView[DECLARATION_LCONTAINER];\n    // we are dealing with an embedded view that is still inserted into a container\n    if (declarationContainer !== null && isLContainer(lView[PARENT])) {\n      // and this is a projected view\n      if (declarationContainer !== lView[PARENT]) {\n        detachMovedView(declarationContainer, lView);\n      }\n\n      // For embedded views still attached to a container: remove query result from this view.\n      const lQueries = lView[QUERIES];\n      if (lQueries !== null) {\n        lQueries.detachView(tView);\n      }\n    }\n\n    // Unregister the view once everything else has been cleaned up.\n    unregisterLView(lView);\n  }\n}\n\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction processCleanups(tView: TView, lView: LView): void {\n  const tCleanup = tView.cleanup;\n  const lCleanup = lView[CLEANUP]!;\n  // `LCleanup` contains both share information with `TCleanup` as well as instance specific\n  // information appended at the end. We need to know where the end of the `TCleanup` information\n  // is, and we track this with `lastLCleanupIndex`.\n  let lastLCleanupIndex = -1;\n  if (tCleanup !== null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a native DOM listener. It will occupy 4 entries in the TCleanup array (hence i +=\n        // 2 at the end of this block).\n        const targetIdx = tCleanup[i + 3];\n        ngDevMode && assertNumber(targetIdx, 'cleanup target must be a number');\n        if (targetIdx >= 0) {\n          // unregister\n          lCleanup[lastLCleanupIndex = targetIdx]();\n        } else {\n          // Subscription\n          lCleanup[lastLCleanupIndex = -targetIdx].unsubscribe();\n        }\n        i += 2;\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[lastLCleanupIndex = tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n  }\n  if (lCleanup !== null) {\n    for (let i = lastLCleanupIndex + 1; i < lCleanup.length; i++) {\n      const instanceCleanupFn = lCleanup[i];\n      ngDevMode && assertFunction(instanceCleanupFn, 'Expecting instance cleanup function.');\n      instanceCleanupFn();\n    }\n    lView[CLEANUP] = null;\n  }\n}\n\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(tView: TView, lView: LView): void {\n  let destroyHooks: DestroyHookData|null;\n\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    for (let i = 0; i < destroyHooks.length; i += 2) {\n      const context = lView[destroyHooks[i] as number];\n\n      // Only call the destroy hook if the context has been requested.\n      if (!(context instanceof NodeInjectorFactory)) {\n        const toCall = destroyHooks[i + 1] as HookFn | HookData;\n\n        if (Array.isArray(toCall)) {\n          for (let j = 0; j < toCall.length; j += 2) {\n            const callContext = context[toCall[j] as number];\n            const hook = toCall[j + 1] as HookFn;\n            profiler(ProfilerEvent.LifecycleHookStart, callContext, hook);\n            try {\n              hook.call(callContext);\n            } finally {\n              profiler(ProfilerEvent.LifecycleHookEnd, callContext, hook);\n            }\n          }\n        } else {\n          profiler(ProfilerEvent.LifecycleHookStart, context, toCall);\n          try {\n            toCall.call(context);\n          } finally {\n            profiler(ProfilerEvent.LifecycleHookEnd, context, toCall);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is made for projection but has not been inserted\n *   into destination.\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve render parent.\n * @param lView: Current `LView`.\n */\nexport function getParentRElement(tView: TView, tNode: TNode, lView: LView): RElement|null {\n  return getClosestRElement(tView, tNode.parent, lView);\n}\n\n/**\n * Get closest `RElement` or `null` if it can't be found.\n *\n * If `TNode` is `TNodeType.Element` => return `RElement` at `LView[tNode.index]` location.\n * If `TNode` is `TNodeType.ElementContainer|IcuContain` => return the parent (recursively).\n * If `TNode` is `null` then return host `RElement`:\n *   - return `null` if projection\n *   - return `null` if parent container is disconnected (we have no parent.)\n *\n * @param tView: Current `TView`.\n * @param tNode: `TNode` for which we wish to retrieve `RElement` (or `null` if host element is\n *     needed).\n * @param lView: Current `LView`.\n * @returns `null` if the `RElement` can't be determined at this time (no parent / projection)\n */\nexport function getClosestRElement(tView: TView, tNode: TNode|null, lView: LView): RElement|null {\n  let parentTNode: TNode|null = tNode;\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  while (parentTNode !== null &&\n         (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu))) {\n    tNode = parentTNode;\n    parentTNode = tNode.parent;\n  }\n\n  // If the parent tNode is null, then we are inserting across views: either into an embedded view\n  // or a component view.\n  if (parentTNode === null) {\n    // We are inserting a root element of the component view into the component host element and\n    // it should always be eager.\n    return lView[HOST];\n  } else {\n    ngDevMode && assertTNodeType(parentTNode, TNodeType.AnyRNode | TNodeType.Container);\n    const {componentOffset} = parentTNode;\n    if (componentOffset > -1) {\n      ngDevMode && assertTNodeForLView(parentTNode, lView);\n      const {encapsulation} =\n          (tView.data[parentTNode.directiveStart + componentOffset] as ComponentDef<unknown>);\n      // We've got a parent which is an element in the current view. We just need to verify if the\n      // parent element is not a component. Component's content nodes are not inserted immediately\n      // because they will be projected, and so doing insert at this point would be wasteful.\n      // Since the projection would then move it to its final destination. Note that we can't\n      // make this assumption when using the Shadow DOM, because the native projection placeholders\n      // (<content> or <slot>) have to be in place as elements are being inserted.\n      if (encapsulation === ViewEncapsulation.None ||\n          encapsulation === ViewEncapsulation.Emulated) {\n        return null;\n      }\n    }\n\n    return getNativeByTNode(parentTNode, lView) as RElement;\n  }\n}\n\n/**\n * Inserts a native node before another native node for a given parent.\n * This is a utility function that can be used when native nodes were determined.\n */\nexport function nativeInsertBefore(\n    renderer: Renderer, parent: RElement, child: RNode, beforeNode: RNode|null,\n    isMove: boolean): void {\n  ngDevMode && ngDevMode.rendererInsertBefore++;\n  renderer.insertBefore(parent, child, beforeNode, isMove);\n}\n\nfunction nativeAppendChild(renderer: Renderer, parent: RElement, child: RNode): void {\n  ngDevMode && ngDevMode.rendererAppendChild++;\n  ngDevMode && assertDefined(parent, 'parent node must be defined');\n  renderer.appendChild(parent, child);\n}\n\nfunction nativeAppendOrInsertBefore(\n    renderer: Renderer, parent: RElement, child: RNode, beforeNode: RNode|null, isMove: boolean) {\n  if (beforeNode !== null) {\n    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);\n  } else {\n    nativeAppendChild(renderer, parent, child);\n  }\n}\n\n/** Removes a node from the DOM given its native parent. */\nfunction nativeRemoveChild(\n    renderer: Renderer, parent: RElement, child: RNode, isHostElement?: boolean): void {\n  renderer.removeChild(parent, child, isHostElement);\n}\n\n/** Checks if an element is a `<template>` node. */\nfunction isTemplateNode(node: RElement): node is RTemplate {\n  return node.tagName === 'TEMPLATE' && (node as RTemplate).content !== undefined;\n}\n\n/**\n * Returns a native parent of a given native node.\n */\nexport function nativeParentNode(renderer: Renderer, node: RNode): RElement|null {\n  return renderer.parentNode(node);\n}\n\n/**\n * Returns a native sibling of a given native node.\n */\nexport function nativeNextSibling(renderer: Renderer, node: RNode): RNode|null {\n  return renderer.nextSibling(node);\n}\n\n/**\n * Find a node in front of which `currentTNode` should be inserted.\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account if i18n code has been invoked.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nfunction getInsertInFrontOfRNode(parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|\n    null {\n  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);\n}\n\n\n/**\n * Find a node in front of which `currentTNode` should be inserted. (Does not take i18n into\n * account)\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * does not take `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithNoI18n(\n    parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|null {\n  if (parentTNode.type & (TNodeType.ElementContainer | TNodeType.Icu)) {\n    return getNativeByTNode(parentTNode, lView);\n  }\n  return null;\n}\n\n/**\n * Tree shakable boundary for `getInsertInFrontOfRNodeWithI18n` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n    RNode | null = getInsertInFrontOfRNodeWithNoI18n;\n\n/**\n * Tree shakable boundary for `processI18nInsertBefore` function.\n *\n * This function will only be set if i18n code runs.\n */\nlet _processI18nInsertBefore: (\n    renderer: Renderer, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n    parentRElement: RElement|null) => void;\n\nexport function setI18nHandling(\n    getInsertInFrontOfRNodeWithI18n: (parentTNode: TNode, currentTNode: TNode, lView: LView) =>\n        RNode | null,\n    processI18nInsertBefore: (\n        renderer: Renderer, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n        parentRElement: RElement|null) => void) {\n  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n;\n  _processI18nInsertBefore = processI18nInsertBefore;\n}\n\n/**\n * Appends the `child` native node (or a collection of nodes) to the `parent`.\n *\n * @param tView The `TView' to be appended\n * @param lView The current LView\n * @param childRNode The native child (or children) that should be appended\n * @param childTNode The TNode of the child element\n */\nexport function appendChild(\n    tView: TView, lView: LView, childRNode: RNode|RNode[], childTNode: TNode): void {\n  const parentRNode = getParentRElement(tView, childTNode, lView);\n  const renderer = lView[RENDERER];\n  const parentTNode: TNode = childTNode.parent || lView[T_HOST]!;\n  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);\n  if (parentRNode != null) {\n    if (Array.isArray(childRNode)) {\n      for (let i = 0; i < childRNode.length; i++) {\n        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);\n      }\n    } else {\n      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);\n    }\n  }\n\n  _processI18nInsertBefore !== undefined &&\n      _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);\n}\n\n/**\n * Returns the first native node for a given LView, starting from the provided TNode.\n *\n * Native nodes are returned in the order in which those appear in the native tree (DOM).\n */\nfunction getFirstNativeNode(lView: LView, tNode: TNode|null): RNode|null {\n  if (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu | TNodeType.Projection);\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.AnyRNode) {\n      return getNativeByTNode(tNode, lView);\n    } else if (tNodeType & TNodeType.Container) {\n      return getBeforeNodeForView(-1, lView[tNode.index]);\n    } else if (tNodeType & TNodeType.ElementContainer) {\n      const elIcuContainerChild = tNode.child;\n      if (elIcuContainerChild !== null) {\n        return getFirstNativeNode(lView, elIcuContainerChild);\n      } else {\n        const rNodeOrLContainer = lView[tNode.index];\n        if (isLContainer(rNodeOrLContainer)) {\n          return getBeforeNodeForView(-1, rNodeOrLContainer);\n        } else {\n          return unwrapRNode(rNodeOrLContainer);\n        }\n      }\n    } else if (tNodeType & TNodeType.Icu) {\n      let nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null = nextRNode();\n      // If the ICU container has no nodes, than we use the ICU anchor as the node.\n      return rNode || unwrapRNode(lView[tNode.index]);\n    } else {\n      const projectionNodes = getProjectionNodes(lView, tNode);\n      if (projectionNodes !== null) {\n        if (Array.isArray(projectionNodes)) {\n          return projectionNodes[0];\n        }\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);\n        ngDevMode && assertParentView(parentView);\n        return getFirstNativeNode(parentView!, projectionNodes);\n      } else {\n        return getFirstNativeNode(lView, tNode.next);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function getProjectionNodes(lView: LView, tNode: TNode|null): TNode|RNode[]|null {\n  if (tNode !== null) {\n    const componentView = lView[DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const slotIdx = tNode.projection as number;\n    ngDevMode && assertProjectionSlots(lView);\n    return componentHost.projection![slotIdx];\n  }\n  return null;\n}\n\nexport function getBeforeNodeForView(viewIndexInContainer: number, lContainer: LContainer): RNode|\n    null {\n  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;\n  if (nextViewIndex < lContainer.length) {\n    const lView = lContainer[nextViewIndex] as LView;\n    const firstTNodeOfView = lView[TVIEW].firstChild;\n    if (firstTNodeOfView !== null) {\n      return getFirstNativeNode(lView, firstTNodeOfView);\n    }\n  }\n\n  return lContainer[NATIVE];\n}\n\n/**\n * Removes a native node itself using a given renderer. To remove the node we are looking up its\n * parent from the native tree as not all platforms / browsers support the equivalent of\n * node.remove().\n *\n * @param renderer A renderer to be used\n * @param rNode The native node that should be removed\n * @param isHostElement A flag indicating if a node to be removed is a host of a component.\n */\nexport function nativeRemoveNode(renderer: Renderer, rNode: RNode, isHostElement?: boolean): void {\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n  const nativeParent = nativeParentNode(renderer, rNode);\n  if (nativeParent) {\n    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);\n  }\n}\n\n\n/**\n * Performs the operation of `action` on the node. Typically this involves inserting or removing\n * nodes on the LView or projection boundary.\n */\nfunction applyNodes(\n    renderer: Renderer, action: WalkTNodeTreeAction, tNode: TNode|null, lView: LView,\n    parentRElement: RElement|null, beforeNode: RNode|null, isProjection: boolean) {\n  while (tNode != null) {\n    ngDevMode && assertTNodeForLView(tNode, lView);\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n    const rawSlotValue = lView[tNode.index];\n    const tNodeType = tNode.type;\n    if (isProjection) {\n      if (action === WalkTNodeTreeAction.Create) {\n        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);\n        tNode.flags |= TNodeFlags.isProjected;\n      }\n    }\n    if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n      if (tNodeType & TNodeType.ElementContainer) {\n        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Icu) {\n        const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n        let rNode: RNode|null;\n        while (rNode = nextRNode()) {\n          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n        }\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      } else if (tNodeType & TNodeType.Projection) {\n        applyProjectionRecursive(\n            renderer, action, lView, tNode as TProjectionNode, parentRElement, beforeNode);\n      } else {\n        ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.Container);\n        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n}\n\n\n/**\n * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)\n *\n * Inserting a view without projection or containers at top level is simple. Just iterate over the\n * root nodes of the View, and for each node perform the `action`.\n *\n * Things get more complicated with containers and projections. That is because coming across:\n * - Container: implies that we have to insert/remove/destroy the views of that container as well\n *              which in turn can have their own Containers at the View roots.\n * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The\n *               complication is that the nodes we are projecting can themselves have Containers\n *               or other Projections.\n *\n * As you can see this is a very recursive problem. Yes recursion is not most efficient but the\n * code is complicated enough that trying to implemented with recursion becomes unmaintainable.\n *\n * @param tView The `TView' which needs to be inserted, detached, destroyed\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param parentRElement parent DOM element for insertion (Removal does not need it).\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer, action: WalkTNodeTreeAction.Destroy,\n    parentRElement: null, beforeNode: null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void;\nfunction applyView(\n    tView: TView, lView: LView, renderer: Renderer, action: WalkTNodeTreeAction,\n    parentRElement: RElement|null, beforeNode: RNode|null): void {\n  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);\n}\n\n/**\n * `applyProjection` performs operation on the projection.\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param tView The `TView` of `LView` which needs to be inserted, detached, destroyed\n * @param lView The `LView` which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n */\nexport function applyProjection(tView: TView, lView: LView, tProjectionNode: TProjectionNode) {\n  const renderer = lView[RENDERER];\n  const parentRNode = getParentRElement(tView, tProjectionNode, lView);\n  const parentTNode = tProjectionNode.parent || lView[T_HOST]!;\n  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);\n  applyProjectionRecursive(\n      renderer, WalkTNodeTreeAction.Create, lView, tProjectionNode, parentRNode, beforeNode);\n}\n\n/**\n * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,\n * detach, destroy)\n *\n * Inserting a projection requires us to locate the projected nodes from the parent component. The\n * complication is that those nodes themselves could be re-projected from their parent component.\n *\n * @param renderer Render to use\n * @param action action to perform (insert, detach, destroy)\n * @param lView The LView which needs to be inserted, detached, destroyed.\n * @param tProjectionNode node to project\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyProjectionRecursive(\n    renderer: Renderer, action: WalkTNodeTreeAction, lView: LView, tProjectionNode: TProjectionNode,\n    parentRElement: RElement|null, beforeNode: RNode|null) {\n  const componentLView = lView[DECLARATION_COMPONENT_VIEW];\n  const componentNode = componentLView[T_HOST] as TElementNode;\n  ngDevMode &&\n      assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');\n  const nodeToProjectOrRNodes = componentNode.projection![tProjectionNode.projection]!;\n  if (Array.isArray(nodeToProjectOrRNodes)) {\n    // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we\n    // need to support passing projectable nodes, so we cheat and put them in the TNode\n    // of the Host TView. (Yes we put instance info at the T Level). We can get away with it\n    // because we know that that TView is not shared and therefore it will not be a problem.\n    // This should be refactored and cleaned up.\n    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {\n      const rNode = nodeToProjectOrRNodes[i];\n      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);\n    }\n  } else {\n    let nodeToProject: TNode|null = nodeToProjectOrRNodes;\n    const projectedComponentLView = componentLView[PARENT] as LView;\n    applyNodes(\n        renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);\n  }\n}\n\n\n/**\n * `applyContainer` performs an operation on the container and its views as specified by\n * `action` (insert, detach, destroy)\n *\n * Inserting a Container is complicated by the fact that the container may have Views which\n * themselves have containers or projections.\n *\n * @param renderer Renderer to use\n * @param action action to perform (insert, detach, destroy)\n * @param lContainer The LContainer which needs to be inserted, detached, destroyed.\n * @param parentRElement parent DOM element for insertion/removal.\n * @param beforeNode Before which node the insertions should happen.\n */\nfunction applyContainer(\n    renderer: Renderer, action: WalkTNodeTreeAction, lContainer: LContainer,\n    parentRElement: RElement|null, beforeNode: RNode|null|undefined) {\n  ngDevMode && assertLContainer(lContainer);\n  const anchor = lContainer[NATIVE];  // LContainer has its own before node.\n  const native = unwrapRNode(lContainer);\n  // An LContainer can be created dynamically on any node by injecting ViewContainerRef.\n  // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor\n  // node (comment in the DOM) that will be different from the LContainer's host node. In this\n  // particular case we need to execute action on 2 nodes:\n  // - container's host node (this is done in the executeActionOnElementOrContainer)\n  // - container's host node (this is done here)\n  if (anchor !== native) {\n    // This is very strange to me (Misko). I would expect that the native is same as anchor. I\n    // don't see a reason why they should be different, but they are.\n    //\n    // If they are we need to process the second anchor as well.\n    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);\n  }\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const lView = lContainer[i] as LView;\n    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);\n  }\n}\n\n/**\n * Writes class/style to element.\n *\n * @param renderer Renderer to use.\n * @param isClassBased `true` if it should be written to `class` (`false` to write to `style`)\n * @param rNode The Node to write to.\n * @param prop Property to write to. This would be the class/style name.\n * @param value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add\n *        otherwise).\n */\nexport function applyStyling(\n    renderer: Renderer, isClassBased: boolean, rNode: RElement, prop: string, value: any) {\n  if (isClassBased) {\n    // We actually want JS true/false here because any truthy value should add the class\n    if (!value) {\n      ngDevMode && ngDevMode.rendererRemoveClass++;\n      renderer.removeClass(rNode, prop);\n    } else {\n      ngDevMode && ngDevMode.rendererAddClass++;\n      renderer.addClass(rNode, prop);\n    }\n  } else {\n    let flags = prop.indexOf('-') === -1 ? undefined : RendererStyleFlags2.DashCase as number;\n    if (value == null /** || value === undefined */) {\n      ngDevMode && ngDevMode.rendererRemoveStyle++;\n      renderer.removeStyle(rNode, prop, flags);\n    } else {\n      // A value is important if it ends with `!important`. The style\n      // parser strips any semicolons at the end of the value.\n      const isImportant = typeof value === 'string' ? value.endsWith('!important') : false;\n\n      if (isImportant) {\n        // !important has to be stripped from the value for it to be valid.\n        value = value.slice(0, -10);\n        flags! |= RendererStyleFlags2.Important;\n      }\n\n      ngDevMode && ngDevMode.rendererSetStyle++;\n      renderer.setStyle(rNode, prop, value, flags);\n    }\n  }\n}\n\n\n/**\n * Write `cssText` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectStyle(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  renderer.setAttribute(element, 'style', newValue);\n  ngDevMode && ngDevMode.rendererSetStyle++;\n}\n\n/**\n * Write `className` to `RElement`.\n *\n * This function does direct write without any reconciliation. Used for writing initial values, so\n * that static styling values do not pull in the style parser.\n *\n * @param renderer Renderer to use\n * @param element The element which needs to be updated.\n * @param newValue The new class list to write.\n */\nexport function writeDirectClass(renderer: Renderer, element: RElement, newValue: string) {\n  ngDevMode && assertString(newValue, '\\'newValue\\' should be a string');\n  if (newValue === '') {\n    // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.\n    renderer.removeAttribute(element, 'class');\n  } else {\n    renderer.setAttribute(element, 'class', newValue);\n  }\n  ngDevMode && ngDevMode.rendererSetClassName++;\n}\n\n/** Sets up the static DOM attributes on an `RNode`. */\nexport function setupStaticAttributes(renderer: Renderer, element: RElement, tNode: TNode) {\n  const {mergedAttrs, classes, styles} = tNode;\n\n  if (mergedAttrs !== null) {\n    setUpAttributes(renderer, element, mergedAttrs);\n  }\n\n  if (classes !== null) {\n    writeDirectClass(renderer, element, classes);\n  }\n\n  if (styles !== null) {\n    writeDirectStyle(renderer, element, styles);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular. It lazily constructs the Trusted Types policy, providing helper\n * utilities for promoting strings to Trusted Types. When Trusted Types are not\n * available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy|null|undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy|null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory).createPolicy('angular', {\n          createHTML: (s: string) => s,\n          createScript: (s: string) => s,\n          createScriptURL: (s: string) => s,\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nexport function trustedHTMLFromString(html: string): TrustedHTML|string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security In particular, it must be assured that the provided string will\n * never cause an XSS vulnerability if used in a context that will be\n * interpreted and executed as a script by a browser, e.g. when calling eval.\n */\nexport function trustedScriptFromString(script: string): TrustedScript|string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will cause a browser to load and execute a resource, e.g. when\n * assigning to script.src.\n */\nexport function trustedScriptURLFromString(url: string): TrustedScriptURL|string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n\n/**\n * Unsafely call the Function constructor with the given string arguments. It\n * is only available in development mode, and should be stripped out of\n * production code.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only called from development code, as use in production code can lead to\n * XSS vulnerabilities.\n */\nexport function newTrustedFunctionForDev(...args: string[]): Function {\n  if (typeof ngDevMode === 'undefined') {\n    throw new Error('newTrustedFunctionForDev should never be called in production');\n  }\n  if (!global.trustedTypes) {\n    // In environments that don't support Trusted Types, fall back to the most\n    // straightforward implementation:\n    return new Function(...args);\n  }\n\n  // Chrome currently does not support passing TrustedScript to the Function\n  // constructor. The following implements the workaround proposed on the page\n  // below, where the Chromium bug is also referenced:\n  // https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n  const fnArgs = args.slice(0, -1).join(',');\n  const fnBody = args[args.length - 1];\n  const body = `(function anonymous(${fnArgs}\n) { ${fnBody}\n})`;\n\n  // Using eval directly confuses the compiler and prevents this module from\n  // being stripped out of JS binaries even if not used. The global['eval']\n  // indirection fixes that.\n  const fn = global['eval'](trustedScriptFromString(body) as string) as Function;\n  if (fn.bind === undefined) {\n    // Workaround for a browser bug that only exists in Chrome 83, where passing\n    // a TrustedScript to eval just returns the TrustedScript back without\n    // evaluating it. In that case, fall back to the most straightforward\n    // implementation:\n    return new Function(...args);\n  }\n\n  // To completely mimic the behavior of calling \"new Function\", two more\n  // things need to happen:\n  // 1. Stringifying the resulting function should return its source code\n  fn.toString = () => body;\n  // 2. When calling the resulting function, `this` should refer to `global`\n  return fn.bind(global);\n\n  // When Trusted Types support in Function constructors is widely available,\n  // the implementation of this function can be simplified to:\n  // return new Function(...args.map(a => trustedScriptFromString(a)));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {getTemplateLocationDetails} from '../render3/instructions/element_validation';\nimport {TNodeType} from '../render3/interfaces/node';\nimport {RComment, RElement} from '../render3/interfaces/renderer_dom';\nimport {RENDERER} from '../render3/interfaces/view';\nimport {nativeRemoveNode} from '../render3/node_manipulation';\nimport {getLView, getSelectedTNode} from '../render3/state';\nimport {getNativeByTNode} from '../render3/util/view_utils';\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\n\n/**\n * Validation function invoked at runtime for each binding that might potentially\n * represent a security-sensitive attribute of an <iframe>.\n * See `IFRAME_SECURITY_SENSITIVE_ATTRS` in the\n * `packages/compiler/src/schema/dom_security_schema.ts` script for the full list\n * of such attributes.\n *\n * @codeGenApi\n */\nexport function ɵɵvalidateIframeAttribute(attrValue: any, tagName: string, attrName: string) {\n  const lView = getLView();\n  const tNode = getSelectedTNode()!;\n  const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n\n  // Restrict any dynamic bindings of security-sensitive attributes/properties\n  // on an <iframe> for security reasons.\n  if (tNode.type === TNodeType.Element && tagName.toLowerCase() === 'iframe') {\n    const iframe = element as HTMLIFrameElement;\n\n    // Unset previously applied `src` and `srcdoc` if we come across a situation when\n    // a security-sensitive attribute is set later via an attribute/property binding.\n    iframe.src = '';\n    iframe.srcdoc = trustedHTMLFromString('') as unknown as string;\n\n    // Also remove the <iframe> from the document.\n    nativeRemoveNode(lView[RENDERER], iframe);\n\n    const errorMessage = ngDevMode &&\n        `Angular has detected that the \\`${attrName}\\` was applied ` +\n            `as a binding to an <iframe>${getTemplateLocationDetails(lView)}. ` +\n            `For security reasons, the \\`${attrName}\\` can be set on an <iframe> ` +\n            `as a static attribute only. \\n` +\n            `To fix this, switch the \\`${attrName}\\` binding to a static attribute ` +\n            `in a template or in host bindings section.`;\n    throw new RuntimeError(RuntimeErrorCode.UNSAFE_IFRAME_ATTRS, errorMessage);\n  }\n  return attrValue;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Most of the use of `document` in Angular is from within the DI system so it is possible to simply\n * inject the `DOCUMENT` token and are done.\n *\n * Ivy is special because it does not rely upon the DI and must get hold of the document some other\n * way.\n *\n * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.\n * Wherever ivy needs the global document, it calls `getDocument()` instead.\n *\n * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to\n * tell ivy what the global `document` is.\n *\n * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)\n * by calling `setDocument()` when providing the `DOCUMENT` token.\n */\nlet DOCUMENT: Document|undefined = undefined;\n\n/**\n * Tell ivy what the `document` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global `document` in this environment.\n */\nexport function setDocument(document: Document|undefined): void {\n  DOCUMENT = document;\n}\n\n/**\n * Access the object that represents the `document` for this platform.\n *\n * Ivy calls this whenever it needs to access the `document` object.\n * For example to create the renderer or to do sanitization.\n */\nexport function getDocument(): Document {\n  if (DOCUMENT !== undefined) {\n    return DOCUMENT;\n  } else if (typeof document !== 'undefined') {\n    return document;\n  }\n  // No \"document\" can be found. This should only happen if we are running ivy outside Angular and\n  // the current platform is not a browser. Since this is not a supported scenario at the moment\n  // this should not happen in Angular apps.\n  // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a\n  // public API. Meanwhile we just return `undefined` and let the application fail.\n  return undefined!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * Angular specifically for bypassSecurityTrust* and custom sanitizers. It\n * lazily constructs the Trusted Types policy, providing helper utilities for\n * promoting strings to Trusted Types. When Trusted Types are not available,\n * strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {global} from '../global';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_type_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy|null|undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy|null {\n  if (policy === undefined) {\n    policy = null;\n    if (global.trustedTypes) {\n      try {\n        policy = (global.trustedTypes as TrustedTypePolicyFactory)\n                     .createPolicy('angular#unsafe-bypass', {\n                       createHTML: (s: string) => s,\n                       createScript: (s: string) => s,\n                       createScriptURL: (s: string) => s,\n                     });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedHTMLFromStringBypass(html: string): TrustedHTML|string {\n  return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Unsafely promote a string to a TrustedScript, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptFromStringBypass(script: string): TrustedScript|string {\n  return getPolicy()?.createScript(script) || script;\n}\n\n/**\n * Unsafely promote a string to a TrustedScriptURL, falling back to strings\n * when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that it\n * is only passed strings that come directly from custom sanitizers or the\n * bypassSecurityTrust* functions.\n */\nexport function trustedScriptURLFromStringBypass(url: string): TrustedScriptURL|string {\n  return getPolicy()?.createScriptURL(url) || url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\n\nexport const enum BypassType {\n  Url = 'URL',\n  Html = 'HTML',\n  ResourceUrl = 'ResourceURL',\n  Script = 'Script',\n  Style = 'Style',\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {}\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see ${XSS_SECURITY_URL})`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  override getTypeName() {\n    return BypassType.Html;\n  }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  override getTypeName() {\n    return BypassType.Style;\n  }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  override getTypeName() {\n    return BypassType.Script;\n  }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  override getTypeName() {\n    return BypassType.Url;\n  }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  override getTypeName() {\n    return BypassType.ResourceUrl;\n  }\n}\n\nexport function unwrapSafeValue(value: SafeValue): string;\nexport function unwrapSafeValue<T>(value: T): T;\nexport function unwrapSafeValue<T>(value: T|SafeValue): T {\n  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity as any as T :\n                                          value as any as T;\n}\n\n\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Html): value is SafeHtml;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.ResourceUrl): value is SafeResourceUrl;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Script): value is SafeScript;\nexport function allowSanitizationBypassAndThrow(\n    value: any, type: BypassType.Style): value is SafeStyle;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType.Url): value is SafeUrl;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean;\nexport function allowSanitizationBypassAndThrow(value: any, type: BypassType): boolean {\n  const actualType = getSanitizationBypassType(value);\n  if (actualType != null && actualType !== type) {\n    // Allow ResourceURLs in URL contexts, they are strictly more trusted.\n    if (actualType === BypassType.ResourceUrl && type === BypassType.Url) return true;\n    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);\n  }\n  return actualType === type;\n}\n\nexport function getSanitizationBypassType(value: any): BypassType|null {\n  return value instanceof SafeValueImpl && value.getTypeName() as BypassType || null;\n}\n\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml `html` string which needs to be implicitly trusted.\n * @returns a `html` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml: string): SafeHtml {\n  return new SafeHtmlImpl(trustedHtml);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle `style` string which needs to be implicitly trusted.\n * @returns a `style` hich has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle: string): SafeStyle {\n  return new SafeStyleImpl(trustedStyle);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript `script` string which needs to be implicitly trusted.\n * @returns a `script` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript: string): SafeScript {\n  return new SafeScriptImpl(trustedScript);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl `url` string which needs to be implicitly trusted.\n * @returns a `url`  which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl: string): SafeUrl {\n  return new SafeUrlImpl(trustedUrl);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @returns a `url` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl: string): SafeResourceUrl {\n  return new SafeResourceUrlImpl(trustedResourceUrl);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\n/**\n * This helper is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we use one of two strategies for doing this.\n * Default: DOMParser strategy\n * Fallback: InertDocument strategy\n */\nexport function getInertBodyHelper(defaultDoc: Document): InertBodyHelper {\n  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);\n  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;\n}\n\nexport interface InertBodyHelper {\n  /**\n   * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n   */\n  getInertBodyElement: (html: string) => HTMLElement | null;\n}\n\n/**\n * Uses DOMParser to create and fill an inert body element.\n * This is the default strategy used in browsers that support it.\n */\nclass DOMParserHelper implements InertBodyHelper {\n  constructor(private inertDocumentHelper: InertBodyHelper) {}\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag. Note that the `<body>` tag is closed implicitly to prevent unclosed tags\n    // in `html` from consuming the otherwise explicit `</body>` tag.\n    html = '<body><remove></remove>' + html;\n    try {\n      const body = new window.DOMParser()\n                       .parseFromString(trustedHTMLFromString(html) as string, 'text/html')\n                       .body as HTMLBodyElement;\n      if (body === null) {\n        // In some browsers (e.g. Mozilla/5.0 iPad AppleWebKit Mobile) the `body` property only\n        // becomes available in the following tick of the JS engine. In that case we fall back to\n        // the `inertDocumentHelper` instead.\n        return this.inertDocumentHelper.getInertBodyElement(html);\n      }\n      body.removeChild(body.firstChild!);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n}\n\n/**\n * Use an HTML5 `template` element to create and fill an inert DOM element.\n * This is the fallback strategy if the browser does not support DOMParser.\n */\nclass InertDocumentHelper implements InertBodyHelper {\n  private inertDocument: Document;\n\n  constructor(private defaultDoc: Document) {\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n  }\n\n  getInertBodyElement(html: string): HTMLElement|null {\n    const templateEl = this.inertDocument.createElement('template');\n    templateEl.innerHTML = trustedHTMLFromString(html) as string;\n    return templateEl;\n  }\n}\n\n/**\n * We need to determine whether the DOMParser exists in the global context and\n * supports parsing HTML; HTML parsing support is not as wide as other formats, see\n * https://developer.mozilla.org/en-US/docs/Web/API/DOMParser#Browser_compatibility.\n *\n * @suppress {uselessCode}\n */\nexport function isDOMParserAvailable() {\n  try {\n    return !!new window.DOMParser().parseFromString(\n        trustedHTMLFromString('') as string, 'text/html');\n  } catch {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if:\n * (1) Either a protocol that is not javascript:, and that has valid characters\n *     (alphanumeric or [+-.]).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\\/?#]*(?:[\\/?#]|$))/i;\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN)) return url;\n\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);\n  }\n\n  return 'unsafe:' + url;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\nimport {TrustedHTML} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString} from '../util/security/trusted_types';\n\nimport {getInertBodyHelper, InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// https://html.spec.whatwg.org/#semantics\n// https://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// https://html.spec.whatwg.org/#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// https://html.spec.whatwg.org/#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nexport const VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\nconst HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)\nconst ARIA_ATTRS = tagSet(\n    'aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +\n    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +\n    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +\n    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +\n    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +\n    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +\n    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nexport const VALID_ATTRS = merge(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);\n\n// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.\n//\n// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)\n// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we\n// don't want to preserve the content, if the elements themselves are going to be removed.\nconst SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild!;\n    let traverseContent = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        traverseContent = this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue!);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (traverseContent && current.firstChild) {\n        current = current.firstChild!;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling!);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode!);\n      }\n    }\n    return this.buf.join('');\n  }\n\n  /**\n   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should\n   * be traversed. Element content must always be traversed (even if the element itself is not\n   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.\n   *\n   * @param element The element to sanitize.\n   * @return True if the element's contents should be traversed.\n   */\n  private startElement(element: Element): boolean {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr!.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr!.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n\n  private endElement(current: Element) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) {\n    this.buf.push(encodeEntities(chars));\n  }\n\n  checkClobberedElement(node: Node, nextNode: Node): Node {\n    if (nextNode &&\n        (node.compareDocumentPosition(nextNode) &\n         Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(`Failed to sanitize html because the element is clobbered: ${\n          (node as Element).outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const hi = match.charCodeAt(0);\n            const low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) {\n            return '&#' + match.charCodeAt(0) + ';';\n          })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): TrustedHTML|string {\n  let inertBodyElement: HTMLElement|null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement!.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n        getTemplateContent(inertBodyElement!) as Element || inertBodyElement);\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && sanitizer.sanitizedSomething) {\n      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);\n    }\n\n    return trustedHTMLFromString(safeHtml);\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nexport function getTemplateContent(el: Node): Node|null {\n  return 'content' in (el as any /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n      el.content :\n      null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XSS_SECURITY_URL} from '../error_details_base_url';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {getDocument} from '../render3/interfaces/document';\nimport {SANITIZER} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {TrustedHTML, TrustedScript, TrustedScriptURL} from '../util/security/trusted_type_defs';\nimport {trustedHTMLFromString, trustedScriptURLFromString} from '../util/security/trusted_types';\nimport {trustedHTMLFromStringBypass, trustedScriptFromStringBypass, trustedScriptURLFromStringBypass} from '../util/security/trusted_types_bypass';\n\nimport {allowSanitizationBypassAndThrow, BypassType, unwrapSafeValue} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {Sanitizer} from './sanitizer';\nimport {SecurityContext} from './security';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeHtml(unsafeHtml: any): TrustedHTML|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeHtml, BypassType.Html)) {\n    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));\n  }\n  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeStyle(unsafeStyle: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeStyle, BypassType.Style)) {\n    return unwrapSafeValue(unsafeStyle);\n  }\n  return renderStringify(unsafeStyle);\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrl(unsafeUrl: any): string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypassAndThrow(unsafeUrl, BypassType.Url)) {\n    return unwrapSafeValue(unsafeUrl);\n  }\n  return _sanitizeUrl(renderStringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): TrustedScriptURL|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptURLFromStringBypass(\n        sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));\n  }\n  throw new RuntimeError(\n      RuntimeErrorCode.UNSAFE_VALUE_IN_RESOURCE_URL,\n      ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeScript(unsafeScript: any): TrustedScript|string {\n  const sanitizer = getSanitizer();\n  if (sanitizer) {\n    return trustedScriptFromStringBypass(\n        sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '');\n  }\n  if (allowSanitizationBypassAndThrow(unsafeScript, BypassType.Script)) {\n    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));\n  }\n  throw new RuntimeError(\n      RuntimeErrorCode.UNSAFE_VALUE_IN_SCRIPT,\n      ngDevMode && 'unsafe value used in a script context');\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping `html`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantHtml(html: TemplateStringsArray): TrustedHTML|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantHtml`content`), without any interpolation\n  // (e.g. not ɵɵtrustConstantHtml`content ${variable}`). A TemplateStringsArray\n  // is an array with a `raw` property that is also an array. The associated\n  // template literal has no interpolation if and only if the length of the\n  // TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join('?')}`);\n  }\n  return trustedHTMLFromString(html[0]);\n}\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping `url`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nexport function ɵɵtrustConstantResourceUrl(url: TemplateStringsArray): TrustedScriptURL|string {\n  // The following runtime check ensures that the function was called as a\n  // template tag (e.g. ɵɵtrustConstantResourceUrl`content`), without any\n  // interpolation (e.g. not ɵɵtrustConstantResourceUrl`content ${variable}`). A\n  // TemplateStringsArray is an array with a `raw` property that is also an\n  // array. The associated template literal has no interpolation if and only if\n  // the length of the TemplateStringsArray is 1.\n  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {\n    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join('?')}`);\n  }\n  return trustedScriptURLFromString(url[0]);\n}\n\n/**\n * Detects which sanitizer to use for URL property, based on tag name and prop name.\n *\n * The rules are based on the RESOURCE_URL context config from\n * `packages/compiler/src/schema/dom_security_schema.ts`.\n * If tag and prop names don't match Resource URL schema, use URL sanitizer.\n */\nexport function getUrlSanitizer(tag: string, prop: string) {\n  if ((prop === 'src' &&\n       (tag === 'embed' || tag === 'frame' || tag === 'iframe' || tag === 'media' ||\n        tag === 'script')) ||\n      (prop === 'href' && (tag === 'base' || tag === 'link'))) {\n    return ɵɵsanitizeResourceUrl;\n  }\n  return ɵɵsanitizeUrl;\n}\n\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns `url` string which is safe to bind.\n *\n * @codeGenApi\n */\nexport function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl: any, tag: string, prop: string): any {\n  return getUrlSanitizer(tag, prop)(unsafeUrl);\n}\n\nexport function validateAgainstEventProperties(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage =\n        `Binding to event property '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...` +\n        `\\nIf '${name}' is a directive input, make sure the directive is imported by the` +\n        ` current module.`;\n    throw new RuntimeError(RuntimeErrorCode.INVALID_EVENT_BINDING, errorMessage);\n  }\n}\n\nexport function validateAgainstEventAttributes(name: string) {\n  if (name.toLowerCase().startsWith('on')) {\n    const errorMessage =\n        `Binding to event attribute '${name}' is disallowed for security reasons, ` +\n        `please use (${name.slice(2)})=...`;\n    throw new RuntimeError(RuntimeErrorCode.INVALID_EVENT_BINDING, errorMessage);\n  }\n}\n\nfunction getSanitizer(): Sanitizer|null {\n  const lView = getLView();\n  return lView && lView[SANITIZER];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nexport const ENVIRONMENT_INITIALIZER = new InjectionToken<() => void>('ENVIRONMENT_INITIALIZER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {InjectorMarkers} from './injector_marker';\n\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    'INJECTOR',\n    // Disable tslint because this is const enum which gets inlined not top level prop access.\n    // tslint:disable-next-line: no-toplevel-property-access\n    InjectorMarkers.Injector as any,  // Special value used by Ivy to identify `Injector`.\n);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {InjectionToken} from './injection_token';\n\nexport const INJECTOR_DEF_TYPES = new InjectionToken<Type<unknown>>('INJECTOR_DEF_TYPES');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {stringify} from '../util/stringify';\nimport {Injector} from './injector';\nimport {THROW_IF_NOT_FOUND} from './injector_compatibility';\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {getComponentDef} from '../render3/definition';\nimport {getFactoryDef} from '../render3/definition_factory';\nimport {throwCyclicDependencyError, throwInvalidProviderError} from '../render3/errors_di';\nimport {stringifyForError} from '../render3/util/stringify_utils';\nimport {deepForEach} from '../util/array_utils';\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {ENVIRONMENT_INITIALIZER} from './initializer_token';\nimport {ɵɵinject as inject} from './injector_compatibility';\nimport {getInjectorDef, InjectorType, InjectorTypeWithProviders} from './interface/defs';\nimport {ClassProvider, ConstructorProvider, EnvironmentProviders, ExistingProvider, FactoryProvider, ImportedNgModuleProviders, InternalEnvironmentProviders, isEnvironmentProviders, ModuleWithProviders, Provider, StaticClassProvider, TypeProvider, ValueProvider} from './interface/provider';\nimport {INJECTOR_DEF_TYPES} from './internal_tokens';\n\n/**\n * Wrap an array of `Provider`s into `EnvironmentProviders`, preventing them from being accidentally\n * referenced in `@Component in a component injector.\n */\nexport function makeEnvironmentProviders(providers: (Provider|EnvironmentProviders)[]):\n    EnvironmentProviders {\n  return {\n    ɵproviders: providers,\n  } as unknown as EnvironmentProviders;\n}\n\n/**\n * A source of providers for the `importProvidersFrom` function.\n *\n * @publicApi\n */\nexport type ImportProvidersSource =\n    Type<unknown>|ModuleWithProviders<unknown>|Array<ImportProvidersSource>;\n\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via `importProvidersFrom` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the `importProvidersFrom` call can be used in the `bootstrapApplication` call:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * ```\n *\n * You can also use the `importProvidersFrom` results in the `providers` field of a route, when a\n * standalone component is used:\n *\n * ```typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * ```\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n */\nexport function importProvidersFrom(...sources: ImportProvidersSource[]): EnvironmentProviders {\n  return {\n    ɵproviders: internalImportProvidersFrom(true, sources),\n    ɵfromNgModule: true,\n  } as InternalEnvironmentProviders;\n}\n\nexport function internalImportProvidersFrom(\n    checkForStandaloneCmp: boolean, ...sources: ImportProvidersSource[]): Provider[] {\n  const providersOut: SingleProvider[] = [];\n  const dedup = new Set<Type<unknown>>();  // already seen types\n  let injectorTypesWithProviders: InjectorTypeWithProviders<unknown>[]|undefined;\n  deepForEach(sources, source => {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && checkForStandaloneCmp) {\n      const cmpDef = getComponentDef(source);\n      if (cmpDef?.standalone) {\n        throw new RuntimeError(\n            RuntimeErrorCode.IMPORT_PROVIDERS_FROM_STANDALONE,\n            `Importing providers supports NgModule or ModuleWithProviders but got a standalone component \"${\n                stringifyForError(source)}\"`);\n      }\n    }\n\n    // Narrow `source` to access the internal type analogue for `ModuleWithProviders`.\n    const internalSource = source as Type<unknown>| InjectorTypeWithProviders<unknown>;\n    if (walkProviderTree(internalSource, providersOut, [], dedup)) {\n      injectorTypesWithProviders ||= [];\n      injectorTypesWithProviders.push(internalSource);\n    }\n  });\n  // Collect all providers from `ModuleWithProviders` types.\n  if (injectorTypesWithProviders !== undefined) {\n    processInjectorTypesWithProviders(injectorTypesWithProviders, providersOut);\n  }\n\n  return providersOut;\n}\n\n/**\n * Collects all providers from the list of `ModuleWithProviders` and appends them to the provided\n * array.\n */\nfunction processInjectorTypesWithProviders(\n    typesWithProviders: InjectorTypeWithProviders<unknown>[], providersOut: Provider[]): void {\n  for (let i = 0; i < typesWithProviders.length; i++) {\n    const {ngModule, providers} = typesWithProviders[i];\n    deepForEachProvider(providers! as Array<Provider|InternalEnvironmentProviders>, provider => {\n      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);\n      providersOut.push(provider);\n    });\n  }\n}\n\n/**\n * Internal type for a single provider in a deep provider array.\n */\nexport type SingleProvider = TypeProvider|ValueProvider|ClassProvider|ConstructorProvider|\n    ExistingProvider|FactoryProvider|StaticClassProvider;\n\n/**\n * The logic visits an `InjectorType`, an `InjectorTypeWithProviders`, or a standalone\n * `ComponentType`, and all of its transitive providers and collects providers.\n *\n * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,\n * the function will return \"true\" to indicate that the providers of the type definition need\n * to be processed. This allows us to process providers of injector types after all imports of\n * an injector definition are processed. (following View Engine semantics: see FW-1349)\n */\nexport function walkProviderTree(\n    container: Type<unknown>|InjectorTypeWithProviders<unknown>, providersOut: SingleProvider[],\n    parents: Type<unknown>[],\n    dedup: Set<Type<unknown>>): container is InjectorTypeWithProviders<unknown> {\n  container = resolveForwardRef(container);\n  if (!container) return false;\n\n  // The actual type which had the definition. Usually `container`, but may be an unwrapped type\n  // from `InjectorTypeWithProviders`.\n  let defType: Type<unknown>|null = null;\n\n  let injDef = getInjectorDef(container);\n  const cmpDef = !injDef && getComponentDef(container);\n  if (!injDef && !cmpDef) {\n    // `container` is not an injector type or a component type. It might be:\n    //  * An `InjectorTypeWithProviders` that wraps an injector type.\n    //  * A standalone directive or pipe that got pulled in from a standalone component's\n    //    dependencies.\n    // Try to unwrap it as an `InjectorTypeWithProviders` first.\n    const ngModule: Type<unknown>|undefined =\n        (container as InjectorTypeWithProviders<any>).ngModule as Type<unknown>| undefined;\n    injDef = getInjectorDef(ngModule);\n    if (injDef) {\n      defType = ngModule!;\n    } else {\n      // Not a component or injector type, so ignore it.\n      return false;\n    }\n  } else if (cmpDef && !cmpDef.standalone) {\n    return false;\n  } else {\n    defType = container as Type<unknown>;\n  }\n\n  // Check for circular dependencies.\n  if (ngDevMode && parents.indexOf(defType) !== -1) {\n    const defName = stringify(defType);\n    const path = parents.map(stringify);\n    throwCyclicDependencyError(defName, path);\n  }\n\n  // Check for multiple imports of the same module\n  const isDuplicate = dedup.has(defType);\n\n  if (cmpDef) {\n    if (isDuplicate) {\n      // This component definition has already been processed.\n      return false;\n    }\n    dedup.add(defType);\n\n    if (cmpDef.dependencies) {\n      const deps =\n          typeof cmpDef.dependencies === 'function' ? cmpDef.dependencies() : cmpDef.dependencies;\n      for (const dep of deps) {\n        walkProviderTree(dep, providersOut, parents, dedup);\n      }\n    }\n  } else if (injDef) {\n    // First, include providers from any imports.\n    if (injDef.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedup.add(defType);\n\n      let importTypesWithProviders: (InjectorTypeWithProviders<any>[])|undefined;\n      try {\n        deepForEach(injDef.imports, imported => {\n          if (walkProviderTree(imported, providersOut, parents, dedup)) {\n            importTypesWithProviders ||= [];\n            // If the processed import is an injector type with providers, we store it in the\n            // list of import types with providers, so that we can process those afterwards.\n            importTypesWithProviders.push(imported);\n          }\n        });\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n\n      // Imports which are declared with providers (TypeWithProviders) need to be processed\n      // after all imported modules are processed. This is similar to how View Engine\n      // processes/merges module imports in the metadata resolver. See: FW-1349.\n      if (importTypesWithProviders !== undefined) {\n        processInjectorTypesWithProviders(importTypesWithProviders, providersOut);\n      }\n    }\n\n    if (!isDuplicate) {\n      // Track the InjectorType and add a provider for it.\n      // It's important that this is done after the def's imports.\n      const factory = getFactoryDef(defType) || (() => new defType!());\n\n      // Append extra providers to make more info available for consumers (to retrieve an injector\n      // type), as well as internally (to calculate an injection scope correctly and eagerly\n      // instantiate a `defType` when an injector is created).\n      providersOut.push(\n          // Provider to create `defType` using its factory.\n          {provide: defType, useFactory: factory, deps: EMPTY_ARRAY},\n\n          // Make this `defType` available to an internal logic that calculates injector scope.\n          {provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true},\n\n          // Provider to eagerly instantiate `defType` via `ENVIRONMENT_INITIALIZER`.\n          {provide: ENVIRONMENT_INITIALIZER, useValue: () => inject(defType!), multi: true}  //\n      );\n    }\n\n    // Next, include providers listed on the definition itself.\n    const defProviders = injDef.providers as Array<SingleProvider|InternalEnvironmentProviders>;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = container as InjectorType<any>;\n      deepForEachProvider(defProviders, provider => {\n        ngDevMode && validateProvider(provider as SingleProvider, defProviders, injectorType);\n        providersOut.push(provider as SingleProvider);\n      });\n    }\n  } else {\n    // Should not happen, but just in case.\n    return false;\n  }\n\n  return (\n      defType !== container &&\n      (container as InjectorTypeWithProviders<any>).providers !== undefined);\n}\n\nfunction validateProvider(\n    provider: SingleProvider, providers: Array<SingleProvider|InternalEnvironmentProviders>,\n    containerType: Type<unknown>): void {\n  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) ||\n      isExistingProvider(provider)) {\n    return;\n  }\n\n  // Here we expect the provider to be a `useClass` provider (by elimination).\n  const classRef = resolveForwardRef(\n      provider && ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide));\n  if (!classRef) {\n    throwInvalidProviderError(containerType, providers, provider);\n  }\n}\n\nfunction deepForEachProvider(\n    providers: Array<Provider|InternalEnvironmentProviders>,\n    fn: (provider: SingleProvider) => void): void {\n  for (let provider of providers) {\n    if (isEnvironmentProviders(provider)) {\n      provider = provider.ɵproviders;\n    }\n    if (Array.isArray(provider)) {\n      deepForEachProvider(provider, fn);\n    } else {\n      fn(provider);\n    }\n  }\n}\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nexport function isValueProvider(value: SingleProvider): value is ValueProvider {\n  return value !== null && typeof value == 'object' && USE_VALUE in value;\n}\n\nexport function isExistingProvider(value: SingleProvider): value is ExistingProvider {\n  return !!(value && (value as ExistingProvider).useExisting);\n}\n\nexport function isFactoryProvider(value: SingleProvider): value is FactoryProvider {\n  return !!(value && (value as FactoryProvider).useFactory);\n}\n\nexport function isTypeProvider(value: SingleProvider): value is TypeProvider {\n  return typeof value === 'function';\n}\n\nexport function isClassProvider(value: SingleProvider): value is ClassProvider {\n  return !!(value as StaticClassProvider | ClassProvider).useClass;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n\nexport type InjectorScope = 'root'|'platform'|'environment';\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport const INJECTOR_SCOPE = new InjectionToken<InjectorScope|null>('Set Injector scope.');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {Type} from '../interface/type';\nimport {getComponentDef} from '../render3/definition';\nimport {FactoryFn, getFactoryDef} from '../render3/definition_factory';\nimport {throwCyclicDependencyError, throwInvalidProviderError, throwMixedMultiProviderError} from '../render3/errors_di';\nimport {newArray} from '../util/array_utils';\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {ENVIRONMENT_INITIALIZER} from './initializer_token';\nimport {setInjectImplementation} from './inject_switch';\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {catchInjectorError, convertToBitFlags, injectArgs, NG_TEMP_TOKEN_PATH, setCurrentInjector, THROW_IF_NOT_FOUND, ɵɵinject} from './injector_compatibility';\nimport {INJECTOR} from './injector_token';\nimport {getInheritedInjectableDef, getInjectableDef, InjectorType, ɵɵInjectableDeclaration} from './interface/defs';\nimport {InjectFlags, InjectOptions} from './interface/injector';\nimport {ClassProvider, ConstructorProvider, EnvironmentProviders, InternalEnvironmentProviders, isEnvironmentProviders, Provider, StaticClassProvider} from './interface/provider';\nimport {INJECTOR_DEF_TYPES} from './internal_tokens';\nimport {NullInjector} from './null_injector';\nimport {isExistingProvider, isFactoryProvider, isTypeProvider, isValueProvider, SingleProvider} from './provider_collection';\nimport {ProviderToken} from './provider_token';\nimport {INJECTOR_SCOPE, InjectorScope} from './scope';\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR: Injector|undefined = undefined;\n\nexport function getNullInjector(): Injector {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n */\ninterface Record<T> {\n  factory: (() => T)|undefined;\n  value: T|{};\n  multi: any[]|undefined;\n}\n\n/**\n * An `Injector` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n */\nexport abstract class EnvironmentInjector implements Injector {\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue: undefined, options: InjectOptions&{\n    optional?: false;\n  }): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue: null|undefined, options: InjectOptions): T\n      |null;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, options?: InjectOptions): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   * @deprecated use object-based flags (`InjectOptions`) instead.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use ProviderToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * Runs the given function in the context of this `EnvironmentInjector`.\n   *\n   * Within the function's stack frame, `inject` can be used to inject dependencies from this\n   * injector. Note that `inject` is only usable synchronously, and cannot be used in any\n   * asynchronous callbacks or after any `await` points.\n   *\n   * @param fn the closure to be run in the context of this injector\n   * @returns the return value of the function, if any\n   */\n  abstract runInContext<ReturnT>(fn: () => ReturnT): ReturnT;\n\n  abstract destroy(): void;\n\n  /**\n   * @internal\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport class R3Injector extends EnvironmentInjector {\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   * - `null` value implies that we don't have the record. Used by tree-shakable injectors\n   * to prevent further searches.\n   */\n  private records = new Map<ProviderToken<any>, Record<any>|null>();\n\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  private _ngOnDestroyHooks = new Set<OnDestroy>();\n\n  private _onDestroyHooks: Array<() => void> = [];\n\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n  private _destroyed = false;\n\n  private injectorDefTypes: Set<Type<unknown>>;\n\n  constructor(\n      providers: Array<Provider|EnvironmentProviders>, readonly parent: Injector,\n      readonly source: string|null, readonly scopes: Set<InjectorScope>) {\n    super();\n    // Start off by creating Records for every provider.\n    forEachSingleProvider(\n        providers as Array<Provider|InternalEnvironmentProviders>,\n        provider => this.processProvider(provider));\n\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n\n    // And `EnvironmentInjector` if the current injector is supposed to be env-scoped.\n    if (scopes.has('environment')) {\n      this.records.set(EnvironmentInjector, makeRecord(undefined, this));\n    }\n\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    const record = this.records.get(INJECTOR_SCOPE) as Record<InjectorScope|null>;\n    if (record != null && typeof record.value === 'string') {\n      this.scopes.add(record.value as InjectorScope);\n    }\n\n    this.injectorDefTypes =\n        new Set(this.get(INJECTOR_DEF_TYPES.multi, EMPTY_ARRAY, InjectFlags.Self));\n  }\n\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  override destroy(): void {\n    this.assertNotDestroyed();\n\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this._destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      for (const service of this._ngOnDestroyHooks) {\n        service.ngOnDestroy();\n      }\n      for (const hook of this._onDestroyHooks) {\n        hook();\n      }\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this._ngOnDestroyHooks.clear();\n      this.injectorDefTypes.clear();\n      this._onDestroyHooks.length = 0;\n    }\n  }\n\n  override onDestroy(callback: () => void): void {\n    this._onDestroyHooks.push(callback);\n  }\n\n  override runInContext<ReturnT>(fn: () => ReturnT): ReturnT {\n    this.assertNotDestroyed();\n\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      return fn();\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n\n  override get<T>(\n      token: ProviderToken<T>, notFoundValue: any = THROW_IF_NOT_FOUND,\n      flags: InjectFlags|InjectOptions = InjectFlags.Default): T {\n    this.assertNotDestroyed();\n    flags = convertToBitFlags(flags) as InjectFlags;\n\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record: Record<T>|undefined|null = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an injectable\n          // def with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an injectable def and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n          } else {\n            record = null;\n          }\n          this.records.set(token, record);\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record != null /* NOT null || undefined */) {\n          return this.hydrate(token, record);\n        }\n      }\n\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue\n      // is undefined, the value is null, otherwise it's the notFoundValue.\n      notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?\n          null :\n          notFoundValue;\n      return nextInjector.get(token, notFoundValue);\n    } catch (e: any) {\n      if (e.name === 'NullInjectorError') {\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(stringify(token));\n        if (previousInjector) {\n          // We still have a parent injector, keep throwing\n          throw e;\n        } else {\n          // Format & throw the final error message when we don't have any previous injector\n          return catchInjectorError(e, token, 'R3InjectorError', this.source);\n        }\n      } else {\n        throw e;\n      }\n    } finally {\n      // Lastly, restore the previous injection context.\n      setInjectImplementation(previousInjectImplementation);\n      setCurrentInjector(previousInjector);\n    }\n  }\n\n  /** @internal */\n  resolveInjectorInitializers() {\n    const previousInjector = setCurrentInjector(this);\n    const previousInjectImplementation = setInjectImplementation(undefined);\n    try {\n      const initializers = this.get(ENVIRONMENT_INITIALIZER.multi, EMPTY_ARRAY, InjectFlags.Self);\n      if (ngDevMode && !Array.isArray(initializers)) {\n        throw new RuntimeError(\n            RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n            'Unexpected type of the `ENVIRONMENT_INITIALIZER` token value ' +\n                `(expected an array, but got ${typeof initializers}). ` +\n                'Please check that the `ENVIRONMENT_INITIALIZER` token is configured as a ' +\n                '`multi: true` provider.');\n      }\n      for (const initializer of initializers) {\n        initializer();\n      }\n    } finally {\n      setCurrentInjector(previousInjector);\n      setInjectImplementation(previousInjectImplementation);\n    }\n  }\n\n  override toString() {\n    const tokens: string[] = [];\n    const records = this.records;\n    for (const token of records.keys()) {\n      tokens.push(stringify(token));\n    }\n    return `R3Injector[${tokens.join(', ')}]`;\n  }\n\n  private assertNotDestroyed(): void {\n    if (this._destroyed) {\n      throw new RuntimeError(\n          RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n          ngDevMode && 'Injector has already been destroyed.');\n    }\n  }\n\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  private processProvider(provider: SingleProvider): void {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token: any =\n        isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider);\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (ngDevMode && multiRecord.multi === undefined) {\n          throwMixedMultiProviderError();\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord!.multi!);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi!.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (ngDevMode && existing && existing.multi !== undefined) {\n        throwMixedMultiProviderError();\n      }\n    }\n    this.records.set(token, record);\n  }\n\n  private hydrate<T>(token: ProviderToken<T>, record: Record<T>): T {\n    if (ngDevMode && record.value === CIRCULAR) {\n      throwCyclicDependencyError(stringify(token));\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory!();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this._ngOnDestroyHooks.add(record.value);\n    }\n    return record.value as T;\n  }\n\n  private injectableDefInScope(def: ɵɵInjectableDeclaration<any>): boolean {\n    if (!def.providedIn) {\n      return false;\n    }\n    const providedIn = resolveForwardRef(def.providedIn);\n    if (typeof providedIn === 'string') {\n      return providedIn === 'any' || (this.scopes.has(providedIn));\n    } else {\n      return this.injectorDefTypes.has(providedIn);\n    }\n  }\n}\n\nfunction injectableDefOrInjectorDefFactory(token: ProviderToken<any>): FactoryFn<any> {\n  // Most tokens will have an injectable def directly on them, which specifies a factory directly.\n  const injectableDef = getInjectableDef(token);\n  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);\n\n  if (factory !== null) {\n    return factory;\n  }\n\n  // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.\n  // If it's missing that, it's an error.\n  if (token instanceof InjectionToken) {\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n        ngDevMode && `Token ${stringify(token)} is missing a ɵprov definition.`);\n  }\n\n  // Undecorated types can sometimes be created if they have no constructor arguments.\n  if (token instanceof Function) {\n    return getUndecoratedInjectableFactory(token);\n  }\n\n  // There was no way to resolve a factory for this token.\n  throw new RuntimeError(RuntimeErrorCode.INVALID_INJECTION_TOKEN, ngDevMode && 'unreachable');\n}\n\nfunction getUndecoratedInjectableFactory(token: Function) {\n  // If the token has parameters then it has dependencies that we cannot resolve implicitly.\n  const paramLength = token.length;\n  if (paramLength > 0) {\n    const args: string[] = newArray(paramLength, '?');\n    throw new RuntimeError(\n        RuntimeErrorCode.INVALID_INJECTION_TOKEN,\n        ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n  }\n\n  // The constructor function appears to have no parameters.\n  // This might be because it inherits from a super-class. In which case, use an injectable\n  // def from an ancestor if there is one.\n  // Otherwise this really is a simple class with no dependencies, so return a factory that\n  // just instantiates the zero-arg constructor.\n  const inheritedInjectableDef = getInheritedInjectableDef(token);\n  if (inheritedInjectableDef !== null) {\n    return () => inheritedInjectableDef.factory(token as Type<any>);\n  } else {\n    return () => new (token as Type<any>)();\n  }\n}\n\nfunction providerToRecord(provider: SingleProvider): Record<any> {\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    const factory: (() => any)|undefined = providerToFactory(provider);\n    return makeRecord(factory, NOT_YET);\n  }\n}\n\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(\n    provider: SingleProvider, ngModuleType?: InjectorType<any>, providers?: any[]): () => any {\n  let factory: (() => any)|undefined = undefined;\n  if (ngDevMode && isEnvironmentProviders(provider)) {\n    throwInvalidProviderError(undefined, providers, provider);\n  }\n\n  if (isTypeProvider(provider)) {\n    const unwrappedProvider = resolveForwardRef(provider);\n    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else if (isExistingProvider(provider)) {\n      factory = () => ɵɵinject(resolveForwardRef(provider.useExisting));\n    } else {\n      const classRef = resolveForwardRef(\n          provider &&\n          ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide));\n      if (ngDevMode && !classRef) {\n        throwInvalidProviderError(ngModuleType, providers, provider);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new (classRef)(...injectArgs(provider.deps));\n      } else {\n        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n\nfunction makeRecord<T>(\n    factory: (() => T)|undefined, value: T|{}, multi: boolean = false): Record<T> {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined,\n  };\n}\n\nfunction hasDeps(value: ClassProvider|ConstructorProvider|\n                 StaticClassProvider): value is ClassProvider&{deps: any[]} {\n  return !!(value as any).deps;\n}\n\nfunction hasOnDestroy(value: any): value is OnDestroy {\n  return value !== null && typeof value === 'object' &&\n      typeof (value as OnDestroy).ngOnDestroy === 'function';\n}\n\nfunction couldBeInjectableType(value: any): value is ProviderToken<any> {\n  return (typeof value === 'function') ||\n      (typeof value === 'object' && value instanceof InjectionToken);\n}\n\nfunction forEachSingleProvider(\n    providers: Array<Provider|EnvironmentProviders>, fn: (provider: SingleProvider) => void): void {\n  for (const provider of providers) {\n    if (Array.isArray(provider)) {\n      forEachSingleProvider(provider, fn);\n    } else if (provider && isEnvironmentProviders(provider)) {\n      forEachSingleProvider(provider.ɵproviders, fn);\n    } else {\n      fn(provider as SingleProvider);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * Updates a specified input name to a new value. Using this method will properly mark for check\n   * component using the `OnPush` change detection strategy. It will also assure that the\n   * `OnChanges` lifecycle hook runs when a dynamically created component is change-detected.\n   *\n   * @param name The name of an input.\n   * @param value The new value of an input.\n   */\n  abstract setInput(name: string, value: unknown): void;\n\n  /**\n   * The host or anchor [element](guide/glossary#element) for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The [host view](guide/glossary#view-hierarchy) defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The type of this component (as created by a `ComponentFactory` class).\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with `resolveComponentFactory()`.\n * Use the resulting `ComponentFactory.create()` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {propName: string, templateName: string}[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string, templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      environmentInjector?: EnvironmentInjector|NgModuleRef<any>): ComponentRef<C>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactory} from './component_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(`No component factory found for ${\n      stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new(...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * A simple registry that maps `Components` to generated `ComponentFactory` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's `create()` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = (/* @__PURE__ */ new _NullComponentFactoryResolver());\n  /**\n   * Retrieves the factory object that creates a component of the given type.\n   * @param component The component type.\n   */\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TNode} from '../render3/interfaces/node';\nimport {RElement} from '../render3/interfaces/renderer_dom';\nimport {LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getNativeByTNode} from '../render3/util/view_utils';\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(): ElementRef {\n  return createElementRef(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param tNode The node for which you'd like an ElementRef\n * @param lView The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(tNode: TNode, lView: LView): ElementRef {\n  return new ElementRef(getNativeByTNode(tNode, lView) as RElement);\n}\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef<T = any> {\n  /**\n   * The underlying native element or `null` if direct access to native elements is not supported\n   * (e.g. when the application runs in a web worker).\n   *\n   * <div class=\"callout is-critical\">\n   *   <header>Use with caution</header>\n   *   <p>\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n   *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n   * Renderer2}\n   *    which provides API that can safely be used even when direct access to native elements is not\n   *    supported.\n   *   </p>\n   *   <p>\n   *    Relying on direct DOM access creates tight coupling between your application and rendering\n   *    layers which will make it impossible to separate the two and deploy your application into a\n   *    web worker.\n   *   </p>\n   * </div>\n   *\n   */\n  public nativeElement: T;\n\n  constructor(nativeElement: T) {\n    this.nativeElement = nativeElement;\n  }\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ElementRef = injectElementRef;\n}\n\n/**\n * Unwraps `ElementRef` and return the `nativeElement`.\n *\n * @param value value to unwrap\n * @returns `nativeElement` if `ElementRef` otherwise returns value as is.\n */\nexport function unwrapElementRef<T, R>(value: T|ElementRef<R>): T|R {\n  return value instanceof ElementRef ? value.nativeElement : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isLView} from '../render3/interfaces/type_checks';\nimport {RENDERER} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\n\nimport {RendererStyleFlags2, RendererType2} from './api_flags';\n\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nexport abstract class RendererFactory2 {\n  /**\n   * Creates and initializes a custom renderer for a host DOM element.\n   * @param hostElement The element to render.\n   * @param type The base class to implement.\n   * @returns The new custom renderer instance.\n   */\n  abstract createRenderer(hostElement: any, type: RendererType2|null): Renderer2;\n  /**\n   * A callback invoked when rendering has begun.\n   */\n  abstract begin?(): void;\n  /**\n   * A callback invoked when rendering has completed.\n   */\n  abstract end?(): void;\n  /**\n   * Use with animations test-only mode. Notifies the test when rendering has completed.\n   * @returns The asynchronous result of the developer-defined function.\n   */\n  abstract whenRenderingDone?(): Promise<any>;\n}\n\n\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nexport abstract class Renderer2 {\n  /**\n   * Use to store arbitrary developer-defined data on a renderer instance,\n   * as an object containing key-value pairs.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  abstract get data(): {[key: string]: any};\n\n  /**\n   * Implement this callback to destroy the renderer or the host element.\n   */\n  abstract destroy(): void;\n  /**\n   * Implement this callback to create an instance of the host element.\n   * @param name An identifying name for the new element, unique within the namespace.\n   * @param namespace The namespace for the new element.\n   * @returns The new element.\n   */\n  abstract createElement(name: string, namespace?: string|null): any;\n  /**\n   * Implement this callback to add a comment to the DOM of the host element.\n   * @param value The comment text.\n   * @returns The modified element.\n   */\n  abstract createComment(value: string): any;\n\n  /**\n   * Implement this callback to add text to the DOM of the host element.\n   * @param value The text string.\n   * @returns The modified element.\n   */\n  abstract createText(value: string): any;\n  /**\n   * If null or undefined, the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  // TODO(issue/24571): remove '!'.\n  destroyNode!: ((node: any) => void)|null;\n  /**\n   * Appends a child to a given parent node in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child node.\n   */\n  abstract appendChild(parent: any, newChild: any): void;\n  /**\n   * Implement this callback to insert a child node at a given position in a parent node\n   * in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child nodes.\n   * @param refChild The existing child node before which `newChild` is inserted.\n   * @param isMove Optional argument which signifies if the current `insertBefore` is a result of a\n   *     move. Animation uses this information to trigger move animations. In the past the Animation\n   *     would always assume that any `insertBefore` is a move. This is not strictly true because\n   *     with runtime i18n it is possible to invoke `insertBefore` as a result of i18n and it should\n   *     not trigger an animation move.\n   */\n  abstract insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void;\n  /**\n   * Implement this callback to remove a child node from the host element's DOM.\n   * @param parent The parent node.\n   * @param oldChild The child node to remove.\n   * @param isHostElement Optionally signal to the renderer whether this element is a host element\n   * or not\n   */\n  abstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void;\n  /**\n   * Implement this callback to prepare an element to be bootstrapped\n   * as a root element, and return the element instance.\n   * @param selectorOrNode The DOM element.\n   * @param preserveContent Whether the contents of the root element\n   * should be preserved, or cleared upon bootstrap (default behavior).\n   * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n   * content projection via `<slot>` elements.\n   * @returns The root element.\n   */\n  abstract selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any;\n  /**\n   * Implement this callback to get the parent of a given node\n   * in the host element's DOM.\n   * @param node The child node to query.\n   * @returns The parent node, or null if there is no parent.\n   * For WebWorkers, always returns true.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract parentNode(node: any): any;\n  /**\n   * Implement this callback to get the next sibling node of a given node\n   * in the host element's DOM.\n   * @returns The sibling node, or null if there is no sibling.\n   * For WebWorkers, always returns a value.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract nextSibling(node: any): any;\n  /**\n   * Implement this callback to set an attribute value for an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param value The new value.\n   * @param namespace The namespace.\n   */\n  abstract setAttribute(el: any, name: string, value: string, namespace?: string|null): void;\n\n  /**\n   * Implement this callback to remove an attribute from an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param namespace The namespace.\n   */\n  abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n  /**\n   * Implement this callback to add a class to an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract addClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to remove a class from an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract removeClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to set a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param value The new value.\n   * @param flags Flags for style variations. No flags are set by default.\n   */\n  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to remove the value from a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param flags Flags for style variations to remove, if set. ???\n   */\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to set the value of a property of an element in the DOM.\n   * @param el The element.\n   * @param name The property name.\n   * @param value The new value.\n   */\n  abstract setProperty(el: any, name: string, value: any): void;\n\n  /**\n   * Implement this callback to set the value of a node in the host element.\n   * @param node The node.\n   * @param value The new value.\n   */\n  abstract setValue(node: any, value: string): void;\n\n  /**\n   * Implement this callback to start an event listener.\n   * @param target The context in which to listen for events. Can be\n   * the entire window or document, the body of the document, or a specific\n   * DOM element.\n   * @param eventName The event to listen for.\n   * @param callback A handler function to invoke when the event occurs.\n   * @returns An \"unlisten\" function for disposing of this handler.\n   */\n  abstract listen(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => Renderer2 = () => injectRenderer2();\n}\n\n/** Injects a Renderer2 for the current component. */\nexport function injectRenderer2(): Renderer2 {\n  // We need the Renderer to be based on the component that it's being injected into, however since\n  // DI happens before we've entered its view, `getLView` will return the parent view instead.\n  const lView = getLView();\n  const tNode = getCurrentTNode()!;\n  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);\n  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER] as Renderer2;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../di/interface/defs';\nimport {SecurityContext} from './security';\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: Sanitizer,\n    providedIn: 'root',\n    factory: () => null,\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n\n  constructor(public full: string) {\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('15.2.9');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This default value is when checking the hierarchy for a token.\n//\n// It means both:\n// - the token is not provided by the current injector,\n// - only the element injectors should be checked (ie do not check module injectors\n//\n//          mod1\n//         /\n//       el1   mod2\n//         \\  /\n//         el2\n//\n// When requesting el2.injector.get(token), we should check in the following order and return the\n// first found value:\n// - el2.injector.get(token, default)\n// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module\n// - mod2.injector.get(token, default)\nexport const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg = `${message} caused by: ${\n      originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getOriginalError} from './util/errors';\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n\n    this._console.error('ERROR', error);\n    if (originalError) {\n      this._console.error('ORIGINAL ERROR', originalError);\n    }\n  }\n\n  /** @internal */\n  _findOriginalError(error: any): Error|null {\n    let e = error && getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e || null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function normalizeDebugBindingName(name: string) {\n  // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n  name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n  return `ng-reflect-${name}`;\n}\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\n\nfunction camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: any[]) => '-' + m[1].toLowerCase());\n}\n\nexport function normalizeDebugBindingValue(value: any): string {\n  try {\n    // Limit the size of the value as otherwise the DOM just gets polluted.\n    return value != null ? value.toString().slice(0, 30) : value;\n  } catch (e) {\n    return '[ERROR] Exception while trying to serialize the value';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RElement} from '../interfaces/renderer_dom';\n\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveWindow(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument.defaultView;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveDocument(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument;\n}\n\n/**\n *\n * @codeGenApi\n */\nexport function ɵɵresolveBody(element: RElement&{ownerDocument: Document}) {\n  return element.ownerDocument.body;\n}\n\n/**\n * The special delimiter we use to separate property names, prefixes, and suffixes\n * in property binding metadata. See storeBindingMetadata().\n *\n * We intentionally use the Unicode \"REPLACEMENT CHARACTER\" (U+FFFD) as a delimiter\n * because it is a very uncommon character that is unlikely to be part of a user's\n * property names or interpolation strings. If it is in fact used in a property\n * binding, DebugElement.properties will not return the correct value for that\n * binding. However, there should be no runtime effect for real applications.\n *\n * This character is typically rendered as a question mark inside of a diamond.\n * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)\n *\n */\nexport const INTERPOLATION_DELIMITER = `�`;\n\n/**\n * Unwrap a value which might be behind a closure (for forward declaration reasons).\n */\nexport function maybeUnwrapFn<T>(value: T|(() => T)): T {\n  if (value instanceof Function) {\n    return value();\n  } else {\n    return value;\n  }\n}\n","\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\n\nimport {getComponentDef} from './definition';\nimport {TNode} from './interfaces/node';\nimport {LView, TVIEW} from './interfaces/view';\nimport {INTERPOLATION_DELIMITER} from './util/misc_utils';\nimport {stringifyForError} from './util/stringify_utils';\n\n/** Verifies that a given type is a Standalone Component. */\nexport function assertStandaloneComponentType(type: Type<unknown>) {\n  assertComponentDef(type);\n  const componentDef = getComponentDef(type)!;\n  if (!componentDef.standalone) {\n    throw new RuntimeError(\n        RuntimeErrorCode.TYPE_IS_NOT_STANDALONE,\n        `The ${stringifyForError(type)} component is not marked as standalone, ` +\n            `but Angular expects to have a standalone component here. ` +\n            `Please make sure the ${stringifyForError(type)} component has ` +\n            `the \\`standalone: true\\` flag in the decorator.`);\n  }\n}\n\n/** Verifies whether a given type is a component */\nexport function assertComponentDef(type: Type<unknown>) {\n  if (!getComponentDef(type)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.MISSING_GENERATED_DEF,\n        `The ${stringifyForError(type)} is not an Angular component, ` +\n            `make sure it has the \\`@Component\\` decorator.`);\n  }\n}\n\n/** Called when there are multiple component selectors that match a given node */\nexport function throwMultipleComponentError(\n    tNode: TNode, first: Type<unknown>, second: Type<unknown>): never {\n  throw new RuntimeError(\n      RuntimeErrorCode.MULTIPLE_COMPONENTS_MATCH,\n      `Multiple components match node with tagname ${tNode.value}: ` +\n          `${stringifyForError(first)} and ` +\n          `${stringifyForError(second)}`);\n}\n\n/** Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on. */\nexport function throwErrorIfNoChangesMode(\n    creationMode: boolean, oldValue: any, currValue: any, propName?: string): never {\n  const field = propName ? ` for '${propName}'` : '';\n  let msg =\n      `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${\n          field}: '${oldValue}'. Current value: '${currValue}'.`;\n  if (creationMode) {\n    msg +=\n        ` It seems like the view has been created after its parent and its children have been dirty checked.` +\n        ` Has it been created in a change detection hook?`;\n  }\n  throw new RuntimeError(RuntimeErrorCode.EXPRESSION_CHANGED_AFTER_CHECKED, msg);\n}\n\nfunction constructDetailsForInterpolation(\n    lView: LView, rootIndex: number, expressionIndex: number, meta: string, changedValue: any) {\n  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);\n  let oldValue = prefix, newValue = prefix;\n  for (let i = 0; i < chunks.length; i++) {\n    const slotIdx = rootIndex + i;\n    oldValue += `${lView[slotIdx]}${chunks[i]}`;\n    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;\n  }\n  return {propName, oldValue, newValue};\n}\n\n/**\n * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:\n * - property name (for property bindings or interpolations)\n * - old and new values, enriched using information from metadata\n *\n * More information on the metadata storage format can be found in `storePropertyBindingMetadata`\n * function description.\n */\nexport function getExpressionChangedErrorDetails(\n    lView: LView, bindingIndex: number, oldValue: any,\n    newValue: any): {propName?: string, oldValue: any, newValue: any} {\n  const tData = lView[TVIEW].data;\n  const metadata = tData[bindingIndex];\n\n  if (typeof metadata === 'string') {\n    // metadata for property interpolation\n    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {\n      return constructDetailsForInterpolation(\n          lView, bindingIndex, bindingIndex, metadata, newValue);\n    }\n    // metadata for property binding\n    return {propName: metadata, oldValue, newValue};\n  }\n\n  // metadata is not available for this expression, check if this expression is a part of the\n  // property interpolation by going from the current binding index left and look for a string that\n  // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:\n  // [..., 'id�Prefix � and � suffix', null, null, null, ...]\n  if (metadata === null) {\n    let idx = bindingIndex - 1;\n    while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {\n      idx--;\n    }\n    const meta = tData[idx];\n    if (typeof meta === 'string') {\n      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));\n      // first interpolation delimiter separates property name from interpolation parts (in case of\n      // property interpolations), so we subtract one from total number of found delimiters\n      if (matches && (matches.length - 1) > bindingIndex - idx) {\n        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);\n      }\n    }\n  }\n  return {propName: undefined, oldValue, newValue};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertNotEqual} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n\n/**\n * Returns an index of `classToSearch` in `className` taking token boundaries into account.\n *\n * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)\n *\n * @param className A string containing classes (whitespace separated)\n * @param classToSearch A class name to locate\n * @param startingIndex Starting location of search\n * @returns an index of the located class (or -1 if not found)\n */\nexport function classIndexOf(\n    className: string, classToSearch: string, startingIndex: number): number {\n  ngDevMode && assertNotEqual(classToSearch, '', 'can not look for \"\" string.');\n  let end = className.length;\n  while (true) {\n    const foundIndex = className.indexOf(classToSearch, startingIndex);\n    if (foundIndex === -1) return foundIndex;\n    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= CharCode.SPACE) {\n      // Ensure that it has leading whitespace\n      const length = classToSearch.length;\n      if (foundIndex + length === end ||\n          className.charCodeAt(foundIndex + length) <= CharCode.SPACE) {\n        // Ensure that it has trailing whitespace\n        return foundIndex;\n      }\n    }\n    // False positive, keep searching from where we left off.\n    startingIndex = foundIndex + 1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {assertDefined, assertEqual, assertNotEqual} from '../util/assert';\n\nimport {AttributeMarker, TAttributes, TNode, TNodeType} from './interfaces/node';\nimport {CssSelector, CssSelectorList, SelectorFlags} from './interfaces/projection';\nimport {classIndexOf} from './styling/class_differ';\nimport {isNameOnlyAttributeMarker} from './util/attrs_utils';\n\nconst NG_TEMPLATE_SELECTOR = 'ng-template';\n\n/**\n * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)\n *\n * @param attrs `TAttributes` to search through.\n * @param cssClassToMatch class to match (lowercase)\n * @param isProjectionMode Whether or not class matching should look into the attribute `class` in\n *    addition to the `AttributeMarker.Classes`.\n */\nfunction isCssClassMatching(\n    attrs: TAttributes, cssClassToMatch: string, isProjectionMode: boolean): boolean {\n  // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.\n  // It is strange to me that sometimes the class information comes in form of `class` attribute\n  // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine\n  // if that is the right behavior.\n  ngDevMode &&\n      assertEqual(\n          cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');\n  let i = 0;\n  // Indicates whether we are processing value from the implicit\n  // attribute section (i.e. before the first marker in the array).\n  let isImplicitAttrsSection = true;\n  while (i < attrs.length) {\n    let item = attrs[i++];\n    if (typeof item === 'string' && isImplicitAttrsSection) {\n      const value = attrs[i++] as string;\n      if (isProjectionMode && item === 'class') {\n        // We found a `class` attribute in the implicit attribute section,\n        // check if it matches the value of the `cssClassToMatch` argument.\n        if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {\n          return true;\n        }\n      }\n    } else if (item === AttributeMarker.Classes) {\n      // We found the classes section. Start searching for the class.\n      while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {\n        // while we have strings\n        if (item.toLowerCase() === cssClassToMatch) return true;\n      }\n      return false;\n    } else if (typeof item === 'number') {\n      // We've came across a first marker, which indicates\n      // that the implicit attribute section is over.\n      isImplicitAttrsSection = false;\n    }\n  }\n  return false;\n}\n\n/**\n * Checks whether the `tNode` represents an inline template (e.g. `*ngFor`).\n *\n * @param tNode current TNode\n */\nexport function isInlineTemplate(tNode: TNode): boolean {\n  return tNode.type === TNodeType.Container && tNode.value !== NG_TEMPLATE_SELECTOR;\n}\n\n/**\n * Function that checks whether a given tNode matches tag-based selector and has a valid type.\n *\n * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular\n * directive matching mode:\n * - in the \"directive matching\" mode we do _not_ take TContainer's tagName into account if it is\n * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a\n * tag name was extracted from * syntax so we would match the same directive twice);\n * - in the \"projection\" mode, we use a tag name potentially extracted from the * syntax processing\n * (applicable to TNodeType.Container only).\n */\nfunction hasTagAndTypeMatch(\n    tNode: TNode, currentSelector: string, isProjectionMode: boolean): boolean {\n  const tagNameToCompare =\n      tNode.type === TNodeType.Container && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;\n  return currentSelector === tagNameToCompare;\n}\n\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param node static data of the node to match\n * @param selector The selector to try matching against the node.\n * @param isProjectionMode if `true` we are matching for content projection, otherwise we are doing\n * directive matching.\n * @returns true if node matches the selector.\n */\nexport function isNodeMatchingSelector(\n    tNode: TNode, selector: CssSelector, isProjectionMode: boolean): boolean {\n  ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n  let mode: SelectorFlags = SelectorFlags.ELEMENT;\n  const nodeAttrs = tNode.attrs || [];\n\n  // Find the index of first attribute that has no value, only a name.\n  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);\n\n  // When processing \":not\" selectors, we skip to the next \":not\" if the\n  // current one doesn't match\n  let skipToNextSelector = false;\n\n  for (let i = 0; i < selector.length; i++) {\n    const current = selector[i];\n    if (typeof current === 'number') {\n      // If we finish processing a :not selector and it hasn't failed, return false\n      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {\n        return false;\n      }\n      // If we are skipping to the next :not() and this mode flag is positive,\n      // it's a part of the current :not() selector, and we should keep skipping\n      if (skipToNextSelector && isPositive(current)) continue;\n      skipToNextSelector = false;\n      mode = (current as number) | (mode & SelectorFlags.NOT);\n      continue;\n    }\n\n    if (skipToNextSelector) continue;\n\n    if (mode & SelectorFlags.ELEMENT) {\n      mode = SelectorFlags.ATTRIBUTE | mode & SelectorFlags.NOT;\n      if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||\n          current === '' && selector.length === 1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n      }\n    } else {\n      const selectorAttrValue = mode & SelectorFlags.CLASS ? current : selector[++i];\n\n      // special case for matching against classes when a tNode has been instantiated with\n      // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])\n      if ((mode & SelectorFlags.CLASS) && tNode.attrs !== null) {\n        if (!isCssClassMatching(tNode.attrs, selectorAttrValue as string, isProjectionMode)) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n        continue;\n      }\n\n      const attrName = (mode & SelectorFlags.CLASS) ? 'class' : current;\n      const attrIndexInNode =\n          findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);\n\n      if (attrIndexInNode === -1) {\n        if (isPositive(mode)) return false;\n        skipToNextSelector = true;\n        continue;\n      }\n\n      if (selectorAttrValue !== '') {\n        let nodeAttrValue: string;\n        if (attrIndexInNode > nameOnlyMarkerIdx) {\n          nodeAttrValue = '';\n        } else {\n          ngDevMode &&\n              assertNotEqual(\n                  nodeAttrs[attrIndexInNode], AttributeMarker.NamespaceURI,\n                  'We do not match directives on namespaced attributes');\n          // we lowercase the attribute value to be able to match\n          // selectors without case-sensitivity\n          // (selectors are already in lowercase when generated)\n          nodeAttrValue = (nodeAttrs[attrIndexInNode + 1] as string).toLowerCase();\n        }\n\n        const compareAgainstClassName = mode & SelectorFlags.CLASS ? nodeAttrValue : null;\n        if (compareAgainstClassName &&\n                classIndexOf(compareAgainstClassName, selectorAttrValue as string, 0) !== -1 ||\n            mode & SelectorFlags.ATTRIBUTE && selectorAttrValue !== nodeAttrValue) {\n          if (isPositive(mode)) return false;\n          skipToNextSelector = true;\n        }\n      }\n    }\n  }\n\n  return isPositive(mode) || skipToNextSelector;\n}\n\nfunction isPositive(mode: SelectorFlags): boolean {\n  return (mode & SelectorFlags.NOT) === 0;\n}\n\n/**\n * Examines the attribute's definition array for a node to find the index of the\n * attribute that matches the given `name`.\n *\n * NOTE: This will not match namespaced attributes.\n *\n * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.\n * The following table summarizes which types of attributes we attempt to match:\n *\n * ===========================================================================================================\n * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n\n * Attributes\n * ===========================================================================================================\n * Inline + Projection     | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Inline + Directive      | NO                | NO                  | YES                 | NO\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Projection | YES               | YES                 | NO                  | YES\n * -----------------------------------------------------------------------------------------------------------\n * Non-inline + Directive  | YES               | YES                 | NO                  | YES\n * ===========================================================================================================\n *\n * @param name the name of the attribute to find\n * @param attrs the attribute array to examine\n * @param isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)\n * rather than a manually expanded template node (e.g `<ng-template>`).\n * @param isProjectionMode true if we are matching against content projection otherwise we are\n * matching against directives.\n */\nfunction findAttrIndexInNode(\n    name: string, attrs: TAttributes|null, isInlineTemplate: boolean,\n    isProjectionMode: boolean): number {\n  if (attrs === null) return -1;\n\n  let i = 0;\n\n  if (isProjectionMode || !isInlineTemplate) {\n    let bindingsMode = false;\n    while (i < attrs.length) {\n      const maybeAttrName = attrs[i];\n      if (maybeAttrName === name) {\n        return i;\n      } else if (\n          maybeAttrName === AttributeMarker.Bindings || maybeAttrName === AttributeMarker.I18n) {\n        bindingsMode = true;\n      } else if (\n          maybeAttrName === AttributeMarker.Classes || maybeAttrName === AttributeMarker.Styles) {\n        let value = attrs[++i];\n        // We should skip classes here because we have a separate mechanism for\n        // matching classes in projection mode.\n        while (typeof value === 'string') {\n          value = attrs[++i];\n        }\n        continue;\n      } else if (maybeAttrName === AttributeMarker.Template) {\n        // We do not care about Template attributes in this scenario.\n        break;\n      } else if (maybeAttrName === AttributeMarker.NamespaceURI) {\n        // Skip the whole namespaced attribute and value. This is by design.\n        i += 4;\n        continue;\n      }\n      // In binding mode there are only names, rather than name-value pairs.\n      i += bindingsMode ? 1 : 2;\n    }\n    // We did not match the attribute\n    return -1;\n  } else {\n    return matchTemplateAttribute(attrs, name);\n  }\n}\n\nexport function isNodeMatchingSelectorList(\n    tNode: TNode, selector: CssSelectorList, isProjectionMode: boolean = false): boolean {\n  for (let i = 0; i < selector.length; i++) {\n    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getProjectAsAttrValue(tNode: TNode): CssSelector|null {\n  const nodeAttrs = tNode.attrs;\n  if (nodeAttrs != null) {\n    const ngProjectAsAttrIdx = nodeAttrs.indexOf(AttributeMarker.ProjectAs);\n    // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n    // (attribute names are stored at even indexes)\n    if ((ngProjectAsAttrIdx & 1) === 0) {\n      return nodeAttrs[ngProjectAsAttrIdx + 1] as CssSelector;\n    }\n  }\n  return null;\n}\n\nfunction getNameOnlyMarkerIndex(nodeAttrs: TAttributes) {\n  for (let i = 0; i < nodeAttrs.length; i++) {\n    const nodeAttr = nodeAttrs[i];\n    if (isNameOnlyAttributeMarker(nodeAttr)) {\n      return i;\n    }\n  }\n  return nodeAttrs.length;\n}\n\nfunction matchTemplateAttribute(attrs: TAttributes, name: string): number {\n  let i = attrs.indexOf(AttributeMarker.Template);\n  if (i > -1) {\n    i++;\n    while (i < attrs.length) {\n      const attr = attrs[i];\n      // Return in case we checked all template attrs and are switching to the next section in the\n      // attrs array (that starts with a number that represents an attribute marker).\n      if (typeof attr === 'number') return -1;\n      if (attr === name) return i;\n      i++;\n    }\n  }\n  return -1;\n}\n\n/**\n * Checks whether a selector is inside a CssSelectorList\n * @param selector Selector to be checked.\n * @param list List in which to look for the selector.\n */\nexport function isSelectorInSelectorList(selector: CssSelector, list: CssSelectorList): boolean {\n  selectorListLoop: for (let i = 0; i < list.length; i++) {\n    const currentSelectorInList = list[i];\n    if (selector.length !== currentSelectorInList.length) {\n      continue;\n    }\n    for (let j = 0; j < selector.length; j++) {\n      if (selector[j] !== currentSelectorInList[j]) {\n        continue selectorListLoop;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction maybeWrapInNotSelector(isNegativeMode: boolean, chunk: string): string {\n  return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;\n}\n\nfunction stringifyCSSSelector(selector: CssSelector): string {\n  let result = selector[0] as string;\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  let currentChunk = '';\n  let isNegativeMode = false;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode & SelectorFlags.ATTRIBUTE) {\n        const attrValue = selector[++i] as string;\n        currentChunk +=\n            '[' + valueOrMarker + (attrValue.length > 0 ? '=\"' + attrValue + '\"' : '') + ']';\n      } else if (mode & SelectorFlags.CLASS) {\n        currentChunk += '.' + valueOrMarker;\n      } else if (mode & SelectorFlags.ELEMENT) {\n        currentChunk += ' ' + valueOrMarker;\n      }\n    } else {\n      //\n      // Append current chunk to the final result in case we come across SelectorFlag, which\n      // indicates that the previous section of a selector is over. We need to accumulate content\n      // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.\n      // ```\n      //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']\n      // ```\n      // should be transformed to `.classA :not(.classB .classC)`.\n      //\n      // Note: for negative selector part, we accumulate content between flags until we find the\n      // next negative flag. This is needed to support a case where `:not()` rule contains more than\n      // one chunk, e.g. the following selector:\n      // ```\n      //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']\n      // ```\n      // should be stringified to `:not(p.foo) :not(.bar)`\n      //\n      if (currentChunk !== '' && !isPositive(valueOrMarker)) {\n        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n        currentChunk = '';\n      }\n      mode = valueOrMarker;\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector.\n      isNegativeMode = isNegativeMode || !isPositive(mode);\n    }\n    i++;\n  }\n  if (currentChunk !== '') {\n    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);\n  }\n  return result;\n}\n\n/**\n * Generates string representation of CSS selector in parsed form.\n *\n * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing\n * additional parsing at runtime (for example, for directive matching). However in some cases (for\n * example, while bootstrapping a component), a string version of the selector is required to query\n * for the host element on the page. This function takes the parsed form of a selector and returns\n * its string representation.\n *\n * @param selectorList selector in parsed form\n * @returns string representation of a given selector\n */\nexport function stringifyCSSSelectorList(selectorList: CssSelectorList): string {\n  return selectorList.map(stringifyCSSSelector).join(',');\n}\n\n/**\n * Extracts attributes and classes information from a given CSS selector.\n *\n * This function is used while creating a component dynamically. In this case, the host element\n * (that is created dynamically) should contain attributes and classes specified in component's CSS\n * selector.\n *\n * @param selector CSS selector in parsed form (in a form of array)\n * @returns object with `attrs` and `classes` fields that contain extracted information\n */\nexport function extractAttrsAndClassesFromSelector(selector: CssSelector):\n    {attrs: string[], classes: string[]} {\n  const attrs: string[] = [];\n  const classes: string[] = [];\n  let i = 1;\n  let mode = SelectorFlags.ATTRIBUTE;\n  while (i < selector.length) {\n    let valueOrMarker = selector[i];\n    if (typeof valueOrMarker === 'string') {\n      if (mode === SelectorFlags.ATTRIBUTE) {\n        if (valueOrMarker !== '') {\n          attrs.push(valueOrMarker, selector[++i] as string);\n        }\n      } else if (mode === SelectorFlags.CLASS) {\n        classes.push(valueOrMarker);\n      }\n    } else {\n      // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative\n      // mode is maintained for remaining chunks of a selector. Since attributes and classes are\n      // extracted only for \"positive\" part of the selector, we can stop here.\n      if (!isPositive(mode)) break;\n      mode = valueOrMarker;\n    }\n    i++;\n  }\n  return {attrs, classes};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface NO_CHANGE {\n  // This is a brand that ensures that this type can never match anything else\n  __brand__: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport const NO_CHANGE: NO_CHANGE =\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? {__brand__: 'NO_CHANGE'} : ({} as NO_CHANGE);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertGreaterThan} from '../../util/assert';\nimport {assertIndexInDeclRange} from '../assert';\nimport {executeCheckHooks, executeInitAndCheckHooks} from '../hooks';\nimport {FLAGS, InitPhaseState, LView, LViewFlags, TView} from '../interfaces/view';\nimport {getLView, getSelectedIndex, getTView, isInCheckNoChangesMode, setSelectedIndex} from '../state';\n\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * ```ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * ```\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport function ɵɵadvance(delta: number): void {\n  ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');\n  selectIndexInternal(\n      getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());\n}\n\nexport function selectIndexInternal(\n    tView: TView, lView: LView, index: number, checkNoChangesMode: boolean) {\n  ngDevMode && assertIndexInDeclRange(lView, index);\n\n  // Flush the initial hooks for elements in the view that have been added up to this point.\n  // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n  if (!checkNoChangesMode) {\n    const hooksInitPhaseCompleted =\n        (lView[FLAGS] & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n    if (hooksInitPhaseCompleted) {\n      const preOrderCheckHooks = tView.preOrderCheckHooks;\n      if (preOrderCheckHooks !== null) {\n        executeCheckHooks(lView, preOrderCheckHooks, index);\n      }\n    } else {\n      const preOrderHooks = tView.preOrderHooks;\n      if (preOrderHooks !== null) {\n        executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, index);\n      }\n    }\n  }\n\n  // We must set the selected index *after* running the hooks, because hooks may have side-effects\n  // that cause other template functions to run, thus updating the selected index, which is global\n  // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index\n  // will be altered by the time we leave the `ɵɵadvance` instruction.\n  setSelectedIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {resolveForwardRef} from '../forward_ref';\nimport {ɵɵinject, ɵɵinvalidFactoryDep} from '../injector_compatibility';\nimport {ɵɵdefineInjectable, ɵɵdefineInjector} from '../interface/defs';\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport const angularCoreDiEnv: {[name: string]: Function} = {\n  'ɵɵdefineInjectable': ɵɵdefineInjectable,\n  'ɵɵdefineInjector': ɵɵdefineInjector,\n  'ɵɵinject': ɵɵinject,\n  'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n  'resolveForwardRef': resolveForwardRef,\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3InjectableMetadataFacade} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {NG_FACTORY_DEF} from '../../render3/fields';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {resolveForwardRef} from '../forward_ref';\nimport {Injectable} from '../injectable';\nimport {NG_PROV_DEF} from '../interface/defs';\nimport {ClassSansProvider, ExistingSansProvider, FactorySansProvider, ValueProvider, ValueSansProvider} from '../interface/provider';\n\nimport {angularCoreDiEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * injectable def (`ɵprov`) onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, meta?: Injectable): void {\n  let ngInjectableDef: any = null;\n  let ngFactoryDef: any = null;\n\n  // if NG_PROV_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_PROV_DEF)) {\n    Object.defineProperty(type, NG_PROV_DEF, {\n      get: () => {\n        if (ngInjectableDef === null) {\n          const compiler =\n              getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'injectable', type});\n          ngInjectableDef = compiler.compileInjectable(\n              angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, meta));\n        }\n        return ngInjectableDef;\n      },\n    });\n  }\n\n  // if NG_FACTORY_DEF is already defined on this class then don't overwrite it\n  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {\n    Object.defineProperty(type, NG_FACTORY_DEF, {\n      get: () => {\n        if (ngFactoryDef === null) {\n          const compiler =\n              getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'injectable', type});\n          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {\n            name: type.name,\n            type,\n            typeArgumentCount: 0,  // In JIT mode types are not available nor used.\n            deps: reflectDependencies(type),\n            target: compiler.FactoryTarget.Injectable\n          });\n        }\n        return ngFactoryDef;\n      },\n      // Leave this configurable so that the factories from directives or pipes can take precedence.\n      configurable: true\n    });\n  }\n}\n\ntype UseClassProvider = Injectable&ClassSansProvider&{deps?: any[]};\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable&ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable&FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable&ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n\nfunction getInjectableMetadata(type: Type<any>, srcMeta?: Injectable): R3InjectableMetadataFacade {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta: Injectable = srcMeta || {providedIn: null};\n  const compilerMeta: R3InjectableMetadataFacade = {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    providedIn: meta.providedIn,\n  };\n  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n    compilerMeta.deps = convertDependencies(meta.deps);\n  }\n  // Check to see if the user explicitly provided a `useXxxx` property.\n  if (isUseClassProvider(meta)) {\n    compilerMeta.useClass = meta.useClass;\n  } else if (isUseValueProvider(meta)) {\n    compilerMeta.useValue = meta.useValue;\n  } else if (isUseFactoryProvider(meta)) {\n    compilerMeta.useFactory = meta.useFactory;\n  } else if (isUseExistingProvider(meta)) {\n    compilerMeta.useExisting = meta.useExisting;\n  }\n  return compilerMeta;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\n\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider} from './interface/provider';\nimport {compileInjectable} from './jit/injectable';\n\nexport {compileInjectable};\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @publicApi\n */\nexport type InjectableProvider = ValueSansProvider|ExistingSansProvider|StaticClassSansProvider|\n    ConstructorSansProvider|FactorySansProvider|ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectableDecorator {\n  /**\n   * Decorator that marks a class as available to be\n   * provided and injected as a dependency.\n   *\n   * @see [Introduction to Services and DI](guide/architecture-services)\n   * @see [Dependency Injection Guide](guide/dependency-injection)\n   *\n   * @usageNotes\n   *\n   * Marking a class with `@Injectable` ensures that the compiler\n   * will generate the necessary metadata to create the class's\n   * dependencies when the class is injected.\n   *\n   * The following example shows how a service class is properly\n   *  marked so that a supporting service can be injected upon creation.\n   *\n   * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Injectable\"></code-example>\n   *\n   */\n  (): TypeDecorator;\n  (options?: {providedIn: Type<any>|'root'|'platform'|'any'|null}&\n   InjectableProvider): TypeDecorator;\n  new(): Injectable;\n  new(options?: {providedIn: Type<any>|'root'|'platform'|'any'|null}&\n      InjectableProvider): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport interface Injectable {\n  /**\n   * Determines which injectors will provide the injectable.\n   *\n   * - `Type<any>` - associates the injectable with an `@NgModule` or other `InjectorType`. This\n   * option is DEPRECATED.\n   * - 'null' : Equivalent to `undefined`. The injectable is not provided in any scope automatically\n   * and must be added to a `providers` array of an [@NgModule](api/core/NgModule#providers),\n   * [@Component](api/core/Directive#providers) or [@Directive](api/core/Directive#providers).\n   *\n   * The following options specify that this injectable should be provided in one of the following\n   * injectors:\n   * - 'root' : The application-level injector in most apps.\n   * - 'platform' : A special singleton platform injector shared by all\n   * applications on the page.\n   * - 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded\n   * modules share one instance. This option is DEPRECATED.\n   *\n   */\n  providedIn?: Type<any>|'root'|'platform'|'any'|null;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Injectable: InjectableDecorator = makeDecorator(\n    'Injectable', undefined, undefined, undefined,\n    (type: Type<any>, meta: Injectable) => compileInjectable(type as any, meta));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EMPTY_ARRAY} from '../util/empty';\nimport {stringify} from '../util/stringify';\n\nimport {Injector} from './injector';\nimport {StaticProvider} from './interface/provider';\nimport {importProvidersFrom} from './provider_collection';\nimport {getNullInjector, R3Injector} from './r3_injector';\nimport {InjectorScope} from './scope';\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport function createInjector(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string): Injector {\n  const injector =\n      createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);\n  injector.resolveInjectorInitializers();\n  return injector;\n}\n\n/**\n * Creates a new injector without eagerly resolving its injector types. Can be used in places\n * where resolving the injector types immediately can lead to an infinite loop. The injector types\n * should be resolved at a later point by calling `_resolveInjectorDefTypes`.\n */\nexport function createInjectorWithoutInjectorInstances(\n    defType: /* InjectorType<any> */ any, parent: Injector|null = null,\n    additionalProviders: StaticProvider[]|null = null, name?: string,\n    scopes = new Set<InjectorScope>()): R3Injector {\n  const providers = [\n    additionalProviders || EMPTY_ARRAY,\n    importProvidersFrom(defType),\n  ];\n  name = name || (typeof defType === 'object' ? undefined : stringify(defType));\n\n  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {createInjector} from './create_injector';\nimport {THROW_IF_NOT_FOUND, ɵɵinject} from './injector_compatibility';\nimport {InjectorMarkers} from './injector_marker';\nimport {INJECTOR} from './injector_token';\nimport {ɵɵdefineInjectable} from './interface/defs';\nimport {InjectFlags, InjectOptions} from './interface/injector';\nimport {StaticProvider} from './interface/provider';\nimport {NullInjector} from './null_injector';\nimport {ProviderToken} from './provider_token';\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n  static NULL: Injector = (/* @__PURE__ */ new NullInjector());\n\n  /**\n   * Internal note on the `options?: InjectOptions|InjectFlags` override of the `get`\n   * method: consider dropping the `InjectFlags` part in one of the major versions.\n   * It can **not** be done in minor/patch, since it's breaking for custom injectors\n   * that only implement the old `InjectorFlags` interface.\n   */\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue: undefined, options: InjectOptions&{\n    optional?: false;\n  }): T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue: null|undefined, options: InjectOptions): T\n      |null;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, options?: InjectOptions|InjectFlags):\n      T;\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   * @deprecated use object-based flags (`InjectOptions`) instead.\n   */\n  abstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use ProviderToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  /**\n   * Creates a new injector instance that provides one or more dependencies,\n   * according to a given type or types of `StaticProvider`.\n   *\n   * @param options An object with the following properties:\n   * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n   * * `parent`: (optional) A parent injector.\n   * * `name`: (optional) A developer-defined identifying name for the new injector.\n   *\n   * @returns The new injector instance.\n   *\n   */\n  static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;\n\n\n  static create(\n      options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},\n      parent?: Injector): Injector {\n    if (Array.isArray(options)) {\n      return createInjector({name: ''}, parent, options, '');\n    } else {\n      const name = options.name ?? '';\n      return createInjector({name}, options.parent, options.providers, name);\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable({\n    token: Injector,\n    providedIn: 'any',\n    factory: () => ɵɵinject(INJECTOR),\n  });\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = InjectorMarkers.Injector;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {ERROR_ORIGINAL_ERROR, wrappedError} from '../util/errors';\nimport {stringify} from '../util/stringify';\n\nimport {ReflectiveInjector} from './reflective_injector';\nimport {ReflectiveKey} from './reflective_key';\n\nfunction findFirstClosedCycle(keys: any[]): any[] {\n  const res: any[] = [];\n  for (let i = 0; i < keys.length; ++i) {\n    if (res.indexOf(keys[i]) > -1) {\n      res.push(keys[i]);\n      return res;\n    }\n    res.push(keys[i]);\n  }\n  return res;\n}\n\nfunction constructResolvingPath(keys: any[]): string {\n  if (keys.length > 1) {\n    const reversed = findFirstClosedCycle(keys.slice().reverse());\n    const tokenStrs = reversed.map(k => stringify(k.token));\n    return ' (' + tokenStrs.join(' -> ') + ')';\n  }\n\n  return '';\n}\n\nexport interface InjectionError extends Error {\n  keys: ReflectiveKey[];\n  injectors: ReflectiveInjector[];\n  constructResolvingMessage: (keys: ReflectiveKey[]) => string;\n  addKey(injector: ReflectiveInjector, key: ReflectiveKey): void;\n}\n\nfunction injectionError(\n    injector: ReflectiveInjector, key: ReflectiveKey,\n    constructResolvingMessage: (keys: ReflectiveKey[]) => string,\n    originalError?: Error): InjectionError {\n  const keys = [key];\n  const errMsg = constructResolvingMessage(keys);\n  const error =\n      (originalError ? wrappedError(errMsg, originalError) : Error(errMsg)) as InjectionError;\n  error.addKey = addKey;\n  error.keys = keys;\n  error.injectors = [injector];\n  error.constructResolvingMessage = constructResolvingMessage;\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n\nfunction addKey(this: InjectionError, injector: ReflectiveInjector, key: ReflectiveKey): void {\n  this.injectors.push(injector);\n  this.keys.push(key);\n  // Note: This updated message won't be reflected in the `.stack` property\n  this.message = this.constructResolvingMessage(this.keys);\n}\n\n/**\n * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the\n * {@link Injector} does not have a {@link Provider} for the given key.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n */\nexport function noProviderError(injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const first = stringify(keys[0].token);\n    return `No provider for ${first}!${constructResolvingPath(keys)}`;\n  });\n}\n\n/**\n * Thrown when dependencies form a cycle.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n */\nexport function cyclicDependencyError(\n    injector: ReflectiveInjector, key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;\n  });\n}\n\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n */\nexport function instantiationError(\n    injector: ReflectiveInjector, originalException: any, originalStack: any,\n    key: ReflectiveKey): InjectionError {\n  return injectionError(injector, key, function(keys: ReflectiveKey[]) {\n    const first = stringify(keys[0].token);\n    return `${originalException.message}: Error during instantiation of ${first}!${\n        constructResolvingPath(keys)}.`;\n  }, originalException);\n}\n\n/**\n * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}\n * creation.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n */\nexport function invalidProviderError(provider: any) {\n  return Error(\n      `Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);\n}\n\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n */\nexport function noAnnotationError(typeOrFunc: Type<any>|Function, params: any[][]): Error {\n  const signature: string[] = [];\n  for (let i = 0, ii = params.length; i < ii; i++) {\n    const parameter = params[i];\n    if (!parameter || parameter.length == 0) {\n      signature.push('?');\n    } else {\n      signature.push(parameter.map(stringify).join(' '));\n    }\n  }\n  return Error(\n      'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n      signature.join(', ') + '). ' +\n      'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n      stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n\n/**\n * Thrown when getting an object by index.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n */\nexport function outOfBoundsError(index: number) {\n  return Error(`Index ${index} is out-of-bounds.`);\n}\n\n// TODO: add a working example after alpha38 is released\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n */\nexport function mixingMultiProvidersWithRegularProvidersError(\n    provider1: any, provider2: any): Error {\n  return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\n\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nexport class ReflectiveKey {\n  public readonly displayName: string;\n  /**\n   * Private\n   */\n  constructor(public token: Object, public id: number) {\n    if (!token) {\n      throw new RuntimeError(\n          RuntimeErrorCode.MISSING_INJECTION_TOKEN, ngDevMode && 'Token must be defined!');\n    }\n    this.displayName = stringify(this.token);\n  }\n\n  /**\n   * Retrieves a `Key` for a token.\n   */\n  static get(token: Object): ReflectiveKey {\n    return _globalKeyRegistry.get(resolveForwardRef(token));\n  }\n\n  /**\n   * @returns the number of keys registered in the system.\n   */\n  static get numberOfKeys(): number {\n    return _globalKeyRegistry.numberOfKeys;\n  }\n}\n\nexport class KeyRegistry {\n  private _allKeys = new Map<Object, ReflectiveKey>();\n\n  get(token: Object): ReflectiveKey {\n    if (token instanceof ReflectiveKey) return token;\n\n    if (this._allKeys.has(token)) {\n      return this._allKeys.get(token)!;\n    }\n\n    const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n    this._allKeys.set(token, newKey);\n    return newKey;\n  }\n\n  get numberOfKeys(): number {\n    return this._allKeys.size;\n  }\n}\n\nconst _globalKeyRegistry = new KeyRegistry();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {ClassProvider, ExistingProvider, FactoryProvider, Provider, TypeProvider, ValueProvider} from './interface/provider';\nimport {getReflect} from './jit/util';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\nimport {invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError} from './reflective_errors';\nimport {ReflectiveKey} from './reflective_key';\n\n\ninterface NormalizedProvider extends TypeProvider, ValueProvider, ClassProvider, ExistingProvider,\n                                     FactoryProvider {}\n\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport class ReflectiveDependency {\n  constructor(\n      public key: ReflectiveKey, public optional: boolean, public visibility: Self|SkipSelf|null) {}\n\n  static fromKey(key: ReflectiveKey): ReflectiveDependency {\n    return new ReflectiveDependency(key, false, null);\n  }\n}\n\nconst _EMPTY_LIST: any[] = [];\n\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * @usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * @publicApi\n */\nexport interface ResolvedReflectiveProvider {\n  /**\n   * A key, usually a `Type<any>`.\n   */\n  key: ReflectiveKey;\n\n  /**\n   * Factory function which can return an instance of an object represented by a key.\n   */\n  resolvedFactories: ResolvedReflectiveFactory[];\n\n  /**\n   * Indicates if the provider is a multi-provider or a regular provider.\n   */\n  multiProvider: boolean;\n}\n\nexport class ResolvedReflectiveProvider_ implements ResolvedReflectiveProvider {\n  readonly resolvedFactory: ResolvedReflectiveFactory;\n\n  constructor(\n      public key: ReflectiveKey, public resolvedFactories: ResolvedReflectiveFactory[],\n      public multiProvider: boolean) {\n    this.resolvedFactory = this.resolvedFactories[0];\n  }\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * @publicApi\n */\nexport class ResolvedReflectiveFactory {\n  constructor(\n      /**\n       * Factory function which can return an instance of an object represented by a key.\n       */\n      public factory: Function,\n\n      /**\n       * Arguments (dependencies) to the `factory` function.\n       */\n      public dependencies: ReflectiveDependency[]) {}\n}\n\n\n/**\n * Resolve a single provider.\n */\nfunction resolveReflectiveFactory(provider: NormalizedProvider): ResolvedReflectiveFactory {\n  let factoryFn: Function;\n  let resolvedDeps: ReflectiveDependency[];\n  if (provider.useClass) {\n    const useClass = resolveForwardRef(provider.useClass);\n    factoryFn = getReflect().factory(useClass);\n    resolvedDeps = _dependenciesFor(useClass);\n  } else if (provider.useExisting) {\n    factoryFn = (aliasInstance: any) => aliasInstance;\n    resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n  } else if (provider.useFactory) {\n    factoryFn = provider.useFactory;\n    resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n  } else {\n    factoryFn = () => provider.useValue;\n    resolvedDeps = _EMPTY_LIST;\n  }\n  return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n */\nfunction resolveReflectiveProvider(provider: NormalizedProvider): ResolvedReflectiveProvider {\n  return new ResolvedReflectiveProvider_(\n      ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)],\n      provider.multi || false);\n}\n\n/**\n * Resolve a list of Providers.\n */\nexport function resolveReflectiveProviders(providers: Provider[]): ResolvedReflectiveProvider[] {\n  const normalized = _normalizeProviders(providers, []);\n  const resolved = normalized.map(resolveReflectiveProvider);\n  const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n  return Array.from(resolvedProviderMap.values());\n}\n\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n */\nexport function mergeResolvedReflectiveProviders(\n    providers: ResolvedReflectiveProvider[],\n    normalizedProvidersMap: Map<number, ResolvedReflectiveProvider>):\n    Map<number, ResolvedReflectiveProvider> {\n  for (let i = 0; i < providers.length; i++) {\n    const provider = providers[i];\n    const existing = normalizedProvidersMap.get(provider.key.id);\n    if (existing) {\n      if (provider.multiProvider !== existing.multiProvider) {\n        throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n      }\n      if (provider.multiProvider) {\n        for (let j = 0; j < provider.resolvedFactories.length; j++) {\n          existing.resolvedFactories.push(provider.resolvedFactories[j]);\n        }\n      } else {\n        normalizedProvidersMap.set(provider.key.id, provider);\n      }\n    } else {\n      let resolvedProvider: ResolvedReflectiveProvider;\n      if (provider.multiProvider) {\n        resolvedProvider = new ResolvedReflectiveProvider_(\n            provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n      } else {\n        resolvedProvider = provider;\n      }\n      normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n    }\n  }\n  return normalizedProvidersMap;\n}\n\nfunction _normalizeProviders(\n    providers: Provider[], res: NormalizedProvider[]): NormalizedProvider[] {\n  providers.forEach(b => {\n    if (b instanceof Type) {\n      res.push({provide: b, useClass: b} as NormalizedProvider);\n\n    } else if (b && typeof b == 'object' && (b as any).provide !== undefined) {\n      res.push(b as NormalizedProvider);\n\n    } else if (Array.isArray(b)) {\n      _normalizeProviders(b, res);\n\n    } else {\n      throw invalidProviderError(b);\n    }\n  });\n\n  return res;\n}\n\nexport function constructDependencies(\n    typeOrFunc: any, dependencies?: any[]): ReflectiveDependency[] {\n  if (!dependencies) {\n    return _dependenciesFor(typeOrFunc);\n  } else {\n    const params: any[][] = dependencies.map(t => [t]);\n    return dependencies.map(t => _extractToken(typeOrFunc, t, params));\n  }\n}\n\nfunction _dependenciesFor(typeOrFunc: any): ReflectiveDependency[] {\n  const params = getReflect().parameters(typeOrFunc);\n\n  if (!params) return [];\n  if (params.some(p => p == null)) {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n  return params.map(p => _extractToken(typeOrFunc, p, params));\n}\n\nfunction _extractToken(\n    typeOrFunc: any, metadata: any[]|any, params: any[][]): ReflectiveDependency {\n  let token: any = null;\n  let optional = false;\n\n  if (!Array.isArray(metadata)) {\n    if (metadata instanceof Inject) {\n      return _createDependency(metadata.token, optional, null);\n    } else {\n      return _createDependency(metadata, optional, null);\n    }\n  }\n\n  let visibility: Self|SkipSelf|null = null;\n\n  for (let i = 0; i < metadata.length; ++i) {\n    const paramMetadata = metadata[i];\n\n    if (paramMetadata instanceof Type) {\n      token = paramMetadata;\n\n    } else if (paramMetadata instanceof Inject) {\n      token = paramMetadata.token;\n\n    } else if (paramMetadata instanceof Optional) {\n      optional = true;\n\n    } else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n      visibility = paramMetadata;\n    } else if (paramMetadata instanceof InjectionToken) {\n      token = paramMetadata;\n    }\n  }\n\n  token = resolveForwardRef(token);\n\n  if (token != null) {\n    return _createDependency(token, optional, visibility);\n  } else {\n    throw noAnnotationError(typeOrFunc, params);\n  }\n}\n\nfunction _createDependency(\n    token: any, optional: boolean, visibility: Self|SkipSelf|null): ReflectiveDependency {\n  return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from './injector';\nimport {THROW_IF_NOT_FOUND} from './injector_compatibility';\nimport {Provider} from './interface/provider';\nimport {Self, SkipSelf} from './metadata';\nimport {cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError} from './reflective_errors';\nimport {ReflectiveKey} from './reflective_key';\nimport {ReflectiveDependency, ResolvedReflectiveFactory, ResolvedReflectiveProvider, resolveReflectiveProviders} from './reflective_provider';\n\n\n// Threshold for the dynamic version\nconst UNDEFINED = {};\n\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * @publicApi\n */\nexport abstract class ReflectiveInjector implements Injector {\n  /**\n   * Turns an array of provider definitions into an array of resolved providers.\n   *\n   * A resolution is a process of flattening multiple nested arrays and converting individual\n   * providers into an array of `ResolvedReflectiveProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n   *\n   * expect(providers.length).toEqual(2);\n   *\n   * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n   * expect(providers[0].key.displayName).toBe(\"Car\");\n   * expect(providers[0].dependencies.length).toEqual(1);\n   * expect(providers[0].factory).toBeDefined();\n   *\n   * expect(providers[1].key.displayName).toBe(\"Engine\");\n   * });\n   * ```\n   *\n   */\n  static resolve(providers: Provider[]): ResolvedReflectiveProvider[] {\n    return resolveReflectiveProviders(providers);\n  }\n\n  /**\n   * Resolves an array of providers and creates an injector from those providers.\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n  }\n\n  /**\n   * Creates an injector from previously resolved providers.\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var providers = ReflectiveInjector.resolve([Car, Engine]);\n   * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n   * expect(injector.get(Car) instanceof Car).toBe(true);\n   * ```\n   */\n  static fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector):\n      ReflectiveInjector {\n    return new ReflectiveInjector_(providers, parent);\n  }\n\n\n  /**\n   * Parent of this injector.\n   *\n   * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n   * -->\n   */\n  abstract get parent(): Injector|null;\n\n  /**\n   * Resolves an array of providers and creates a child injector from those providers.\n   *\n   * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n   * -->\n   *\n   * The passed-in providers can be an array of `Type`, `Provider`,\n   * or a recursive array of more providers.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * class ParentProvider {}\n   * class ChildProvider {}\n   *\n   * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n   * var child = parent.resolveAndCreateChild([ChildProvider]);\n   *\n   * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n   * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n   * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n   * ```\n   */\n  abstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n\n  /**\n   * Creates a child injector from previously resolved providers.\n   *\n   * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n   * -->\n   *\n   * This API is the recommended way to construct injectors in performance-sensitive parts.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * class ParentProvider {}\n   * class ChildProvider {}\n   *\n   * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n   * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n   *\n   * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n   * var child = parent.createChildFromResolved(childProviders);\n   *\n   * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n   * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n   * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n   * ```\n   */\n  abstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n\n  /**\n   * Resolves a provider and instantiates an object in the context of the injector.\n   *\n   * The created object does not get cached by the injector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n   *\n   * var car = injector.resolveAndInstantiate(Car);\n   * expect(car.engine).toBe(injector.get(Engine));\n   * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n   * ```\n   */\n  abstract resolveAndInstantiate(provider: Provider): any;\n\n  /**\n   * Instantiates an object using a resolved provider in the context of the injector.\n   *\n   * The created object does not get cached by the injector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Injectable()\n   * class Engine {\n   * }\n   *\n   * @Injectable()\n   * class Car {\n   *   constructor(public engine:Engine) {}\n   * }\n   *\n   * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n   * var carProvider = ReflectiveInjector.resolve([Car])[0];\n   * var car = injector.instantiateResolved(carProvider);\n   * expect(car.engine).toBe(injector.get(Engine));\n   * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n   * ```\n   */\n  abstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n\n  abstract get(token: any, notFoundValue?: any): any;\n}\n\nexport class ReflectiveInjector_ implements ReflectiveInjector {\n  private static INJECTOR_KEY = (/* @__PURE__ */ ReflectiveKey.get(Injector));\n  /** @internal */\n  _constructionCounter: number = 0;\n  /** @internal */\n  public _providers: ResolvedReflectiveProvider[];\n  public readonly parent: Injector|null;\n\n  keyIds: number[];\n  objs: any[];\n  /**\n   * Private\n   */\n  constructor(_providers: ResolvedReflectiveProvider[], _parent?: Injector) {\n    this._providers = _providers;\n    this.parent = _parent || null;\n\n    const len = _providers.length;\n\n    this.keyIds = [];\n    this.objs = [];\n\n    for (let i = 0; i < len; i++) {\n      this.keyIds[i] = _providers[i].key.id;\n      this.objs[i] = UNDEFINED;\n    }\n  }\n\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n  }\n\n  resolveAndCreateChild(providers: Provider[]): ReflectiveInjector {\n    const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n    return this.createChildFromResolved(ResolvedReflectiveProviders);\n  }\n\n  createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector {\n    const inj = new ReflectiveInjector_(providers);\n    (inj as {parent: Injector | null}).parent = this;\n    return inj;\n  }\n\n  resolveAndInstantiate(provider: Provider): any {\n    return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n  }\n\n  instantiateResolved(provider: ResolvedReflectiveProvider): any {\n    return this._instantiateProvider(provider);\n  }\n\n  getProviderAtIndex(index: number): ResolvedReflectiveProvider {\n    if (index < 0 || index >= this._providers.length) {\n      throw outOfBoundsError(index);\n    }\n    return this._providers[index];\n  }\n\n  /** @internal */\n  _new(provider: ResolvedReflectiveProvider): any {\n    if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n      throw cyclicDependencyError(this, provider.key);\n    }\n    return this._instantiateProvider(provider);\n  }\n\n  private _getMaxNumberOfObjects(): number {\n    return this.objs.length;\n  }\n\n  private _instantiateProvider(provider: ResolvedReflectiveProvider): any {\n    if (provider.multiProvider) {\n      const res = [];\n      for (let i = 0; i < provider.resolvedFactories.length; ++i) {\n        res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n      }\n      return res;\n    } else {\n      return this._instantiate(provider, provider.resolvedFactories[0]);\n    }\n  }\n\n  private _instantiate(\n      provider: ResolvedReflectiveProvider,\n      ResolvedReflectiveFactory: ResolvedReflectiveFactory): any {\n    const factory = ResolvedReflectiveFactory.factory;\n\n    let deps: any[];\n    try {\n      deps =\n          ResolvedReflectiveFactory.dependencies.map(dep => this._getByReflectiveDependency(dep));\n    } catch (e: any) {\n      if (e.addKey) {\n        e.addKey(this, provider.key);\n      }\n      throw e;\n    }\n\n    let obj: any;\n    try {\n      obj = factory(...deps);\n    } catch (e) {\n      throw instantiationError(this, e, (e as Error).stack, provider.key);\n    }\n\n    return obj;\n  }\n\n  private _getByReflectiveDependency(dep: ReflectiveDependency): any {\n    return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n  }\n\n  private _getByKey(key: ReflectiveKey, visibility: Self|SkipSelf|null, notFoundValue: any): any {\n    if (key === ReflectiveInjector_.INJECTOR_KEY) {\n      return this;\n    }\n\n    if (visibility instanceof Self) {\n      return this._getByKeySelf(key, notFoundValue);\n\n    } else {\n      return this._getByKeyDefault(key, notFoundValue, visibility);\n    }\n  }\n\n  private _getObjByKeyId(keyId: number): any {\n    for (let i = 0; i < this.keyIds.length; i++) {\n      if (this.keyIds[i] === keyId) {\n        if (this.objs[i] === UNDEFINED) {\n          this.objs[i] = this._new(this._providers[i]);\n        }\n\n        return this.objs[i];\n      }\n    }\n\n    return UNDEFINED;\n  }\n\n  /** @internal */\n  _throwOrNull(key: ReflectiveKey, notFoundValue: any): any {\n    if (notFoundValue !== THROW_IF_NOT_FOUND) {\n      return notFoundValue;\n    } else {\n      throw noProviderError(this, key);\n    }\n  }\n\n  /** @internal */\n  _getByKeySelf(key: ReflectiveKey, notFoundValue: any): any {\n    const obj = this._getObjByKeyId(key.id);\n    return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n  }\n\n  /** @internal */\n  _getByKeyDefault(key: ReflectiveKey, notFoundValue: any, visibility: Self|SkipSelf|null): any {\n    let inj: Injector|null;\n\n    if (visibility instanceof SkipSelf) {\n      inj = this.parent;\n    } else {\n      inj = this;\n    }\n\n    while (inj instanceof ReflectiveInjector_) {\n      const inj_ = <ReflectiveInjector_>inj;\n      const obj = inj_._getObjByKeyId(key.id);\n      if (obj !== UNDEFINED) return obj;\n      inj = inj_.parent;\n    }\n    if (inj !== null) {\n      return inj.get(key.token, notFoundValue);\n    } else {\n      return this._throwOrNull(key, notFoundValue);\n    }\n  }\n\n  get displayName(): string {\n    const providers =\n        _mapProviders(this, (b: ResolvedReflectiveProvider) => ' \"' + b.key.displayName + '\" ')\n            .join(', ');\n    return `ReflectiveInjector(providers: [${providers}])`;\n  }\n\n  toString(): string {\n    return this.displayName;\n  }\n}\n\nfunction _mapProviders(injector: ReflectiveInjector_, fn: Function): any[] {\n  const res: any[] = [];\n  for (let i = 0; i < injector._providers.length; ++i) {\n    res[i] = fn(injector.getProviderAtIndex(i));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The `di` module provides dependency injection container services.\n */\n\nexport * from './metadata';\nexport {InjectFlags} from './interface/injector';\nexport {ɵɵdefineInjectable, defineInjectable, ɵɵdefineInjector, InjectableType, InjectorType} from './interface/defs';\nexport {forwardRef, resolveForwardRef, ForwardRefFn} from './forward_ref';\nexport {Injectable, InjectableDecorator, InjectableProvider} from './injectable';\nexport {Injector} from './injector';\nexport {EnvironmentInjector} from './r3_injector';\nexport {importProvidersFrom, ImportProvidersSource, makeEnvironmentProviders} from './provider_collection';\nexport {ENVIRONMENT_INITIALIZER} from './initializer_token';\nexport {ProviderToken} from './provider_token';\nexport {ɵɵinject, inject, ɵɵinvalidFactoryDep} from './injector_compatibility';\nexport {InjectOptions} from './interface/injector';\nexport {INJECTOR} from './injector_token';\nexport {ReflectiveInjector} from './reflective_injector';\nexport {ClassProvider, ModuleWithProviders, ClassSansProvider, ImportedNgModuleProviders, ConstructorProvider, EnvironmentProviders, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, Provider, StaticClassProvider, StaticClassSansProvider, StaticProvider, TypeProvider, ValueProvider, ValueSansProvider} from './interface/provider';\nexport {ResolvedReflectiveFactory, ResolvedReflectiveProvider} from './reflective_provider';\nexport {ReflectiveKey} from './reflective_key';\nexport {InjectionToken} from './injection_token';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file should not be necessary because node resolution should just default to `./di/index`!\n *\n * However it does not seem to work and it breaks:\n *  - //packages/animations/browser/test:test_web_chromium-local\n *  - //packages/compiler-cli/test:extract_i18n\n *  - //packages/compiler-cli/test:ngc\n *  - //packages/compiler-cli/test:perform_watch\n *  - //packages/compiler-cli/test/diagnostics:check_types\n *  - //packages/compiler-cli/test/transformers:test\n *  - //packages/compiler/test:test\n *  - //tools/public_api_guard:core_api\n *\n * Remove this file once the above is solved or wait until `ngc` is deleted and then it should be\n * safe to delete this file.\n */\n\nexport * from './di/index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectFlags, resolveForwardRef} from '../../di';\nimport {assertInjectImplementationNotEqual} from '../../di/inject_switch';\nimport {ɵɵinject} from '../../di/injector_compatibility';\nimport {ProviderToken} from '../../di/provider_token';\nimport {getOrCreateInjectable} from '../di';\nimport {TDirectiveHostNode} from '../interfaces/node';\nimport {getCurrentTNode, getLView} from '../state';\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * ```ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * ```\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n *\n * @codeGenApi\n */\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InjectFlags): T;\nexport function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags = InjectFlags.Default): T|null {\n  const lView = getLView();\n  // Fall back to inject() if view hasn't been created. This situation can happen in tests\n  // if inject utilities are used before bootstrapping.\n  if (lView === null) {\n    // Verify that we will not get into infinite loop.\n    ngDevMode && assertInjectImplementationNotEqual(ɵɵdirectiveInject);\n    return ɵɵinject(token, flags);\n  }\n  const tNode = getCurrentTNode();\n  return getOrCreateInjectable<T>(\n      tNode as TDirectiveHostNode, lView, resolveForwardRef(token), flags);\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport function ɵɵinvalidFactory(): never {\n  const msg =\n      ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';\n  throw new Error(msg);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../../di/injector';\nimport {ErrorHandler} from '../../error_handler';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {DoCheck, OnChanges, OnInit} from '../../interface/lifecycle_hooks';\nimport {SchemaMetadata} from '../../metadata/schema';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {validateAgainstEventAttributes, validateAgainstEventProperties} from '../../sanitization/sanitization';\nimport {Sanitizer} from '../../sanitization/sanitizer';\nimport {assertDefined, assertEqual, assertGreaterThan, assertGreaterThanOrEqual, assertIndexInRange, assertNotEqual, assertNotSame, assertSame, assertString} from '../../util/assert';\nimport {escapeCommentText} from '../../util/dom';\nimport {normalizeDebugBindingName, normalizeDebugBindingValue} from '../../util/ng_reflect';\nimport {stringify} from '../../util/stringify';\nimport {assertFirstCreatePass, assertFirstUpdatePass, assertLContainer, assertLView, assertTNodeForLView, assertTNodeForTView} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {getFactoryDef} from '../definition_factory';\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from '../di';\nimport {throwMultipleComponentError} from '../errors';\nimport {executeCheckHooks, executeInitAndCheckHooks, incrementInitPhaseFlags} from '../hooks';\nimport {CONTAINER_HEADER_OFFSET, HAS_TRANSPLANTED_VIEWS, LContainer, MOVED_VIEWS} from '../interfaces/container';\nimport {ComponentDef, ComponentTemplate, DirectiveDef, DirectiveDefListOrFactory, HostBindingsFunction, HostDirectiveBindingMap, HostDirectiveDefs, PipeDefListOrFactory, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {NodeInjectorFactory} from '../interfaces/injector';\nimport {getUniqueLViewId} from '../interfaces/lview_tracking';\nimport {AttributeMarker, InitialInputData, InitialInputs, LocalRefExtractor, PropertyAliases, PropertyAliasValue, TAttributes, TConstantsOrFactory, TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeType, TProjectionNode} from '../interfaces/node';\nimport {Renderer, RendererFactory} from '../interfaces/renderer';\nimport {RComment, RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {isComponentDef, isComponentHost, isContentQueryHost, isRootView} from '../interfaces/type_checks';\nimport {CHILD_HEAD, CHILD_TAIL, CLEANUP, CONTEXT, DECLARATION_COMPONENT_VIEW, DECLARATION_VIEW, EMBEDDED_VIEW_INJECTOR, FLAGS, HEADER_OFFSET, HOST, HostBindingOpCodes, ID, InitPhaseState, INJECTOR, LView, LViewFlags, NEXT, PARENT, RENDERER, RENDERER_FACTORY, SANITIZER, T_HOST, TData, TRANSPLANTED_VIEWS_TO_REFRESH, TVIEW, TView, TViewType} from '../interfaces/view';\nimport {assertPureTNodeType, assertTNodeType} from '../node_assert';\nimport {updateTextNode} from '../node_manipulation';\nimport {isInlineTemplate, isNodeMatchingSelectorList} from '../node_selector_matcher';\nimport {profiler, ProfilerEvent} from '../profiler';\nimport {enterView, getBindingsEnabled, getCurrentDirectiveIndex, getCurrentParentTNode, getCurrentTNode, getCurrentTNodePlaceholderOk, getSelectedIndex, isCurrentTNodeParent, isInCheckNoChangesMode, isInI18nBlock, leaveView, setBindingIndex, setBindingRootForHostBindings, setCurrentDirectiveIndex, setCurrentQueryIndex, setCurrentTNode, setIsInCheckNoChangesMode, setSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {INTERPOLATION_DELIMITER} from '../util/misc_utils';\nimport {renderStringify, stringifyForError} from '../util/stringify_utils';\nimport {getFirstLContainer, getLViewParent, getNextLContainer} from '../util/view_traversal_utils';\nimport {getComponentLViewByIndex, getNativeByIndex, getNativeByTNode, isCreationMode, resetPreOrderHookFlags, unwrapLView, updateTransplantedViewCount, viewAttachedToChangeDetector} from '../util/view_utils';\n\nimport {selectIndexInternal} from './advance';\nimport {ɵɵdirectiveInject} from './di';\nimport {handleUnknownPropertyError, isPropertyValid, matchingSchemas} from './element_validation';\n\n/**\n * Invoke `HostBindingsFunction`s for view.\n *\n * This methods executes `TView.hostBindingOpCodes`. It is used to execute the\n * `HostBindingsFunction`s associated with the current `LView`.\n *\n * @param tView Current `TView`.\n * @param lView Current `LView`.\n */\nexport function processHostBindingOpCodes(tView: TView, lView: LView): void {\n  const hostBindingOpCodes = tView.hostBindingOpCodes;\n  if (hostBindingOpCodes === null) return;\n  try {\n    for (let i = 0; i < hostBindingOpCodes.length; i++) {\n      const opCode = hostBindingOpCodes[i] as number;\n      if (opCode < 0) {\n        // Negative numbers are element indexes.\n        setSelectedIndex(~opCode);\n      } else {\n        // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n        const directiveIdx = opCode;\n        const bindingRootIndx = hostBindingOpCodes[++i] as number;\n        const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n        const context = lView[directiveIdx];\n        hostBindingFn(RenderFlags.Update, context);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n  }\n}\n\n\n/** Refreshes all content queries declared by directives in a given view */\nfunction refreshContentQueries(tView: TView, lView: LView): void {\n  const contentQueries = tView.contentQueries;\n  if (contentQueries !== null) {\n    for (let i = 0; i < contentQueries.length; i += 2) {\n      const queryStartIdx = contentQueries[i];\n      const directiveDefIdx = contentQueries[i + 1];\n      if (directiveDefIdx !== -1) {\n        const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n        ngDevMode && assertDefined(directiveDef, 'DirectiveDef not found.');\n        ngDevMode &&\n            assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');\n        setCurrentQueryIndex(queryStartIdx);\n        directiveDef.contentQueries!(RenderFlags.Update, lView[directiveDefIdx], directiveDefIdx);\n      }\n    }\n  }\n}\n\n/** Refreshes child components in the current view (update mode). */\nfunction refreshChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    refreshComponent(hostLView, components[i]);\n  }\n}\n\n/** Renders child components in the current view (creation mode). */\nfunction renderChildComponents(hostLView: LView, components: number[]): void {\n  for (let i = 0; i < components.length; i++) {\n    renderComponent(hostLView, components[i]);\n  }\n}\n\nexport function createLView<T>(\n    parentLView: LView|null, tView: TView, context: T|null, flags: LViewFlags, host: RElement|null,\n    tHostNode: TNode|null, rendererFactory: RendererFactory|null, renderer: Renderer|null,\n    sanitizer: Sanitizer|null, injector: Injector|null,\n    embeddedViewInjector: Injector|null): LView {\n  const lView = tView.blueprint.slice() as LView;\n  lView[HOST] = host;\n  lView[FLAGS] = flags | LViewFlags.CreationMode | LViewFlags.Attached | LViewFlags.FirstLViewPass;\n  if (embeddedViewInjector !== null ||\n      (parentLView && (parentLView[FLAGS] & LViewFlags.HasEmbeddedViewInjector))) {\n    lView[FLAGS] |= LViewFlags.HasEmbeddedViewInjector;\n  }\n  resetPreOrderHookFlags(lView);\n  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY])!;\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER])!;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null!;\n  lView[INJECTOR as any] = injector || parentLView && parentLView[INJECTOR] || null;\n  lView[T_HOST] = tHostNode;\n  lView[ID] = getUniqueLViewId();\n  lView[EMBEDDED_VIEW_INJECTOR as any] = embeddedViewInjector;\n  ngDevMode &&\n      assertEqual(\n          tView.type == TViewType.Embedded ? parentLView !== null : true, true,\n          'Embedded views must have parentLView');\n  lView[DECLARATION_COMPONENT_VIEW] =\n      tView.type == TViewType.Embedded ? parentLView![DECLARATION_COMPONENT_VIEW] : lView;\n  return lView;\n}\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param tView The current `TView`.\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Element|TNodeType.Text, name: string|null,\n    attrs: TAttributes|null): TElementNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Container, name: string|null,\n    attrs: TAttributes|null): TContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Projection, name: null,\n    attrs: TAttributes|null): TProjectionNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.ElementContainer, name: string|null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType.Icu, name: null,\n    attrs: TAttributes|null): TElementContainerNode;\nexport function getOrCreateTNode(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null):\n    TElementNode&TContainerNode&TElementContainerNode&TProjectionNode&TIcuContainerNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  // Keep this function short, so that the VM will inline it.\n  ngDevMode && assertPureTNodeType(type);\n  let tNode = tView.data[index] as TNode;\n  if (tNode === null) {\n    tNode = createTNodeAtIndex(tView, index, type, name, attrs);\n    if (isInI18nBlock()) {\n      // If we are in i18n block then all elements should be pre declared through `Placeholder`\n      // See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n      // If the `TNode` was not pre-declared than it means it was not mentioned which means it was\n      // removed, so we mark it as detached.\n      tNode.flags |= TNodeFlags.isDetached;\n    }\n  } else if (tNode.type & TNodeType.Placeholder) {\n    tNode.type = type;\n    tNode.value = name;\n    tNode.attrs = attrs;\n    const parent = getCurrentParentTNode();\n    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;\n    ngDevMode && assertTNodeForTView(tNode, tView);\n    ngDevMode && assertEqual(index, tNode.index, 'Expecting same index');\n  }\n  setCurrentTNode(tNode, true);\n  return tNode as TElementNode & TContainerNode & TElementContainerNode & TProjectionNode &\n      TIcuContainerNode;\n}\n\nexport function createTNodeAtIndex(\n    tView: TView, index: number, type: TNodeType, name: string|null, attrs: TAttributes|null) {\n  const currentTNode = getCurrentTNodePlaceholderOk();\n  const isParent = isCurrentTNodeParent();\n  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;\n  // Parents cannot cross component boundaries because components will be used in multiple places.\n  const tNode = tView.data[index] =\n      createTNode(tView, parent as TElementNode | TContainerNode, type, index, name, attrs);\n  // Assign a pointer to the first child node of a given view. The first node is not always the one\n  // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has\n  // the index 1 or more, so we can't just check node index.\n  if (tView.firstChild === null) {\n    tView.firstChild = tNode;\n  }\n  if (currentTNode !== null) {\n    if (isParent) {\n      // FIXME(misko): This logic looks unnecessarily complicated. Could we simplify?\n      if (currentTNode.child == null && tNode.parent !== null) {\n        // We are in the same view, which means we are adding content node to the parent view.\n        currentTNode.child = tNode;\n      }\n    } else {\n      if (currentTNode.next === null) {\n        // In the case of i18n the `currentTNode` may already be linked, in which case we don't want\n        // to break the links which i18n created.\n        currentTNode.next = tNode;\n        tNode.prev = currentTNode;\n      }\n    }\n  }\n  return tNode;\n}\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply()), we need to adjust the blueprint for future\n * template passes.\n *\n * @param tView `TView` associated with `LView`\n * @param lView The `LView` containing the blueprint to adjust\n * @param numSlotsToAlloc The number of slots to alloc in the LView, should be >0\n * @param initialValue Initial value to store in blueprint\n */\nexport function allocExpando(\n    tView: TView, lView: LView, numSlotsToAlloc: number, initialValue: any): number {\n  if (numSlotsToAlloc === 0) return -1;\n  if (ngDevMode) {\n    assertFirstCreatePass(tView);\n    assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');\n    assertEqual(tView.data.length, lView.length, 'Expecting LView to be same size as TView');\n    assertEqual(\n        tView.data.length, tView.blueprint.length, 'Expecting Blueprint to be same size as TView');\n    assertFirstUpdatePass(tView);\n  }\n  const allocIdx = lView.length;\n  for (let i = 0; i < numSlotsToAlloc; i++) {\n    lView.push(initialValue);\n    tView.blueprint.push(initialValue);\n    tView.data.push(null);\n  }\n  return allocIdx;\n}\n\n\n//////////////////////////\n//// Render\n//////////////////////////\n\n/**\n * Processes a view in the creation mode. This includes a number of steps in a specific order:\n * - creating view query functions (if any);\n * - executing a template function in the creation mode;\n * - updating static queries (if any);\n * - creating child components defined in a given view.\n */\nexport function renderView<T>(tView: TView, lView: LView<T>, context: T): void {\n  ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');\n  enterView(lView);\n  try {\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn<T>(RenderFlags.Create, viewQuery, context);\n    }\n\n    // Execute a template associated with this view, if it exists. A template function might not be\n    // defined for the root component views.\n    const templateFn = tView.template;\n    if (templateFn !== null) {\n      executeTemplate<T>(tView, lView, templateFn, RenderFlags.Create, context);\n    }\n\n    // This needs to be set before children are processed to support recursive components.\n    // This must be set to false immediately after the first creation run because in an\n    // ngFor loop, all the views will be created together before update mode runs and turns\n    // off firstCreatePass. If we don't set it here, instances will perform directive\n    // matching, etc again and again.\n    if (tView.firstCreatePass) {\n      tView.firstCreatePass = false;\n    }\n\n    // We resolve content queries specifically marked as `static` in creation mode. Dynamic\n    // content queries are resolved during change detection (i.e. update mode), after embedded\n    // views are refreshed (see block above).\n    if (tView.staticContentQueries) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // We must materialize query results before child components are processed\n    // in case a child component has projected a container. The LContainer needs\n    // to exist so the embedded views are properly attached by the container.\n    if (tView.staticViewQueries) {\n      executeViewQueryFn<T>(RenderFlags.Update, tView.viewQuery!, context);\n    }\n\n    // Render child component views.\n    const components = tView.components;\n    if (components !== null) {\n      renderChildComponents(lView, components);\n    }\n\n  } catch (error) {\n    // If we didn't manage to get past the first template pass due to\n    // an error, mark the view as corrupted so we can try to recover.\n    if (tView.firstCreatePass) {\n      tView.incompleteFirstPass = true;\n      tView.firstCreatePass = false;\n    }\n\n    throw error;\n  } finally {\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n    leaveView();\n  }\n}\n\n/**\n * Processes a view in update mode. This includes a number of steps in a specific order:\n * - executing a template function in update mode;\n * - executing hooks;\n * - refreshing queries;\n * - setting host bindings;\n * - refreshing child (embedded and component) views.\n */\nexport function refreshView<T>(\n    tView: TView, lView: LView, templateFn: ComponentTemplate<{}>|null, context: T) {\n  ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');\n  const flags = lView[FLAGS];\n  if ((flags & LViewFlags.Destroyed) === LViewFlags.Destroyed) return;\n  enterView(lView);\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to execute lifecycle hooks in that mode.\n  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();\n  try {\n    resetPreOrderHookFlags(lView);\n\n    setBindingIndex(tView.bindingStartIndex);\n    if (templateFn !== null) {\n      executeTemplate(tView, lView, templateFn, RenderFlags.Update, context);\n    }\n\n    const hooksInitPhaseCompleted =\n        (flags & LViewFlags.InitPhaseStateMask) === InitPhaseState.InitPhaseCompleted;\n\n    // execute pre-order hooks (OnInit, OnChanges, DoCheck)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const preOrderCheckHooks = tView.preOrderCheckHooks;\n        if (preOrderCheckHooks !== null) {\n          executeCheckHooks(lView, preOrderCheckHooks, null);\n        }\n      } else {\n        const preOrderHooks = tView.preOrderHooks;\n        if (preOrderHooks !== null) {\n          executeInitAndCheckHooks(lView, preOrderHooks, InitPhaseState.OnInitHooksToBeRun, null);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.OnInitHooksToBeRun);\n      }\n    }\n\n    // First mark transplanted views that are declared in this lView as needing a refresh at their\n    // insertion points. This is needed to avoid the situation where the template is defined in this\n    // `LView` but its declaration appears after the insertion component.\n    markTransplantedViewsForRefresh(lView);\n    refreshEmbeddedViews(lView);\n\n    // Content query results must be refreshed before content hooks are called.\n    if (tView.contentQueries !== null) {\n      refreshContentQueries(tView, lView);\n    }\n\n    // execute content hooks (AfterContentInit, AfterContentChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const contentCheckHooks = tView.contentCheckHooks;\n        if (contentCheckHooks !== null) {\n          executeCheckHooks(lView, contentCheckHooks);\n        }\n      } else {\n        const contentHooks = tView.contentHooks;\n        if (contentHooks !== null) {\n          executeInitAndCheckHooks(\n              lView, contentHooks, InitPhaseState.AfterContentInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterContentInitHooksToBeRun);\n      }\n    }\n\n    processHostBindingOpCodes(tView, lView);\n\n    // Refresh child component views.\n    const components = tView.components;\n    if (components !== null) {\n      refreshChildComponents(lView, components);\n    }\n\n    // View queries must execute after refreshing child components because a template in this view\n    // could be inserted in a child component. If the view query executes before child component\n    // refresh, the template might not yet be inserted.\n    const viewQuery = tView.viewQuery;\n    if (viewQuery !== null) {\n      executeViewQueryFn<T>(RenderFlags.Update, viewQuery, context);\n    }\n\n    // execute view hooks (AfterViewInit, AfterViewChecked)\n    // PERF WARNING: do NOT extract this to a separate function without running benchmarks\n    if (!isInCheckNoChangesPass) {\n      if (hooksInitPhaseCompleted) {\n        const viewCheckHooks = tView.viewCheckHooks;\n        if (viewCheckHooks !== null) {\n          executeCheckHooks(lView, viewCheckHooks);\n        }\n      } else {\n        const viewHooks = tView.viewHooks;\n        if (viewHooks !== null) {\n          executeInitAndCheckHooks(lView, viewHooks, InitPhaseState.AfterViewInitHooksToBeRun);\n        }\n        incrementInitPhaseFlags(lView, InitPhaseState.AfterViewInitHooksToBeRun);\n      }\n    }\n    if (tView.firstUpdatePass === true) {\n      // We need to make sure that we only flip the flag on successful `refreshView` only\n      // Don't do this in `finally` block.\n      // If we did this in `finally` block then an exception could block the execution of styling\n      // instructions which in turn would be unable to insert themselves into the styling linked\n      // list. The result of this would be that if the exception would not be throw on subsequent CD\n      // the styling would be unable to process it data and reflect to the DOM.\n      tView.firstUpdatePass = false;\n    }\n\n    // Do not reset the dirty state when running in check no changes mode. We don't want components\n    // to behave differently depending on whether check no changes is enabled or not. For example:\n    // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to\n    // refresh a `NgClass` binding should work. If we would reset the dirty state in the check\n    // no changes cycle, the component would be not be dirty for the next update pass. This would\n    // be different in production mode where the component dirty state is not reset.\n    if (!isInCheckNoChangesPass) {\n      lView[FLAGS] &= ~(LViewFlags.Dirty | LViewFlags.FirstLViewPass);\n    }\n    if (lView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n      lView[FLAGS] &= ~LViewFlags.RefreshTransplantedView;\n      updateTransplantedViewCount(lView[PARENT] as LContainer, -1);\n    }\n  } finally {\n    leaveView();\n  }\n}\n\nfunction executeTemplate<T>(\n    tView: TView, lView: LView<T>, templateFn: ComponentTemplate<T>, rf: RenderFlags, context: T) {\n  const prevSelectedIndex = getSelectedIndex();\n  const isUpdatePhase = rf & RenderFlags.Update;\n  try {\n    setSelectedIndex(-1);\n    if (isUpdatePhase && lView.length > HEADER_OFFSET) {\n      // When we're updating, inherently select 0 so we don't\n      // have to generate that instruction for most update blocks.\n      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());\n    }\n\n    const preHookType =\n        isUpdatePhase ? ProfilerEvent.TemplateUpdateStart : ProfilerEvent.TemplateCreateStart;\n    profiler(preHookType, context as unknown as {});\n    templateFn(rf, context);\n  } finally {\n    setSelectedIndex(prevSelectedIndex);\n\n    const postHookType =\n        isUpdatePhase ? ProfilerEvent.TemplateUpdateEnd : ProfilerEvent.TemplateCreateEnd;\n    profiler(postHookType, context as unknown as {});\n  }\n}\n\n//////////////////////////\n//// Element\n//////////////////////////\n\nexport function executeContentQueries(tView: TView, tNode: TNode, lView: LView) {\n  if (isContentQueryHost(tNode)) {\n    const start = tNode.directiveStart;\n    const end = tNode.directiveEnd;\n    for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n      const def = tView.data[directiveIndex] as DirectiveDef<any>;\n      if (def.contentQueries) {\n        def.contentQueries(RenderFlags.Create, lView[directiveIndex], directiveIndex);\n      }\n    }\n  }\n}\n\n\n/**\n * Creates directive instances.\n */\nexport function createDirectivesInstances(tView: TView, lView: LView, tNode: TDirectiveHostNode) {\n  if (!getBindingsEnabled()) return;\n  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));\n  if ((tNode.flags & TNodeFlags.hasHostBindings) === TNodeFlags.hasHostBindings) {\n    invokeDirectivesHostBindings(tView, lView, tNode);\n  }\n}\n\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nexport function saveResolvedLocalsInData(\n    viewData: LView, tNode: TDirectiveHostNode,\n    localRefExtractor: LocalRefExtractor = getNativeByTNode): void {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1] as number;\n      const value = index === -1 ?\n          localRefExtractor(\n              tNode as TElementNode | TContainerNode | TElementContainerNode, viewData) :\n          viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param def ComponentDef\n * @returns TView\n */\nexport function getOrCreateComponentTView(def: ComponentDef<any>): TView {\n  const tView = def.tView;\n\n  // Create a TView if there isn't one, or recreate it if the first create pass didn't\n  // complete successfully since we can't know for sure whether it's in a usable shape.\n  if (tView === null || tView.incompleteFirstPass) {\n    // Declaration node here is null since this function is called when we dynamically create a\n    // component and hence there is no declaration.\n    const declTNode = null;\n    return def.tView = createTView(\n               TViewType.Component, declTNode, def.template, def.decls, def.vars, def.directiveDefs,\n               def.pipeDefs, def.viewQuery, def.schemas, def.consts);\n  }\n\n  return tView;\n}\n\n\n/**\n * Creates a TView instance\n *\n * @param type Type of `TView`.\n * @param declTNode Declaration location of this `TView`.\n * @param templateFn Template function\n * @param decls The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n * @param viewQuery View queries for this view\n * @param schemas Schemas for this view\n * @param consts Constants for this view\n */\nexport function createTView(\n    type: TViewType, declTNode: TNode|null, templateFn: ComponentTemplate<any>|null, decls: number,\n    vars: number, directives: DirectiveDefListOrFactory|null, pipes: PipeDefListOrFactory|null,\n    viewQuery: ViewQueriesFunction<any>|null, schemas: SchemaMetadata[]|null,\n    constsOrFactory: TConstantsOrFactory|null): TView {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + decls;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  const consts = typeof constsOrFactory === 'function' ? constsOrFactory() : constsOrFactory;\n  const tView = blueprint[TVIEW as any] = {\n    type: type,\n    blueprint: blueprint,\n    template: templateFn,\n    queries: null,\n    viewQuery: viewQuery,\n    declTNode: declTNode,\n    data: blueprint.slice().fill(null, bindingStartIndex),\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    hostBindingOpCodes: null,\n    firstCreatePass: true,\n    firstUpdatePass: true,\n    staticViewQueries: false,\n    staticContentQueries: false,\n    preOrderHooks: null,\n    preOrderCheckHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n    schemas: schemas,\n    consts: consts,\n    incompleteFirstPass: false\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tView retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tView);\n  }\n  return tView;\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = [];\n\n  for (let i = 0; i < initialViewLength; i++) {\n    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);\n  }\n\n  return blueprint as LView;\n}\n\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param rendererFactory Factory function to create renderer instance.\n * @param elementOrSelector Render element or CSS selector to locate the element.\n * @param encapsulation View Encapsulation defined for component that requests host element.\n */\nexport function locateHostElement(\n    renderer: Renderer, elementOrSelector: RElement|string,\n    encapsulation: ViewEncapsulation): RElement {\n  // When using native Shadow DOM, do not clear host element to allow native slot projection\n  const preserveContent = encapsulation === ViewEncapsulation.ShadowDom;\n  return renderer.selectRootElement(elementOrSelector, preserveContent);\n}\n\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n *\n * This function can also be used to store instance specific cleanup fns. In that case the `context`\n * is `null` and the function is store in `LView` (rather than it `TView`).\n */\nexport function storeCleanupWithContext(\n    tView: TView, lView: LView, context: any, cleanupFn: Function): void {\n  const lCleanup = getOrCreateLViewCleanup(lView);\n  if (context === null) {\n    // If context is null that this is instance specific callback. These callbacks can only be\n    // inserted after template shared instances. For this reason in ngDevMode we freeze the TView.\n    if (ngDevMode) {\n      Object.freeze(getOrCreateTViewCleanup(tView));\n    }\n    lCleanup.push(cleanupFn);\n  } else {\n    lCleanup.push(context);\n\n    if (tView.firstCreatePass) {\n      getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param tView `TView` to which this `TNode` belongs\n * @param tParent Parent `TNode`\n * @param type The type of the node\n * @param index The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @returns the TNode object\n */\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Container,\n    index: number, tagName: string|null, attrs: TAttributes|null): TContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Element|TNodeType.Text,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.ElementContainer,\n    index: number, tagName: string|null, attrs: TAttributes|null): TElementContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Icu, index: number,\n    tagName: string|null, attrs: TAttributes|null): TIcuContainerNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType.Projection,\n    index: number, tagName: string|null, attrs: TAttributes|null): TProjectionNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    tagName: string|null, attrs: TAttributes|null): TNode;\nexport function createTNode(\n    tView: TView, tParent: TElementNode|TContainerNode|null, type: TNodeType, index: number,\n    value: string|null, attrs: TAttributes|null): TNode {\n  ngDevMode && index !== 0 &&  // 0 are bogus nodes and they are OK. See `createContainerRef` in\n                               // `view_engine_compatibility` for additional context.\n      assertGreaterThanOrEqual(index, HEADER_OFFSET, 'TNodes can\\'t be in the LView header.');\n  ngDevMode && assertNotSame(attrs, undefined, '\\'undefined\\' is not valid value for \\'attrs\\'');\n  ngDevMode && ngDevMode.tNode++;\n  ngDevMode && tParent && assertTNodeForTView(tParent, tView);\n  let injectorIndex = tParent ? tParent.injectorIndex : -1;\n  const tNode = {\n    type,\n    index,\n    insertBeforeIndex: null,\n    injectorIndex,\n    directiveStart: -1,\n    directiveEnd: -1,\n    directiveStylingLast: -1,\n    componentOffset: -1,\n    propertyBindings: null,\n    flags: 0,\n    providerIndexes: 0,\n    value: value,\n    attrs: attrs,\n    mergedAttrs: null,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: null,\n    outputs: null,\n    tView: null,\n    next: null,\n    prev: null,\n    projectionNext: null,\n    child: null,\n    parent: tParent,\n    projection: null,\n    styles: null,\n    stylesWithoutHost: null,\n    residualStyles: undefined,\n    classes: null,\n    classesWithoutHost: null,\n    residualClasses: undefined,\n    classBindings: 0 as any,\n    styleBindings: 0 as any,\n  };\n  if (ngDevMode) {\n    // For performance reasons it is important that the tNode retains the same shape during runtime.\n    // (To make sure that all of the code is monomorphic.) For this reason we seal the object to\n    // prevent class transitions.\n    Object.seal(tNode);\n  }\n  return tNode;\n}\n\n/**\n * Generates the `PropertyAliases` data structure from the provided input/output mapping.\n * @param aliasMap Input/output mapping from the directive definition.\n * @param directiveIndex Index of the directive.\n * @param propertyAliases Object in which to store the results.\n * @param hostDirectiveAliasMap Object used to alias or filter out properties for host directives.\n * If the mapping is provided, it'll act as an allowlist, as well as a mapping of what public\n * name inputs/outputs should be exposed under.\n */\nfunction generatePropertyAliases(\n    aliasMap: {[publicName: string]: string}, directiveIndex: number,\n    propertyAliases: PropertyAliases|null,\n    hostDirectiveAliasMap: HostDirectiveBindingMap|null): PropertyAliases|null {\n  for (let publicName in aliasMap) {\n    if (aliasMap.hasOwnProperty(publicName)) {\n      propertyAliases = propertyAliases === null ? {} : propertyAliases;\n      const internalName = aliasMap[publicName];\n\n      // If there are no host directive mappings, we want to remap using the alias map from the\n      // definition itself. If there is an alias map, it has two functions:\n      // 1. It serves as an allowlist of bindings that are exposed by the host directives. Only the\n      // ones inside the host directive map will be exposed on the host.\n      // 2. The public name of the property is aliased using the host directive alias map, rather\n      // than the alias map from the definition.\n      if (hostDirectiveAliasMap === null) {\n        addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);\n      } else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {\n        addPropertyAlias(\n            propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);\n      }\n    }\n  }\n  return propertyAliases;\n}\n\nfunction addPropertyAlias(\n    propertyAliases: PropertyAliases, directiveIndex: number, publicName: string,\n    internalName: string) {\n  if (propertyAliases.hasOwnProperty(publicName)) {\n    propertyAliases[publicName].push(directiveIndex, internalName);\n  } else {\n    propertyAliases[publicName] = [directiveIndex, internalName];\n  }\n}\n\n/**\n * Initializes data structures required to work with directive inputs and outputs.\n * Initialization is done for all directives matched on a given TNode.\n */\nfunction initializeInputAndOutputAliases(\n    tView: TView, tNode: TNode, hostDirectiveDefinitionMap: HostDirectiveDefs|null): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const tViewData = tView.data;\n\n  const tNodeAttrs = tNode.attrs;\n  const inputsFromAttrs: InitialInputData = [];\n  let inputsStore: PropertyAliases|null = null;\n  let outputsStore: PropertyAliases|null = null;\n\n  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {\n    const directiveDef = tViewData[directiveIndex] as DirectiveDef<any>;\n    const aliasData =\n        hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;\n    const aliasedInputs = aliasData ? aliasData.inputs : null;\n    const aliasedOutputs = aliasData ? aliasData.outputs : null;\n\n    inputsStore =\n        generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);\n    outputsStore =\n        generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);\n    // Do not use unbound attributes as inputs to structural directives, since structural\n    // directive inputs can only be set using microsyntax (e.g. `<div *dir=\"exp\">`).\n    // TODO(FW-1930): microsyntax expressions may also contain unbound/static attributes, which\n    // should be set for inline templates.\n    const initialInputs =\n        (inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode)) ?\n        generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) :\n        null;\n    inputsFromAttrs.push(initialInputs);\n  }\n\n  if (inputsStore !== null) {\n    if (inputsStore.hasOwnProperty('class')) {\n      tNode.flags |= TNodeFlags.hasClassInput;\n    }\n    if (inputsStore.hasOwnProperty('style')) {\n      tNode.flags |= TNodeFlags.hasStyleInput;\n    }\n  }\n\n  tNode.initialInputs = inputsFromAttrs;\n  tNode.inputs = inputsStore;\n  tNode.outputs = outputsStore;\n}\n\n/**\n * Mapping between attributes names that don't correspond to their element property names.\n *\n * Performance note: this function is written as a series of if checks (instead of, say, a property\n * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of\n * mapping property names. Do NOT change without benchmarking.\n *\n * Note: this mapping has to be kept in sync with the equally named mapping in the template\n * type-checking machinery of ngtsc.\n */\nfunction mapPropName(name: string): string {\n  if (name === 'class') return 'className';\n  if (name === 'for') return 'htmlFor';\n  if (name === 'formaction') return 'formAction';\n  if (name === 'innerHtml') return 'innerHTML';\n  if (name === 'readonly') return 'readOnly';\n  if (name === 'tabindex') return 'tabIndex';\n  return name;\n}\n\nexport function elementPropertyInternal<T>(\n    tView: TView, tNode: TNode, lView: LView, propName: string, value: T, renderer: Renderer,\n    sanitizer: SanitizerFn|null|undefined, nativeOnly: boolean): void {\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n  const element = getNativeByTNode(tNode, lView) as RElement | RComment;\n  let inputData = tNode.inputs;\n  let dataValue: PropertyAliasValue|undefined;\n  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {\n    setInputsForProperty(tView, lView, dataValue, propName, value);\n    if (isComponentHost(tNode)) markDirtyIfOnPush(lView, tNode.index);\n    if (ngDevMode) {\n      setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n    }\n  } else if (tNode.type & TNodeType.AnyRNode) {\n    propName = mapPropName(propName);\n\n    if (ngDevMode) {\n      validateAgainstEventProperties(propName);\n      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {\n        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n      }\n      ngDevMode.rendererSetProperty++;\n    }\n\n    // It is assumed that the sanitizer is only added when the compiler determines that the\n    // property is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? (sanitizer(value, tNode.value || '', propName) as any) : value;\n    renderer.setProperty(element as RElement, propName, value);\n  } else if (tNode.type & TNodeType.AnyContainer) {\n    // If the node is a container and the property didn't\n    // match any of the inputs or schemas we should throw.\n    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {\n      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);\n    }\n  }\n}\n\n/** If node is an OnPush component, marks its LView dirty. */\nexport function markDirtyIfOnPush(lView: LView, viewIndex: number): void {\n  ngDevMode && assertLView(lView);\n  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & LViewFlags.CheckAlways)) {\n    childComponentLView[FLAGS] |= LViewFlags.Dirty;\n  }\n}\n\nfunction setNgReflectProperty(\n    lView: LView, element: RElement|RComment, type: TNodeType, attrName: string, value: any) {\n  const renderer = lView[RENDERER];\n  attrName = normalizeDebugBindingName(attrName);\n  const debugValue = normalizeDebugBindingValue(value);\n  if (type & TNodeType.AnyRNode) {\n    if (value == null) {\n      renderer.removeAttribute((element as RElement), attrName);\n    } else {\n      renderer.setAttribute((element as RElement), attrName, debugValue);\n    }\n  } else {\n    const textContent =\n        escapeCommentText(`bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`);\n    renderer.setValue((element as RComment), textContent);\n  }\n}\n\nexport function setNgReflectProperties(\n    lView: LView, element: RElement|RComment, type: TNodeType, dataValue: PropertyAliasValue,\n    value: any) {\n  if (type & (TNodeType.AnyRNode | TNodeType.Container)) {\n    /**\n     * dataValue is an array containing runtime input or output names for the directives:\n     * i+0: directive instance index\n     * i+1: privateName\n     *\n     * e.g. [0, 'change', 'change-minified']\n     * we want to set the reflected property with the privateName: dataValue[i+1]\n     */\n    for (let i = 0; i < dataValue.length; i += 2) {\n      setNgReflectProperty(lView, element, type, dataValue[i + 1] as string, value);\n    }\n  }\n}\n\n/**\n * Resolve the matched directives on a node.\n */\nexport function resolveDirectives(\n    tView: TView, lView: LView, tNode: TElementNode|TContainerNode|TElementContainerNode,\n    localRefs: string[]|null): void {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in\n  // tsickle.\n  ngDevMode && assertFirstCreatePass(tView);\n\n  if (getBindingsEnabled()) {\n    const exportsMap: ({[key: string]: number}|null) = localRefs === null ? null : {'': -1};\n    const matchResult = findDirectiveDefMatches(tView, tNode);\n    let directiveDefs: DirectiveDef<unknown>[]|null;\n    let hostDirectiveDefs: HostDirectiveDefs|null;\n\n    if (matchResult === null) {\n      directiveDefs = hostDirectiveDefs = null;\n    } else {\n      [directiveDefs, hostDirectiveDefs] = matchResult;\n    }\n\n    if (directiveDefs !== null) {\n      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);\n    }\n    if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n  }\n  // Merge the template attrs last so that they have the highest priority.\n  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);\n}\n\n/** Initializes the data structures necessary for a list of directives to be instantiated. */\nexport function initializeDirectives(\n    tView: TView, lView: LView<unknown>, tNode: TElementNode|TContainerNode|TElementContainerNode,\n    directives: DirectiveDef<unknown>[], exportsMap: {[key: string]: number;}|null,\n    hostDirectiveDefs: HostDirectiveDefs|null) {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  // Publishes the directive types to DI so they can be injected. Needs to\n  // happen in a separate pass before the TNode flags have been initialized.\n  for (let i = 0; i < directives.length; i++) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);\n  }\n\n  initTNodeFlags(tNode, tView.data.length, directives.length);\n\n  // When the same token is provided by several directives on the same node, some rules apply in\n  // the viewEngine:\n  // - viewProviders have priority over providers\n  // - the last directive in NgModule.declarations has priority over the previous one\n  // So to match these rules, the order in which providers are added in the arrays is very\n  // important.\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    if (def.providersResolver) def.providersResolver(def);\n  }\n  let preOrderHooksFound = false;\n  let preOrderCheckHooksFound = false;\n  let directiveIdx = allocExpando(tView, lView, directives.length, null);\n  ngDevMode &&\n      assertSame(\n          directiveIdx, tNode.directiveStart,\n          'TNode.directiveStart should point to just allocated space');\n\n  for (let i = 0; i < directives.length; i++) {\n    const def = directives[i];\n    // Merge the attrs in the order of matches. This assumes that the first directive is the\n    // component itself, so that the component has the least priority.\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n\n    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);\n    saveNameToExportMap(directiveIdx, def, exportsMap);\n\n    if (def.contentQueries !== null) tNode.flags |= TNodeFlags.hasContentQuery;\n    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)\n      tNode.flags |= TNodeFlags.hasHostBindings;\n\n    const lifeCycleHooks: OnChanges&OnInit&DoCheck = def.type.prototype;\n    // Only push a node index into the preOrderHooks array if this is the first\n    // pre-order hook found on this node.\n    if (!preOrderHooksFound &&\n        (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {\n      // We will push the actual hook function into this array later during dir instantiation.\n      // We cannot do it now because we must ensure hooks are registered in the same\n      // order that directives are created (i.e. injection order).\n      (tView.preOrderHooks ??= []).push(tNode.index);\n      preOrderHooksFound = true;\n    }\n\n    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {\n      (tView.preOrderCheckHooks ??= []).push(tNode.index);\n      preOrderCheckHooksFound = true;\n    }\n\n    directiveIdx++;\n  }\n\n  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);\n}\n\n/**\n * Add `hostBindings` to the `TView.hostBindingOpCodes`.\n *\n * @param tView `TView` to which the `hostBindings` should be added.\n * @param tNode `TNode` the element which contains the directive\n * @param directiveIdx Directive index in view.\n * @param directiveVarsIdx Where will the directive's vars be stored\n * @param def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.\n */\nexport function registerHostBindingOpCodes(\n    tView: TView, tNode: TNode, directiveIdx: number, directiveVarsIdx: number,\n    def: ComponentDef<any>|DirectiveDef<any>): void {\n  ngDevMode && assertFirstCreatePass(tView);\n\n  const hostBindings = def.hostBindings;\n  if (hostBindings) {\n    let hostBindingOpCodes = tView.hostBindingOpCodes;\n    if (hostBindingOpCodes === null) {\n      hostBindingOpCodes = tView.hostBindingOpCodes = [] as any as HostBindingOpCodes;\n    }\n    const elementIndx = ~tNode.index;\n    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {\n      // Conditionally add select element so that we are more efficient in execution.\n      // NOTE: this is strictly not necessary and it trades code size for runtime perf.\n      // (We could just always add it.)\n      hostBindingOpCodes.push(elementIndx);\n    }\n    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);\n  }\n}\n\n/**\n * Returns the last selected element index in the `HostBindingOpCodes`\n *\n * For perf reasons we don't need to update the selected element index in `HostBindingOpCodes` only\n * if it changes. This method returns the last index (or '0' if not found.)\n *\n * Selected element index are only the ones which are negative.\n */\nfunction lastSelectedElementIdx(hostBindingOpCodes: HostBindingOpCodes): number {\n  let i = hostBindingOpCodes.length;\n  while (i > 0) {\n    const value = hostBindingOpCodes[--i];\n    if (typeof value === 'number' && value < 0) {\n      return value;\n    }\n  }\n  return 0;\n}\n\n\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(\n    tView: TView, lView: LView, tNode: TDirectiveHostNode, native: RNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n\n  // The component view needs to be created before creating the node injector\n  // since it is used to inject some special symbols like `ChangeDetectorRef`.\n  if (isComponentHost(tNode)) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n    addComponentLogic(\n        lView, tNode as TElementNode,\n        tView.data[start + tNode.componentOffset] as ComponentDef<unknown>);\n  }\n\n  if (!tView.firstCreatePass) {\n    getOrCreateNodeInjectorForNode(tNode, lView);\n  }\n\n  attachPatchData(native, lView);\n\n  const initialInputs = tNode.initialInputs;\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    const directive = getNodeInjectable(lView, tView, i, tNode);\n    attachPatchData(directive, lView);\n\n    if (initialInputs !== null) {\n      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs!);\n    }\n\n    if (isComponentDef(def)) {\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);\n    }\n  }\n}\n\nexport function invokeDirectivesHostBindings(tView: TView, lView: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const elementIndex = tNode.index;\n  const currentDirectiveIndex = getCurrentDirectiveIndex();\n  try {\n    setSelectedIndex(elementIndex);\n    for (let dirIndex = start; dirIndex < end; dirIndex++) {\n      const def = tView.data[dirIndex] as DirectiveDef<unknown>;\n      const directive = lView[dirIndex];\n      setCurrentDirectiveIndex(dirIndex);\n      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {\n        invokeHostBindingsInCreationMode(def, directive);\n      }\n    }\n  } finally {\n    setSelectedIndex(-1);\n    setCurrentDirectiveIndex(currentDirectiveIndex);\n  }\n}\n\n/**\n * Invoke the host bindings in creation mode.\n *\n * @param def `DirectiveDef` which may contain the `hostBindings` function.\n * @param directive Instance of directive.\n */\nexport function invokeHostBindingsInCreationMode(def: DirectiveDef<any>, directive: any) {\n  if (def.hostBindings !== null) {\n    def.hostBindings!(RenderFlags.Create, directive);\n  }\n}\n\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n */\nfunction findDirectiveDefMatches(\n    tView: TView, tNode: TElementNode|TContainerNode|TElementContainerNode):\n    [matches: DirectiveDef<unknown>[], hostDirectiveDefs: HostDirectiveDefs|null]|null {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  const registry = tView.directiveRegistry;\n  let matches: DirectiveDef<unknown>[]|null = null;\n  let hostDirectiveDefs: HostDirectiveDefs|null = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i] as ComponentDef<any>| DirectiveDef<any>;\n      if (isNodeMatchingSelectorList(tNode, def.selectors!, /* isProjectionMode */ false)) {\n        matches || (matches = []);\n\n        if (isComponentDef(def)) {\n          if (ngDevMode) {\n            assertTNodeType(\n                tNode, TNodeType.Element,\n                `\"${tNode.value}\" tags cannot be used as component hosts. ` +\n                    `Please use a different tag to activate the ${stringify(def.type)} component.`);\n\n            if (isComponentHost(tNode)) {\n              throwMultipleComponentError(tNode, matches.find(isComponentDef)!.type, def.type);\n            }\n          }\n\n          // Components are inserted at the front of the matches array so that their lifecycle\n          // hooks run before any directive lifecycle hooks. This appears to be for ViewEngine\n          // compatibility. This logic doesn't make sense with host directives, because it\n          // would allow the host directives to undo any overrides the host may have made.\n          // To handle this case, the host directives of components are inserted at the beginning\n          // of the array, followed by the component. As such, the insertion order is as follows:\n          // 1. Host directives belonging to the selector-matched component.\n          // 2. Selector-matched component.\n          // 3. Host directives belonging to selector-matched directives.\n          // 4. Selector-matched directives.\n          if (def.findHostDirectiveDefs !== null) {\n            const hostDirectiveMatches: DirectiveDef<unknown>[] = [];\n            hostDirectiveDefs = hostDirectiveDefs || new Map();\n            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);\n            // Add all host directives declared on this component, followed by the component itself.\n            // Host directives should execute first so the host has a chance to override changes\n            // to the DOM made by them.\n            matches.unshift(...hostDirectiveMatches, def);\n            // Component is offset starting from the beginning of the host directives array.\n            const componentOffset = hostDirectiveMatches.length;\n            markAsComponentHost(tView, tNode, componentOffset);\n          } else {\n            // No host directives on this component, just add the\n            // component def to the beginning of the matches.\n            matches.unshift(def);\n            markAsComponentHost(tView, tNode, 0);\n          }\n        } else {\n          // Append any host directives to the matches first.\n          hostDirectiveDefs = hostDirectiveDefs || new Map();\n          def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches === null ? null : [matches, hostDirectiveDefs];\n}\n\n/**\n * Marks a given TNode as a component's host. This consists of:\n * - setting the component offset on the TNode.\n * - storing index of component's host element so it will be queued for view refresh during CD.\n */\nexport function markAsComponentHost(tView: TView, hostTNode: TNode, componentOffset: number): void {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && assertGreaterThan(componentOffset, -1, 'componentOffset must be great than -1');\n  hostTNode.componentOffset = componentOffset;\n  (tView.components ??= []).push(hostTNode.index);\n}\n\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(\n    tNode: TNode, localRefs: string[]|null, exportsMap: {[key: string]: number}): void {\n  if (localRefs) {\n    const localNames: (string|number)[] = tNode.localNames = [];\n\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null)\n        throw new RuntimeError(\n            RuntimeErrorCode.EXPORT_NOT_FOUND,\n            ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n */\nfunction saveNameToExportMap(\n    directiveIdx: number, def: DirectiveDef<any>|ComponentDef<any>,\n    exportsMap: {[key: string]: number}|null) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = directiveIdx;\n      }\n    }\n    if (isComponentDef(def)) exportsMap[''] = directiveIdx;\n  }\n}\n\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport function initTNodeFlags(tNode: TNode, index: number, numberOfDirectives: number) {\n  ngDevMode &&\n      assertNotEqual(\n          numberOfDirectives, tNode.directiveEnd - tNode.directiveStart,\n          'Reached the max number of directives');\n  tNode.flags |= TNodeFlags.isDirectiveHost;\n  // When the first directive is created on a node, save the index\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n\n/**\n * Setup directive for instantiation.\n *\n * We need to create a `NodeInjectorFactory` which is then inserted in both the `Blueprint` as well\n * as `LView`. `TView` gets the `DirectiveDef`.\n *\n * @param tView `TView`\n * @param tNode `TNode`\n * @param lView `LView`\n * @param directiveIndex Index where the directive will be stored in the Expando.\n * @param def `DirectiveDef`\n */\nexport function configureViewWithDirective<T>(\n    tView: TView, tNode: TNode, lView: LView, directiveIndex: number, def: DirectiveDef<T>): void {\n  ngDevMode &&\n      assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, 'Must be in Expando section');\n  tView.data[directiveIndex] = def;\n  const directiveFactory =\n      def.factory || ((def as {factory: Function}).factory = getFactoryDef(def.type, true));\n  // Even though `directiveFactory` will already be using `ɵɵdirectiveInject` in its generated code,\n  // we also want to support `inject()` directly from the directive constructor context so we set\n  // `ɵɵdirectiveInject` as the inject implementation here too.\n  const nodeInjectorFactory =\n      new NodeInjectorFactory(directiveFactory, isComponentDef(def), ɵɵdirectiveInject);\n  tView.blueprint[directiveIndex] = nodeInjectorFactory;\n  lView[directiveIndex] = nodeInjectorFactory;\n\n  registerHostBindingOpCodes(\n      tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);\n}\n\nfunction addComponentLogic<T>(lView: LView, hostTNode: TElementNode, def: ComponentDef<T>): void {\n  const native = getNativeByTNode(hostTNode, lView) as RElement;\n  const tView = getOrCreateComponentTView(def);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(\n      lView,\n      createLView(\n          lView, tView, null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, native,\n          hostTNode as TElementNode, rendererFactory, rendererFactory.createRenderer(native, def),\n          null, null, null));\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  lView[hostTNode.index] = componentView;\n}\n\nexport function elementAttributeInternal(\n    tNode: TNode, lView: LView, name: string, value: any, sanitizer: SanitizerFn|null|undefined,\n    namespace: string|null|undefined) {\n  if (ngDevMode) {\n    assertNotSame(value, NO_CHANGE as any, 'Incoming value should never be NO_CHANGE.');\n    validateAgainstEventAttributes(name);\n    assertTNodeType(\n        tNode, TNodeType.Element,\n        `Attempted to set attribute \\`${name}\\` on a container node. ` +\n            `Host bindings are not valid on ng-container or ng-template.`);\n  }\n  const element = getNativeByTNode(tNode, lView) as RElement;\n  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);\n}\n\nexport function setElementAttribute(\n    renderer: Renderer, element: RElement, namespace: string|null|undefined, tagName: string|null,\n    name: string, value: any, sanitizer: SanitizerFn|null|undefined) {\n  if (value == null) {\n    ngDevMode && ngDevMode.rendererRemoveAttribute++;\n    renderer.removeAttribute(element, name, namespace);\n  } else {\n    ngDevMode && ngDevMode.rendererSetAttribute++;\n    const strValue =\n        sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || '', name);\n\n\n    renderer.setAttribute(element, name, strValue as string, namespace);\n  }\n}\n\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param lView Current LView that is being processed.\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param def The directive def that contains the list of inputs\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs<T>(\n    lView: LView, directiveIndex: number, instance: T, def: DirectiveDef<T>, tNode: TNode,\n    initialInputData: InitialInputData): void {\n  const initialInputs: InitialInputs|null = initialInputData![directiveIndex];\n  if (initialInputs !== null) {\n    const setInput = def.setInput;\n    for (let i = 0; i < initialInputs.length;) {\n      const publicName = initialInputs[i++];\n      const privateName = initialInputs[i++];\n      const value = initialInputs[i++];\n      if (setInput !== null) {\n        def.setInput!(instance, value, publicName, privateName);\n      } else {\n        (instance as any)[privateName] = value;\n      }\n      if (ngDevMode) {\n        const nativeElement = getNativeByTNode(tNode, lView) as RElement;\n        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);\n      }\n    }\n  }\n}\n\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param inputs Input alias map that was generated from the directive def inputs.\n * @param directiveIndex Index of the directive that is currently being processed.\n * @param attrs Static attrs on this node.\n */\nfunction generateInitialInputs(\n    inputs: PropertyAliases, directiveIndex: number, attrs: TAttributes): InitialInputs|null {\n  let inputsToStore: InitialInputs|null = null;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    if (attrName === AttributeMarker.NamespaceURI) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    } else if (attrName === AttributeMarker.ProjectAs) {\n      // Skip over the `ngProjectAs` value.\n      i += 2;\n      continue;\n    }\n\n    // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.\n    if (typeof attrName === 'number') break;\n\n    if (inputs.hasOwnProperty(attrName as string)) {\n      if (inputsToStore === null) inputsToStore = [];\n\n      // Find the input's public name from the input store. Note that we can be found easier\n      // through the directive def, but we want to do it using the inputs store so that it can\n      // account for host directive aliases.\n      const inputConfig = inputs[attrName as string];\n      for (let j = 0; j < inputConfig.length; j += 2) {\n        if (inputConfig[j] === directiveIndex) {\n          inputsToStore.push(\n              attrName as string, inputConfig[j + 1] as string, attrs[i + 1] as string);\n          // A directive can't have multiple inputs with the same name so we can break here.\n          break;\n        }\n      }\n    }\n\n    i += 2;\n  }\n  return inputsToStore;\n}\n\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n    hostNative: RElement|RComment|LView, currentView: LView, native: RComment,\n    tNode: TNode): LContainer {\n  ngDevMode && assertLView(currentView);\n  const lContainer: LContainer = [\n    hostNative,   // host native\n    true,         // Boolean `true` in this position signifies that this is an `LContainer`\n    false,        // has transplanted views\n    currentView,  // parent\n    null,         // next\n    0,            // transplanted views to refresh count\n    tNode,        // t_host\n    native,       // native,\n    null,         // view refs\n    null,         // moved views\n  ];\n  ngDevMode &&\n      assertEqual(\n          lContainer.length, CONTAINER_HEADER_OFFSET,\n          'Should allocate correct number of slots for LContainer header.');\n  return lContainer;\n}\n\n/**\n * Goes over embedded views (ones created through ViewContainerRef APIs) and refreshes\n * them by executing an associated template function.\n */\nfunction refreshEmbeddedViews(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      const embeddedTView = embeddedLView[TVIEW];\n      ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        refreshView(embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n      }\n    }\n  }\n}\n\n/**\n * Mark transplanted views as needing to be refreshed at their insertion points.\n *\n * @param lView The `LView` that may have transplanted views.\n */\nfunction markTransplantedViewsForRefresh(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    if (!lContainer[HAS_TRANSPLANTED_VIEWS]) continue;\n\n    const movedViews = lContainer[MOVED_VIEWS]!;\n    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');\n    for (let i = 0; i < movedViews.length; i++) {\n      const movedLView = movedViews[i]!;\n      const insertionLContainer = movedLView[PARENT] as LContainer;\n      ngDevMode && assertLContainer(insertionLContainer);\n      // We don't want to increment the counter if the moved LView was already marked for\n      // refresh.\n      if ((movedLView[FLAGS] & LViewFlags.RefreshTransplantedView) === 0) {\n        updateTransplantedViewCount(insertionLContainer, 1);\n      }\n      // Note, it is possible that the `movedViews` is tracking views that are transplanted *and*\n      // those that aren't (declaration component === insertion component). In the latter case,\n      // it's fine to add the flag, as we will clear it immediately in\n      // `refreshEmbeddedViews` for the view currently being refreshed.\n      movedLView[FLAGS] |= LViewFlags.RefreshTransplantedView;\n    }\n  }\n}\n\n/////////////\n\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nfunction refreshComponent(hostLView: LView, componentHostIdx: number): void {\n  ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n  if (viewAttachedToChangeDetector(componentView)) {\n    const tView = componentView[TVIEW];\n    if (componentView[FLAGS] & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {\n      refreshView(tView, componentView, tView.template, componentView[CONTEXT]);\n    } else if (componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      refreshContainsDirtyView(componentView);\n    }\n  }\n}\n\n/**\n * Refreshes all transplanted views marked with `LViewFlags.RefreshTransplantedView` that are\n * children or descendants of the given lView.\n *\n * @param lView The lView which contains descendant transplanted views that need to be refreshed.\n */\nfunction refreshContainsDirtyView(lView: LView) {\n  for (let lContainer = getFirstLContainer(lView); lContainer !== null;\n       lContainer = getNextLContainer(lContainer)) {\n    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n      const embeddedLView = lContainer[i];\n      if (viewAttachedToChangeDetector(embeddedLView)) {\n        if (embeddedLView[FLAGS] & LViewFlags.RefreshTransplantedView) {\n          const embeddedTView = embeddedLView[TVIEW];\n          ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');\n          refreshView(\n              embeddedTView, embeddedLView, embeddedTView.template, embeddedLView[CONTEXT]!);\n\n        } else if (embeddedLView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n          refreshContainsDirtyView(embeddedLView);\n        }\n      }\n    }\n  }\n\n  const tView = lView[TVIEW];\n  // Refresh child component views.\n  const components = tView.components;\n  if (components !== null) {\n    for (let i = 0; i < components.length; i++) {\n      const componentView = getComponentLViewByIndex(components[i], lView);\n      // Only attached components that are CheckAlways or OnPush and dirty should be refreshed\n      if (viewAttachedToChangeDetector(componentView) &&\n          componentView[TRANSPLANTED_VIEWS_TO_REFRESH] > 0) {\n        refreshContainsDirtyView(componentView);\n      }\n    }\n  }\n}\n\nfunction renderComponent(hostLView: LView, componentHostIdx: number) {\n  ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');\n  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);\n  const componentTView = componentView[TVIEW];\n  syncViewWithBlueprint(componentTView, componentView);\n  renderView(componentTView, componentView, componentView[CONTEXT]);\n}\n\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param tView The `TView` that contains the blueprint for syncing\n * @param lView The view to sync\n */\nfunction syncViewWithBlueprint(tView: TView, lView: LView) {\n  for (let i = lView.length; i < tView.blueprint.length; i++) {\n    lView.push(tView.blueprint[i]);\n  }\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param lViewOrLContainer The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToViewTree<T extends LView|LContainer>(lView: LView, lViewOrLContainer: T): T {\n  // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer\n  // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out\n  // of order, the change detection will run out of order, as the act of retrieving the the\n  // LContainer from the RNode is what adds it to the queue.\n  if (lView[CHILD_HEAD]) {\n    lView[CHILD_TAIL]![NEXT] = lViewOrLContainer;\n  } else {\n    lView[CHILD_HEAD] = lViewOrLContainer;\n  }\n  lView[CHILD_TAIL] = lViewOrLContainer;\n  return lViewOrLContainer;\n}\n\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView: LView): LView|null {\n  while (lView) {\n    lView[FLAGS] |= LViewFlags.Dirty;\n    const parent = getLViewParent(lView);\n    // Stop traversing up as soon as you find a root view that wasn't attached to any container\n    if (isRootView(lView) && !parent) {\n      return lView;\n    }\n    // continue otherwise\n    lView = parent!;\n  }\n  return null;\n}\n\nexport function detectChangesInternal<T>(\n    tView: TView, lView: LView, context: T, notifyErrorHandler = true) {\n  const rendererFactory = lView[RENDERER_FACTORY];\n\n  // Check no changes mode is a dev only mode used to verify that bindings have not changed\n  // since they were assigned. We do not want to invoke renderer factory functions in that mode\n  // to avoid any possible side-effects.\n  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();\n\n  if (!checkNoChangesMode && rendererFactory.begin) rendererFactory.begin();\n  try {\n    refreshView(tView, lView, tView.template, context);\n  } catch (error) {\n    if (notifyErrorHandler) {\n      handleError(lView, error);\n    }\n    throw error;\n  } finally {\n    if (!checkNoChangesMode && rendererFactory.end) rendererFactory.end();\n  }\n}\n\nexport function checkNoChangesInternal<T>(\n    tView: TView, lView: LView, context: T, notifyErrorHandler = true) {\n  setIsInCheckNoChangesMode(true);\n  try {\n    detectChangesInternal(tView, lView, context, notifyErrorHandler);\n  } finally {\n    setIsInCheckNoChangesMode(false);\n  }\n}\n\nfunction executeViewQueryFn<T>(\n    flags: RenderFlags, viewQueryFn: ViewQueriesFunction<T>, component: T): void {\n  ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');\n  setCurrentQueryIndex(0);\n  viewQueryFn(flags, component);\n}\n\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.\n *\n * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:\n * - a bound property name;\n * - a static parts of interpolated strings;\n *\n * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a\n * property binding metadata will be stored in `TView.data` at the same index as a bound value in\n * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the\n * following format:\n * - `propertyName` for bound properties;\n * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for\n * interpolated properties.\n *\n * @param tData `TData` where meta-data will be saved;\n * @param tNode `TNode` that is a target of the binding;\n * @param propertyName bound property name;\n * @param bindingIndex binding index in `LView`\n * @param interpolationParts static interpolation parts (for property interpolations)\n */\nexport function storePropertyBindingMetadata(\n    tData: TData, tNode: TNode, propertyName: string, bindingIndex: number,\n    ...interpolationParts: string[]) {\n  // Binding meta-data are stored only the first time a given property instruction is processed.\n  // Since we don't have a concept of the \"first update pass\" we need to check for presence of the\n  // binding meta-data to decide if one should be stored (or if was stored already).\n  if (tData[bindingIndex] === null) {\n    if (tNode.inputs == null || !tNode.inputs[propertyName]) {\n      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);\n      propBindingIdxs.push(bindingIndex);\n      let bindingMetadata = propertyName;\n      if (interpolationParts.length > 0) {\n        bindingMetadata +=\n            INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);\n      }\n      tData[bindingIndex] = bindingMetadata;\n    }\n  }\n}\n\nexport function getOrCreateLViewCleanup(view: LView): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\n\nexport function getOrCreateTViewCleanup(tView: TView): any[] {\n  return tView.cleanup || (tView.cleanup = []);\n}\n\n/**\n * There are cases where the sub component's renderer needs to be included\n * instead of the current renderer (see the componentSyntheticHost* instructions).\n */\nexport function loadComponentRenderer(\n    currentDef: DirectiveDef<any>|null, tNode: TNode, lView: LView): Renderer {\n  // TODO(FW-2043): the `currentDef` is null when host bindings are invoked while creating root\n  // component (see packages/core/src/render3/component.ts). This is not consistent with the process\n  // of creating inner components, when current directive index is available in the state. In order\n  // to avoid relying on current def being `null` (thus special-casing root component creation), the\n  // process of creating root component should be unified with the process of creating inner\n  // components.\n  if (currentDef === null || isComponentDef(currentDef)) {\n    lView = unwrapLView(lView[tNode.index])!;\n  }\n  return lView[RENDERER];\n}\n\n/** Handles an error thrown in an LView. */\nexport function handleError(lView: LView, error: any): void {\n  const injector = lView[INJECTOR];\n  const errorHandler = injector ? injector.get(ErrorHandler, null) : null;\n  errorHandler && errorHandler.handleError(error);\n}\n\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param tView The current TView\n * @param lView the `LView` which contains the directives.\n * @param inputs mapping between the public \"input\" name and privately-known,\n *        possibly minified, property names to write to.\n * @param value Value to set.\n */\nexport function setInputsForProperty(\n    tView: TView, lView: LView, inputs: PropertyAliasValue, publicName: string, value: any): void {\n  for (let i = 0; i < inputs.length;) {\n    const index = inputs[i++] as number;\n    const privateName = inputs[i++] as string;\n    const instance = lView[index];\n    ngDevMode && assertIndexInRange(lView, index);\n    const def = tView.data[index] as DirectiveDef<any>;\n    if (def.setInput !== null) {\n      def.setInput!(instance, value, publicName, privateName);\n    } else {\n      instance[privateName] = value;\n    }\n  }\n}\n\n/**\n * Updates a text binding at a given index in a given LView.\n */\nexport function textBindingInternal(lView: LView, index: number, value: string): void {\n  ngDevMode && assertString(value, 'Value should be a string');\n  ngDevMode && assertNotSame(value, NO_CHANGE as any, 'value should not be NO_CHANGE');\n  ngDevMode && assertIndexInRange(lView, index);\n  const element = getNativeByIndex(index, lView) as any as RText;\n  ngDevMode && assertDefined(element, 'native element should exist');\n  updateTextNode(lView[RENDERER], element, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {concatStringsWithSpace} from '../../util/stringify';\nimport {assertFirstCreatePass} from '../assert';\nimport {AttributeMarker, TAttributes, TNode} from '../interfaces/node';\nimport {getTView} from '../state';\n\n/**\n * Compute the static styling (class/style) from `TAttributes`.\n *\n * This function should be called during `firstCreatePass` only.\n *\n * @param tNode The `TNode` into which the styling information should be loaded.\n * @param attrs `TAttributes` containing the styling information.\n * @param writeToHost Where should the resulting static styles be written?\n *   - `false` Write to `TNode.stylesWithoutHost` / `TNode.classesWithoutHost`\n *   - `true` Write to `TNode.styles` / `TNode.classes`\n */\nexport function computeStaticStyling(\n    tNode: TNode, attrs: TAttributes|null, writeToHost: boolean): void {\n  ngDevMode &&\n      assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');\n  let styles: string|null = writeToHost ? tNode.styles : null;\n  let classes: string|null = writeToHost ? tNode.classes : null;\n  let mode: AttributeMarker|0 = 0;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const value = attrs[i];\n      if (typeof value === 'number') {\n        mode = value;\n      } else if (mode == AttributeMarker.Classes) {\n        classes = concatStringsWithSpace(classes, value as string);\n      } else if (mode == AttributeMarker.Styles) {\n        const style = value as string;\n        const styleValue = attrs[++i] as string;\n        styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');\n      }\n    }\n  }\n  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;\n  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertParentView} from './assert';\nimport {icuContainerIterate} from './i18n/i18n_tree_shaking';\nimport {CONTAINER_HEADER_OFFSET} from './interfaces/container';\nimport {TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RNode} from './interfaces/renderer_dom';\nimport {isLContainer} from './interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView, T_HOST, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getProjectionNodes} from './node_manipulation';\nimport {getLViewParent} from './util/view_traversal_utils';\nimport {unwrapRNode} from './util/view_utils';\n\n\n\nexport function collectNativeNodes(\n    tView: TView, lView: LView, tNode: TNode|null, result: any[],\n    isProjection: boolean = false): any[] {\n  while (tNode !== null) {\n    ngDevMode &&\n        assertTNodeType(\n            tNode,\n            TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Projection | TNodeType.Icu);\n\n    const lNode = lView[tNode.index];\n    if (lNode !== null) {\n      result.push(unwrapRNode(lNode));\n    }\n\n    // A given lNode can represent either a native node or a LContainer (when it is a host of a\n    // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes\n    // from the views in this container.\n    if (isLContainer(lNode)) {\n      for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {\n        const lViewInAContainer = lNode[i];\n        const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;\n        if (lViewFirstChildTNode !== null) {\n          collectNativeNodes(\n              lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);\n        }\n      }\n    }\n\n    const tNodeType = tNode.type;\n    if (tNodeType & TNodeType.ElementContainer) {\n      collectNativeNodes(tView, lView, tNode.child, result);\n    } else if (tNodeType & TNodeType.Icu) {\n      const nextRNode = icuContainerIterate(tNode as TIcuContainerNode, lView);\n      let rNode: RNode|null;\n      while (rNode = nextRNode()) {\n        result.push(rNode);\n      }\n    } else if (tNodeType & TNodeType.Projection) {\n      const nodesInSlot = getProjectionNodes(lView, tNode);\n      if (Array.isArray(nodesInSlot)) {\n        result.push(...nodesInSlot);\n      } else {\n        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW])!;\n        ngDevMode && assertParentView(parentView);\n        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);\n      }\n    }\n    tNode = isProjection ? tNode.projectionNext : tNode.next;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {EmbeddedViewRef, InternalViewRef, ViewRefTracker} from '../linker/view_ref';\nimport {removeFromArray} from '../util/array_utils';\nimport {assertEqual} from '../util/assert';\n\nimport {collectNativeNodes} from './collect_native_nodes';\nimport {checkNoChangesInternal, detectChangesInternal, markViewDirty, storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, VIEW_REFS} from './interfaces/container';\nimport {isLContainer} from './interfaces/type_checks';\nimport {CONTEXT, FLAGS, LView, LViewFlags, PARENT, TVIEW} from './interfaces/view';\nimport {destroyLView, detachView, renderDetachView} from './node_manipulation';\n\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\ninterface ChangeDetectorRefInterface extends ChangeDetectorRef {}\n\nexport class ViewRef<T> implements EmbeddedViewRef<T>, InternalViewRef, ChangeDetectorRefInterface {\n  private _appRef: ViewRefTracker|null = null;\n  private _attachedToViewContainer = false;\n\n  get rootNodes(): any[] {\n    const lView = this._lView;\n    const tView = lView[TVIEW];\n    return collectNativeNodes(tView, lView, tView.firstChild, []);\n  }\n\n  constructor(\n      /**\n       * This represents `LView` associated with the component when ViewRef is a ChangeDetectorRef.\n       *\n       * When ViewRef is created for a dynamic component, this also represents the `LView` for the\n       * component.\n       *\n       * For a \"regular\" ViewRef created for an embedded view, this is the `LView` for the embedded\n       * view.\n       *\n       * @internal\n       */\n      public _lView: LView,\n\n      /**\n       * This represents the `LView` associated with the point where `ChangeDetectorRef` was\n       * requested.\n       *\n       * This may be different from `_lView` if the `_cdRefInjectingView` is an embedded view.\n       */\n      private _cdRefInjectingView?: LView) {}\n\n  get context(): T {\n    return this._lView[CONTEXT] as unknown as T;\n  }\n\n  set context(value: T) {\n    this._lView[CONTEXT] = value as unknown as {};\n  }\n\n  get destroyed(): boolean {\n    return (this._lView[FLAGS] & LViewFlags.Destroyed) === LViewFlags.Destroyed;\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._attachedToViewContainer) {\n      const parent = this._lView[PARENT];\n      if (isLContainer(parent)) {\n        const viewRefs = parent[VIEW_REFS] as ViewRef<unknown>[] | null;\n        const index = viewRefs ? viewRefs.indexOf(this) : -1;\n        if (index > -1) {\n          ngDevMode &&\n              assertEqual(\n                  index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET,\n                  'An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.');\n          detachView(parent, index);\n          removeFromArray(viewRefs!, index);\n        }\n      }\n      this._attachedToViewContainer = false;\n    }\n    destroyLView(this._lView[TVIEW], this._lView);\n  }\n\n  onDestroy(callback: Function) {\n    storeCleanupWithContext(this._lView[TVIEW], this._lView, null, callback);\n  }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'app-root',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void {\n    markViewDirty(this._cdRefInjectingView || this._lView);\n  }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void {\n    this._lView[FLAGS] &= ~LViewFlags.Attached;\n  }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app-root',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void {\n    this._lView[FLAGS] |= LViewFlags.Attached;\n  }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges(): void {\n    detectChangesInternal(this._lView[TVIEW], this._lView, this.context as unknown as {});\n  }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void {\n    if (ngDevMode) {\n      checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context as unknown as {});\n    }\n  }\n\n  attachToViewContainerRef() {\n    if (this._appRef) {\n      throw new RuntimeError(\n          RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n          ngDevMode && 'This view is already attached directly to the ApplicationRef!');\n    }\n    this._attachedToViewContainer = true;\n  }\n\n  detachFromAppRef() {\n    this._appRef = null;\n    renderDetachView(this._lView[TVIEW], this._lView);\n  }\n\n  attachToAppRef(appRef: ViewRefTracker) {\n    if (this._attachedToViewContainer) {\n      throw new RuntimeError(\n          RuntimeErrorCode.VIEW_ALREADY_ATTACHED,\n          ngDevMode && 'This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n}\n\n/** @internal */\nexport class RootViewRef<T> extends ViewRef<T> {\n  constructor(public _view: LView) {\n    super(_view);\n  }\n\n  override detectChanges(): void {\n    const lView = this._view;\n    const tView = lView[TVIEW];\n    const context = lView[CONTEXT];\n    detectChangesInternal(tView, lView, context, false);\n  }\n\n  override checkNoChanges(): void {\n    if (ngDevMode) {\n      const lView = this._view;\n      const tView = lView[TVIEW];\n      const context = lView[CONTEXT];\n      checkNoChangesInternal(tView, lView, context, false);\n    }\n  }\n\n  override get context(): T {\n    return null!;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {Injector} from '../di/injector';\nimport {convertToBitFlags} from '../di/injector_compatibility';\nimport {InjectFlags, InjectOptions} from '../di/interface/injector';\nimport {ProviderToken} from '../di/provider_token';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\nimport {ComponentFactory as AbstractComponentFactory, ComponentRef as AbstractComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as AbstractComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {createElementRef, ElementRef} from '../linker/element_ref';\nimport {NgModuleRef} from '../linker/ng_module_factory';\nimport {Renderer2, RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/sanitizer';\nimport {assertDefined, assertGreaterThan, assertIndexInRange} from '../util/assert';\nimport {VERSION} from '../version';\nimport {NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR} from '../view/provider_flags';\n\nimport {assertComponentType} from './assert';\nimport {attachPatchData} from './context_discovery';\nimport {getComponentDef} from './definition';\nimport {getNodeInjectable, NodeInjector} from './di';\nimport {throwProviderNotFoundError} from './errors_di';\nimport {registerPostOrderHooks} from './hooks';\nimport {reportUnknownPropertyError} from './instructions/element_validation';\nimport {addToViewTree, createLView, createTView, executeContentQueries, getOrCreateComponentTView, getOrCreateTNode, initializeDirectives, invokeDirectivesHostBindings, locateHostElement, markAsComponentHost, markViewDirty, renderView, setInputsForProperty} from './instructions/shared';\nimport {ComponentDef, DirectiveDef, HostDirectiveDefs} from './interfaces/definition';\nimport {PropertyAliasValue, TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType} from './interfaces/node';\nimport {Renderer, RendererFactory} from './interfaces/renderer';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {CONTEXT, HEADER_OFFSET, LView, LViewFlags, TVIEW, TViewType} from './interfaces/view';\nimport {MATH_ML_NAMESPACE, SVG_NAMESPACE} from './namespaces';\nimport {createElementNode, setupStaticAttributes, writeDirectClass} from './node_manipulation';\nimport {extractAttrsAndClassesFromSelector, stringifyCSSSelectorList} from './node_selector_matcher';\nimport {enterView, getCurrentTNode, getLView, leaveView} from './state';\nimport {computeStaticStyling} from './styling/static_styling';\nimport {mergeHostAttrs, setUpAttributes} from './util/attrs_utils';\nimport {stringifyForError} from './util/stringify_utils';\nimport {getComponentLViewByIndex, getNativeByTNode, getTNode} from './util/view_utils';\nimport {RootViewRef, ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends AbstractComponentFactoryResolver {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(private ngModule?: NgModuleRef<any>) {\n    super();\n  }\n\n  override resolveComponentFactory<T>(component: Type<T>): AbstractComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component)!;\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\nfunction getNamespace(elementName: string): string|null {\n  const name = elementName.toLowerCase();\n  return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);\n}\n\n/**\n * Injector that looks up a value using a specific injector, before falling back to the module\n * injector. Used primarily when creating components or embedded views dynamically.\n */\nclass ChainedInjector implements Injector {\n  constructor(private injector: Injector, private parentInjector: Injector) {}\n\n  get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags|InjectOptions): T {\n    flags = convertToBitFlags(flags);\n    const value = this.injector.get<T|typeof NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR>(\n        token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);\n\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as unknown as T)) {\n      // Return the value from the root element injector when\n      // - it provides it\n      //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      // - the module injector should not be checked\n      //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n      return value as T;\n    }\n\n    return this.parentInjector.get(token, notFoundValue, flags);\n  }\n}\n\n/**\n * ComponentFactory interface implementation.\n */\nexport class ComponentFactory<T> extends AbstractComponentFactory<T> {\n  override selector: string;\n  override componentType: Type<any>;\n  override ngContentSelectors: string[];\n  isBoundToModule: boolean;\n\n  override get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  override get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(private componentDef: ComponentDef<any>, private ngModule?: NgModuleRef<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = stringifyCSSSelectorList(componentDef.selectors);\n    this.ngContentSelectors =\n        componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];\n    this.isBoundToModule = !!ngModule;\n  }\n\n  override create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      environmentInjector?: NgModuleRef<any>|EnvironmentInjector|\n      undefined): AbstractComponentRef<T> {\n    environmentInjector = environmentInjector || this.ngModule;\n\n    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ?\n        environmentInjector :\n        environmentInjector?.injector;\n\n    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {\n      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) ||\n          realEnvironmentInjector;\n    }\n\n    const rootViewInjector =\n        realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;\n\n    const rendererFactory = rootViewInjector.get(RendererFactory2, null);\n    if (rendererFactory === null) {\n      throw new RuntimeError(\n          RuntimeErrorCode.RENDERER_NOT_FOUND,\n          ngDevMode &&\n              'Angular was not able to inject a renderer (RendererFactory2). ' +\n                  'Likely this is due to a broken DI hierarchy. ' +\n                  'Make sure that any injector used to create this component has a correct parent.');\n    }\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n\n    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);\n    // Determine a tag name used for creating host elements when this component is created\n    // dynamically. Default to 'div' if this component did not specify any tag name in its selector.\n    const elementName = this.componentDef.selectors[0][0] as string || 'div';\n    const hostRNode = rootSelectorOrNode ?\n        locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :\n        createElementNode(hostRenderer, elementName, getNamespace(elementName));\n\n    const rootFlags = this.componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                                 LViewFlags.CheckAlways | LViewFlags.IsRoot;\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootTView = createTView(TViewType.Root, null, null, 1, 0, null, null, null, null, null);\n    const rootLView = createLView(\n        null, rootTView, null, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer,\n        rootViewInjector, null);\n\n    // rootView is the parent when bootstrapping\n    // TODO(misko): it looks like we are entering view here but we don't really need to as\n    // `renderView` does that. However as the code is written it is needed because\n    // `createRootComponentView` and `createRootComponent` both read global state. Fixing those\n    // issues would allow us to drop this.\n    enterView(rootLView);\n\n    let component: T;\n    let tElementNode: TElementNode;\n\n    try {\n      const rootComponentDef = this.componentDef;\n      let rootDirectives: DirectiveDef<unknown>[];\n      let hostDirectiveDefs: HostDirectiveDefs|null = null;\n\n      if (rootComponentDef.findHostDirectiveDefs) {\n        rootDirectives = [];\n        hostDirectiveDefs = new Map();\n        rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);\n        rootDirectives.push(rootComponentDef);\n      } else {\n        rootDirectives = [rootComponentDef];\n      }\n\n      const hostTNode = createRootComponentTNode(rootLView, hostRNode);\n      const componentView = createRootComponentView(\n          hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, rendererFactory,\n          hostRenderer);\n\n      tElementNode = getTNode(rootTView, HEADER_OFFSET) as TElementNode;\n\n      // TODO(crisbeto): in practice `hostRNode` should always be defined, but there are some tests\n      // where the renderer is mocked out and `undefined` is returned. We should update the tests so\n      // that this check can be removed.\n      if (hostRNode) {\n        setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);\n      }\n\n      if (projectableNodes !== undefined) {\n        projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);\n      }\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(\n          componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView,\n          [LifecycleHooksFeature]);\n      renderView(rootTView, rootLView, null);\n    } finally {\n      leaveView();\n    }\n\n    return new ComponentRef(\n        this.componentType, component, createElementRef(tElementNode, rootLView), rootLView,\n        tElementNode);\n  }\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends AbstractComponentRef<T> {\n  override instance: T;\n  override hostView: ViewRef<T>;\n  override changeDetectorRef: ChangeDetectorRef;\n  override componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, public location: ElementRef, private _rootLView: LView,\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode) {\n    super();\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef<T>(_rootLView);\n    this.componentType = componentType;\n  }\n\n  override setInput(name: string, value: unknown): void {\n    const inputData = this._tNode.inputs;\n    let dataValue: PropertyAliasValue|undefined;\n    if (inputData !== null && (dataValue = inputData[name])) {\n      const lView = this._rootLView;\n      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);\n      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);\n      markViewDirty(childComponentLView);\n    } else {\n      if (ngDevMode) {\n        const cmpNameForError = stringifyForError(this.componentType);\n        let message =\n            `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;\n        message += `Make sure that the '${\n            name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;\n        reportUnknownPropertyError(message);\n      }\n    }\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._tNode, this._rootLView);\n  }\n\n  override destroy(): void {\n    this.hostView.destroy();\n  }\n\n  override onDestroy(callback: () => void): void {\n    this.hostView.onDestroy(callback);\n  }\n}\n\n/** Represents a HostFeature function. */\ntype HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throwProviderNotFoundError(token, 'NullInjector');\n  }\n};\n\n/** Creates a TNode that can be used to instantiate a root component. */\nfunction createRootComponentTNode(lView: LView, rNode: RNode): TElementNode {\n  const tView = lView[TVIEW];\n  const index = HEADER_OFFSET;\n  ngDevMode && assertIndexInRange(lView, index);\n  lView[index] = rNode;\n\n  // '#host' is added here as we don't know the real host DOM name (we don't want to read it) and at\n  // the same time we want to communicate the debug `TNode` that this is a special `TNode`\n  // representing a host element.\n  return getOrCreateTNode(tView, index, TNodeType.Element, '#host', null);\n}\n\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param rootComponentDef ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param rendererFactory Factory to be used for creating child renderers.\n * @param hostRenderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nfunction createRootComponentView(\n    tNode: TElementNode, rNode: RElement|null, rootComponentDef: ComponentDef<any>,\n    rootDirectives: DirectiveDef<any>[], rootView: LView, rendererFactory: RendererFactory,\n    hostRenderer: Renderer, sanitizer?: Sanitizer|null): LView {\n  const tView = rootView[TVIEW];\n  applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer);\n\n  const viewRenderer = rendererFactory.createRenderer(rNode, rootComponentDef);\n  const componentView = createLView(\n      rootView, getOrCreateComponentTView(rootComponentDef), null,\n      rootComponentDef.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, rootView[tNode.index],\n      tNode, rendererFactory, viewRenderer, sanitizer || null, null, null);\n\n  if (tView.firstCreatePass) {\n    markAsComponentHost(tView, tNode, rootDirectives.length - 1);\n  }\n\n  addToViewTree(rootView, componentView);\n\n  // Store component view at node index, with node as the HOST\n  return rootView[tNode.index] = componentView;\n}\n\n/** Sets up the styling information on a root component. */\nfunction applyRootComponentStyling(\n    rootDirectives: DirectiveDef<any>[], tNode: TElementNode, rNode: RElement|null,\n    hostRenderer: Renderer): void {\n  for (const def of rootDirectives) {\n    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n\n    if (rNode !== null) {\n      setupStaticAttributes(hostRenderer, rNode, tNode);\n    }\n  }\n}\n\n/**\n * Creates a root component and sets it up with features and host bindings.Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nfunction createRootComponent<T>(\n    componentView: LView, rootComponentDef: ComponentDef<T>, rootDirectives: DirectiveDef<any>[],\n    hostDirectiveDefs: HostDirectiveDefs|null, rootLView: LView,\n    hostFeatures: HostFeature[]|null): any {\n  const rootTNode = getCurrentTNode() as TElementNode;\n  ngDevMode && assertDefined(rootTNode, 'tNode should have been already created');\n  const tView = rootLView[TVIEW];\n  const native = getNativeByTNode(rootTNode, rootLView);\n\n  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);\n\n  for (let i = 0; i < rootDirectives.length; i++) {\n    const directiveIndex = rootTNode.directiveStart + i;\n    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);\n    attachPatchData(directiveInstance, rootLView);\n  }\n\n  invokeDirectivesHostBindings(tView, rootLView, rootTNode);\n\n  if (native) {\n    attachPatchData(native, rootLView);\n  }\n\n  // We're guaranteed for the `componentOffset` to be positive here\n  // since a root component always matches a component def.\n  ngDevMode &&\n      assertGreaterThan(rootTNode.componentOffset, -1, 'componentOffset must be great than -1');\n  const component = getNodeInjectable(\n      rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);\n  componentView[CONTEXT] = rootLView[CONTEXT] = component;\n\n  if (hostFeatures !== null) {\n    for (const feature of hostFeatures) {\n      feature(component, rootComponentDef);\n    }\n  }\n\n  // We want to generate an empty QueryList for root content queries for backwards\n  // compatibility with ViewEngine.\n  executeContentQueries(tView, rootTNode, componentView);\n\n  return component;\n}\n\n/** Sets the static attributes on a root component. */\nfunction setRootNodeAttributes(\n    hostRenderer: Renderer2, componentDef: ComponentDef<unknown>, hostRNode: RElement,\n    rootSelectorOrNode: any) {\n  if (rootSelectorOrNode) {\n    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);\n  } else {\n    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`\n    // is not defined), also apply attributes and classes extracted from component selector.\n    // Extract attributes and classes from the first selector only to match VE behavior.\n    const {attrs, classes} = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);\n    if (attrs) {\n      setUpAttributes(hostRenderer, hostRNode, attrs);\n    }\n    if (classes && classes.length > 0) {\n      writeDirectClass(hostRenderer, hostRNode, classes.join(' '));\n    }\n  }\n}\n\n/** Projects the `projectableNodes` that were specified when creating a root component. */\nfunction projectNodes(\n    tNode: TElementNode, ngContentSelectors: string[], projectableNodes: any[][]) {\n  const projection: (TNode|RNode[]|null)[] = tNode.projection = [];\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const nodesforSlot = projectableNodes[i];\n    // Projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade\n    // case). Here we do normalize passed data structure to be an array of arrays to avoid\n    // complex checks down the line.\n    // We also normalize the length of the passed in projectable nodes (to match the number of\n    // <ng-container> slots defined by a component).\n    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);\n  }\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * ```\n */\nexport function LifecycleHooksFeature(): void {\n  const tNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(tNode, 'TNode is required');\n  registerPostOrderHooks(getLView()[TVIEW], tNode);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type, Writable} from '../../interface/type';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../../util/empty';\nimport {fillProperties} from '../../util/property';\nimport {ComponentDef, ContentQueriesFunction, DirectiveDef, DirectiveDefFeature, HostBindingsFunction, RenderFlags, ViewQueriesFunction} from '../interfaces/definition';\nimport {TAttributes} from '../interfaces/node';\nimport {isComponentDef} from '../interfaces/type_checks';\nimport {mergeHostAttrs} from '../util/attrs_utils';\nimport {stringifyForError} from '../util/stringify_utils';\n\nexport function getSuperType(type: Type<any>): Type<any>&\n    {ɵcmp?: ComponentDef<any>, ɵdir?: DirectiveDef<any>} {\n  return Object.getPrototypeOf(type.prototype).constructor;\n}\n\ntype WritableDef = Writable<DirectiveDef<any>|ComponentDef<any>>;\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nexport function ɵɵInheritDefinitionFeature(definition: DirectiveDef<any>|ComponentDef<any>): void {\n  let superType = getSuperType(definition.type);\n  let shouldInheritFields = true;\n  const inheritanceChain: WritableDef[] = [definition];\n\n  while (superType) {\n    let superDef: DirectiveDef<any>|ComponentDef<any>|undefined = undefined;\n    if (isComponentDef(definition)) {\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵcmp || superType.ɵdir;\n    } else {\n      if (superType.ɵcmp) {\n        throw new RuntimeError(\n            RuntimeErrorCode.INVALID_INHERITANCE,\n            ngDevMode &&\n                `Directives cannot inherit Components. Directive ${\n                    stringifyForError(definition.type)} is attempting to extend component ${\n                    stringifyForError(superType)}`);\n      }\n      // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n      superDef = superType.ɵdir;\n    }\n\n    if (superDef) {\n      if (shouldInheritFields) {\n        inheritanceChain.push(superDef);\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        const writeableDef = definition as WritableDef;\n        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n\n        // Merge hostBindings\n        const superHostBindings = superDef.hostBindings;\n        superHostBindings && inheritHostBindings(definition, superHostBindings);\n\n        // Merge queries\n        const superViewQuery = superDef.viewQuery;\n        const superContentQueries = superDef.contentQueries;\n        superViewQuery && inheritViewQuery(definition, superViewQuery);\n        superContentQueries && inheritContentQueries(definition, superContentQueries);\n\n        // Merge inputs and outputs\n        fillProperties(definition.inputs, superDef.inputs);\n        fillProperties(definition.declaredInputs, superDef.declaredInputs);\n        fillProperties(definition.outputs, superDef.outputs);\n\n        // Merge animations metadata.\n        // If `superDef` is a Component, the `data` field is present (defaults to an empty object).\n        if (isComponentDef(superDef) && superDef.data.animation) {\n          // If super def is a Component, the `definition` is also a Component, since Directives can\n          // not inherit Components (we throw an error above and cannot reach this code).\n          const defData = (definition as ComponentDef<any>).data;\n          defData.animation = (defData.animation || []).concat(superDef.data.animation);\n        }\n      }\n\n      // Run parent features\n      const features = superDef.features;\n      if (features) {\n        for (let i = 0; i < features.length; i++) {\n          const feature = features[i];\n          if (feature && feature.ngInherit) {\n            (feature as DirectiveDefFeature)(definition);\n          }\n          // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this\n          // def already has all the necessary information inherited from its super class(es), so we\n          // can stop merging fields from super classes. However we need to iterate through the\n          // prototype chain to look for classes that might contain other \"features\" (like\n          // NgOnChanges), which we should invoke for the original `definition`. We set the\n          // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance\n          // logic and only invoking functions from the \"features\" list.\n          if (feature === ɵɵInheritDefinitionFeature) {\n            shouldInheritFields = false;\n          }\n        }\n      }\n    }\n\n    superType = Object.getPrototypeOf(superType);\n  }\n  mergeHostAttrsAcrossInheritance(inheritanceChain);\n}\n\n/**\n * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.\n *\n * @param inheritanceChain A list of `WritableDefs` starting at the top most type and listing\n * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child\n * type.\n */\nfunction mergeHostAttrsAcrossInheritance(inheritanceChain: WritableDef[]) {\n  let hostVars: number = 0;\n  let hostAttrs: TAttributes|null = null;\n  // We process the inheritance order from the base to the leaves here.\n  for (let i = inheritanceChain.length - 1; i >= 0; i--) {\n    const def = inheritanceChain[i];\n    // For each `hostVars`, we need to add the superclass amount.\n    def.hostVars = (hostVars += def.hostVars);\n    // for each `hostAttrs` we need to merge it with superclass.\n    def.hostAttrs =\n        mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));\n  }\n}\n\nfunction maybeUnwrapEmpty<T>(value: T[]): T[];\nfunction maybeUnwrapEmpty<T>(value: T): T;\nfunction maybeUnwrapEmpty(value: any): any {\n  if (value === EMPTY_OBJ) {\n    return {};\n  } else if (value === EMPTY_ARRAY) {\n    return [];\n  } else {\n    return value;\n  }\n}\n\nfunction inheritViewQuery(definition: WritableDef, superViewQuery: ViewQueriesFunction<any>) {\n  const prevViewQuery = definition.viewQuery;\n  if (prevViewQuery) {\n    definition.viewQuery = (rf, ctx) => {\n      superViewQuery(rf, ctx);\n      prevViewQuery(rf, ctx);\n    };\n  } else {\n    definition.viewQuery = superViewQuery;\n  }\n}\n\nfunction inheritContentQueries(\n    definition: WritableDef, superContentQueries: ContentQueriesFunction<any>) {\n  const prevContentQueries = definition.contentQueries;\n  if (prevContentQueries) {\n    definition.contentQueries = (rf, ctx, directiveIndex) => {\n      superContentQueries(rf, ctx, directiveIndex);\n      prevContentQueries(rf, ctx, directiveIndex);\n    };\n  } else {\n    definition.contentQueries = superContentQueries;\n  }\n}\n\nfunction inheritHostBindings(\n    definition: WritableDef, superHostBindings: HostBindingsFunction<any>) {\n  const prevHostBindings = definition.hostBindings;\n  if (prevHostBindings) {\n    definition.hostBindings = (rf: RenderFlags, ctx: any) => {\n      superHostBindings(rf, ctx);\n      prevHostBindings(rf, ctx);\n    };\n  } else {\n    definition.hostBindings = superHostBindings;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentDef, DirectiveDef} from '../interfaces/definition';\nimport {isComponentDef} from '../interfaces/type_checks';\n\nimport {getSuperType} from './inherit_definition_feature';\n\n/**\n * Fields which exist on either directive or component definitions, and need to be copied from\n * parent to child classes by the `ɵɵCopyDefinitionFeature`.\n */\nconst COPY_DIRECTIVE_FIELDS: (keyof DirectiveDef<unknown>)[] = [\n  // The child class should use the providers of its parent.\n  'providersResolver',\n\n  // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such\n  // as inputs, outputs, and host binding functions.\n];\n\n/**\n * Fields which exist only on component definitions, and need to be copied from parent to child\n * classes by the `ɵɵCopyDefinitionFeature`.\n *\n * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,\n * since those should go in `COPY_DIRECTIVE_FIELDS` above.\n */\nconst COPY_COMPONENT_FIELDS: Exclude<keyof ComponentDef<unknown>, keyof DirectiveDef<unknown>>[] = [\n  // The child class should use the template function of its parent, including all template\n  // semantics.\n  'template',\n  'decls',\n  'consts',\n  'vars',\n  'onPush',\n  'ngContentSelectors',\n\n  // The child class should use the CSS styles of its parent, including all styling semantics.\n  'styles',\n  'encapsulation',\n\n  // The child class should be checked by the runtime in the same way as its parent.\n  'schemas',\n];\n\n/**\n * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nexport function ɵɵCopyDefinitionFeature(definition: DirectiveDef<any>|ComponentDef<any>): void {\n  let superType = getSuperType(definition.type)!;\n\n  let superDef: DirectiveDef<any>|ComponentDef<any>|undefined = undefined;\n  if (isComponentDef(definition)) {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵcmp!;\n  } else {\n    // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n    superDef = superType.ɵdir!;\n  }\n\n  // Needed because `definition` fields are readonly.\n  const defAny = (definition as any);\n\n  // Copy over any fields that apply to either directives or components.\n  for (const field of COPY_DIRECTIVE_FIELDS) {\n    defAny[field] = superDef[field];\n  }\n\n  if (isComponentDef(superDef)) {\n    // Copy over any component-specific fields.\n    for (const field of COPY_COMPONENT_FIELDS) {\n      defAny[field] = superDef[field];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {resolveForwardRef} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {Type} from '../../interface/type';\nimport {assertEqual} from '../../util/assert';\nimport {EMPTY_OBJ} from '../../util/empty';\nimport {getComponentDef, getDirectiveDef} from '../definition';\nimport {DirectiveDef, HostDirectiveBindingMap, HostDirectiveDef, HostDirectiveDefs} from '../interfaces/definition';\n\n/** Values that can be used to define a host directive through the `HostDirectivesFeature`. */\ntype HostDirectiveConfig = Type<unknown>|{\n  directive: Type<unknown>;\n  inputs?: string[];\n  outputs?: string[];\n};\n\n/**\n * This feature adds the host directives behavior to a directive definition by patching a\n * function onto it. The expectation is that the runtime will invoke the function during\n * directive matching.\n *\n * For example:\n * ```ts\n * class ComponentWithHostDirective {\n *   static ɵcmp = defineComponent({\n *    type: ComponentWithHostDirective,\n *    features: [ɵɵHostDirectivesFeature([\n *      SimpleHostDirective,\n *      {directive: AdvancedHostDirective, inputs: ['foo: alias'], outputs: ['bar']},\n *    ])]\n *  });\n * }\n * ```\n *\n * @codeGenApi\n */\nexport function ɵɵHostDirectivesFeature(rawHostDirectives: HostDirectiveConfig[]|\n                                        (() => HostDirectiveConfig[])) {\n  return (definition: DirectiveDef<unknown>) => {\n    definition.findHostDirectiveDefs = findHostDirectiveDefs;\n    definition.hostDirectives =\n        (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map(dir => {\n          return typeof dir === 'function' ?\n              {directive: resolveForwardRef(dir), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ} :\n              {\n                directive: resolveForwardRef(dir.directive),\n                inputs: bindingArrayToMap(dir.inputs),\n                outputs: bindingArrayToMap(dir.outputs)\n              };\n        });\n  };\n}\n\nfunction findHostDirectiveDefs(\n    currentDef: DirectiveDef<unknown>, matchedDefs: DirectiveDef<unknown>[],\n    hostDirectiveDefs: HostDirectiveDefs): void {\n  if (currentDef.hostDirectives !== null) {\n    for (const hostDirectiveConfig of currentDef.hostDirectives) {\n      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive)!;\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        validateHostDirective(hostDirectiveConfig, hostDirectiveDef, matchedDefs);\n      }\n\n      // We need to patch the `declaredInputs` so that\n      // `ngOnChanges` can map the properties correctly.\n      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);\n\n      // Host directives execute before the host so that its host bindings can be overwritten.\n      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);\n      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);\n      matchedDefs.push(hostDirectiveDef);\n    }\n  }\n}\n\n/**\n * Converts an array in the form of `['publicName', 'alias', 'otherPublicName', 'otherAlias']` into\n * a map in the form of `{publicName: 'alias', otherPublicName: 'otherAlias'}`.\n */\nfunction bindingArrayToMap(bindings: string[]|undefined): HostDirectiveBindingMap {\n  if (bindings === undefined || bindings.length === 0) {\n    return EMPTY_OBJ;\n  }\n\n  const result: HostDirectiveBindingMap = {};\n\n  for (let i = 0; i < bindings.length; i += 2) {\n    result[bindings[i]] = bindings[i + 1];\n  }\n\n  return result;\n}\n\n/**\n * `ngOnChanges` has some leftover legacy ViewEngine behavior where the keys inside the\n * `SimpleChanges` event refer to the *declared* name of the input, not its public name or its\n * minified name. E.g. in `@Input('alias') foo: string`, the name in the `SimpleChanges` object\n * will always be `foo`, and not `alias` or the minified name of `foo` in apps using property\n * minification.\n *\n * This is achieved through the `DirectiveDef.declaredInputs` map that is constructed when the\n * definition is declared. When a property is written to the directive instance, the\n * `NgOnChangesFeature` will try to remap the property name being written to using the\n * `declaredInputs`.\n *\n * Since the host directive input remapping happens during directive matching, `declaredInputs`\n * won't contain the new alias that the input is available under. This function addresses the\n * issue by patching the host directive aliases to the `declaredInputs`. There is *not* a risk of\n * this patching accidentally introducing new inputs to the host directive, because `declaredInputs`\n * is used *only* by the `NgOnChangesFeature` when determining what name is used in the\n * `SimpleChanges` object which won't be reached if an input doesn't exist.\n */\nfunction patchDeclaredInputs(\n    declaredInputs: Record<string, string>, exposedInputs: HostDirectiveBindingMap): void {\n  for (const publicName in exposedInputs) {\n    if (exposedInputs.hasOwnProperty(publicName)) {\n      const remappedPublicName = exposedInputs[publicName];\n      const privateName = declaredInputs[publicName];\n\n      // We *technically* shouldn't be able to hit this case because we can't have multiple\n      // inputs on the same property and we have validations against conflicting aliases in\n      // `validateMappings`. If we somehow did, it would lead to `ngOnChanges` being invoked\n      // with the wrong name so we have a non-user-friendly assertion here just in case.\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n          declaredInputs.hasOwnProperty(remappedPublicName)) {\n        assertEqual(\n            declaredInputs[remappedPublicName], declaredInputs[publicName],\n            `Conflicting host directive input alias ${publicName}.`);\n      }\n\n      declaredInputs[remappedPublicName] = privateName;\n    }\n  }\n}\n\n/**\n * Verifies that the host directive has been configured correctly.\n * @param hostDirectiveConfig Host directive configuration object.\n * @param directiveDef Directive definition of the host directive.\n * @param matchedDefs Directives that have been matched so far.\n */\nfunction validateHostDirective(\n    hostDirectiveConfig: HostDirectiveDef<unknown>, directiveDef: DirectiveDef<any>|null,\n    matchedDefs: DirectiveDef<unknown>[]): asserts directiveDef is DirectiveDef<unknown> {\n  const type = hostDirectiveConfig.directive;\n\n  if (directiveDef === null) {\n    if (getComponentDef(type) !== null) {\n      throw new RuntimeError(\n          RuntimeErrorCode.HOST_DIRECTIVE_COMPONENT,\n          `Host directive ${type.name} cannot be a component.`);\n    }\n\n    throw new RuntimeError(\n        RuntimeErrorCode.HOST_DIRECTIVE_UNRESOLVABLE,\n        `Could not resolve metadata for host directive ${type.name}. ` +\n            `Make sure that the ${type.name} class is annotated with an @Directive decorator.`);\n  }\n\n  if (!directiveDef.standalone) {\n    throw new RuntimeError(\n        RuntimeErrorCode.HOST_DIRECTIVE_NOT_STANDALONE,\n        `Host directive ${directiveDef.type.name} must be standalone.`);\n  }\n\n  if (matchedDefs.indexOf(directiveDef) > -1) {\n    throw new RuntimeError(\n        RuntimeErrorCode.DUPLICATE_DIRECTITVE,\n        `Directive ${directiveDef.type.name} matches multiple times on the same element. ` +\n            `Directives can only match an element once.`);\n  }\n\n  validateMappings('input', directiveDef, hostDirectiveConfig.inputs);\n  validateMappings('output', directiveDef, hostDirectiveConfig.outputs);\n}\n\n/**\n * Checks that the host directive inputs/outputs configuration is valid.\n * @param bindingType Kind of binding that is being validated. Used in the error message.\n * @param def Definition of the host directive that is being validated against.\n * @param hostDirectiveBindings Host directive mapping object that shold be validated.\n */\nfunction validateMappings(\n    bindingType: 'input'|'output', def: DirectiveDef<unknown>,\n    hostDirectiveBindings: HostDirectiveBindingMap) {\n  const className = def.type.name;\n  const bindings: Record<string, string> = bindingType === 'input' ? def.inputs : def.outputs;\n\n  for (const publicName in hostDirectiveBindings) {\n    if (hostDirectiveBindings.hasOwnProperty(publicName)) {\n      if (!bindings.hasOwnProperty(publicName)) {\n        throw new RuntimeError(\n            RuntimeErrorCode.HOST_DIRECTIVE_UNDEFINED_BINDING,\n            `Directive ${className} does not have an ${bindingType} with a public name of ${\n                publicName}.`);\n      }\n\n      const remappedPublicName = hostDirectiveBindings[publicName];\n\n      if (bindings.hasOwnProperty(remappedPublicName) &&\n          bindings[remappedPublicName] !== publicName) {\n        throw new RuntimeError(\n            RuntimeErrorCode.HOST_DIRECTIVE_CONFLICTING_ALIAS,\n            `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${\n                remappedPublicName}, because it already has a different ${\n                bindingType} with the same public name.`);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function isIterable(obj: any): obj is Iterable<any> {\n  return obj !== null && typeof obj === 'object' && obj[Symbol.iterator] !== undefined;\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&  // JS Map are iterables but return entries as [k, v]\n       Symbol.iterator in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual<T>(\n    a: Iterable<T>, b: Iterable<T>, comparator: (a: T, b: T) => boolean): boolean {\n  const iterator1 = a[Symbol.iterator]();\n  const iterator2 = b[Symbol.iterator]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike<T>(obj: Iterable<T>, fn: (p: T) => void) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[Symbol.iterator]();\n    let item: IteratorResult<T, any>;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {areIterablesEqual, isListLikeIterable} from './iterable';\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return Object.is(a, b);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertIndexInRange, assertLessThan, assertNotSame} from '../util/assert';\nimport {devModeEqual} from '../util/comparison';\n\nimport {getExpressionChangedErrorDetails, throwErrorIfNoChangesMode} from './errors';\nimport {LView} from './interfaces/view';\nimport {isInCheckNoChangesMode} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n// TODO(misko): consider inlining\n/** Updates binding and returns the value. */\nexport function updateBinding(lView: LView, bindingIndex: number, value: any): any {\n  return lView[bindingIndex] = value;\n}\n\n\n/** Gets the current binding value. */\nexport function getBinding(lView: LView, bindingIndex: number): any {\n  ngDevMode && assertIndexInRange(lView, bindingIndex);\n  ngDevMode &&\n      assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n  return lView[bindingIndex];\n}\n\n/**\n * Updates binding if changed, then returns whether it was updated.\n *\n * This function also checks the `CheckNoChangesMode` and throws if changes are made.\n * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE\n * behavior.\n *\n * @param lView current `LView`\n * @param bindingIndex The binding in the `LView` to check\n * @param value New value to check against `lView[bindingIndex]`\n * @returns `true` if the bindings has changed. (Throws if binding has changed during\n *          `CheckNoChangesMode`)\n */\nexport function bindingUpdated(lView: LView, bindingIndex: number, value: any): boolean {\n  ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n  ngDevMode &&\n      assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);\n  const oldValue = lView[bindingIndex];\n\n  if (Object.is(oldValue, value)) {\n    return false;\n  } else {\n    if (ngDevMode && isInCheckNoChangesMode()) {\n      // View engine didn't report undefined values as changed on the first checkNoChanges pass\n      // (before the change detection was run).\n      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;\n      if (!devModeEqual(oldValueToCompare, value)) {\n        const details =\n            getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);\n        throwErrorIfNoChangesMode(\n            oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);\n      }\n      // There was a change, but the `devModeEqual` decided that the change is exempt from an error.\n      // For this reason we exit as if no change. The early exit is needed to prevent the changed\n      // value to be written into `LView` (If we would write the new value that we would not see it\n      // as change on next CD.)\n      return false;\n    }\n    lView[bindingIndex] = value;\n    return true;\n  }\n}\n\n/** Updates 2 bindings if changed, then returns whether either was updated. */\nexport function bindingUpdated2(lView: LView, bindingIndex: number, exp1: any, exp2: any): boolean {\n  const different = bindingUpdated(lView, bindingIndex, exp1);\n  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n\n/** Updates 3 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated3(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n\n/** Updates 4 bindings if changed, then returns whether any was updated. */\nexport function bindingUpdated4(\n    lView: LView, bindingIndex: number, exp1: any, exp2: any, exp3: any, exp4: any): boolean {\n  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of `[attr.title]=\"value\"`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nexport function ɵɵattribute(\n    name: string, value: any, sanitizer?: SanitizerFn|null,\n    namespace?: string): typeof ɵɵattribute {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);\n  }\n  return ɵɵattribute;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertLessThan} from '../../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4} from '../bindings';\nimport {LView} from '../interfaces/view';\nimport {getBindingIndex, incrementBindingIndex, nextBindingIndex, setBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {renderStringify} from '../util/stringify_utils';\n\n\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function interpolationV(lView: LView, values: any[]): string|NO_CHANGE {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let isBindingUpdated = false;\n  let bindingIndex = getBindingIndex();\n\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;\n  }\n  setBindingIndex(bindingIndex);\n\n  if (!isBindingUpdated) {\n    return NO_CHANGE;\n  }\n\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport function interpolation1(lView: LView, prefix: string, v0: any, suffix: string): string|\n    NO_CHANGE {\n  const different = bindingUpdated(lView, nextBindingIndex(), v0);\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 2 expressions.\n */\nexport function interpolation2(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated2(lView, bindingIndex, v0, v1);\n  incrementBindingIndex(2);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 3 expressions.\n */\nexport function interpolation3(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);\n  incrementBindingIndex(3);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Create an interpolation binding with 4 expressions.\n */\nexport function interpolation4(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  incrementBindingIndex(4);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 5 expressions.\n */\nexport function interpolation5(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  incrementBindingIndex(5);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 6 expressions.\n */\nexport function interpolation6(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  incrementBindingIndex(6);\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n      NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 7 expressions.\n */\nexport function interpolation7(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string|\n    NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  incrementBindingIndex(7);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + suffix :\n                     NO_CHANGE;\n}\n\n/**\n * Creates an interpolation binding with 8 expressions.\n */\nexport function interpolation8(\n    lView: LView, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): string|NO_CHANGE {\n  const bindingIndex = getBindingIndex();\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  incrementBindingIndex(8);\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 +\n          renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 +\n          renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n                     NO_CHANGE;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementAttributeInternal, storePropertyBindingMetadata} from './shared';\n\n\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate1(\n    attrName: string, prefix: string, v0: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵattributeInterpolate1;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate2(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵattributeInterpolate2;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate3(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1,\n            suffix);\n  }\n  return ɵɵattributeInterpolate3;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate4(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2,\n            suffix);\n  }\n  return ɵɵattributeInterpolate4;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate5(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2,\n            i3, suffix);\n  }\n  return ɵɵattributeInterpolate5;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate6(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string, sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2,\n            i3, i4, suffix);\n  }\n  return ɵɵattributeInterpolate6;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate7(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2,\n            i3, i4, i5, suffix);\n  }\n  return ɵɵattributeInterpolate7;\n}\n\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolate8(\n    attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2,\n            i3, i4, i5, i6, suffix);\n  }\n  return ɵɵattributeInterpolate8;\n}\n\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵattributeInterpolateV(\n    attrName: string, values: any[], sanitizer?: SanitizerFn,\n    namespace?: string): typeof ɵɵattributeInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    const tNode = getSelectedTNode();\n    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          getTView().data, tNode, 'attr.' + attrName,\n          getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);\n    }\n  }\n  return ɵɵattributeInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getComponentViewByInstance} from '../context_discovery';\nimport {TVIEW} from '../interfaces/view';\n\nimport {detectChangesInternal} from './shared';\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nexport function detectChanges(component: {}): void {\n  const view = getComponentViewByInstance(component);\n  detectChangesInternal(view[TVIEW], view, component);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertFirstCreatePass} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {ComponentTemplate} from '../interfaces/definition';\nimport {LocalRefExtractor, TAttributes, TContainerNode, TNodeType} from '../interfaces/node';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView, TViewType} from '../interfaces/view';\nimport {appendChild} from '../node_manipulation';\nimport {getLView, getTView, setCurrentTNode} from '../state';\nimport {getConstant} from '../util/view_utils';\n\nimport {addToViewTree, createDirectivesInstances, createLContainer, createTView, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\n\nfunction templateFirstCreatePass(\n    index: number, tView: TView, lView: LView, templateFn: ComponentTemplate<any>|null,\n    decls: number, vars: number, tagName?: string|null, attrsIndex?: number|null,\n    localRefsIndex?: number|null): TContainerNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n  const tViewConsts = tView.consts;\n  // TODO(pk): refactor getOrCreateTNode to have the \"create\" only version\n  const tNode = getOrCreateTNode(\n      tView, index, TNodeType.Container, tagName || null,\n      getConstant<TAttributes>(tViewConsts, attrsIndex));\n\n  resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n  registerPostOrderHooks(tView, tNode);\n\n  const embeddedTView = tNode.tView = createTView(\n      TViewType.Embedded, tNode, templateFn, decls, vars, tView.directiveRegistry,\n      tView.pipeRegistry, null, tView.schemas, tViewConsts);\n\n  if (tView.queries !== null) {\n    tView.queries.template(tView, tNode);\n    embeddedTView.queries = tView.queries.embeddedTView(tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the `consts` array.\n * @param localRefs Index of the local references in the `consts` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplate(\n    index: number, templateFn: ComponentTemplate<any>|null, decls: number, vars: number,\n    tagName?: string|null, attrsIndex?: number|null, localRefsIndex?: number|null,\n    localRefExtractor?: LocalRefExtractor) {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  const tNode = tView.firstCreatePass ? templateFirstCreatePass(\n                                            adjustedIndex, tView, lView, templateFn, decls, vars,\n                                            tagName, attrsIndex, localRefsIndex) :\n                                        tView.data[adjustedIndex] as TContainerNode;\n  setCurrentTNode(tNode, false);\n\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  appendChild(tView, lView, comment, tNode);\n  attachPatchData(comment, lView);\n\n  addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode, localRefExtractor);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getContextLView} from '../state';\nimport {load} from '../util/view_utils';\n\n\n/** Store a value in the `data` at a given `index`. */\nexport function store<T>(tView: TView, lView: LView, index: number, value: T): void {\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  if (index >= tView.data.length) {\n    tView.data[index] = null;\n    tView.blueprint[index] = null;\n  }\n  lView[index] = value;\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nexport function ɵɵreference<T>(index: number) {\n  const contextLView = getContextLView();\n  return load<T>(contextLView, HEADER_OFFSET + index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {TNode} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {LView, RENDERER, TView} from '../interfaces/view';\nimport {getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\n\nimport {elementPropertyInternal, setInputsForProperty, storePropertyBindingMetadata} from './shared';\n\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵproperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵproperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵproperty;\n}\n\n/**\n * Given `<div style=\"...\" my-dir>` and `MyDir` with `@Input('style')` we need to write to\n * directive input.\n */\nexport function setDirectiveInputsWhichShadowsStyling(\n    tView: TView, tNode: TNode, lView: LView, value: any, isClassBased: boolean) {\n  const inputs = tNode.inputs!;\n  const property = isClassBased ? 'class' : 'style';\n  // We support both 'class' and `className` hence the fallback.\n  setInputsForProperty(tView, lView, inputs[property], property, value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertFirstCreatePass, assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {hasClassInput, hasStyleInput, TAttributes, TElementNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild, createElementNode, setupStaticAttributes} from '../node_manipulation';\nimport {decreaseElementDepthCount, getBindingIndex, getCurrentTNode, getElementDepthCount, getLView, getNamespace, getTView, increaseElementDepthCount, isCurrentTNodeParent, setCurrentTNode, setCurrentTNodeAsNotParent} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {getConstant} from '../util/view_utils';\n\nimport {validateElementIsKnown} from './element_validation';\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\nimport {createDirectivesInstances, executeContentQueries, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\n\nfunction elementStartFirstCreatePass(\n    index: number, tView: TView, lView: LView, name: string, attrsIndex?: number|null,\n    localRefsIndex?: number): TElementNode {\n  ngDevMode && assertFirstCreatePass(tView);\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.Element, name, attrs);\n\n  resolveDirectives(tView, lView, tNode, getConstant<string[]>(tViewConsts, localRefsIndex));\n\n  if (tNode.attrs !== null) {\n    computeStaticStyling(tNode, tNode.attrs, false);\n  }\n\n  if (tNode.mergedAttrs !== null) {\n    computeStaticStyling(tNode, tNode.mergedAttrs, true);\n  }\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nexport function ɵɵelementStart(\n    index: number, name: string, attrsIndex?: number|null,\n    localRefsIndex?: number): typeof ɵɵelementStart {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = HEADER_OFFSET + index;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'elements should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const renderer = lView[RENDERER];\n  const tNode = tView.firstCreatePass ?\n      elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) :\n      tView.data[adjustedIndex] as TElementNode;\n  const native = lView[adjustedIndex] = createElementNode(renderer, name, getNamespace());\n  const hasDirectives = isDirectiveHost(tNode);\n\n  if (ngDevMode && tView.firstCreatePass) {\n    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);\n  }\n\n  setCurrentTNode(tNode, true);\n  setupStaticAttributes(renderer, native, tNode);\n\n  if ((tNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // In the i18n case, the translation may have removed this element, so only add it if it is not\n    // detached. See `TNodeType.Placeholder` and `LFrame.inI18n` for more context.\n    appendChild(tView, lView, native, tNode);\n  }\n\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n\n  if (hasDirectives) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n  if (localRefsIndex !== null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n  return ɵɵelementStart;\n}\n\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementEnd(): typeof ɵɵelementEnd {\n  let currentTNode = getCurrentTNode()!;\n  ngDevMode && assertDefined(currentTNode, 'No parent node to close.');\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(getCurrentTNode());\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  const tNode = currentTNode;\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode);\n\n\n  decreaseElementDepthCount();\n\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n\n  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);\n  }\n\n  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {\n    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);\n  }\n  return ɵɵelementEnd;\n}\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the `consts` array.\n * @param localRefsIndex Index of the element's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelement(\n    index: number, name: string, attrsIndex?: number|null,\n    localRefsIndex?: number): typeof ɵɵelement {\n  ɵɵelementStart(index, name, attrsIndex, localRefsIndex);\n  ɵɵelementEnd();\n  return ɵɵelement;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {assertHasParent} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {registerPostOrderHooks} from '../hooks';\nimport {TAttributes, TElementContainerNode, TNodeType} from '../interfaces/node';\nimport {isContentQueryHost, isDirectiveHost} from '../interfaces/type_checks';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {appendChild} from '../node_manipulation';\nimport {getBindingIndex, getCurrentTNode, getLView, getTView, isCurrentTNodeParent, setCurrentTNode, setCurrentTNodeAsNotParent} from '../state';\nimport {computeStaticStyling} from '../styling/static_styling';\nimport {getConstant} from '../util/view_utils';\n\nimport {createDirectivesInstances, executeContentQueries, getOrCreateTNode, resolveDirectives, saveResolvedLocalsInData} from './shared';\n\nfunction elementContainerStartFirstCreatePass(\n    index: number, tView: TView, lView: LView, attrsIndex?: number|null,\n    localRefsIndex?: number): TElementContainerNode {\n  ngDevMode && ngDevMode.firstCreatePass++;\n\n  const tViewConsts = tView.consts;\n  const attrs = getConstant<TAttributes>(tViewConsts, attrsIndex);\n  const tNode = getOrCreateTNode(tView, index, TNodeType.ElementContainer, 'ng-container', attrs);\n\n  // While ng-container doesn't necessarily support styling, we use the style context to identify\n  // and execute directives on the ng-container.\n  if (attrs !== null) {\n    computeStaticStyling(tNode, attrs, true);\n  }\n\n  const localRefs = getConstant<string[]>(tViewConsts, localRefsIndex);\n  resolveDirectives(tView, lView, tNode, localRefs);\n\n  if (tView.queries !== null) {\n    tView.queries.elementStart(tView, tNode);\n  }\n\n  return tNode;\n}\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerStart(\n    index: number, attrsIndex?: number|null,\n    localRefsIndex?: number): typeof ɵɵelementContainerStart {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'element containers should be created before any bindings');\n\n  const tNode = tView.firstCreatePass ?\n      elementContainerStartFirstCreatePass(\n          adjustedIndex, tView, lView, attrsIndex, localRefsIndex) :\n      tView.data[adjustedIndex] as TElementContainerNode;\n  setCurrentTNode(tNode, true);\n\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = lView[adjustedIndex] =\n      lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');\n  appendChild(tView, lView, native, tNode);\n  attachPatchData(native, lView);\n\n  if (isDirectiveHost(tNode)) {\n    createDirectivesInstances(tView, lView, tNode);\n    executeContentQueries(tView, tNode, lView);\n  }\n\n  if (localRefsIndex != null) {\n    saveResolvedLocalsInData(lView, tNode);\n  }\n\n  return ɵɵelementContainerStart;\n}\n\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainerEnd(): typeof ɵɵelementContainerEnd {\n  let currentTNode = getCurrentTNode()!;\n  const tView = getTView();\n  if (isCurrentTNodeParent()) {\n    setCurrentTNodeAsNotParent();\n  } else {\n    ngDevMode && assertHasParent(currentTNode);\n    currentTNode = currentTNode.parent!;\n    setCurrentTNode(currentTNode, false);\n  }\n\n  ngDevMode && assertTNodeType(currentTNode, TNodeType.ElementContainer);\n\n  if (tView.firstCreatePass) {\n    registerPostOrderHooks(tView, currentTNode);\n    if (isContentQueryHost(currentTNode)) {\n      tView.queries!.elementEnd(currentTNode);\n    }\n  }\n  return ɵɵelementContainerEnd;\n}\n\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the `consts` array.\n * @param localRefsIndex Index of the container's local references in the `consts` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport function ɵɵelementContainer(\n    index: number, attrsIndex?: number|null, localRefsIndex?: number): typeof ɵɵelementContainer {\n  ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);\n  ɵɵelementContainerEnd();\n  return ɵɵelementContainer;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {OpaqueViewState} from '../interfaces/view';\nimport {getLView} from '../state';\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nexport function ɵɵgetCurrentView(): OpaqueViewState {\n  return getLView() as any as OpaqueViewState;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscribable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise<T = any>(obj: any): obj is Promise<T> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is a Subscribable\n */\nexport function isSubscribable(obj: any|Subscribable<any>): obj is Subscribable<any> {\n  return !!obj && typeof obj.subscribe === 'function';\n}\n\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the `obj` is `Subscribable`, since `Observable`\n * types need additional methods, such as `lift()`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * `subscribe()` method, and RxJS has mechanisms to wrap `Subscribable` objects\n * into `Observable` as needed.\n */\nexport const isObservable =\n    isSubscribable as ((obj: any|Observable<any>) => obj is Observable<any>);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {assertIndexInRange} from '../../util/assert';\nimport {isObservable} from '../../util/lang';\nimport {PropertyAliasValue, TNode, TNodeType} from '../interfaces/node';\nimport {GlobalTargetResolver, Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {isDirectiveHost} from '../interfaces/type_checks';\nimport {CLEANUP, CONTEXT, LView, RENDERER, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {profiler, ProfilerEvent} from '../profiler';\nimport {getCurrentDirectiveDef, getCurrentTNode, getLView, getTView} from '../state';\nimport {getComponentLViewByIndex, getNativeByTNode, unwrapRNode} from '../util/view_utils';\n\nimport {getOrCreateLViewCleanup, getOrCreateTViewCleanup, handleError, loadComponentRenderer, markViewDirty} from './shared';\n\n\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener - this argument is a reminder\n *     from the Renderer3 infrastructure and should be removed from the instruction arguments\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵlistener(\n    eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean,\n    eventTargetResolver?: GlobalTargetResolver): typeof ɵɵlistener {\n  const lView = getLView<{}|null>();\n  const tView = getTView();\n  const tNode = getCurrentTNode()!;\n  listenerInternal(\n      tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);\n  return ɵɵlistener;\n}\n\n/**\n * Registers a synthetic host listener (e.g. `(@foo.start)`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. `@HostListener('@foo.start')`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for `listener`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostListener(\n    eventName: string, listenerFn: (e?: any) => any): typeof ɵɵsyntheticHostListener {\n  const tNode = getCurrentTNode()!;\n  const lView = getLView<{}|null>();\n  const tView = getTView();\n  const currentDef = getCurrentDirectiveDef(tView.data);\n  const renderer = loadComponentRenderer(currentDef, tNode, lView);\n  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);\n  return ɵɵsyntheticHostListener;\n}\n\n/**\n * A utility function that checks if a given element has already an event handler registered for an\n * event with a specified name. The TView.cleanup data structure is used to find out which events\n * are registered for a given element.\n */\nfunction findExistingListener(\n    tView: TView, lView: LView, eventName: string, tNodeIdx: number): ((e?: any) => any)|null {\n  const tCleanup = tView.cleanup;\n  if (tCleanup != null) {\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      const cleanupEventName = tCleanup[i];\n      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {\n        // We have found a matching event name on the same node but it might not have been\n        // registered yet, so we must explicitly verify entries in the LView cleanup data\n        // structures.\n        const lCleanup = lView[CLEANUP]!;\n        const listenerIdxInLCleanup = tCleanup[i + 2];\n        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;\n      }\n      // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or\n      // 2-element entries (for directive and queries destroy hooks). As such we can encounter\n      // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements\n      // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check\n      // documentation of TView.cleanup for more details of this data structure layout.\n      if (typeof cleanupEventName === 'string') {\n        i += 2;\n      }\n    }\n  }\n  return null;\n}\n\nfunction listenerInternal(\n    tView: TView, lView: LView<{}|null>, renderer: Renderer, tNode: TNode, eventName: string,\n    listenerFn: (e?: any) => any, eventTargetResolver?: GlobalTargetResolver): void {\n  const isTNodeDirectiveHost = isDirectiveHost(tNode);\n  const firstCreatePass = tView.firstCreatePass;\n  const tCleanup: false|any[] = firstCreatePass && getOrCreateTViewCleanup(tView);\n  const context = lView[CONTEXT];\n\n  // When the ɵɵlistener instruction was generated and is executed we know that there is either a\n  // native listener or a directive output on this element. As such we we know that we will have to\n  // register a listener and store its cleanup function on LView.\n  const lCleanup = getOrCreateLViewCleanup(lView);\n\n  ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n\n  let processOutputs = true;\n\n  // Adding a native event listener is applicable when:\n  // - The corresponding TNode represents a DOM element.\n  // - The event target has a resolver (usually resulting in a global object,\n  //   such as `window` or `document`).\n  if ((tNode.type & TNodeType.AnyRNode) || eventTargetResolver) {\n    const native = getNativeByTNode(tNode, lView) as RElement;\n    const target = eventTargetResolver ? eventTargetResolver(native) : native;\n    const lCleanupIndex = lCleanup.length;\n    const idxOrTargetGetter = eventTargetResolver ?\n        (_lView: LView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) :\n        tNode.index;\n\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n\n    // There might be cases where multiple directives on the same element try to register an event\n    // handler function for the same event. In this situation we want to avoid registration of\n    // several native listeners as each registration would be intercepted by NgZone and\n    // trigger change detection. This would mean that a single user action would result in several\n    // change detections being invoked. To avoid this situation we want to have only one call to\n    // native handler registration (for the same element and same type of event).\n    //\n    // In order to have just one native event handler in presence of multiple handler functions,\n    // we just register a first handler function as a native event listener and then chain\n    // (coalesce) other handler functions on top of the first native handler function.\n    let existingListener = null;\n    // Please note that the coalescing described here doesn't happen for events specifying an\n    // alternative target (ex. (document:click)) - this is to keep backward compatibility with the\n    // view engine.\n    // Also, we don't have to search for existing listeners is there are no directives\n    // matching on a given node as we can't register multiple event handlers for the same event in\n    // a template (this would mean having duplicate attributes).\n    if (!eventTargetResolver && isTNodeDirectiveHost) {\n      existingListener = findExistingListener(tView, lView, eventName, tNode.index);\n    }\n    if (existingListener !== null) {\n      // Attach a new listener to coalesced listeners list, maintaining the order in which\n      // listeners are registered. For performance reasons, we keep a reference to the last\n      // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through\n      // the entire set each time we need to add a new listener.\n      const lastListenerFn = (<any>existingListener).__ngLastListenerFn__ || existingListener;\n      lastListenerFn.__ngNextListenerFn__ = listenerFn;\n      (<any>existingListener).__ngLastListenerFn__ = listenerFn;\n      processOutputs = false;\n    } else {\n      listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n      const cleanupFn = renderer.listen(target as RElement, eventName, listenerFn);\n      ngDevMode && ngDevMode.rendererAddEventListener++;\n\n      lCleanup.push(listenerFn, cleanupFn);\n      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);\n    }\n\n  } else {\n    // Even if there is no native listener to add, we still need to wrap the listener so that OnPush\n    // ancestors are marked dirty when an event occurs.\n    listenerFn = wrapListener(tNode, lView, context, listenerFn, false /** preventDefault */);\n  }\n\n  // subscribe to directive outputs\n  const outputs = tNode.outputs;\n  let props: PropertyAliasValue|undefined;\n  if (processOutputs && outputs !== null && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      for (let i = 0; i < propsLength; i += 2) {\n        const index = props[i] as number;\n        ngDevMode && assertIndexInRange(lView, index);\n        const minifiedName = props[i + 1];\n        const directiveInstance = lView[index];\n        const output = directiveInstance[minifiedName];\n\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(`@Output ${minifiedName} not initialized in '${\n              directiveInstance.constructor.name}'.`);\n        }\n\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n\nfunction executeListenerWithErrorHandling(\n    lView: LView, context: {}|null, listenerFn: (e?: any) => any, e: any): boolean {\n  try {\n    profiler(ProfilerEvent.OutputStart, context, listenerFn);\n    // Only explicitly returning false from a listener should preventDefault\n    return listenerFn(e) !== false;\n  } catch (error) {\n    handleError(lView, error);\n    return false;\n  } finally {\n    profiler(ProfilerEvent.OutputEnd, context, listenerFn);\n  }\n}\n\n/**\n * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,\n * if applicable.\n *\n * @param tNode The TNode associated with this listener\n * @param lView The LView that contains this listener\n * @param listenerFn The listener function to call\n * @param wrapWithPreventDefault Whether or not to prevent default behavior\n * (the procedural renderer does this already, so in those cases, we should skip)\n */\nfunction wrapListener(\n    tNode: TNode, lView: LView<{}|null>, context: {}|null, listenerFn: (e?: any) => any,\n    wrapWithPreventDefault: boolean): EventListener {\n  // Note: we are performing most of the work in the listener function itself\n  // to optimize listener registration.\n  return function wrapListenerIn_markDirtyAndPreventDefault(e: any) {\n    // Ivy uses `Function` as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.\n    if (e === Function) {\n      return listenerFn;\n    }\n\n    // In order to be backwards compatible with View Engine, events on component host nodes\n    // must also mark the component view itself dirty (i.e. the view that it owns).\n    const startView =\n        tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;\n    markViewDirty(startView);\n\n    let result = executeListenerWithErrorHandling(lView, context, listenerFn, e);\n    // A just-invoked listener function might have coalesced listeners so we need to check for\n    // their presence and invoke as needed.\n    let nextListenerFn = (<any>wrapListenerIn_markDirtyAndPreventDefault).__ngNextListenerFn__;\n    while (nextListenerFn) {\n      // We should prevent default if any of the listeners explicitly return false\n      result = executeListenerWithErrorHandling(lView, context, nextListenerFn, e) && result;\n      nextListenerFn = (<any>nextListenerFn).__ngNextListenerFn__;\n    }\n\n    if (wrapWithPreventDefault && result === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n\n    return result;\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {nextContextImpl} from '../state';\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nexport function ɵɵnextContext<T = any>(level: number = 1): T {\n  return nextContextImpl(level);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {newArray} from '../../util/array_utils';\nimport {TAttributes, TElementNode, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {ProjectionSlots} from '../interfaces/projection';\nimport {DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, T_HOST} from '../interfaces/view';\nimport {applyProjection} from '../node_manipulation';\nimport {getProjectAsAttrValue, isNodeMatchingSelectorList, isSelectorInSelectorList} from '../node_selector_matcher';\nimport {getLView, getTView, setCurrentTNodeAsNotParent} from '../state';\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Checks a given node against matching projection slots and returns the\n * determined slot index. Returns \"null\" if no slot matched the given node.\n *\n * This function takes into account the parsed ngProjectAs selector from the\n * node's attributes. If present, it will check whether the ngProjectAs selector\n * matches any of the projection slot selectors.\n */\nexport function matchingProjectionSlotIndex(tNode: TNode, projectionSlots: ProjectionSlots): number|\n    null {\n  let wildcardNgContentIndex = null;\n  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n  for (let i = 0; i < projectionSlots.length; i++) {\n    const slotValue = projectionSlots[i];\n    // The last wildcard projection slot should match all nodes which aren't matching\n    // any selector. This is necessary to be backwards compatible with view engine.\n    if (slotValue === '*') {\n      wildcardNgContentIndex = i;\n      continue;\n    }\n    // If we ran into an `ngProjectAs` attribute, we should match its parsed selector\n    // to the list of selectors, otherwise we fall back to matching against the node.\n    if (ngProjectAsAttrVal === null ?\n            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :\n            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {\n      return i;  // first matching selector \"captures\" a given node\n    }\n  }\n  return wildcardNgContentIndex;\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nexport function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void {\n  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST] as TElementNode;\n\n  if (!componentNode.projection) {\n    // If no explicit projection slots are defined, fall back to a single\n    // projection slot with the wildcard selector.\n    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;\n    const projectionHeads: (TNode|null)[] = componentNode.projection =\n        newArray(numProjectionSlots, null! as TNode);\n    const tails: (TNode|null)[] = projectionHeads.slice();\n\n    let componentChild: TNode|null = componentNode.child;\n\n    while (componentChild !== null) {\n      const slotIndex =\n          projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;\n\n      if (slotIndex !== null) {\n        if (tails[slotIndex]) {\n          tails[slotIndex]!.projectionNext = componentChild;\n        } else {\n          projectionHeads[slotIndex] = componentChild;\n        }\n        tails[slotIndex] = componentChild;\n      }\n\n      componentChild = componentChild.next;\n    }\n  }\n}\n\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nexport function ɵɵprojection(\n    nodeIndex: number, selectorIndex: number = 0, attrs?: TAttributes): void {\n  const lView = getLView();\n  const tView = getTView();\n  const tProjectionNode =\n      getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, TNodeType.Projection, null, attrs || null);\n\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n\n  // `<ng-content>` has no content\n  setCurrentTNodeAsNotParent();\n\n  if ((tProjectionNode.flags & TNodeFlags.isDetached) !== TNodeFlags.isDetached) {\n    // re-distribution of projectable nodes is stored on a component's view level\n    applyProjection(tView, lView, tProjectionNode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getBindingIndex, getLView, getSelectedTNode, getTView} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {elementPropertyInternal, storePropertyBindingMetadata} from './shared';\n\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div title=\"{{v0}}\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate('title', v0);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate(\n    propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate {\n  ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);\n  return ɵɵpropertyInterpolate;\n}\n\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate1(\n    propName: string, prefix: string, v0: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);\n  }\n  return ɵɵpropertyInterpolate1;\n}\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate2(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);\n  }\n  return ɵɵpropertyInterpolate2;\n}\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate3(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);\n  }\n  return ɵɵpropertyInterpolate3;\n}\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate4(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);\n  }\n  return ɵɵpropertyInterpolate4;\n}\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate5(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);\n  }\n  return ɵɵpropertyInterpolate5;\n}\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate6(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);\n  }\n  return ɵɵpropertyInterpolate6;\n}\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate7(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate7;\n}\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolate8(\n    propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    ngDevMode &&\n        storePropertyBindingMetadata(\n            tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6,\n            suffix);\n  }\n  return ɵɵpropertyInterpolate8;\n}\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is::\n *\n * ```ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new `@Inputs` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵpropertyInterpolateV(\n    propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  if (interpolatedValue !== NO_CHANGE) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(\n        tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);\n    if (ngDevMode) {\n      const interpolationInBetween = [values[0]];  // prefix\n      for (let i = 2; i < values.length; i += 2) {\n        interpolationInBetween.push(values[i]);\n      }\n      storePropertyBindingMetadata(\n          tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1,\n          ...interpolationInBetween);\n    }\n  }\n  return ɵɵpropertyInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray} from '../../util/array_utils';\nimport {assertNumber, assertNumberInRange} from '../../util/assert';\n\n/**\n * Value stored in the `TData` which is needed to re-concatenate the styling.\n *\n * See: `TStylingKeyPrimitive` and `TStylingStatic`\n */\nexport type TStylingKey = TStylingKeyPrimitive|TStylingStatic;\n\n\n/**\n * The primitive portion (`TStylingStatic` removed) of the value stored in the `TData` which is\n * needed to re-concatenate the styling.\n *\n * - `string`: Stores the property name. Used with `ɵɵstyleProp`/`ɵɵclassProp` instruction.\n * - `null`: Represents map, so there is no name. Used with `ɵɵstyleMap`/`ɵɵclassMap`.\n * - `false`: Represents an ignore case. This happens when `ɵɵstyleProp`/`ɵɵclassProp` instruction\n *   is combined with directive which shadows its input `@Input('class')`. That way the binding\n *   should not participate in the styling resolution.\n */\nexport type TStylingKeyPrimitive = string|null|false;\n\n/**\n * Store the static values for the styling binding.\n *\n * The `TStylingStatic` is just `KeyValueArray` where key `\"\"` (stored at location 0) contains the\n * `TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the\n * `\"\"` contains the wrapped value.\n *\n * When instructions are resolving styling they may need to look forward or backwards in the linked\n * list to resolve the value. For this reason we have to make sure that he linked list also contains\n * the static values. However the list only has space for one item per styling instruction. For this\n * reason we store the static values here as part of the `TStylingKey`. This means that the\n * resolution function when looking for a value needs to first look at the binding value, and than\n * at `TStylingKey` (if it exists).\n *\n * Imagine we have:\n *\n * ```\n * <div class=\"TEMPLATE\" my-dir>\n *\n * @Directive({\n *   host: {\n *     class: 'DIR',\n *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);\n *   }\n * })\n * ```\n *\n * In the above case the linked list will contain one item:\n *\n * ```\n *   // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`\n *   tData[10] = <TStylingStatic>[\n *     '': 'dynamic', // This is the wrapped value of `TStylingKey`\n *     'DIR': true,   // This is the default static value of directive binding.\n *   ];\n *   tData[10 + 1] = 0; // We don't have prev/next.\n *\n *   lView[10] = undefined;     // assume `ctx.exp` is `undefined`\n *   lView[10 + 1] = undefined; // Just normalized `lView[10]`\n * ```\n *\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into the static `TStylingStatic` too see if there is a default value for\n * `dynamic` (there is not). Therefore it is safe to remove it.\n *\n * If setting `true` case:\n * ```\n *   lView[10] = true;     // assume `ctx.exp` is `true`\n *   lView[10 + 1] = true; // Just normalized `lView[10]`\n * ```\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains\n * ```\n *   tNode.residualClass = [\n *     'TEMPLATE': true,\n *   ];\n * ```\n *\n * This means that it is safe to add class.\n */\nexport interface TStylingStatic extends KeyValueArray<any> {}\n\n/**\n * This is a branded number which contains previous and next index.\n *\n * When we come across styling instructions we need to store the `TStylingKey` in the correct\n * order so that we can re-concatenate the styling value in the desired priority.\n *\n * The insertion can happen either at the:\n * - end of template as in the case of coming across additional styling instruction in the template\n * - in front of the template in the case of coming across additional instruction in the\n *   `hostBindings`.\n *\n * We use `TStylingRange` to store the previous and next index into the `TData` where the template\n * bindings can be found.\n *\n * - bit 0 is used to mark that the previous index has a duplicate for current value.\n * - bit 1 is used to mark that the next index has a duplicate for the current value.\n * - bits 2-16 are used to encode the next/tail of the template.\n * - bits 17-32 are used to encode the previous/head of template.\n *\n * NODE: *duplicate* false implies that it is statically known that this binding will not collide\n * with other bindings and therefore there is no need to check other bindings. For example the\n * bindings in `<div [style.color]=\"exp\" [style.width]=\"exp\">` will never collide and will have\n * their bits set accordingly. Previous duplicate means that we may need to check previous if the\n * current binding is `null`. Next duplicate means that we may need to check next bindings if the\n * current binding is not `null`.\n *\n * NOTE: `0` has special significance and represents `null` as in no additional pointer.\n */\nexport interface TStylingRange {\n  __brand__: 'TStylingRange';\n}\n\n/**\n * Shift and masks constants for encoding two numbers into and duplicate info into a single number.\n */\nexport const enum StylingRange {\n  /// Number of bits to shift for the previous pointer\n  PREV_SHIFT = 17,\n  /// Previous pointer mask.\n  PREV_MASK = 0xFFFE0000,\n\n  /// Number of bits to shift for the next pointer\n  NEXT_SHIFT = 2,\n  /// Next pointer mask.\n  NEXT_MASK = 0x001FFFC,\n\n  // Mask to remove negative bit. (interpret number as positive)\n  UNSIGNED_MASK = 0x7FFF,\n\n  /**\n   * This bit is set if the previous bindings contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `width` binding will\n   * have previous duplicate set. The implication is that if `width` binding becomes `null`, it is\n   * necessary to defer the value to `map.width`. (Because `width` overwrites `map.width`.)\n   */\n  PREV_DUPLICATE = 0x02,\n\n  /**\n   * This bit is set to if the next binding contains a binding which could possibly cause a\n   * duplicate. For example: `<div [style]=\"map\" [style.width]=\"width\">`, the `map` binding will\n   * have next duplicate set. The implication is that if `map.width` binding becomes not `null`, it\n   * is necessary to defer the value to `width`. (Because `width` overwrites `map.width`.)\n   */\n  NEXT_DUPLICATE = 0x01,\n}\n\n\nexport function toTStylingRange(prev: number, next: number): TStylingRange {\n  ngDevMode && assertNumberInRange(prev, 0, StylingRange.UNSIGNED_MASK);\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (prev << StylingRange.PREV_SHIFT | next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangePrev(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) >> StylingRange.PREV_SHIFT) & StylingRange.UNSIGNED_MASK;\n}\n\nexport function getTStylingRangePrevDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.PREV_DUPLICATE) ==\n      StylingRange.PREV_DUPLICATE;\n}\n\nexport function setTStylingRangePrev(\n    tStylingRange: TStylingRange, previous: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(previous, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.PREV_MASK) |\n          (previous << StylingRange.PREV_SHIFT)) as any;\n}\n\nexport function setTStylingRangePrevDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.PREV_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeNext(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_MASK) >> StylingRange.NEXT_SHIFT;\n}\n\nexport function setTStylingRangeNext(tStylingRange: TStylingRange, next: number): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  ngDevMode && assertNumberInRange(next, 0, StylingRange.UNSIGNED_MASK);\n  return (((tStylingRange as any as number) & ~StylingRange.NEXT_MASK) |  //\n          next << StylingRange.NEXT_SHIFT) as any;\n}\n\nexport function getTStylingRangeNextDuplicate(tStylingRange: TStylingRange): boolean {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) & StylingRange.NEXT_DUPLICATE) ===\n      StylingRange.NEXT_DUPLICATE;\n}\n\nexport function setTStylingRangeNextDuplicate(tStylingRange: TStylingRange): TStylingRange {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  return ((tStylingRange as any as number) | StylingRange.NEXT_DUPLICATE) as any;\n}\n\nexport function getTStylingRangeTail(tStylingRange: TStylingRange): number {\n  ngDevMode && assertNumber(tStylingRange, 'expected number');\n  const next = getTStylingRangeNext(tStylingRange);\n  return next === 0 ? getTStylingRangePrev(tStylingRange) : next;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueArray, keyValueArrayIndexOf} from '../../util/array_utils';\nimport {assertEqual, assertIndexInRange, assertNotEqual} from '../../util/assert';\nimport {assertFirstUpdatePass} from '../assert';\nimport {TNode} from '../interfaces/node';\nimport {getTStylingRangeNext, getTStylingRangePrev, setTStylingRangeNext, setTStylingRangeNextDuplicate, setTStylingRangePrev, setTStylingRangePrevDuplicate, toTStylingRange, TStylingKey, TStylingKeyPrimitive, TStylingRange} from '../interfaces/styling';\nimport {TData} from '../interfaces/view';\nimport {getTView} from '../state';\n\n\n/**\n * NOTE: The word `styling` is used interchangeably as style or class styling.\n *\n * This file contains code to link styling instructions together so that they can be replayed in\n * priority order. The file exists because Ivy styling instruction execution order does not match\n * that of the priority order. The purpose of this code is to create a linked list so that the\n * instructions can be traversed in priority order when computing the styles.\n *\n * Assume we are dealing with the following code:\n * ```\n * @Component({\n *   template: `\n *     <my-cmp [style]=\" {color: '#001'} \"\n *             [style.color]=\" #002 \"\n *             dir-style-color-1\n *             dir-style-color-2> `\n * })\n * class ExampleComponent {\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#001'});\n *     ɵɵstyleProp('color', '#002');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-1]',\n * })\n * class Style1Directive {\n *   @HostBinding('style') style = {color: '#005'};\n *   @HostBinding('style.color') color = '#006';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#005'});\n *     ɵɵstyleProp('color', '#006');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `[dir-style-color-2]',\n * })\n * class Style2Directive {\n *   @HostBinding('style') style = {color: '#007'};\n *   @HostBinding('style.color') color = '#008';\n *\n *   static ngDir = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#007'});\n *     ɵɵstyleProp('color', '#008');\n *     ...\n *   }\n * }\n *\n * @Directive({\n *   selector: `my-cmp',\n * })\n * class MyComponent {\n *   @HostBinding('style') style = {color: '#003'};\n *   @HostBinding('style.color') color = '#004';\n *\n *   static ngComp = ... {\n *     ...\n *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`\n *     ɵɵstyleMap({color: '#003'});\n *     ɵɵstyleProp('color', '#004');\n *     ...\n *   }\n * }\n * ```\n *\n * The Order of instruction execution is:\n *\n * NOTE: the comment binding location is for illustrative purposes only.\n *\n * ```\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * ```\n *\n * The correct priority order of concatenation is:\n *\n * ```\n * // MyComponent\n *     ɵɵstyleMap({color: '#003'});   // Binding index: 20\n *     ɵɵstyleProp('color', '#004');  // Binding index: 22\n * // Style1Directive\n *     ɵɵstyleMap({color: '#005'});   // Binding index: 24\n *     ɵɵstyleProp('color', '#006');  // Binding index: 26\n * // Style2Directive\n *     ɵɵstyleMap({color: '#007'});   // Binding index: 28\n *     ɵɵstyleProp('color', '#008');  // Binding index: 30\n * // Template: (ExampleComponent)\n *     ɵɵstyleMap({color: '#001'});   // Binding index: 10\n *     ɵɵstyleProp('color', '#002');  // Binding index: 12\n * ```\n *\n * What color should be rendered?\n *\n * Once the items are correctly sorted in the list, the answer is simply the last item in the\n * concatenation list which is `#002`.\n *\n * To do so we keep a linked list of all of the bindings which pertain to this element.\n * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows\n * us to traverse them in the order of priority.\n *\n * |Idx|`TView.data`|`LView`          | Notes\n * |---|------------|-----------------|--------------\n * |...|            |                 |\n * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`\n * |11 |`30 | 12`   | ...             |\n * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`\n * |13 |`10 | 0`    | ...             |\n * |...|            |                 |\n * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`\n * |21 |`0 | 22`    | ...             |\n * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`\n * |23 |`20 | 24`   | ...             |\n * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`\n * |25 |`22 | 26`   | ...             |\n * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`\n * |27 |`24 | 28`   | ...             |\n * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`\n * |29 |`26 | 30`   | ...             |\n * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`\n * |31 |`28 | 10`   | ...             |\n *\n * The above data structure allows us to re-concatenate the styling no matter which data binding\n * changes.\n *\n * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next\n * duplicate bit. The duplicate bit if true says there either is a binding with the same name or\n * there is a map (which may contain the name). This information is useful in knowing if other\n * styles with higher priority need to be searched for overwrites.\n *\n * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in\n * `tnode_linked_list_spec.ts` for working example.\n */\nlet __unused_const_as_closure_does_not_like_standalone_comment_blocks__: undefined;\n\n/**\n * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked\n * list of styles and compute the duplicate flag.\n *\n * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.\n *\n * The function works by keeping track of `tStylingRange` which contains two pointers pointing to\n * the head/tail of the template portion of the styles.\n *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`\n *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`\n *\n * @param tData The `TData` to insert into.\n * @param tNode `TNode` associated with the styling element.\n * @param tStylingKey See `TStylingKey`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of\n *               template.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nexport function insertTStylingBinding(\n    tData: TData, tNode: TNode, tStylingKeyWithStatic: TStylingKey, index: number,\n    isHostBinding: boolean, isClassBinding: boolean): void {\n  ngDevMode && assertFirstUpdatePass(getTView());\n  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;\n  let tmplHead = getTStylingRangePrev(tBindings);\n  let tmplTail = getTStylingRangeNext(tBindings);\n\n  tData[index] = tStylingKeyWithStatic;\n  let isKeyDuplicateOfStatic = false;\n  let tStylingKey: TStylingKeyPrimitive;\n  if (Array.isArray(tStylingKeyWithStatic)) {\n    // We are case when the `TStylingKey` contains static fields as well.\n    const staticKeyValueArray = tStylingKeyWithStatic as KeyValueArray<any>;\n    tStylingKey = staticKeyValueArray[1];  // unwrap.\n    // We need to check if our key is present in the static so that we can mark it as duplicate.\n    if (tStylingKey === null ||\n        keyValueArrayIndexOf(staticKeyValueArray, tStylingKey as string) > 0) {\n      // tStylingKey is present in the statics, need to mark it as duplicate.\n      isKeyDuplicateOfStatic = true;\n    }\n  } else {\n    tStylingKey = tStylingKeyWithStatic;\n  }\n  if (isHostBinding) {\n    // We are inserting host bindings\n\n    // If we don't have template bindings then `tail` is 0.\n    const hasTemplateBindings = tmplTail !== 0;\n    // This is important to know because that means that the `head` can't point to the first\n    // template bindings (there are none.) Instead the head points to the tail of the template.\n    if (hasTemplateBindings) {\n      // template head's \"prev\" will point to last host binding or to 0 if no host bindings yet\n      const previousNode = getTStylingRangePrev(tData[tmplHead + 1] as TStylingRange);\n      tData[index + 1] = toTStylingRange(previousNode, tmplHead);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (previousNode !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[previousNode + 1] =\n            setTStylingRangeNext(tData[previousNode + 1] as TStylingRange, index);\n      }\n      // The \"previous\" of the template binding head should point to this host binding\n      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1] as TStylingRange, index);\n    } else {\n      tData[index + 1] = toTStylingRange(tmplHead, 0);\n      // if a host binding has already been registered, we need to update the next of that host\n      // binding to point to this one\n      if (tmplHead !== 0) {\n        // We need to update the template-tail value to point to us.\n        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1] as TStylingRange, index);\n      }\n      // if we don't have template, the head points to template-tail, and needs to be advanced.\n      tmplHead = index;\n    }\n  } else {\n    // We are inserting in template section.\n    // We need to set this binding's \"previous\" to the current template tail\n    tData[index + 1] = toTStylingRange(tmplTail, 0);\n    ngDevMode &&\n        assertEqual(\n            tmplHead !== 0 && tmplTail === 0, false,\n            'Adding template bindings after hostBindings is not allowed.');\n    if (tmplHead === 0) {\n      tmplHead = index;\n    } else {\n      // We need to update the previous value \"next\" to point to this binding\n      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1] as TStylingRange, index);\n    }\n    tmplTail = index;\n  }\n\n  // Now we need to update / compute the duplicates.\n  // Starting with our location search towards head (least priority)\n  if (isKeyDuplicateOfStatic) {\n    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1] as TStylingRange);\n  }\n  markDuplicates(tData, tStylingKey, index, true, isClassBinding);\n  markDuplicates(tData, tStylingKey, index, false, isClassBinding);\n  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);\n\n  tBindings = toTStylingRange(tmplHead, tmplTail);\n  if (isClassBinding) {\n    tNode.classBindings = tBindings;\n  } else {\n    tNode.styleBindings = tBindings;\n  }\n}\n\n/**\n * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.\n *\n * @param tNode `TNode` where the residual is stored.\n * @param tStylingKey `TStylingKey` to store.\n * @param tData `TData` associated with the current `LView`.\n * @param index location of where `tStyleValue` should be stored (and linked into list.)\n * @param isClassBinding True if the associated `tStylingKey` as a `class` styling.\n *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)\n */\nfunction markDuplicateOfResidualStyling(\n    tNode: TNode, tStylingKey: TStylingKey, tData: TData, index: number, isClassBinding: boolean) {\n  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;\n  if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&\n      keyValueArrayIndexOf(residual, tStylingKey) >= 0) {\n    // We have duplicate in the residual so mark ourselves as duplicate.\n    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1] as TStylingRange);\n  }\n}\n\n\n/**\n * Marks `TStyleValue`s as duplicates if another style binding in the list has the same\n * `TStyleValue`.\n *\n * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once\n * with it set to `false` to search both the previous as well as next items in the list.\n *\n * No duplicate case\n * ```\n *   [style.color]\n *   [style.width.px] <<- index\n *   [style.height.px]\n * ```\n *\n * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no\n * duplicates because `width` is not found in any other part of the linked list.\n *\n * Duplicate case\n * ```\n *   [style.color]\n *   [style.width.em]\n *   [style.width.px] <<- index\n * ```\n * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`\n * because `width` is found in the chain.\n *\n * Map case 1\n * ```\n *   [style.width.px]\n *   [style.color]\n *   [style]  <<- index\n * ```\n * In the above case adding `[style]` will produce a duplicate with any other bindings because\n * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.\n *\n * Map case 2\n * ```\n *   [style]\n *   [style.width.px]\n *   [style.color]  <<- index\n * ```\n * In the above case adding `[style.color]` will produce a duplicate because there is already a\n * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or\n * `width`.\n *\n * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.\n * NOTE: We use `style` as example, but same logic is applied to `class`es as well.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in\n *        the linked list.\n * @param index Starting location in the linked list to search from\n * @param isPrevDir Direction.\n *        - `true` for previous (lower priority);\n *        - `false` for next (higher priority).\n */\nfunction markDuplicates(\n    tData: TData, tStylingKey: TStylingKeyPrimitive, index: number, isPrevDir: boolean,\n    isClassBinding: boolean) {\n  const tStylingAtIndex = tData[index + 1] as TStylingRange;\n  const isMap = tStylingKey === null;\n  let cursor =\n      isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);\n  let foundDuplicate = false;\n  // We keep iterating as long as we have a cursor\n  // AND either:\n  // - we found what we are looking for, OR\n  // - we are a map in which case we have to continue searching even after we find what we were\n  //   looking for since we are a wild card and everything needs to be flipped to duplicate.\n  while (cursor !== 0 && (foundDuplicate === false || isMap)) {\n    ngDevMode && assertIndexInRange(tData, cursor);\n    const tStylingValueAtCursor = tData[cursor] as TStylingKey;\n    const tStyleRangeAtCursor = tData[cursor + 1] as TStylingRange;\n    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {\n      foundDuplicate = true;\n      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :\n                                      setTStylingRangePrevDuplicate(tStyleRangeAtCursor);\n    }\n    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :\n                         getTStylingRangeNext(tStyleRangeAtCursor);\n  }\n  if (foundDuplicate) {\n    // if we found a duplicate, than mark ourselves.\n    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :\n                                   setTStylingRangeNextDuplicate(tStylingAtIndex);\n  }\n}\n\n/**\n * Determines if two `TStylingKey`s are a match.\n *\n * When computing whether a binding contains a duplicate, we need to compare if the instruction\n * `TStylingKey` has a match.\n *\n * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:\n * - `color`\n *    - `color`    // Match another color\n *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction\n *    - `['', 'color', 'other', true]` // wrapped `color` so match\n *    - `['', null, 'other', true]`       // wrapped `null` so match\n *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`\n * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction\n *\n * @param tStylingKeyCursor\n * @param tStylingKey\n */\nfunction isStylingMatch(tStylingKeyCursor: TStylingKey, tStylingKey: TStylingKeyPrimitive) {\n  ngDevMode &&\n      assertNotEqual(\n          Array.isArray(tStylingKey), true, 'Expected that \\'tStylingKey\\' has been unwrapped');\n  if (\n      tStylingKeyCursor === null ||  // If the cursor is `null` it means that we have map at that\n                                     // location so we must assume that we have a match.\n      tStylingKey == null ||  // If `tStylingKey` is `null` then it is a map therefor assume that it\n                              // contains a match.\n      (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===\n          tStylingKey  // If the keys match explicitly than we are a match.\n  ) {\n    return true;\n  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {\n    // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has\n    // statics and we need to check those as well.\n    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=\n        0;  // see if we are matching the key\n  }\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, throwError} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\n\n/**\n * Stores the locations of key/value indexes while parsing styling.\n *\n * In case of `cssText` parsing the indexes are like so:\n * ```\n *   \"key1: value1; key2: value2; key3: value3\"\n *                  ^   ^ ^     ^             ^\n *                  |   | |     |             +-- textEnd\n *                  |   | |     +---------------- valueEnd\n *                  |   | +---------------------- value\n *                  |   +------------------------ keyEnd\n *                  +---------------------------- key\n * ```\n *\n * In case of `className` parsing the indexes are like so:\n * ```\n *   \"key1 key2 key3\"\n *         ^   ^    ^\n *         |   |    +-- textEnd\n *         |   +------------------------ keyEnd\n *         +---------------------------- key\n * ```\n * NOTE: `value` and `valueEnd` are used only for styles, not classes.\n */\ninterface ParserState {\n  textEnd: number;\n  key: number;\n  keyEnd: number;\n  value: number;\n  valueEnd: number;\n}\n// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)\nconst parserState: ParserState = {\n  textEnd: 0,\n  key: 0,\n  keyEnd: 0,\n  value: 0,\n  valueEnd: 0,\n};\n\n/**\n * Retrieves the last parsed `key` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedKey(text: string): string {\n  return text.substring(parserState.key, parserState.keyEnd);\n}\n\n/**\n * Retrieves the last parsed `value` of style.\n * @param text the text to substring the key from.\n */\nexport function getLastParsedValue(text: string): string {\n  return text.substring(parserState.value, parserState.valueEnd);\n}\n\n/**\n * Initializes `className` string for parsing and parses the first token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n * @param text `className` to parse\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassName(text: string): number {\n  resetParserState(text);\n  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses next `className` token.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n *   const key = getLastParsedKey();\n *   ...\n * }\n * ```\n *\n * @param text `className` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseClassNameNext` should resume.\n */\nexport function parseClassNameNext(text: string, index: number): number {\n  const end = parserState.textEnd;\n  if (end === index) {\n    return -1;\n  }\n  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);\n  return consumeWhitespace(text, index, end);\n}\n\n/**\n * Initializes `cssText` string for parsing and parses the first key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n * ```\n * @param text `cssText` to parse\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyle(text: string): number {\n  resetParserState(text);\n  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));\n}\n\n/**\n * Parses the next `cssText` key/values.\n *\n * This function is intended to be used in this format:\n * ```\n * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {\n *   const key = getLastParsedKey();\n *   const value = getLastParsedValue();\n *   ...\n * }\n *\n * @param text `cssText` to parse\n * @param index where the parsing should resume.\n * @returns index where the next invocation of `parseStyleNext` should resume.\n */\nexport function parseStyleNext(text: string, startIndex: number): number {\n  const end = parserState.textEnd;\n  let index = parserState.key = consumeWhitespace(text, startIndex, end);\n  if (end === index) {\n    // we reached an end so just quit\n    return -1;\n  }\n  index = parserState.keyEnd = consumeStyleKey(text, index, end);\n  index = consumeSeparator(text, index, end, CharCode.COLON);\n  index = parserState.value = consumeWhitespace(text, index, end);\n  index = parserState.valueEnd = consumeStyleValue(text, index, end);\n  return consumeSeparator(text, index, end, CharCode.SEMI_COLON);\n}\n\n/**\n * Reset the global state of the styling parser.\n * @param text The styling text to parse.\n */\nexport function resetParserState(text: string): void {\n  parserState.key = 0;\n  parserState.keyEnd = 0;\n  parserState.value = 0;\n  parserState.valueEnd = 0;\n  parserState.textEnd = text.length;\n}\n\n/**\n * Returns index of next non-whitespace character.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index of next non-whitespace character (May be the same as `start` if no whitespace at\n *          that location.)\n */\nexport function consumeWhitespace(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) <= CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Returns index of last char in class token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last char in class token.\n */\nexport function consumeClassToken(text: string, startIndex: number, endIndex: number): number {\n  while (startIndex < endIndex && text.charCodeAt(startIndex) > CharCode.SPACE) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all of the characters belonging to style key and token.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style key character.\n */\nexport function consumeStyleKey(text: string, startIndex: number, endIndex: number): number {\n  let ch: number;\n  while (startIndex < endIndex &&\n         ((ch = text.charCodeAt(startIndex)) === CharCode.DASH || ch === CharCode.UNDERSCORE ||\n          ((ch & CharCode.UPPER_CASE) >= CharCode.A && (ch & CharCode.UPPER_CASE) <= CharCode.Z) ||\n          (ch >= CharCode.ZERO && ch <= CharCode.NINE))) {\n    startIndex++;\n  }\n  return startIndex;\n}\n\n/**\n * Consumes all whitespace and the separator `:` after the style key.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after separator and surrounding whitespace.\n */\nexport function consumeSeparator(\n    text: string, startIndex: number, endIndex: number, separator: number): number {\n  startIndex = consumeWhitespace(text, startIndex, endIndex);\n  if (startIndex < endIndex) {\n    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {\n      malformedStyleError(text, String.fromCharCode(separator), startIndex);\n    }\n    startIndex++;\n  }\n  return startIndex;\n}\n\n\n/**\n * Consumes style value honoring `url()` and `\"\"` text.\n *\n * @param text Text to scan\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after last style value character.\n */\nexport function consumeStyleValue(text: string, startIndex: number, endIndex: number): number {\n  let ch1 = -1;  // 1st previous character\n  let ch2 = -1;  // 2nd previous character\n  let ch3 = -1;  // 3rd previous character\n  let i = startIndex;\n  let lastChIndex = i;\n  while (i < endIndex) {\n    const ch: number = text.charCodeAt(i++);\n    if (ch === CharCode.SEMI_COLON) {\n      return lastChIndex;\n    } else if (ch === CharCode.DOUBLE_QUOTE || ch === CharCode.SINGLE_QUOTE) {\n      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);\n    } else if (\n        startIndex ===\n            i - 4 &&  // We have seen only 4 characters so far \"URL(\" (Ignore \"foo_URL()\")\n        ch3 === CharCode.U &&\n        ch2 === CharCode.R && ch1 === CharCode.L && ch === CharCode.OPEN_PAREN) {\n      lastChIndex = i = consumeQuotedText(text, CharCode.CLOSE_PAREN, i, endIndex);\n    } else if (ch > CharCode.SPACE) {\n      // if we have a non-whitespace character then capture its location\n      lastChIndex = i;\n    }\n    ch3 = ch2;\n    ch2 = ch1;\n    ch1 = ch & CharCode.UPPER_CASE;\n  }\n  return lastChIndex;\n}\n\n/**\n * Consumes all of the quoted characters.\n *\n * @param text Text to scan\n * @param quoteCharCode CharCode of either `\"` or `'` quote or `)` for `url(...)`.\n * @param startIndex Starting index of character where the scan should start.\n * @param endIndex Ending index of character where the scan should end.\n * @returns Index after quoted characters.\n */\nexport function consumeQuotedText(\n    text: string, quoteCharCode: number, startIndex: number, endIndex: number): number {\n  let ch1 = -1;  // 1st previous character\n  let index = startIndex;\n  while (index < endIndex) {\n    const ch = text.charCodeAt(index++);\n    if (ch == quoteCharCode && ch1 !== CharCode.BACK_SLASH) {\n      return index;\n    }\n    if (ch == CharCode.BACK_SLASH && ch1 === CharCode.BACK_SLASH) {\n      // two back slashes cancel each other out. For example `\"\\\\\"` should properly end the\n      // quotation. (It should not assume that the last `\"` is escaped.)\n      ch1 = 0;\n    } else {\n      ch1 = ch;\n    }\n  }\n  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :\n                    new Error();\n}\n\nfunction malformedStyleError(text: string, expecting: string, index: number): never {\n  ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');\n  throw throwError(\n      `Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +\n      text.substring(index, index + 1) + '<<]' + text.slice(index + 1) +\n      `'. Expecting '${expecting}'.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SafeValue, unwrapSafeValue} from '../../sanitization/bypass';\nimport {KeyValueArray, keyValueArrayGet, keyValueArraySet} from '../../util/array_utils';\nimport {assertDefined, assertEqual, assertLessThan, assertNotEqual, throwError} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {concatStringsWithSpace, stringify} from '../../util/stringify';\nimport {assertFirstUpdatePass} from '../assert';\nimport {bindingUpdated} from '../bindings';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {AttributeMarker, TAttributes, TNode, TNodeFlags, TNodeType} from '../interfaces/node';\nimport {Renderer} from '../interfaces/renderer';\nimport {RElement} from '../interfaces/renderer_dom';\nimport {getTStylingRangeNext, getTStylingRangeNextDuplicate, getTStylingRangePrev, getTStylingRangePrevDuplicate, TStylingKey, TStylingRange} from '../interfaces/styling';\nimport {LView, RENDERER, TData, TView} from '../interfaces/view';\nimport {applyStyling} from '../node_manipulation';\nimport {getCurrentDirectiveDef, getLView, getSelectedIndex, getTView, incrementBindingIndex} from '../state';\nimport {insertTStylingBinding} from '../styling/style_binding_list';\nimport {getLastParsedKey, getLastParsedValue, parseClassName, parseClassNameNext, parseStyle, parseStyleNext} from '../styling/styling_parser';\nimport {NO_CHANGE} from '../tokens';\nimport {getNativeByIndex} from '../util/view_utils';\n\nimport {setDirectiveInputsWhichShadowsStyling} from './property';\n\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `styleMap` or any static styles that are\n * present from when the element was created with `styling`).\n *\n * Note that the styling element is updated as part of `stylingApply`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (`null` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleProp(\n    prop: string, value: string|number|SafeValue|undefined|null,\n    suffix?: string|null): typeof ɵɵstyleProp {\n  checkStylingProperty(prop, value, suffix, false);\n  return ɵɵstyleProp;\n}\n\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the `[class.foo]=\"exp\"` case and,\n * therefore, the class binding itself must already be allocated using\n * `styling` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nexport function ɵɵclassProp(className: string, value: boolean|undefined|null): typeof ɵɵclassProp {\n  checkStylingProperty(className, value, null, true);\n  return ɵɵclassProp;\n}\n\n\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the `[style]=\"exp\"` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via `styleProp`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nexport function ɵɵstyleMap(styles: {[styleName: string]: any}|string|undefined|null): void {\n  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);\n}\n\n\n/**\n * Parse text as style and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵstyleMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function styleStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {\n    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));\n  }\n}\n\n\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the `[class]=\"exp\"` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via `classProp`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until `stylingApply` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nexport function ɵɵclassMap(classes: {[className: string]: boolean|undefined|null}|string|undefined|\n                           null): void {\n  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);\n}\n\n/**\n * Parse text as class and add values to KeyValueArray.\n *\n * This code is pulled out to a separate function so that it can be tree shaken away if it is not\n * needed. It is only referenced from `ɵɵclassMap`.\n *\n * @param keyValueArray KeyValueArray to add parsed values to.\n * @param text text to parse.\n */\nexport function classStringParser(keyValueArray: KeyValueArray<any>, text: string): void {\n  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {\n    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);\n  }\n}\n\n/**\n * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.\n *\n * @param prop property name.\n * @param value binding value.\n * @param suffix suffix for the property (e.g. `em` or `px`)\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingProperty(\n    prop: string, value: any|NO_CHANGE, suffix: string|undefined|null,\n    isClassBased: boolean): void {\n  const lView = getLView();\n  const tView = getTView();\n  // Styling instructions use 2 slots per binding.\n  // 1. one for the value / TStylingKey\n  // 2. one for the intermittent-value / TStylingRange\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);\n  }\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    updateStyling(\n        tView, tNode, lView, lView[RENDERER], prop,\n        lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);\n  }\n}\n\n/**\n * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done for tree shaking purposes.\n * @param stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`\n *        have different parsers.)\n * @param value bound value from application\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nexport function checkStylingMap(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: any|NO_CHANGE, isClassBased: boolean): void {\n  const tView = getTView();\n  const bindingIndex = incrementBindingIndex(2);\n  if (tView.firstUpdatePass) {\n    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);\n  }\n  const lView = getLView();\n  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tView.data[getSelectedIndex()] as TNode;\n    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {\n      if (ngDevMode) {\n        // verify that if we are shadowing then `TData` is appropriately marked so that we skip\n        // processing this binding in styling resolution.\n        const tStylingKey = tView.data[bindingIndex];\n        assertEqual(\n            Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false,\n            'Styling linked list shadow input should be marked as \\'false\\'');\n      }\n      // VE does not concatenate the static portion like we are doing here.\n      // Instead VE just ignores the static completely if dynamic binding is present.\n      // Because of locality we have already set the static portion because we don't know if there\n      // is a dynamic portion until later. If we would ignore the static portion it would look like\n      // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong\n      // thing as it would think that the static portion was removed. For this reason we\n      // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.\n      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;\n      ngDevMode && isClassBased === false && staticPrefix !== null &&\n          assertEqual(\n              staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \\';\\'');\n      if (staticPrefix !== null) {\n        // We want to make sure that falsy values of `value` become empty strings.\n        value = concatStringsWithSpace(staticPrefix, value ? value : '');\n      }\n      // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.\n      // This takes over the `[style]` binding. (Same for `[class]`)\n      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);\n    } else {\n      updateStylingMap(\n          tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1],\n          lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value),\n          isClassBased, bindingIndex);\n    }\n  }\n}\n\n/**\n * Determines when the binding is in `hostBindings` section\n *\n * @param tView Current `TView`\n * @param bindingIndex index of binding which we would like if it is in `hostBindings`\n */\nfunction isInHostBindings(tView: TView, bindingIndex: number): boolean {\n  // All host bindings are placed after the expando section.\n  return bindingIndex >= tView.expandoStartIndex;\n}\n\n/**\n * Collects the necessary information to insert the binding into a linked list of style bindings\n * using `insertTStylingBinding`.\n *\n * @param tView `TView` where the binding linked list will be stored.\n * @param tStylingKey Property/key of the binding.\n * @param bindingIndex Index of binding associated with the `prop`\n * @param isClassBased `true` if `class` change (`false` if `style`)\n */\nfunction stylingFirstUpdatePass(\n    tView: TView, tStylingKey: TStylingKey, bindingIndex: number, isClassBased: boolean): void {\n  ngDevMode && assertFirstUpdatePass(tView);\n  const tData = tView.data;\n  if (tData[bindingIndex + 1] === null) {\n    // The above check is necessary because we don't clear first update pass until first successful\n    // (no exception) template execution. This prevents the styling instruction from double adding\n    // itself to the list.\n    // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the\n    // if so as not to read unnecessarily.\n    const tNode = tData[getSelectedIndex()] as TNode;\n    ngDevMode && assertDefined(tNode, 'TNode expected');\n    const isHostBindings = isInHostBindings(tView, bindingIndex);\n    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {\n      // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.\n      // If there is a directive which uses `@Input('style')` or `@Input('class')` than\n      // we need to neutralize this binding since that directive is shadowing it.\n      // We turn this into a noop by setting the key to `false`\n      tStylingKey = false;\n    }\n    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);\n    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);\n  }\n}\n\n/**\n * Adds static styling information to the binding if applicable.\n *\n * The linked list of styles not only stores the list and keys, but also stores static styling\n * information on some of the keys. This function determines if the key should contain the styling\n * information and computes it.\n *\n * See `TStylingStatic` for more details.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function wrapInStaticStylingKey(\n    tData: TData, tNode: TNode, stylingKey: TStylingKey, isClassBased: boolean): TStylingKey {\n  const hostDirectiveDef = getCurrentDirectiveDef(tData);\n  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n  if (hostDirectiveDef === null) {\n    // We are in template node.\n    // If template node already had styling instruction then it has already collected the static\n    // styling and there is no need to collect them again. We know that we are the first styling\n    // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).\n    const isFirstStylingInstructionInTemplate =\n        (isClassBased ? tNode.classBindings : tNode.styleBindings) as any as number === 0;\n    if (isFirstStylingInstructionInTemplate) {\n      // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point\n      // they are already merged and it would not be possible to figure which property belongs where\n      // in the priority.\n      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);\n      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);\n      // We know that if we have styling binding in template we can't have residual.\n      residual = null;\n    }\n  } else {\n    // We are in host binding node and there was no binding instruction in template node.\n    // This means that we need to compute the residual.\n    const directiveStylingLast = tNode.directiveStylingLast;\n    const isFirstStylingInstructionInHostBinding =\n        directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;\n    if (isFirstStylingInstructionInHostBinding) {\n      stylingKey =\n          collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);\n      if (residual === null) {\n        // - If `null` than either:\n        //    - Template styling instruction already ran and it has consumed the static\n        //      styling into its `TStylingKey` and so there is no need to update residual. Instead\n        //      we need to update the `TStylingKey` associated with the first template node\n        //      instruction. OR\n        //    - Some other styling instruction ran and determined that there are no residuals\n        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);\n        if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {\n          // Only recompute if `templateStylingKey` had static values. (If no static value found\n          // then there is nothing to do since this operation can only produce less static keys, not\n          // more.)\n          templateStylingKey = collectStylingFromDirectives(\n              null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */,\n              isClassBased);\n          templateStylingKey =\n              collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);\n          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);\n        }\n      } else {\n        // We only need to recompute residual if it is not `null`.\n        // - If existing residual (implies there was no template styling). This means that some of\n        //   the statics may have moved from the residual to the `stylingKey` and so we have to\n        //   recompute.\n        // - If `undefined` this is the first time we are running.\n        residual = collectResidual(tData, tNode, isClassBased);\n      }\n    }\n  }\n  if (residual !== undefined) {\n    isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);\n  }\n  return stylingKey;\n}\n\n/**\n * Retrieve the `TStylingKey` for the template styling instruction.\n *\n * This is needed since `hostBinding` styling instructions are inserted after the template\n * instruction. While the template instruction needs to update the residual in `TNode` the\n * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because\n * the template instruction is downstream from the `hostBindings` instructions.\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @return `TStylingKey` if found or `undefined` if not found.\n */\nfunction getTemplateHeadTStylingKey(tData: TData, tNode: TNode, isClassBased: boolean): TStylingKey|\n    undefined {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  if (getTStylingRangeNext(bindings) === 0) {\n    // There does not seem to be a styling instruction in the `template`.\n    return undefined;\n  }\n  return tData[getTStylingRangePrev(bindings)] as TStylingKey;\n}\n\n/**\n * Update the `TStylingKey` of the first template instruction in `TNode`.\n *\n * Logically `hostBindings` styling instructions are of lower priority than that of the template.\n * However, they execute after the template styling instructions. This means that they get inserted\n * in front of the template styling instructions.\n *\n * If we have a template styling instruction and a new `hostBindings` styling instruction is\n * executed it means that it may need to steal static fields from the template instruction. This\n * method allows us to update the first template instruction `TStylingKey` with a new value.\n *\n * Assume:\n * ```\n * <div my-dir style=\"color: red\" [style.color]=\"tmplExp\"></div>\n *\n * @Directive({\n *   host: {\n *     'style': 'width: 100px',\n *     '[style.color]': 'dirExp',\n *   }\n * })\n * class MyDir {}\n * ```\n *\n * when `[style.color]=\"tmplExp\"` executes it creates this data structure.\n * ```\n *  ['', 'color', 'color', 'red', 'width', '100px'],\n * ```\n *\n * The reason for this is that the template instruction does not know if there are styling\n * instructions and must assume that there are none and must collect all of the static styling.\n * (both\n * `color' and 'width`)\n *\n * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.\n * ```\n *  ['', 'color', 'width', '100px'],  // newly inserted\n *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong\n * ```\n *\n * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to\n * update it like so:\n * ```\n *  ['', 'color', 'width', '100px'],\n *  ['', 'color', 'color', 'red'],    // UPDATE\n * ```\n *\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param tStylingKey New `TStylingKey` which is replacing the old one.\n */\nfunction setTemplateHeadTStylingKey(\n    tData: TData, tNode: TNode, isClassBased: boolean, tStylingKey: TStylingKey): void {\n  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;\n  ngDevMode &&\n      assertNotEqual(\n          getTStylingRangeNext(bindings), 0,\n          'Expecting to have at least one template styling binding.');\n  tData[getTStylingRangePrev(bindings)] = tStylingKey;\n}\n\n/**\n * Collect all static values after the current `TNode.directiveStylingLast` index.\n *\n * Collect the remaining styling information which has not yet been collected by an existing\n * styling instruction.\n *\n * @param tData `TData` where the `DirectiveDefs` are stored.\n * @param tNode `TNode` which contains the directive range.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectResidual(tData: TData, tNode: TNode, isClassBased: boolean): KeyValueArray<any>|\n    null {\n  let residual: KeyValueArray<any>|null|undefined = undefined;\n  const directiveEnd = tNode.directiveEnd;\n  ngDevMode &&\n      assertNotEqual(\n          tNode.directiveStylingLast, -1,\n          'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');\n  // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are\n  // collecting things after the last `hostBindings` directive which had a styling instruction.)\n  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {\n    const attrs = (tData[i] as DirectiveDef<any>).hostAttrs;\n    residual = collectStylingFromTAttrs(residual, attrs, isClassBased) as KeyValueArray<any>| null;\n  }\n  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased) as KeyValueArray<any>| null;\n}\n\n/**\n * Collect the static styling information with lower priority than `hostDirectiveDef`.\n *\n * (This is opposite of residual styling.)\n *\n * @param hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static\n *        styling. (Or `null` if template styling)\n * @param tData `TData` where the linked list is stored.\n * @param tNode `TNode` for which the styling is being computed.\n * @param stylingKey Existing `TStylingKey` to update or wrap.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromDirectives(\n    hostDirectiveDef: DirectiveDef<any>|null, tData: TData, tNode: TNode, stylingKey: TStylingKey,\n    isClassBased: boolean): TStylingKey {\n  // We need to loop because there can be directives which have `hostAttrs` but don't have\n  // `hostBindings` so this loop catches up to the current directive..\n  let currentDirective: DirectiveDef<any>|null = null;\n  const directiveEnd = tNode.directiveEnd;\n  let directiveStylingLast = tNode.directiveStylingLast;\n  if (directiveStylingLast === -1) {\n    directiveStylingLast = tNode.directiveStart;\n  } else {\n    directiveStylingLast++;\n  }\n  while (directiveStylingLast < directiveEnd) {\n    currentDirective = tData[directiveStylingLast] as DirectiveDef<any>;\n    ngDevMode && assertDefined(currentDirective, 'expected to be defined');\n    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);\n    if (currentDirective === hostDirectiveDef) break;\n    directiveStylingLast++;\n  }\n  if (hostDirectiveDef !== null) {\n    // we only advance the styling cursor if we are collecting data from host bindings.\n    // Template executes before host bindings and so if we would update the index,\n    // host bindings would not get their statics.\n    tNode.directiveStylingLast = directiveStylingLast;\n  }\n  return stylingKey;\n}\n\n/**\n * Convert `TAttrs` into `TStylingStatic`.\n *\n * @param stylingKey existing `TStylingKey` to update or wrap.\n * @param attrs `TAttributes` to process.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction collectStylingFromTAttrs(\n    stylingKey: TStylingKey|undefined, attrs: TAttributes|null,\n    isClassBased: boolean): TStylingKey {\n  const desiredMarker = isClassBased ? AttributeMarker.Classes : AttributeMarker.Styles;\n  let currentMarker = AttributeMarker.ImplicitAttributes;\n  if (attrs !== null) {\n    for (let i = 0; i < attrs.length; i++) {\n      const item = attrs[i] as number | string;\n      if (typeof item === 'number') {\n        currentMarker = item;\n      } else {\n        if (currentMarker === desiredMarker) {\n          if (!Array.isArray(stylingKey)) {\n            stylingKey = stylingKey === undefined ? [] : ['', stylingKey] as any;\n          }\n          keyValueArraySet(\n              stylingKey as KeyValueArray<any>, item, isClassBased ? true : attrs[++i]);\n        }\n      }\n    }\n  }\n  return stylingKey === undefined ? null : stylingKey;\n}\n\n/**\n * Convert user input to `KeyValueArray`.\n *\n * This function takes user input which could be `string`, Object literal, or iterable and converts\n * it into a consistent representation. The output of this is `KeyValueArray` (which is an array\n * where\n * even indexes contain keys and odd indexes contain values for those keys).\n *\n * The advantage of converting to `KeyValueArray` is that we can perform diff in an input\n * independent\n * way.\n * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be\n * applied)\n *\n * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the\n * difference in linear fashion without the need to allocate any additional data.\n *\n * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine\n * which values need to be deleted, over the new `Map` to determine additions, and we would have to\n * keep additional `Map` to keep track of duplicates or items which have not yet been visited.\n *\n * @param keyValueArraySet (See `keyValueArraySet` in \"util/array_utils\") Gets passed in as a\n *        function so that `style` can be processed. This is done\n *        for tree shaking purposes.\n * @param stringParser The parser is passed in so that it will be tree shakable. See\n *        `styleStringParser` and `classStringParser`\n * @param value The value to parse/convert to `KeyValueArray`\n */\nexport function toStylingKeyValueArray(\n    keyValueArraySet: (keyValueArray: KeyValueArray<any>, key: string, value: any) => void,\n    stringParser: (styleKeyValueArray: KeyValueArray<any>, text: string) => void,\n    value: string|string[]|{[key: string]: any}|SafeValue|null|undefined): KeyValueArray<any> {\n  if (value == null /*|| value === undefined */ || value === '') return EMPTY_ARRAY as any;\n  const styleKeyValueArray: KeyValueArray<any> = [] as any;\n  const unwrappedValue = unwrapSafeValue(value) as string | string[] | {[key: string]: any};\n  if (Array.isArray(unwrappedValue)) {\n    for (let i = 0; i < unwrappedValue.length; i++) {\n      keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);\n    }\n  } else if (typeof unwrappedValue === 'object') {\n    for (const key in unwrappedValue) {\n      if (unwrappedValue.hasOwnProperty(key)) {\n        keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);\n      }\n    }\n  } else if (typeof unwrappedValue === 'string') {\n    stringParser(styleKeyValueArray, unwrappedValue);\n  } else {\n    ngDevMode &&\n        throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);\n  }\n  return styleKeyValueArray;\n}\n\n/**\n * Set a `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function styleKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: string, value: any) {\n  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));\n}\n\n/**\n * Class-binding-specific function for setting the `value` for a `key`.\n *\n * See: `keyValueArraySet` for details\n *\n * @param keyValueArray KeyValueArray to add to.\n * @param key Style key to add.\n * @param value The value to set.\n */\nexport function classKeyValueArraySet(keyValueArray: KeyValueArray<any>, key: unknown, value: any) {\n  // We use `classList.add` to eventually add the CSS classes to the DOM node. Any value passed into\n  // `add` is stringified and added to the `class` attribute, e.g. even null, undefined or numbers\n  // will be added. Stringify the key here so that our internal data structure matches the value in\n  // the DOM. The only exceptions are empty strings and strings that contain spaces for which\n  // the browser throws an error. We ignore such values, because the error is somewhat cryptic.\n  const stringKey = String(key);\n  if (stringKey !== '' && !stringKey.includes(' ')) {\n    keyValueArraySet(keyValueArray, stringKey, value);\n  }\n}\n\n/**\n * Update map based styling.\n *\n * Map based styling could be anything which contains more than one binding. For example `string`,\n * or object literal. Dealing with all of these types would complicate the logic so\n * instead this function expects that the complex input is first converted into normalized\n * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it\n * very cheap to compute deltas between the previous and current value.\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param oldKeyValueArray Previous value represented as `KeyValueArray`\n * @param newKeyValueArray Current value represented as `KeyValueArray`\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStylingMap(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer,\n    oldKeyValueArray: KeyValueArray<any>, newKeyValueArray: KeyValueArray<any>,\n    isClassBased: boolean, bindingIndex: number) {\n  if (oldKeyValueArray as KeyValueArray<any>| NO_CHANGE === NO_CHANGE) {\n    // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.\n    oldKeyValueArray = EMPTY_ARRAY as any;\n  }\n  let oldIndex = 0;\n  let newIndex = 0;\n  let oldKey: string|null = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;\n  let newKey: string|null = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;\n  while (oldKey !== null || newKey !== null) {\n    ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');\n    ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');\n    const oldValue =\n        oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;\n    const newValue =\n        newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;\n    let setKey: string|null = null;\n    let setValue: any = undefined;\n    if (oldKey === newKey) {\n      // UPDATE: Keys are equal => new value is overwriting old value.\n      oldIndex += 2;\n      newIndex += 2;\n      if (oldValue !== newValue) {\n        setKey = newKey;\n        setValue = newValue;\n      }\n    } else if (newKey === null || oldKey !== null && oldKey < newKey!) {\n      // DELETE: oldKey key is missing or we did not find the oldKey in the newValue\n      // (because the keyValueArray is sorted and `newKey` is found later alphabetically).\n      // `\"background\" < \"color\"` so we need to delete `\"background\"` because it is not found in the\n      // new array.\n      oldIndex += 2;\n      setKey = oldKey;\n    } else {\n      // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.\n      // `\"color\" > \"background\"` so we need to add `color` because it is in new array but not in\n      // old array.\n      ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');\n      newIndex += 2;\n      setKey = newKey;\n      setValue = newValue;\n    }\n    if (setKey !== null) {\n      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);\n    }\n    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;\n    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;\n  }\n}\n\n/**\n * Update a simple (property name) styling.\n *\n * This function takes `prop` and updates the DOM to that value. The function takes the binding\n * value as well as binding priority into consideration to determine which value should be written\n * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks\n * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)\n *\n * @param tView Associated `TView.data` contains the linked list of binding priorities.\n * @param tNode `TNode` where the binding is located.\n * @param lView `LView` contains the values associated with other styling binding at this `TNode`.\n * @param renderer Renderer to use if any updates.\n * @param prop Either style property name or a class name.\n * @param value Either style value for `prop` or `true`/`false` if `prop` is class.\n * @param isClassBased `true` if `class` (`false` if `style`)\n * @param bindingIndex Binding index of the binding.\n */\nfunction updateStyling(\n    tView: TView, tNode: TNode, lView: LView, renderer: Renderer, prop: string,\n    value: string|undefined|null|boolean, isClassBased: boolean, bindingIndex: number) {\n  if (!(tNode.type & TNodeType.AnyRNode)) {\n    // It is possible to have styling on non-elements (such as ng-container).\n    // This is rare, but it does happen. In such a case, just ignore the binding.\n    return;\n  }\n  const tData = tView.data;\n  const tRange = tData[bindingIndex + 1] as TStylingRange;\n  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?\n      findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :\n      undefined;\n  if (!isStylingValuePresent(higherPriorityValue)) {\n    // We don't have a next duplicate, or we did not find a duplicate value.\n    if (!isStylingValuePresent(value)) {\n      // We should delete current value or restore to lower priority value.\n      if (getTStylingRangePrevDuplicate(tRange)) {\n        // We have a possible prev duplicate, let's retrieve it.\n        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);\n      }\n    }\n    const rNode = getNativeByIndex(getSelectedIndex(), lView) as RElement;\n    applyStyling(renderer, isClassBased, rNode, prop, value);\n  }\n}\n\n/**\n * Search for styling value with higher priority which is overwriting current value, or a\n * value of lower priority to which we should fall back if the value is `undefined`.\n *\n * When value is being applied at a location, related values need to be consulted.\n * - If there is a higher priority binding, we should be using that one instead.\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp1`\n *   requires that we check `exp2` to see if it is set to value other than `undefined`.\n * - If there is a lower priority binding and we are changing to `undefined`\n *   For example `<div  [style]=\"{color:exp1}\" [style.color]=\"exp2\">` change to `exp2` to\n *   `undefined` requires that we check `exp1` (and static values) and use that as new value.\n *\n * NOTE: The styling stores two values.\n * 1. The raw value which came from the application is stored at `index + 0` location. (This value\n *    is used for dirty checking).\n * 2. The normalized value is stored at `index + 1`.\n *\n * @param tData `TData` used for traversing the priority.\n * @param tNode `TNode` to use for resolving static styling. Also controls search direction.\n *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n *   - `null` search prev and go all the way to end. Return last value where\n *     `isStylingValuePresent(value)` is true.\n * @param lView `LView` used for retrieving the actual values.\n * @param prop Property which we are interested in.\n * @param index Starting index in the linked list of styling bindings where the search should start.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nfunction findStylingValue(\n    tData: TData, tNode: TNode|null, lView: LView, prop: string, index: number,\n    isClassBased: boolean): any {\n  // `TNode` to use for resolving static styling. Also controls search direction.\n  //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.\n  //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.\n  //   - `null` search prev and go all the way to end. Return last value where\n  //     `isStylingValuePresent(value)` is true.\n  const isPrevDirection = tNode === null;\n  let value: any = undefined;\n  while (index > 0) {\n    const rawKey = tData[index] as TStylingKey;\n    const containsStatics = Array.isArray(rawKey);\n    // Unwrap the key if we contain static values.\n    const key = containsStatics ? (rawKey as string[])[1] : rawKey;\n    const isStylingMap = key === null;\n    let valueAtLViewIndex = lView[index + 1];\n    if (valueAtLViewIndex === NO_CHANGE) {\n      // In firstUpdatePass the styling instructions create a linked list of styling.\n      // On subsequent passes it is possible for a styling instruction to try to read a binding\n      // which\n      // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that\n      // we have `undefined` (or empty array in case of styling-map instruction) instead. This\n      // allows the resolution to apply the value (which may later be overwritten when the\n      // binding actually executes.)\n      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : undefined;\n    }\n    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :\n                                      (key === prop ? valueAtLViewIndex : undefined);\n    if (containsStatics && !isStylingValuePresent(currentValue)) {\n      currentValue = keyValueArrayGet(rawKey as KeyValueArray<any>, prop);\n    }\n    if (isStylingValuePresent(currentValue)) {\n      value = currentValue;\n      if (isPrevDirection) {\n        return value;\n      }\n    }\n    const tRange = tData[index + 1] as TStylingRange;\n    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);\n  }\n  if (tNode !== null) {\n    // in case where we are going in next direction AND we did not find anything, we need to\n    // consult residual styling\n    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;\n    if (residual != null /** OR residual !=== undefined */) {\n      value = keyValueArrayGet(residual!, prop);\n    }\n  }\n  return value;\n}\n\n/**\n * Determines if the binding value should be used (or if the value is 'undefined' and hence priority\n * resolution should be used.)\n *\n * @param value Binding style value.\n */\nfunction isStylingValuePresent(value: any): boolean {\n  // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't\n  // have an opinion as to what this binding should be and you should consult other bindings by\n  // priority to determine the valid value.\n  // This is extracted into a single function so that we have a single place to control this.\n  return value !== undefined;\n}\n\n/**\n * Normalizes and/or adds a suffix to the value.\n *\n * If value is `null`/`undefined` no suffix is added\n * @param value\n * @param suffix\n */\nfunction normalizeSuffix(value: any, suffix: string|undefined|null): string|null|undefined|boolean {\n  if (value == null || value === '') {\n    // do nothing\n    // Do not add the suffix if the value is going to be empty.\n    // As it produce invalid CSS, which the browsers will automatically omit but Domino will not.\n    // Example: `\"left\": \"px;\"` instead of `\"left\": \"\"`.\n  } else if (typeof suffix === 'string') {\n    value = value + suffix;\n  } else if (typeof value === 'object') {\n    value = stringify(unwrapSafeValue(value));\n  }\n  return value;\n}\n\n\n/**\n * Tests if the `TNode` has input shadow.\n *\n * An input shadow is when a directive steals (shadows) the input by using `@Input('style')` or\n * `@Input('class')` as input.\n *\n * @param tNode `TNode` which we would like to see if it has shadow.\n * @param isClassBased `true` if `class` (`false` if `style`)\n */\nexport function hasStylingInputShadow(tNode: TNode, isClassBased: boolean) {\n  return (tNode.flags & (isClassBased ? TNodeFlags.hasClassInput : TNodeFlags.hasStyleInput)) !== 0;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertEqual, assertIndexInRange} from '../../util/assert';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET, RENDERER, T_HOST} from '../interfaces/view';\nimport {appendChild, createTextNode} from '../node_manipulation';\nimport {getBindingIndex, getLView, getTView, setCurrentTNode} from '../state';\n\nimport {getOrCreateTNode} from './shared';\n\n\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport function ɵɵtext(index: number, value: string = ''): void {\n  const lView = getLView();\n  const tView = getTView();\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  ngDevMode &&\n      assertEqual(\n          getBindingIndex(), tView.bindingStartIndex,\n          'text nodes should be created before any bindings');\n  ngDevMode && assertIndexInRange(lView, adjustedIndex);\n\n  const tNode = tView.firstCreatePass ?\n      getOrCreateTNode(tView, adjustedIndex, TNodeType.Text, value, null) :\n      tView.data[adjustedIndex] as TElementNode;\n\n  const textNative = lView[adjustedIndex] = createTextNode(lView[RENDERER], value);\n  appendChild(tView, lView, textNative, tNode);\n\n  // Text nodes are self closing.\n  setCurrentTNode(tNode, false);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {getLView, getSelectedIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {textBindingInternal} from './shared';\n\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * ```html\n * <div>{{v0}}</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate(v0);\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate {\n  ɵɵtextInterpolate1('', v0, '');\n  return ɵɵtextInterpolate;\n}\n\n\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * ```html\n * <div>prefix{{v0}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate1(\n    prefix: string, v0: any, suffix: string): typeof ɵɵtextInterpolate1 {\n  const lView = getLView();\n  const interpolated = interpolation1(lView, prefix, v0, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate1;\n}\n\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): typeof ɵɵtextInterpolate2 {\n  const lView = getLView();\n  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate2;\n}\n\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any,\n    suffix: string): typeof ɵɵtextInterpolate3 {\n  const lView = getLView();\n  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate3;\n}\n\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): typeof ɵɵtextInterpolate4 {\n  const lView = getLView();\n  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate4;\n}\n\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): typeof ɵɵtextInterpolate5 {\n  const lView = getLView();\n  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate5;\n}\n\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): typeof ɵɵtextInterpolate6 {\n  const lView = getLView();\n  const interpolated =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate6;\n}\n\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any,\n    suffix: string): typeof ɵɵtextInterpolate7 {\n  const lView = getLView();\n  const interpolated =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate7;\n}\n\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport function ɵɵtextInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): typeof ɵɵtextInterpolate8 {\n  const lView = getLView();\n  const interpolated = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolate8;\n}\n\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV {\n  const lView = getLView();\n  const interpolated = interpolationV(lView, values);\n  if (interpolated !== NO_CHANGE) {\n    textBindingInternal(lView, getSelectedIndex(), interpolated as string);\n  }\n  return ɵɵtextInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {keyValueArraySet} from '../../util/array_utils';\nimport {getLView} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {checkStylingMap, classStringParser} from './styling';\n\n\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵclassMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLView} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {ɵɵstyleMap} from './styling';\n\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style=\"key: {{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate1(prefix: string, v0: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * ```\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolate8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): void {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  ɵɵstyleMap(interpolatedValue);\n}\n\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * ```\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)\n * @codeGenApi\n */\nexport function ɵɵstyleMapInterpolateV(values: any[]): void {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  ɵɵstyleMap(interpolatedValue);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLView,} from '../state';\nimport {interpolation1, interpolation2, interpolation3, interpolation4, interpolation5, interpolation6, interpolation7, interpolation8, interpolationV} from './interpolation';\nimport {checkStylingProperty} from './styling';\n\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate1(\n    prop: string, prefix: string, v0: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate1 {\n  const lView = getLView();\n  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate1;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate2(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate2 {\n  const lView = getLView();\n  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate2;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate3(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate3 {\n  const lView = getLView();\n  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate3;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate4(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, suffix: string, valueSuffix?: string|null): typeof ɵɵstylePropInterpolate4 {\n  const lView = getLView();\n  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate4;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate5(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate5 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate5;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate6(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate6 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate6;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate7(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string,\n    valueSuffix?: string|null): typeof ɵɵstylePropInterpolate7 {\n  const lView = getLView();\n  const interpolatedValue =\n      interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate7;\n}\n\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * ```html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolate8(\n    prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string,\n    v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string, valueSuffix?: string|null): typeof ɵɵstylePropInterpolate8 {\n  const lView = getLView();\n  const interpolatedValue = interpolation8(\n      lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolate8;\n}\n\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * ```html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * ```\n *\n * Its compiled representation is:\n *\n * ```ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * ```\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `styling`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport function ɵɵstylePropInterpolateV(\n    prop: string, values: any[], valueSuffix?: string|null): typeof ɵɵstylePropInterpolateV {\n  const lView = getLView();\n  const interpolatedValue = interpolationV(lView, values);\n  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);\n  return ɵɵstylePropInterpolateV;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {bindingUpdated} from '../bindings';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {RENDERER} from '../interfaces/view';\nimport {getCurrentDirectiveDef, getLView, getSelectedTNode, getTView, nextBindingIndex} from '../state';\nimport {NO_CHANGE} from '../tokens';\n\nimport {elementPropertyInternal, loadComponentRenderer, storePropertyBindingMetadata} from './shared';\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. `property('name', ctx.name)('title', ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵhostProperty<T>(\n    propName: string, value: T, sanitizer?: SanitizerFn|null): typeof ɵɵhostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵhostProperty;\n}\n\n\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nexport function ɵɵsyntheticHostProperty<T>(\n    propName: string, value: T|NO_CHANGE,\n    sanitizer?: SanitizerFn|null): typeof ɵɵsyntheticHostProperty {\n  const lView = getLView();\n  const bindingIndex = nextBindingIndex();\n  if (bindingUpdated(lView, bindingIndex, value)) {\n    const tView = getTView();\n    const tNode = getSelectedTNode();\n    const currentDef = getCurrentDirectiveDef(tView.data);\n    const renderer = loadComponentRenderer(currentDef, tNode, lView);\n    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);\n    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);\n  }\n  return ɵɵsyntheticHostProperty;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from './global';\n\ndeclare global {\n  const ngI18nClosureMode: boolean;\n}\n\n/**\n * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.\n */\nif (typeof ngI18nClosureMode === 'undefined') {\n  // These property accesses can be ignored because ngI18nClosureMode will be set to false\n  // when optimizing code and the whole if statement will be dropped.\n  // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.\n  // NOTE: we need to have it in IIFE so that the tree-shaker is happy.\n  (function() {\n    // tslint:disable-next-line:no-toplevel-property-access\n    global['ngI18nClosureMode'] =\n        // TODO(FW-1250): validate that this actually, you know, works.\n        // tslint:disable-next-line:no-toplevel-property-access\n        typeof goog !== 'undefined' && typeof goog.getMsg === 'function';\n  })();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\n\nfunction plural(val: number): number {\nconst n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length;\n\nif (i === 1 && v === 0)\n    return 1;\nreturn 5;\n}\n\nexport default [\"en\",[[\"a\",\"p\"],[\"AM\",\"PM\"],u],[[\"AM\",\"PM\"],u,u],[[\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"],[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"]],u,[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]],u,[[\"B\",\"A\"],[\"BC\",\"AD\"],[\"Before Christ\",\"Anno Domini\"]],0,[6,0],[\"M/d/yy\",\"MMM d, y\",\"MMMM d, y\",\"EEEE, MMMM d, y\"],[\"h:mm a\",\"h:mm:ss a\",\"h:mm:ss a z\",\"h:mm:ss a zzzz\"],[\"{1}, {0}\",u,\"{1} 'at' {0}\",u],[\".\",\",\",\";\",\"%\",\"+\",\"-\",\"E\",\"×\",\"‰\",\"∞\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0%\",\"¤#,##0.00\",\"#E0\"],\"USD\",\"$\",\"US Dollar\",{},\"ltr\", plural];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {global} from '../util/global';\n\nimport localeEn from './locale_en';\n\n/**\n * This const is used to store the locale data registered with `registerLocaleData`\n */\nlet LOCALE_DATA: {[localeId: string]: any} = {};\n\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1\n */\nexport function registerLocaleData(data: any, localeId?: string|any, extraData?: any): void {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = normalizeLocale(locale);\n\n  let match = getLocaleData(normalizedLocale);\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = getLocaleData(parentLocale);\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new RuntimeError(\n      RuntimeErrorCode.MISSING_LOCALE_DATA,\n      ngDevMode && `Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nexport function getLocaleCurrencyCode(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyCode] || null;\n}\n\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see `NgPlural`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport function getLocalePluralCase(locale: string): (value: number) => number {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\n\n\n/**\n * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`\n * or from the global `ng.common.locale`.\n */\nexport function getLocaleData(normalizedLocale: string): any {\n  if (!(normalizedLocale in LOCALE_DATA)) {\n    LOCALE_DATA[normalizedLocale] = global.ng && global.ng.common && global.ng.common.locales &&\n        global.ng.common.locales[normalizedLocale];\n  }\n  return LOCALE_DATA[normalizedLocale];\n}\n\n/**\n * Helper function to remove all the locale data from `LOCALE_DATA`.\n */\nexport function unregisterAllLocaleData() {\n  LOCALE_DATA = {};\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencyCode,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  Directionality,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport const enum CurrencyIndex {\n  Symbol = 0,\n  SymbolNarrow,\n  NbOfDigits\n}\n\n/**\n * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.\n */\nfunction normalizeLocale(locale: string): string {\n  return locale.toLowerCase().replace(/_/g, '-');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getLocalePluralCase} from './locale_data_api';\n\nconst pluralMapping = ['zero', 'one', 'two', 'few', 'many'];\n\n/**\n * Returns the plural case based on the locale\n */\nexport function getPluralCase(value: string, locale: string): string {\n  const plural = getLocalePluralCase(locale)(parseInt(value, 10));\n  const result = pluralMapping[plural];\n  return (result !== undefined) ? result : 'other';\n}\n\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nexport const DEFAULT_LOCALE_ID = 'en-US';\n\n/**\n * USD currency code that the application uses by default for CurrencyPipe when no\n * DEFAULT_CURRENCY_CODE is provided.\n */\nexport const USD_CURRENCY_CODE = 'USD';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SanitizerFn} from './sanitization';\n\n\n/**\n * Stores a list of nodes which need to be removed.\n *\n * Numbers are indexes into the `LView`\n * - index > 0: `removeRNode(lView[0])`\n * - index < 0: `removeICU(~lView[0])`\n */\nexport interface I18nRemoveOpCodes extends Array<number> {\n  __brand__: 'I18nRemoveOpCodes';\n}\n\n/**\n * `I18nMutateOpCode` defines OpCodes for `I18nMutateOpCodes` array.\n *\n * OpCodes are efficient operations which can be applied to the DOM to update it. (For example to\n * update to a new ICU case requires that we clean up previous elements and create new ones.)\n *\n * OpCodes contain three parts:\n *  1) Parent node index offset. (p)\n *  2) Reference node index offset. (r)\n *  3) The instruction to execute. (i)\n *\n * pppp pppp pppp pppp rrrr rrrr rrrr riii\n * 3322 2222 2222 1111 1111 1110 0000 0000\n * 1098 7654 3210 9876 5432 1098 7654 3210\n *\n * ```\n * var parent = lView[opCode >>> SHIFT_PARENT];\n * var refNode = lView[((opCode & MASK_REF) >>> SHIFT_REF)];\n * var instruction = opCode & MASK_OPCODE;\n * ```\n *\n * See: `I18nCreateOpCodes` for example of usage.\n */\nexport const enum IcuCreateOpCode {\n  /**\n   * Stores shift amount for bits 17-3 that contain reference index.\n   */\n  SHIFT_REF = 1,\n  /**\n   * Stores shift amount for bits 31-17 that contain parent index.\n   */\n  SHIFT_PARENT = 17,\n  /**\n   * Mask for OpCode\n   */\n  MASK_INSTRUCTION = 0b1,\n\n  /**\n   * Mask for the Reference node (bits 16-3)\n   */\n  MASK_REF = 0b11111111111111110,\n  //           11111110000000000\n  //           65432109876543210\n\n  /**\n   * Instruction to append the current node to `PARENT`.\n   */\n  AppendChild = 0b0,\n\n  /**\n   * Instruction to set the attribute of a node.\n   */\n  Attr = 0b1,\n}\n\n\n/**\n * Array storing OpCode for dynamically creating `i18n` blocks.\n *\n * Example:\n * ```ts\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createTextNode('xyz'));\n *   'xyz', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createElement('div'));\n *   ELEMENT_MARKER, 'div', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createComment(''));\n *   ICU_MARKER, '', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Attr, 'attr', 'value'\n * ];\n * ```\n */\nexport interface IcuCreateOpCodes extends Array<number|string|ELEMENT_MARKER|ICU_MARKER|null>,\n                                          I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\nexport const enum I18nUpdateOpCode {\n  /**\n   * Stores shift amount for bits 17-2 that contain reference index.\n   */\n  SHIFT_REF = 2,\n  /**\n   * Mask for OpCode\n   */\n  MASK_OPCODE = 0b11,\n\n  /**\n   * Instruction to update a text node.\n   */\n  Text = 0b00,\n  /**\n   * Instruction to update a attribute of a node.\n   */\n  Attr = 0b01,\n  /**\n   * Instruction to switch the current ICU case.\n   */\n  IcuSwitch = 0b10,\n  /**\n   * Instruction to update the current ICU case.\n   */\n  IcuUpdate = 0b11,\n}\n\n/**\n * Marks that the next string is an element name.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ELEMENT_MARKER: ELEMENT_MARKER = {\n  marker: 'element'\n};\nexport interface ELEMENT_MARKER {\n  marker: 'element';\n}\n\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See `I18nMutateOpCodes` documentation.\n */\nexport const ICU_MARKER: ICU_MARKER = {\n  marker: 'ICU'\n};\n\nexport interface ICU_MARKER {\n  marker: 'ICU';\n}\n\nexport interface I18nDebug {\n  /**\n   * Human readable representation of the OpCode arrays.\n   *\n   * NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in\n   * production. Its presence is purely to help debug issue in development, and should not be relied\n   * on in production application.\n   */\n  debug?: string[];\n}\n\n/**\n * Array storing OpCode for dynamically creating `i18n` translation DOM elements.\n *\n * This array creates a sequence of `Text` and `Comment` (as ICU anchor) DOM elements. It consists\n * of a pair of `number` and `string` pairs which encode the operations for the creation of the\n * translated block.\n *\n * The number is shifted and encoded according to `I18nCreateOpCode`\n *\n * Pseudocode:\n * ```\n * const i18nCreateOpCodes = [\n *   10 << I18nCreateOpCode.SHIFT, \"Text Node add to DOM\",\n *   11 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.COMMENT, \"Comment Node add to DOM\",\n *   12 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.APPEND_LATER, \"Text Node added later\"\n * ];\n *\n * for(var i=0; i<i18nCreateOpCodes.length; i++) {\n *   const opcode = i18NCreateOpCodes[i++];\n *   const index = opcode >> I18nCreateOpCode.SHIFT;\n *   const text = i18NCreateOpCodes[i];\n *   let node: Text|Comment;\n *   if (opcode & I18nCreateOpCode.COMMENT === I18nCreateOpCode.COMMENT) {\n *     node = lView[~index] = document.createComment(text);\n *   } else {\n *     node = lView[index] = document.createText(text);\n *   }\n *   if (opcode & I18nCreateOpCode.APPEND_EAGERLY !== I18nCreateOpCode.APPEND_EAGERLY) {\n *     parentNode.appendChild(node);\n *   }\n * }\n * ```\n */\nexport interface I18nCreateOpCodes extends Array<number|string>, I18nDebug {\n  __brand__: 'I18nCreateOpCodes';\n}\n\n/**\n * See `I18nCreateOpCodes`\n */\nexport enum I18nCreateOpCode {\n  /**\n   * Number of bits to shift index so that it can be combined with the `APPEND_EAGERLY` and\n   * `COMMENT`.\n   */\n  SHIFT = 2,\n\n  /**\n   * Should the node be appended to parent immediately after creation.\n   */\n  APPEND_EAGERLY = 0b01,\n\n  /**\n   * If set the node should be comment (rather than a text) node.\n   */\n  COMMENT = 0b10,\n}\n\n\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * NOTE: 32nd bit is special as it says 32nd or higher. This way if we have more than 32 bindings\n * the code still works, but with lower efficiency. (it is unlikely that a translation would have\n * more than 32 bindings.)\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * ```ts\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(ctx.exp1); // If changed set mask bit 1\n *    i18nExp(ctx.exp2); // If changed set mask bit 2\n *    i18nExp(ctx.exp3); // If changed set mask bit 3\n *    i18nExp(ctx.exp4); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * ```\n * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the\n * index of `i18nExp`.\n *\n * ### OpCodes\n * ```ts\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: `<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">`\n *   // If `changeMask & 0b11`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `8` values and start processing next OpCodes.\n *   0b11, 8,\n *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!\">`\n *   // If `changeMask & 0b100`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `4` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.\n *   'Hello ', -2, '!',\n *   // Update text: `lView[1].textContent = newValue;`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }\">`\n *   // If `changeMask & 0b1000`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip `2` values and start processing next OpCodes.\n *   0b1000, 2,\n *   // Concatenate `newValue = lView[bindIndex -1];`.\n *   -1,\n *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: `icuUpdateCase(lView[1], 0);`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * ```\n *\n */\nexport interface I18nUpdateOpCodes extends Array<string|number|SanitizerFn|null>, I18nDebug {\n  __brand__: 'I18nUpdateOpCodes';\n}\n\n/**\n * Store information for the i18n translation block.\n */\nexport interface TI18n {\n  /**\n   * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n   *\n   * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n   */\n  create: I18nCreateOpCodes;\n\n  /**\n   * A set of OpCodes which will be executed on each change detection to determine if any changes to\n   * DOM are required.\n   */\n  update: I18nUpdateOpCodes;\n}\n\n/**\n * Defines the ICU type of `select` or `plural`\n */\nexport const enum IcuType {\n  select = 0,\n  plural = 1,\n}\n\nexport interface TIcu {\n  /**\n   * Defines the ICU type of `select` or `plural`\n   */\n  type: IcuType;\n\n  /**\n   * Index in `LView` where the anchor node is stored. `<!-- ICU 0:0 -->`\n   */\n  anchorIdx: number;\n\n  /**\n   * Currently selected ICU case pointer.\n   *\n   * `lView[currentCaseLViewIndex]` stores the currently selected case. This is needed to know how\n   * to clean up the current case when transitioning no the new case.\n   *\n   * If the value stored is:\n   * `null`: No current case selected.\n   *   `<0`: A flag which means that the ICU just switched and that `icuUpdate` must be executed\n   *         regardless of the `mask`. (After the execution the flag is cleared)\n   *   `>=0` A currently selected case index.\n   */\n  currentCaseLViewIndex: number;\n\n  /**\n   * A list of case values which the current ICU will try to match.\n   *\n   * The last value is `other`\n   */\n  cases: any[];\n\n  /**\n   * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n   */\n  create: IcuCreateOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n   */\n  remove: I18nRemoveOpCodes[];\n\n  /**\n   * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n   */\n  update: I18nUpdateOpCodes[];\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n\n/**\n * Parsed ICU expression\n */\nexport interface IcuExpression {\n  type: IcuType;\n  mainBinding: number;\n  cases: string[];\n  values: (string|IcuExpression)[][];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DEFAULT_LOCALE_ID} from '../../i18n/localization';\nimport {assertDefined} from '../../util/assert';\n\n\n/**\n * The locale id that the application is currently using (for translations and ICU expressions).\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nlet LOCALE_ID = DEFAULT_LOCALE_ID;\n\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nexport function setLocaleId(localeId: string) {\n  assertDefined(localeId, `Expected localeId to be defined`);\n  if (typeof localeId === 'string') {\n    LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');\n  }\n}\n\n/**\n * Gets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n */\nexport function getLocaleId(): string {\n  return LOCALE_ID;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDomNode, assertIndexInRange} from '../util/assert';\n\nimport {TNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {Renderer} from './interfaces/renderer';\nimport {RElement, RNode} from './interfaces/renderer_dom';\nimport {LView} from './interfaces/view';\nimport {getInsertInFrontOfRNodeWithNoI18n, nativeInsertBefore} from './node_manipulation';\nimport {unwrapRNode} from './util/view_utils';\n\n\n/**\n * Find a node in front of which `currentTNode` should be inserted (takes i18n into account).\n *\n * This method determines the `RNode` in front of which we should insert the `currentRNode`. This\n * takes `TNode.insertBeforeIndex` into account.\n *\n * @param parentTNode parent `TNode`\n * @param currentTNode current `TNode` (The node which we would like to insert into the DOM)\n * @param lView current `LView`\n */\nexport function getInsertInFrontOfRNodeWithI18n(\n    parentTNode: TNode, currentTNode: TNode, lView: LView): RNode|null {\n  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;\n  const insertBeforeIndex =\n      Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);\n  } else {\n    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);\n    return unwrapRNode(lView[insertBeforeIndex]);\n  }\n}\n\n\n/**\n * Process `TNode.insertBeforeIndex` by adding i18n text nodes.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function processI18nInsertBefore(\n    renderer: Renderer, childTNode: TNode, lView: LView, childRNode: RNode|RNode[],\n    parentRElement: RElement|null): void {\n  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;\n  if (Array.isArray(tNodeInsertBeforeIndex)) {\n    // An array indicates that there are i18n nodes that need to be added as children of this\n    // `childRNode`. These i18n nodes were created before this `childRNode` was available and so\n    // only now can be added. The first element of the array is the normal index where we should\n    // insert the `childRNode`. Additional elements are the extra nodes to be added as children of\n    // `childRNode`.\n    ngDevMode && assertDomNode(childRNode);\n    let i18nParent: RElement|null = childRNode as RElement;\n    let anchorRNode: RNode|null = null;\n    if (!(childTNode.type & TNodeType.AnyRNode)) {\n      anchorRNode = i18nParent;\n      i18nParent = parentRElement;\n    }\n    if (i18nParent !== null && childTNode.componentOffset === -1) {\n      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {\n        // No need to `unwrapRNode` because all of the indexes point to i18n text nodes.\n        // see `assertDomNode` below.\n        const i18nChild = lView[tNodeInsertBeforeIndex[i]];\n        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual} from '../../util/assert';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\n\n/**\n * Add `tNode` to `previousTNodes` list and update relevant `TNode`s in `previousTNodes` list\n * `tNode.insertBeforeIndex`.\n *\n * Things to keep in mind:\n * 1. All i18n text nodes are encoded as `TNodeType.Element` and are created eagerly by the\n *    `ɵɵi18nStart` instruction.\n * 2. All `TNodeType.Placeholder` `TNodes` are elements which will be created later by\n *    `ɵɵelementStart` instruction.\n * 3. `ɵɵelementStart` instruction will create `TNode`s in the ascending `TNode.index` order. (So a\n *    smaller index `TNode` is guaranteed to be created before a larger one)\n *\n * We use the above three invariants to determine `TNode.insertBeforeIndex`.\n *\n * In an ideal world `TNode.insertBeforeIndex` would always be `TNode.next.index`. However,\n * this will not work because `TNode.next.index` may be larger than `TNode.index` which means that\n * the next node is not yet created and therefore we can't insert in front of it.\n *\n * Rule1: `TNode.insertBeforeIndex = null` if `TNode.next === null` (Initial condition, as we don't\n *        know if there will be further `TNode`s inserted after.)\n * Rule2: If `previousTNode` is created after the `tNode` being inserted, then\n *        `previousTNode.insertBeforeNode = tNode.index` (So when a new `tNode` is added we check\n *        previous to see if we can update its `insertBeforeTNode`)\n *\n * See `TNode.insertBeforeIndex` for more context.\n *\n * @param previousTNodes A list of previous TNodes so that we can easily traverse `TNode`s in\n *     reverse order. (If `TNode` would have `previous` this would not be necessary.)\n * @param newTNode A TNode to add to the `previousTNodes` list.\n */\nexport function addTNodeAndUpdateInsertBeforeIndex(previousTNodes: TNode[], newTNode: TNode) {\n  // Start with Rule1\n  ngDevMode &&\n      assertEqual(newTNode.insertBeforeIndex, null, 'We expect that insertBeforeIndex is not set');\n\n  previousTNodes.push(newTNode);\n  if (previousTNodes.length > 1) {\n    for (let i = previousTNodes.length - 2; i >= 0; i--) {\n      const existingTNode = previousTNodes[i];\n      // Text nodes are created eagerly and so they don't need their `indexBeforeIndex` updated.\n      // It is safe to ignore them.\n      if (!isI18nText(existingTNode)) {\n        if (isNewTNodeCreatedBefore(existingTNode, newTNode) &&\n            getInsertBeforeIndex(existingTNode) === null) {\n          // If it was created before us in time, (and it does not yet have `insertBeforeIndex`)\n          // then add the `insertBeforeIndex`.\n          setInsertBeforeIndex(existingTNode, newTNode.index);\n        }\n      }\n    }\n  }\n}\n\nfunction isI18nText(tNode: TNode): boolean {\n  return !(tNode.type & TNodeType.Placeholder);\n}\n\nfunction isNewTNodeCreatedBefore(existingTNode: TNode, newTNode: TNode): boolean {\n  return isI18nText(newTNode) || existingTNode.index > newTNode.index;\n}\n\nfunction getInsertBeforeIndex(tNode: TNode): number|null {\n  const index = tNode.insertBeforeIndex;\n  return Array.isArray(index) ? index[0] : index;\n}\n\nfunction setInsertBeforeIndex(tNode: TNode, value: number): void {\n  const index = tNode.insertBeforeIndex;\n  if (Array.isArray(index)) {\n    // Array is stored if we have to insert child nodes. See `TNode.insertBeforeIndex`\n    index[0] = value;\n  } else {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    tNode.insertBeforeIndex = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertEqual, assertGreaterThan, assertGreaterThanOrEqual, throwError} from '../../util/assert';\nimport {assertTIcu, assertTNode} from '../assert';\nimport {createTNodeAtIndex} from '../instructions/shared';\nimport {IcuCreateOpCode, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode, TNode, TNodeType} from '../interfaces/node';\nimport {LView, TView} from '../interfaces/view';\nimport {assertTNodeType} from '../node_assert';\nimport {setI18nHandling} from '../node_manipulation';\nimport {getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore} from '../node_manipulation_i18n';\n\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\n\n\n/**\n * Retrieve `TIcu` at a given `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be read from.\n */\nexport function getTIcu(tView: TView, index: number): TIcu|null {\n  const value = tView.data[index] as null | TIcu | TIcuContainerNode | string;\n  if (value === null || typeof value === 'string') return null;\n  if (ngDevMode &&\n      !(value.hasOwnProperty('tView') || value.hasOwnProperty('currentCaseLViewIndex'))) {\n    throwError('We expect to get \\'null\\'|\\'TIcu\\'|\\'TIcuContainer\\', but got: ' + value);\n  }\n  // Here the `value.hasOwnProperty('currentCaseLViewIndex')` is a polymorphic read as it can be\n  // either TIcu or TIcuContainerNode. This is not ideal, but we still think it is OK because it\n  // will be just two cases which fits into the browser inline cache (inline cache can take up to\n  // 4)\n  const tIcu = value.hasOwnProperty('currentCaseLViewIndex') ? value as TIcu :\n                                                               (value as TIcuContainerNode).value;\n  ngDevMode && assertTIcu(tIcu);\n  return tIcu;\n}\n\n/**\n * Store `TIcu` at a give `index`.\n *\n * The `TIcu` can be stored either directly (if it is nested ICU) OR\n * it is stored inside tho `TIcuContainer` if it is top level ICU.\n *\n * The reason for this is that the top level ICU need a `TNode` so that they are part of the render\n * tree, but nested ICU's have no TNode, because we don't know ahead of time if the nested ICU is\n * expressed (parent ICU may have selected a case which does not contain it.)\n *\n * @param tView Current `TView`.\n * @param index Index where the value should be stored at in `Tview.data`\n * @param tIcu The TIcu to store.\n */\nexport function setTIcu(tView: TView, index: number, tIcu: TIcu): void {\n  const tNode = tView.data[index] as null | TIcuContainerNode;\n  ngDevMode &&\n      assertEqual(\n          tNode === null || tNode.hasOwnProperty('tView'), true,\n          'We expect to get \\'null\\'|\\'TIcuContainer\\'');\n  if (tNode === null) {\n    tView.data[index] = tIcu;\n  } else {\n    ngDevMode && assertTNodeType(tNode, TNodeType.Icu);\n    tNode.value = tIcu;\n  }\n}\n\n/**\n * Set `TNode.insertBeforeIndex` taking the `Array` into account.\n *\n * See `TNode.insertBeforeIndex`\n */\nexport function setTNodeInsertBeforeIndex(tNode: TNode, index: number) {\n  ngDevMode && assertTNode(tNode);\n  let insertBeforeIndex = tNode.insertBeforeIndex;\n  if (insertBeforeIndex === null) {\n    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);\n    insertBeforeIndex = tNode.insertBeforeIndex =\n        [null!/* may be updated to number later */, index];\n  } else {\n    assertEqual(Array.isArray(insertBeforeIndex), true, 'Expecting array here');\n    (insertBeforeIndex as number[]).push(index);\n  }\n}\n\n/**\n * Create `TNode.type=TNodeType.Placeholder` node.\n *\n * See `TNodeType.Placeholder` for more information.\n */\nexport function createTNodePlaceholder(\n    tView: TView, previousTNodes: TNode[], index: number): TNode {\n  const tNode = createTNodeAtIndex(tView, index, TNodeType.Placeholder, null, null);\n  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);\n  return tNode;\n}\n\n\n/**\n * Returns current ICU case.\n *\n * ICU cases are stored as index into the `TIcu.cases`.\n * At times it is necessary to communicate that the ICU case just switched and that next ICU update\n * should update all bindings regardless of the mask. In such a case the we store negative numbers\n * for cases which have just been switched. This function removes the negative flag.\n */\nexport function getCurrentICUCaseIndex(tIcu: TIcu, lView: LView) {\n  const currentCase: number|null = lView[tIcu.currentCaseLViewIndex];\n  return currentCase === null ? currentCase : (currentCase < 0 ? ~currentCase : currentCase);\n}\n\nexport function getParentFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode >>> IcuCreateOpCode.SHIFT_PARENT;\n}\n\nexport function getRefFromIcuCreateOpCode(mergedCode: number): number {\n  return (mergedCode & IcuCreateOpCode.MASK_REF) >>> IcuCreateOpCode.SHIFT_REF;\n}\n\nexport function getInstructionFromIcuCreateOpCode(mergedCode: number): number {\n  return mergedCode & IcuCreateOpCode.MASK_INSTRUCTION;\n}\n\nexport function icuCreateOpCode(opCode: IcuCreateOpCode, parentIdx: number, refIdx: number) {\n  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, 'Missing parent index');\n  ngDevMode && assertGreaterThan(refIdx, 0, 'Missing ref index');\n  return opCode | parentIdx << IcuCreateOpCode.SHIFT_PARENT | refIdx << IcuCreateOpCode.SHIFT_REF;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {getPluralCase} from '../../i18n/localization';\nimport {assertDefined, assertDomNode, assertEqual, assertGreaterThan, assertIndexInRange, throwError} from '../../util/assert';\nimport {assertIndexInExpandoRange, assertTIcu} from '../assert';\nimport {attachPatchData} from '../context_discovery';\nimport {elementPropertyInternal, setElementAttribute} from '../instructions/shared';\nimport {ELEMENT_MARKER, I18nCreateOpCode, I18nCreateOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, ICU_MARKER, IcuCreateOpCode, IcuCreateOpCodes, IcuType, TI18n, TIcu} from '../interfaces/i18n';\nimport {TNode} from '../interfaces/node';\nimport {RElement, RNode, RText} from '../interfaces/renderer_dom';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, LView, RENDERER, TView} from '../interfaces/view';\nimport {createCommentNode, createElementNode, createTextNode, nativeInsertBefore, nativeParentNode, nativeRemoveNode, updateTextNode} from '../node_manipulation';\nimport {getBindingIndex} from '../state';\nimport {renderStringify} from '../util/stringify_utils';\nimport {getNativeByIndex, unwrapRNode} from '../util/view_utils';\n\nimport {getLocaleId} from './i18n_locale_id';\nimport {getCurrentICUCaseIndex, getParentFromIcuCreateOpCode, getRefFromIcuCreateOpCode, getTIcu} from './i18n_util';\n\n\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * This is used to efficiently update expressions in i18n only when the corresponding input has\n * changed.\n *\n * 1) Each bit represents which of the `ɵɵi18nExp` has changed.\n * 2) There are 32 bits allowed in JS.\n * 3) Bit 32 is special as it is shared for all changes past 32. (In other words if you have more\n * than 32 `ɵɵi18nExp` then all changes past 32nd `ɵɵi18nExp` will be mapped to same bit. This means\n * that we may end up changing more than we need to. But i18n expressions with 32 bindings is rare\n * so in practice it should not be an issue.)\n */\nlet changeMask = 0b0;\n\n/**\n * Keeps track of which bit needs to be updated in `changeMask`\n *\n * This value gets incremented on every call to `ɵɵi18nExp`\n */\nlet changeMaskCounter = 0;\n\n/**\n * Keep track of which input bindings in `ɵɵi18nExp` have changed.\n *\n * `setMaskBit` gets invoked by each call to `ɵɵi18nExp`.\n *\n * @param hasChange did `ɵɵi18nExp` detect a change.\n */\nexport function setMaskBit(hasChange: boolean) {\n  if (hasChange) {\n    changeMask = changeMask | (1 << Math.min(changeMaskCounter, 31));\n  }\n  changeMaskCounter++;\n}\n\nexport function applyI18n(tView: TView, lView: LView, index: number) {\n  if (changeMaskCounter > 0) {\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index] as TI18n | I18nUpdateOpCodes;\n    // When `index` points to an `ɵɵi18nAttributes` then we have an array otherwise `TI18n`\n    const updateOpCodes: I18nUpdateOpCodes =\n        Array.isArray(tI18n) ? tI18n as I18nUpdateOpCodes : (tI18n as TI18n).update;\n    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;\n    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);\n  }\n  // Reset changeMask & maskBit to default for the next update cycle\n  changeMask = 0b0;\n  changeMaskCounter = 0;\n}\n\n\n/**\n * Apply `I18nCreateOpCodes` op-codes as stored in `TI18n.create`.\n *\n * Creates text (and comment) nodes which are internationalized.\n *\n * @param lView Current lView\n * @param createOpCodes Set of op-codes to apply\n * @param parentRNode Parent node (so that direct children can be added eagerly) or `null` if it is\n *     a root node.\n * @param insertInFrontOf DOM node that should be used as an anchor.\n */\nexport function applyCreateOpCodes(\n    lView: LView, createOpCodes: I18nCreateOpCodes, parentRNode: RElement|null,\n    insertInFrontOf: RElement|null): void {\n  const renderer = lView[RENDERER];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++] as any;\n    const text = createOpCodes[i] as string;\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow =\n        (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    let rNode = lView[index];\n    if (rNode === null) {\n      // We only create new DOM nodes if they don't already exist: If ICU switches case back to a\n      // case which was already instantiated, no need to create new DOM nodes.\n      rNode = lView[index] =\n          isComment ? renderer.createComment(text) : createTextNode(renderer, text);\n    }\n    if (appendNow && parentRNode !== null) {\n      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);\n    }\n  }\n}\n\n/**\n * Apply `I18nMutateOpCodes` OpCodes.\n *\n * @param tView Current `TView`\n * @param mutableOpCodes Mutable OpCodes to process\n * @param lView Current `LView`\n * @param anchorRNode place where the i18n node should be inserted.\n */\nexport function applyMutableOpCodes(\n    tView: TView, mutableOpCodes: IcuCreateOpCodes, lView: LView, anchorRNode: RNode): void {\n  ngDevMode && assertDomNode(anchorRNode);\n  const renderer = lView[RENDERER];\n  // `rootIdx` represents the node into which all inserts happen.\n  let rootIdx: number|null = null;\n  // `rootRNode` represents the real node into which we insert. This can be different from\n  // `lView[rootIdx]` if we have projection.\n  //  - null we don't have a parent (as can be the case in when we are inserting into a root of\n  //    LView which has no parent.)\n  //  - `RElement` The element representing the root after taking projection into account.\n  let rootRNode!: RElement|null;\n  for (let i = 0; i < mutableOpCodes.length; i++) {\n    const opCode = mutableOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textNodeIndex = mutableOpCodes[++i] as number;\n      if (lView[textNodeIndex] === null) {\n        ngDevMode && ngDevMode.rendererCreateTextNode++;\n        ngDevMode && assertIndexInRange(lView, textNodeIndex);\n        lView[textNodeIndex] = createTextNode(renderer, opCode);\n      }\n    } else if (typeof opCode == 'number') {\n      switch (opCode & IcuCreateOpCode.MASK_INSTRUCTION) {\n        case IcuCreateOpCode.AppendChild:\n          const parentIdx = getParentFromIcuCreateOpCode(opCode);\n          if (rootIdx === null) {\n            // The first operation should save the `rootIdx` because the first operation\n            // must insert into the root. (Only subsequent operations can insert into a dynamic\n            // parent)\n            rootIdx = parentIdx;\n            rootRNode = nativeParentNode(renderer, anchorRNode);\n          }\n          let insertInFrontOf: RNode|null;\n          let parentRNode: RElement|null;\n          if (parentIdx === rootIdx) {\n            insertInFrontOf = anchorRNode;\n            parentRNode = rootRNode;\n          } else {\n            insertInFrontOf = null;\n            parentRNode = unwrapRNode(lView[parentIdx]) as RElement;\n          }\n          // FIXME(misko): Refactor with `processI18nText`\n          if (parentRNode !== null) {\n            // This can happen if the `LView` we are adding to is not attached to a parent `LView`.\n            // In such a case there is no \"root\" we can attach to. This is fine, as we still need to\n            // create the elements. When the `LView` gets later added to a parent these \"root\" nodes\n            // get picked up and added.\n            ngDevMode && assertDomNode(parentRNode);\n            const refIdx = getRefFromIcuCreateOpCode(opCode);\n            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, 'Missing ref');\n            // `unwrapRNode` is not needed here as all of these point to RNodes as part of the i18n\n            // which can't have components.\n            const child = lView[refIdx] as RElement;\n            ngDevMode && assertDomNode(child);\n            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);\n            const tIcu = getTIcu(tView, refIdx);\n            if (tIcu !== null && typeof tIcu === 'object') {\n              // If we just added a comment node which has ICU then that ICU may have already been\n              // rendered and therefore we need to re-add it here.\n              ngDevMode && assertTIcu(tIcu);\n              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);\n              if (caseIndex !== null) {\n                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);\n              }\n            }\n          }\n          break;\n        case IcuCreateOpCode.Attr:\n          const elementNodeIndex = opCode >>> IcuCreateOpCode.SHIFT_REF;\n          const attrName = mutableOpCodes[++i] as string;\n          const attrValue = mutableOpCodes[++i] as string;\n          // This code is used for ICU expressions only, since we don't support\n          // directives/components in ICUs, we don't need to worry about inputs here\n          setElementAttribute(\n              renderer, getNativeByIndex(elementNodeIndex, lView) as RElement, null, null, attrName,\n              attrValue, null);\n          break;\n        default:\n          if (ngDevMode) {\n            throw new RuntimeError(\n                RuntimeErrorCode.INVALID_I18N_STRUCTURE,\n                `Unable to determine the type of mutate operation for \"${opCode}\"`);\n          }\n      }\n    } else {\n      switch (opCode) {\n        case ICU_MARKER:\n          const commentValue = mutableOpCodes[++i] as string;\n          const commentNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[commentNodeIndex] === null) {\n            ngDevMode &&\n                assertEqual(\n                    typeof commentValue, 'string',\n                    `Expected \"${commentValue}\" to be a comment node value`);\n            ngDevMode && ngDevMode.rendererCreateComment++;\n            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);\n            const commentRNode = lView[commentNodeIndex] =\n                createCommentNode(renderer, commentValue);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(commentRNode, lView);\n          }\n          break;\n        case ELEMENT_MARKER:\n          const tagName = mutableOpCodes[++i] as string;\n          const elementNodeIndex = mutableOpCodes[++i] as number;\n          if (lView[elementNodeIndex] === null) {\n            ngDevMode &&\n                assertEqual(\n                    typeof tagName, 'string',\n                    `Expected \"${tagName}\" to be an element node tag name`);\n\n            ngDevMode && ngDevMode.rendererCreateElement++;\n            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);\n            const elementRNode = lView[elementNodeIndex] =\n                createElementNode(renderer, tagName, null);\n            // FIXME(misko): Attaching patch data is only needed for the root (Also add tests)\n            attachPatchData(elementRNode, lView);\n          }\n          break;\n        default:\n          ngDevMode &&\n              throwError(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n}\n\n\n/**\n * Apply `I18nUpdateOpCodes` OpCodes\n *\n * @param tView Current `TView`\n * @param lView Current `LView`\n * @param updateOpCodes OpCodes to process\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param changeMask Each bit corresponds to a `ɵɵi18nExp` (Counting backwards from\n *     `bindingsStartIndex`)\n */\nexport function applyUpdateOpCodes(\n    tView: TView, lView: LView, updateOpCodes: I18nUpdateOpCodes, bindingsStartIndex: number,\n    changeMask: number) {\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i] as number;\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i] as number;\n    if (checkBit & changeMask) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= (i + skipCodes); j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // Negative opCode represent `i18nExp` values offset.\n            value += renderStringify(lView[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = (opCode >>> I18nUpdateOpCode.SHIFT_REF);\n            switch (opCode & I18nUpdateOpCode.MASK_OPCODE) {\n              case I18nUpdateOpCode.Attr:\n                const propName = updateOpCodes[++j] as string;\n                const sanitizeFn = updateOpCodes[++j] as SanitizerFn | null;\n                const tNodeOrTagName = tView.data[nodeIndex] as TNode | string;\n                ngDevMode && assertDefined(tNodeOrTagName, 'Experting TNode or string');\n                if (typeof tNodeOrTagName === 'string') {\n                  // IF we don't have a `TNode`, then we are an element in ICU (as ICU content does\n                  // not have TNode), in which case we know that there are no directives, and hence\n                  // we use attribute setting.\n                  setElementAttribute(\n                      lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value,\n                      sanitizeFn);\n                } else {\n                  elementPropertyInternal(\n                      tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn,\n                      false);\n                }\n                break;\n              case I18nUpdateOpCode.Text:\n                const rText = lView[nodeIndex] as RText | null;\n                rText !== null && updateTextNode(lView[RENDERER], rText, value);\n                break;\n              case I18nUpdateOpCode.IcuSwitch:\n                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex)!, lView, value);\n                break;\n              case I18nUpdateOpCode.IcuUpdate:\n                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex)!, bindingsStartIndex, lView);\n                break;\n            }\n          }\n        }\n      }\n    } else {\n      const opCode = updateOpCodes[i + 1] as number;\n      if (opCode > 0 && (opCode & I18nUpdateOpCode.MASK_OPCODE) === I18nUpdateOpCode.IcuUpdate) {\n        // Special case for the `icuUpdateCase`. It could be that the mask did not match, but\n        // we still need to execute `icuUpdateCase` because the case has changed recently due to\n        // previous `icuSwitchCase` instruction. (`icuSwitchCase` and `icuUpdateCase` always come in\n        // pairs.)\n        const nodeIndex = (opCode >>> I18nUpdateOpCode.SHIFT_REF);\n        const tIcu = getTIcu(tView, nodeIndex)!;\n        const currentIndex = lView[tIcu.currentCaseLViewIndex];\n        if (currentIndex < 0) {\n          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n\n/**\n * Apply OpCodes associated with updating an existing ICU.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param bindingsStartIndex Location of the first `ɵɵi18nApply`\n * @param lView Current `LView`\n */\nfunction applyIcuUpdateCase(tView: TView, tIcu: TIcu, bindingsStartIndex: number, lView: LView) {\n  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);\n  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];\n  if (activeCaseIndex !== null) {\n    let mask = changeMask;\n    if (activeCaseIndex < 0) {\n      // Clear the flag.\n      // Negative number means that the ICU was freshly created and we need to force the update.\n      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;\n      // -1 is same as all bits on, which simulates creation since it marks all bits dirty\n      mask = -1;\n    }\n    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);\n  }\n}\n\n/**\n * Apply OpCodes associated with switching a case on ICU.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n * @param value Value of the case to update to.\n */\nfunction applyIcuSwitchCase(tView: TView, tIcu: TIcu, lView: LView, value: string) {\n  // Rebuild a new case for this ICU\n  const caseIndex = getCaseIndex(tIcu, value);\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== caseIndex) {\n    applyIcuSwitchCaseRemove(tView, tIcu, lView);\n    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;\n    if (caseIndex !== null) {\n      // Add the nodes for the new case\n      const anchorRNode = lView[tIcu.anchorIdx];\n      if (anchorRNode) {\n        ngDevMode && assertDomNode(anchorRNode);\n        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);\n      }\n    }\n  }\n}\n\n/**\n * Apply OpCodes associated with tearing ICU case.\n *\n * This involves tearing down existing case and than building up a new case.\n *\n * @param tView Current `TView`\n * @param tIcu Current `TIcu`\n * @param lView Current `LView`\n */\nfunction applyIcuSwitchCaseRemove(tView: TView, tIcu: TIcu, lView: LView) {\n  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);\n  if (activeCaseIndex !== null) {\n    const removeCodes = tIcu.remove[activeCaseIndex];\n    for (let i = 0; i < removeCodes.length; i++) {\n      const nodeOrIcuIndex = removeCodes[i] as number;\n      if (nodeOrIcuIndex > 0) {\n        // Positive numbers are `RNode`s.\n        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);\n        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);\n      } else {\n        // Negative numbers are ICUs\n        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex)!, lView);\n      }\n    }\n  }\n}\n\n\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression: TIcu, bindingValue: string): number|null {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case IcuType.plural: {\n        const resolvedCase = getPluralCase(bindingValue, getLocaleId());\n        index = icuExpression.cases.indexOf(resolvedCase);\n        if (index === -1 && resolvedCase !== 'other') {\n          index = icuExpression.cases.indexOf('other');\n        }\n        break;\n      }\n      case IcuType.select: {\n        index = icuExpression.cases.indexOf('other');\n        break;\n      }\n    }\n  }\n  return index === -1 ? null : index;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDomNode, assertNumber, assertNumberInRange} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {assertTIcu, assertTNodeForLView} from '../assert';\nimport {getCurrentICUCaseIndex} from '../i18n/i18n_util';\nimport {I18nRemoveOpCodes, TIcu} from '../interfaces/i18n';\nimport {TIcuContainerNode} from '../interfaces/node';\nimport {RNode} from '../interfaces/renderer_dom';\nimport {LView, TVIEW} from '../interfaces/view';\n\nexport function loadIcuContainerVisitor() {\n  const _stack: any[] = [];\n  let _index: number = -1;\n  let _lView: LView;\n  let _removes: I18nRemoveOpCodes;\n\n  /**\n   * Retrieves a set of root nodes from `TIcu.remove`. Used by `TNodeType.ICUContainer`\n   * to determine which root belong to the ICU.\n   *\n   * Example of usage.\n   * ```\n   * const nextRNode = icuContainerIteratorStart(tIcuContainerNode, lView);\n   * let rNode: RNode|null;\n   * while(rNode = nextRNode()) {\n   *   console.log(rNode);\n   * }\n   * ```\n   *\n   * @param tIcuContainerNode Current `TIcuContainerNode`\n   * @param lView `LView` where the `RNode`s should be looked up.\n   */\n  function icuContainerIteratorStart(tIcuContainerNode: TIcuContainerNode, lView: LView): () =>\n      RNode | null {\n    _lView = lView;\n    while (_stack.length) _stack.pop();\n    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);\n    enterIcu(tIcuContainerNode.value, lView);\n    return icuContainerIteratorNext;\n  }\n\n  function enterIcu(tIcu: TIcu, lView: LView) {\n    _index = 0;\n    const currentCase = getCurrentICUCaseIndex(tIcu, lView);\n    if (currentCase !== null) {\n      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);\n      _removes = tIcu.remove[currentCase];\n    } else {\n      _removes = EMPTY_ARRAY as any;\n    }\n  }\n\n\n  function icuContainerIteratorNext(): RNode|null {\n    if (_index < _removes.length) {\n      const removeOpCode = _removes[_index++] as number;\n      ngDevMode && assertNumber(removeOpCode, 'Expecting OpCode number');\n      if (removeOpCode > 0) {\n        const rNode = _lView[removeOpCode];\n        ngDevMode && assertDomNode(rNode);\n        return rNode;\n      } else {\n        _stack.push(_index, _removes);\n        // ICUs are represented by negative indices\n        const tIcuIndex = ~removeOpCode;\n        const tIcu = _lView[TVIEW].data[tIcuIndex] as TIcu;\n        ngDevMode && assertTIcu(tIcu);\n        enterIcu(tIcu, _lView);\n        return icuContainerIteratorNext();\n      }\n    } else {\n      if (_stack.length === 0) {\n        return null;\n      } else {\n        _removes = _stack.pop();\n        _index = _stack.pop();\n        return icuContainerIteratorNext();\n      }\n    }\n  }\n\n  return icuContainerIteratorStart;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertNumber, assertString} from '../../util/assert';\nimport {ELEMENT_MARKER, I18nCreateOpCode, I18nCreateOpCodes, I18nRemoveOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, ICU_MARKER, IcuCreateOpCode, IcuCreateOpCodes} from '../interfaces/i18n';\n\nimport {getInstructionFromIcuCreateOpCode, getParentFromIcuCreateOpCode, getRefFromIcuCreateOpCode} from './i18n_util';\n\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nexport function i18nCreateOpCodesToString(\n    this: I18nCreateOpCodes|void, opcodes?: I18nCreateOpCodes): string[] {\n  const createOpCodes: I18nCreateOpCodes = opcodes || (Array.isArray(this) ? this : [] as any);\n  let lines: string[] = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i++] as any;\n    const text = createOpCodes[i] as string;\n    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;\n    const appendNow =\n        (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;\n    const index = opCode >>> I18nCreateOpCode.SHIFT;\n    lines.push(`lView[${index}] = document.${isComment ? 'createComment' : 'createText'}(${\n        JSON.stringify(text)});`);\n    if (appendNow) {\n      lines.push(`parent.appendChild(lView[${index}]);`);\n    }\n  }\n  return lines;\n}\n\n/**\n * Converts `I18nUpdateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nUpdateOpCodes.debug` property if `ngDevMode` is enabled.\n * This function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nUpdateOpCodes` if attached as a method.\n * @param opcodes `I18nUpdateOpCodes` if invoked as a function.\n */\nexport function i18nUpdateOpCodesToString(\n    this: I18nUpdateOpCodes|void, opcodes?: I18nUpdateOpCodes): string[] {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines: string[] = [];\n\n  function consumeOpCode(value: number): string {\n    const ref = value >>> I18nUpdateOpCode.SHIFT_REF;\n    const opCode = value & I18nUpdateOpCode.MASK_OPCODE;\n    switch (opCode) {\n      case I18nUpdateOpCode.Text:\n        return `(lView[${ref}] as Text).textContent = $$$`;\n      case I18nUpdateOpCode.Attr:\n        const attrName = parser.consumeString();\n        const sanitizationFn = parser.consumeFunction();\n        const value = sanitizationFn ? `(${sanitizationFn})($$$)` : '$$$';\n        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value})`;\n      case I18nUpdateOpCode.IcuSwitch:\n        return `icuSwitchCase(${ref}, $$$)`;\n      case I18nUpdateOpCode.IcuUpdate:\n        return `icuUpdateCase(${ref})`;\n    }\n    throw new Error('unexpected OpCode');\n  }\n\n\n  while (parser.hasMore()) {\n    let mask = parser.consumeNumber();\n    let size = parser.consumeNumber();\n    const end = parser.i + size;\n    const statements: string[] = [];\n    let statement = '';\n    while (parser.i < end) {\n      let value = parser.consumeNumberOrString();\n      if (typeof value === 'string') {\n        statement += value;\n      } else if (value < 0) {\n        // Negative numbers are ref indexes\n        // Here `i` refers to current binding index. It is to signify that the value is relative,\n        // rather than absolute.\n        statement += '${lView[i' + value + ']}';\n      } else {\n        // Positive numbers are operations.\n        const opCodeText = consumeOpCode(value);\n        statements.push(opCodeText.replace('$$$', '`' + statement + '`') + ';');\n        statement = '';\n      }\n    }\n    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(' ')} }`);\n  }\n  return lines;\n}\n\n/**\n * Converts `I18nCreateOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nCreateOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nCreateOpCodes` if attached as a method.\n * @param opcodes `I18nCreateOpCodes` if invoked as a function.\n */\nexport function icuCreateOpCodesToString(\n    this: IcuCreateOpCodes|void, opcodes?: IcuCreateOpCodes): string[] {\n  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));\n  let lines: string[] = [];\n\n  function consumeOpCode(opCode: number): string {\n    const parent = getParentFromIcuCreateOpCode(opCode);\n    const ref = getRefFromIcuCreateOpCode(opCode);\n    switch (getInstructionFromIcuCreateOpCode(opCode)) {\n      case IcuCreateOpCode.AppendChild:\n        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;\n      case IcuCreateOpCode.Attr:\n        return `(lView[${ref}] as Element).setAttribute(\"${parser.consumeString()}\", \"${\n            parser.consumeString()}\")`;\n    }\n    throw new Error('Unexpected OpCode: ' + getInstructionFromIcuCreateOpCode(opCode));\n  }\n\n  let lastRef = -1;\n  while (parser.hasMore()) {\n    let value = parser.consumeNumberStringOrMarker();\n    if (value === ICU_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createComment(\"${text}\")`);\n    } else if (value === ELEMENT_MARKER) {\n      const text = parser.consumeString();\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createElement(\"${text}\")`);\n    } else if (typeof value === 'string') {\n      lastRef = parser.consumeNumber();\n      lines.push(`lView[${lastRef}] = document.createTextNode(\"${value}\")`);\n    } else if (typeof value === 'number') {\n      const line = consumeOpCode(value);\n      line && lines.push(line);\n    } else {\n      throw new Error('Unexpected value');\n    }\n  }\n\n  return lines;\n}\n\n/**\n * Converts `I18nRemoveOpCodes` array into a human readable format.\n *\n * This function is attached to the `I18nRemoveOpCodes.debug` if `ngDevMode` is enabled. This\n * function provides a human readable view of the opcodes. This is useful when debugging the\n * application as well as writing more readable tests.\n *\n * @param this `I18nRemoveOpCodes` if attached as a method.\n * @param opcodes `I18nRemoveOpCodes` if invoked as a function.\n */\nexport function i18nRemoveOpCodesToString(\n    this: I18nRemoveOpCodes|void, opcodes?: I18nRemoveOpCodes): string[] {\n  const removeCodes = opcodes || (Array.isArray(this) ? this : []);\n  let lines: string[] = [];\n\n  for (let i = 0; i < removeCodes.length; i++) {\n    const nodeOrIcuIndex = removeCodes[i] as number;\n    if (nodeOrIcuIndex > 0) {\n      // Positive numbers are `RNode`s.\n      lines.push(`remove(lView[${nodeOrIcuIndex}])`);\n    } else {\n      // Negative numbers are ICUs\n      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);\n    }\n  }\n\n  return lines;\n}\n\n\nclass OpCodeParser {\n  i: number = 0;\n  codes: any[];\n\n  constructor(codes: any[]) {\n    this.codes = codes;\n  }\n\n  hasMore() {\n    return this.i < this.codes.length;\n  }\n\n  consumeNumber(): number {\n    let value = this.codes[this.i++];\n    assertNumber(value, 'expecting number in OpCode');\n    return value;\n  }\n\n  consumeString(): string {\n    let value = this.codes[this.i++];\n    assertString(value, 'expecting string in OpCode');\n    return value;\n  }\n\n  consumeFunction(): Function|null {\n    let value = this.codes[this.i++];\n    if (value === null || typeof value === 'function') {\n      return value;\n    }\n    throw new Error('expecting function in OpCode');\n  }\n\n  consumeNumberOrString(): number|string {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string') {\n      return value;\n    }\n    assertNumber(value, 'expecting number or string in OpCode');\n    return value;\n  }\n\n  consumeNumberStringOrMarker(): number|string|ICU_MARKER|ELEMENT_MARKER {\n    let value = this.codes[this.i++];\n    if (typeof value === 'string' || typeof value === 'number' || value == ICU_MARKER ||\n        value == ELEMENT_MARKER) {\n      return value;\n    }\n    assertNumber(value, 'expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode');\n    return value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {XSS_SECURITY_URL} from '../../error_details_base_url';\nimport {getTemplateContent, URI_ATTRS, VALID_ATTRS, VALID_ELEMENTS} from '../../sanitization/html_sanitizer';\nimport {getInertBodyHelper} from '../../sanitization/inert_body';\nimport {_sanitizeUrl} from '../../sanitization/url_sanitizer';\nimport {assertDefined, assertEqual, assertGreaterThanOrEqual, assertOneOf, assertString} from '../../util/assert';\nimport {CharCode} from '../../util/char_code';\nimport {loadIcuContainerVisitor} from '../instructions/i18n_icu_container_visitor';\nimport {allocExpando, createTNodeAtIndex} from '../instructions/shared';\nimport {getDocument} from '../interfaces/document';\nimport {ELEMENT_MARKER, I18nCreateOpCode, I18nCreateOpCodes, I18nRemoveOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, ICU_MARKER, IcuCreateOpCode, IcuCreateOpCodes, IcuExpression, IcuType, TI18n, TIcu} from '../interfaces/i18n';\nimport {TNode, TNodeType} from '../interfaces/node';\nimport {SanitizerFn} from '../interfaces/sanitization';\nimport {HEADER_OFFSET, LView, TView} from '../interfaces/view';\nimport {getCurrentParentTNode, getCurrentTNode, setCurrentTNode} from '../state';\n\nimport {i18nCreateOpCodesToString, i18nRemoveOpCodesToString, i18nUpdateOpCodesToString, icuCreateOpCodesToString} from './i18n_debug';\nimport {addTNodeAndUpdateInsertBeforeIndex} from './i18n_insert_before_index';\nimport {ensureIcuContainerVisitorLoaded} from './i18n_tree_shaking';\nimport {createTNodePlaceholder, icuCreateOpCode, setTIcu, setTNodeInsertBeforeIndex} from './i18n_util';\n\n\n\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+:?\\d*�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\nconst NESTED_ICU = /�(\\d+)�/;\nconst ICU_BLOCK_REGEXP = /^\\s*(�\\d+:?\\d*�)\\s*,\\s*(select|plural)\\s*,/;\n\nconst MARKER = `�`;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\n\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here, since translations\n * might contain this special character.\n */\nconst NGSP_UNICODE_REGEXP = /\\uE500/g;\nfunction replaceNgsp(value: string): string {\n  return value.replace(NGSP_UNICODE_REGEXP, ' ');\n}\n\n/**\n * Patch a `debug` property getter on top of the existing object.\n *\n * NOTE: always call this method with `ngDevMode && attachDebugObject(...)`\n *\n * @param obj Object to patch\n * @param debugGetter Getter returning a value to patch\n */\nfunction attachDebugGetter<T>(obj: T, debugGetter: (this: T) => any): void {\n  if (ngDevMode) {\n    Object.defineProperty(obj, 'debug', {get: debugGetter, enumerable: false});\n  } else {\n    throw new Error(\n        'This method should be guarded with `ngDevMode` so that it can be tree shaken in production!');\n  }\n}\n\n/**\n * Create dynamic nodes from i18n translation block.\n *\n * - Text nodes are created synchronously\n * - TNodes are linked into tree lazily\n *\n * @param tView Current `TView`\n * @parentTNodeIndex index to the parent TNode of this i18n block\n * @param lView Current `LView`\n * @param index Index of `ɵɵi18nStart` instruction.\n * @param message Message to translate.\n * @param subTemplateIndex Index into the sub template of message translation. (ie in case of\n *     `ngIf`) (-1 otherwise)\n */\nexport function i18nStartFirstCreatePass(\n    tView: TView, parentTNodeIndex: number, lView: LView, index: number, message: string,\n    subTemplateIndex: number) {\n  const rootTNode = getCurrentParentTNode();\n  const createOpCodes: I18nCreateOpCodes = [] as any;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  const existingTNodeStack: TNode[][] = [[]];\n  if (ngDevMode) {\n    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n\n  message = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = replaceNgsp(message).split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if ((i & 1) === 0) {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = i18nParseTextIntoPartsAndICU(value);\n      for (let j = 0; j < parts.length; j++) {\n        let part = parts[j];\n        if ((j & 1) === 0) {\n          // `j` is odd therefore `part` is string\n          const text = part as string;\n          ngDevMode && assertString(text, 'Parsed ICU part should be string');\n          if (text !== '') {\n            i18nStartFirstCreatePassProcessTextNode(\n                tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);\n          }\n        } else {\n          // `j` is Even therefor `part` is an `ICUExpression`\n          const icuExpression: IcuExpression = part as IcuExpression;\n          // Verify that ICU expression has the right shape. Translations might contain invalid\n          // constructions (while original messages were correct), so ICU parsing at runtime may\n          // not succeed (thus `icuExpression` remains a string).\n          // Note: we intentionally retain the error here by not using `ngDevMode`, because\n          // the value can change based on the locale and users aren't guaranteed to hit\n          // an invalid string while they're developing.\n          if (typeof icuExpression !== 'object') {\n            throw new Error(`Unable to parse ICU expression in \"${message}\" message.`);\n          }\n          const icuContainerTNode = createTNodeAndAddOpCode(\n              tView, rootTNode, existingTNodeStack[0], lView, createOpCodes,\n              ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : '', true);\n          const icuNodeIndex = icuContainerTNode.index;\n          ngDevMode &&\n              assertGreaterThanOrEqual(\n                  icuNodeIndex, HEADER_OFFSET, 'Index must be in absolute LView offset');\n          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);\n        }\n      }\n    } else {\n      // Odd indexes are placeholders (elements and sub-templates)\n      // At this point value is something like: '/#1:2' (originally coming from '�/#1:2�')\n      const isClosing = value.charCodeAt(0) === CharCode.SLASH;\n      const type = value.charCodeAt(isClosing ? 1 : 0);\n      ngDevMode && assertOneOf(type, CharCode.STAR, CharCode.HASH);\n      const index = HEADER_OFFSET + Number.parseInt(value.substring((isClosing ? 2 : 1)));\n      if (isClosing) {\n        existingTNodeStack.shift();\n        setCurrentTNode(getCurrentParentTNode()!, false);\n      } else {\n        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index);\n        existingTNodeStack.unshift([]);\n        setCurrentTNode(tNode, true);\n      }\n    }\n  }\n\n  tView.data[index] = <TI18n>{\n    create: createOpCodes,\n    update: updateOpCodes,\n  };\n}\n\n/**\n * Allocate space in i18n Range add create OpCode instruction to create a text or comment node.\n *\n * @param tView Current `TView` needed to allocate space in i18n range.\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will be\n *     added as part of the `i18nStart` instruction or as part of the `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param lView Current `LView` needed to allocate space in i18n range.\n * @param createOpCodes Array storing `I18nCreateOpCodes` where new opCodes will be added.\n * @param text Text to be added when the `Text` or `Comment` node will be created.\n * @param isICU true if a `Comment` node for ICU (instead of `Text`) node should be created.\n */\nfunction createTNodeAndAddOpCode(\n    tView: TView, rootTNode: TNode|null, existingTNodes: TNode[], lView: LView,\n    createOpCodes: I18nCreateOpCodes, text: string|null, isICU: boolean): TNode {\n  const i18nNodeIdx = allocExpando(tView, lView, 1, null);\n  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;\n  let parentTNode = getCurrentParentTNode();\n\n  if (rootTNode === parentTNode) {\n    // FIXME(misko): A null `parentTNode` should represent when we fall of the `LView` boundary.\n    // (there is no parent), but in some circumstances (because we are inconsistent about how we set\n    // `previousOrParentTNode`) it could point to `rootTNode` So this is a work around.\n    parentTNode = null;\n  }\n  if (parentTNode === null) {\n    // If we don't have a parent that means that we can eagerly add nodes.\n    // If we have a parent than these nodes can't be added now (as the parent has not been created\n    // yet) and instead the `parentTNode` is responsible for adding it. See\n    // `TNode.insertBeforeIndex`\n    opCode |= I18nCreateOpCode.APPEND_EAGERLY;\n  }\n  if (isICU) {\n    opCode |= I18nCreateOpCode.COMMENT;\n    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);\n  }\n  createOpCodes.push(opCode, text === null ? '' : text);\n  // We store `{{?}}` so that when looking at debug `TNodeType.template` we can see where the\n  // bindings are.\n  const tNode = createTNodeAtIndex(\n      tView, i18nNodeIdx, isICU ? TNodeType.Icu : TNodeType.Text,\n      text === null ? (ngDevMode ? '{{?}}' : '') : text, null);\n  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);\n  const tNodeIdx = tNode.index;\n  setCurrentTNode(tNode, false /* Text nodes are self closing */);\n  if (parentTNode !== null && rootTNode !== parentTNode) {\n    // We are a child of deeper node (rather than a direct child of `i18nStart` instruction.)\n    // We have to make sure to add ourselves to the parent.\n    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);\n  }\n  return tNode;\n}\n\n/**\n * Processes text node in i18n block.\n *\n * Text nodes can have:\n * - Create instruction in `createOpCodes` for creating the text node.\n * - Allocate spec for text node in i18n range of `LView`\n * - If contains binding:\n *    - bindings => allocate space in i18n range of `LView` to store the binding value.\n *    - populate `updateOpCodes` with update instructions.\n *\n * @param tView Current `TView`\n * @param rootTNode Root `TNode` of the i18n block. This node determines if the new TNode will\n *     be added as part of the `i18nStart` instruction or as part of the\n *     `TNode.insertBeforeIndex`.\n * @param existingTNodes internal state for `addTNodeAndUpdateInsertBeforeIndex`.\n * @param createOpCodes Location where the creation OpCodes will be stored.\n * @param lView Current `LView`\n * @param text The translated text (which may contain binding)\n */\nfunction i18nStartFirstCreatePassProcessTextNode(\n    tView: TView, rootTNode: TNode|null, existingTNodes: TNode[], createOpCodes: I18nCreateOpCodes,\n    updateOpCodes: I18nUpdateOpCodes, lView: LView, text: string): void {\n  const hasBinding = text.match(BINDING_REGEXP);\n  const tNode = createTNodeAndAddOpCode(\n      tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);\n  if (hasBinding) {\n    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);\n  }\n}\n\n/**\n * See `i18nAttributes` above.\n */\nexport function i18nAttributesFirstPass(tView: TView, index: number, values: string[]) {\n  const previousElement = getCurrentTNode()!;\n  const previousElementIndex = previousElement.index;\n  const updateOpCodes: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  if (tView.firstCreatePass && tView.data[index] === null) {\n    for (let i = 0; i < values.length; i += 2) {\n      const attrName = values[i];\n      const message = values[i + 1];\n\n      if (message !== '') {\n        // Check if attribute value contains an ICU and throw an error if that's the case.\n        // ICUs in element attributes are not supported.\n        // Note: we intentionally retain the error here by not using `ngDevMode`, because\n        // the `value` can change based on the locale and users aren't guaranteed to hit\n        // an invalid string while they're developing.\n        if (ICU_REGEXP.test(message)) {\n          throw new Error(\n              `ICU expressions are not supported in attributes. Message: \"${message}\".`);\n        }\n\n        // i18n attributes that hit this code path are guaranteed to have bindings, because\n        // the compiler treats static i18n attributes as regular attribute bindings.\n        // Since this may not be the first i18n attribute on this element we need to pass in how\n        // many previous bindings there have already been.\n        generateBindingUpdateOpCodes(\n            updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes),\n            null);\n      }\n    }\n    tView.data[index] = updateOpCodes;\n  }\n}\n\n\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param updateOpCodes Place where the update opcodes will be stored.\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @param bindingStart The lView index of the next expression that can be bound via an opCode.\n * @returns The mask value for these bindings\n */\nfunction generateBindingUpdateOpCodes(\n    updateOpCodes: I18nUpdateOpCodes, str: string, destinationNode: number, attrName: string|null,\n    bindingStart: number, sanitizeFn: SanitizerFn|null): number {\n  ngDevMode &&\n      assertGreaterThanOrEqual(\n          destinationNode, HEADER_OFFSET, 'Index must be in absolute LView offset');\n  const maskIndex = updateOpCodes.length;  // Location of mask\n  const sizeIndex = maskIndex + 1;         // location of size for skipping\n  updateOpCodes.push(null, null);          // Alloc space for mask and size\n  const startIndex = maskIndex + 2;        // location of first allocation.\n  if (ngDevMode) {\n    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);\n  }\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = bindingStart + parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n\n  updateOpCodes.push(\n      destinationNode << I18nUpdateOpCode.SHIFT_REF |\n      (attrName ? I18nUpdateOpCode.Attr : I18nUpdateOpCode.Text));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[maskIndex] = mask;\n  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;\n  return mask;\n}\n\n/**\n * Count the number of bindings in the given `opCodes`.\n *\n * It could be possible to speed this up, by passing the number of bindings found back from\n * `generateBindingUpdateOpCodes()` to `i18nAttributesFirstPass()` but this would then require more\n * complexity in the code and/or transient objects to be created.\n *\n * Since this function is only called once when the template is instantiated, is trivial in the\n * first instance (since `opCodes` will be an empty array), and it is not common for elements to\n * contain multiple i18n bound attributes, it seems like this is a reasonable compromise.\n */\nfunction countBindings(opCodes: I18nUpdateOpCodes): number {\n  let count = 0;\n  for (let i = 0; i < opCodes.length; i++) {\n    const opCode = opCodes[i];\n    // Bindings are negative numbers.\n    if (typeof opCode === 'number' && opCode < 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to\n * have more than 32 bindings this will be hit very rarely. The downside of hitting this corner\n * case is that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex: number): number {\n  return 1 << Math.min(bindingIndex, 31);\n}\n\nexport function isRootTemplateMessage(subTemplateIndex: number): subTemplateIndex is - 1 {\n  return subTemplateIndex === -1;\n}\n\n\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message: string): string {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n\n  ngDevMode &&\n      assertEqual(\n          inTemplate, false,\n          `Tag mismatch: unable to find the end of the sub-template in the translation \"${\n              message}\"`);\n\n  res += message.slice(index);\n  return res;\n}\n\n\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A\n * translated message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nexport function getTranslationForTemplate(message: string, subTemplateIndex: number) {\n  if (isRootTemplateMessage(subTemplateIndex)) {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start =\n        message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param icuExpression\n * @param index Index where the anchor is stored and an optional `TIcuContainerNode`\n *   - `lView[anchorIdx]` points to a `Comment` node representing the anchor for the ICU.\n *   - `tView.data[anchorIdx]` points to the `TIcuContainerNode` if ICU is root (`null` otherwise)\n */\nexport function icuStart(\n    tView: TView, lView: LView, updateOpCodes: I18nUpdateOpCodes, parentIdx: number,\n    icuExpression: IcuExpression, anchorIdx: number) {\n  ngDevMode && assertDefined(icuExpression, 'ICU expression must be defined');\n  let bindingMask = 0;\n  const tIcu: TIcu = {\n    type: icuExpression.type,\n    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),\n    anchorIdx,\n    cases: [],\n    create: [],\n    remove: [],\n    update: []\n  };\n  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);\n  setTIcu(tView, anchorIdx, tIcu);\n  const values = icuExpression.values;\n  for (let i = 0; i < values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = values[i];\n    const nestedIcus: IcuExpression[] = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value as IcuExpression) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    bindingMask = parseIcuCase(\n                      tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i],\n                      valueArr.join(''), nestedIcus) |\n        bindingMask;\n  }\n  if (bindingMask) {\n    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);\n  }\n}\n\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nexport function parseICUBlock(pattern: string): IcuExpression {\n  const cases = [];\n  const values: (string|IcuExpression)[][] = [];\n  let icuType = IcuType.plural;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str: string, binding: string, type: string) {\n    if (type === 'select') {\n      icuType = IcuType.select;\n    } else {\n      icuType = IcuType.plural;\n    }\n    mainBinding = parseInt(binding.slice(1), 10);\n    return '';\n  });\n\n  const parts = i18nParseTextIntoPartsAndICU(pattern) as string[];\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === IcuType.plural) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n\n    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]) as string[];\n    if (cases.length > values.length) {\n      values.push(blocks);\n    }\n  }\n\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {type: icuType, mainBinding: mainBinding, cases, values};\n}\n\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression\n * into keys and cases. Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n * @returns An `Array<string|IcuExpression>` where:\n *   - odd positions: `string` => text between ICU expressions\n *   - even positions: `ICUExpression` => ICU expression parsed into `ICUExpression` record.\n */\nexport function i18nParseTextIntoPartsAndICU(pattern: string): (string|IcuExpression)[] {\n  if (!pattern) {\n    return [];\n  }\n\n  let prevPos = 0;\n  const braceStack = [];\n  const results: (string|IcuExpression)[] = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEXP.test(block)) {\n          results.push(parseICUBlock(block));\n        } else {\n          results.push(block);\n        }\n\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  const substring = pattern.substring(prevPos);\n  results.push(substring);\n  return results;\n}\n\n\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n */\nexport function parseIcuCase(\n    tView: TView, tIcu: TIcu, lView: LView, updateOpCodes: I18nUpdateOpCodes, parentIdx: number,\n    caseName: string, unsafeCaseHtml: string, nestedIcus: IcuExpression[]): number {\n  const create: IcuCreateOpCodes = [] as any;\n  const remove: I18nRemoveOpCodes = [] as any;\n  const update: I18nUpdateOpCodes = [] as any;\n  if (ngDevMode) {\n    attachDebugGetter(create, icuCreateOpCodesToString);\n    attachDebugGetter(remove, i18nRemoveOpCodesToString);\n    attachDebugGetter(update, i18nUpdateOpCodesToString);\n  }\n  tIcu.cases.push(caseName);\n  tIcu.create.push(create);\n  tIcu.remove.push(remove);\n  tIcu.update.push(update);\n\n  const inertBodyHelper = getInertBodyHelper(getDocument());\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeCaseHtml);\n  ngDevMode && assertDefined(inertBodyElement, 'Unable to generate inert body element');\n  const inertRootNode = getTemplateContent(inertBodyElement!) as Element || inertBodyElement;\n  if (inertRootNode) {\n    return walkIcuTree(\n        tView, tIcu, lView, updateOpCodes, create, remove, update, inertRootNode, parentIdx,\n        nestedIcus, 0);\n  } else {\n    return 0;\n  }\n}\n\nfunction walkIcuTree(\n    tView: TView, tIcu: TIcu, lView: LView, sharedUpdateOpCodes: I18nUpdateOpCodes,\n    create: IcuCreateOpCodes, remove: I18nRemoveOpCodes, update: I18nUpdateOpCodes,\n    parentNode: Element, parentIdx: number, nestedIcus: IcuExpression[], depth: number): number {\n  let bindingMask = 0;\n  let currentNode = parentNode.firstChild;\n  while (currentNode) {\n    const newIndex = allocExpando(tView, lView, 1, null);\n    switch (currentNode.nodeType) {\n      case Node.ELEMENT_NODE:\n        const element = currentNode as Element;\n        const tagName = element.tagName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {\n          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);\n          tView.data[newIndex] = tagName;\n          const elAttrs = element.attributes;\n          for (let i = 0; i < elAttrs.length; i++) {\n            const attr = elAttrs.item(i)!;\n            const lowerAttrName = attr.name.toLowerCase();\n            const hasBinding = !!attr.value.match(BINDING_REGEXP);\n            // we assume the input string is safe, unless it's using a binding\n            if (hasBinding) {\n              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                if (URI_ATTRS[lowerAttrName]) {\n                  generateBindingUpdateOpCodes(\n                      update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);\n                } else {\n                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);\n                }\n              } else {\n                ngDevMode &&\n                    console.warn(\n                        `WARNING: ignoring unsafe attribute value ` +\n                        `${lowerAttrName} on element ${tagName} ` +\n                        `(see ${XSS_SECURITY_URL})`);\n              }\n            } else {\n              addCreateAttribute(create, newIndex, attr);\n            }\n          }\n          // Parse the children of this node (if any)\n          bindingMask = walkIcuTree(\n                            tView, tIcu, lView, sharedUpdateOpCodes, create, remove, update,\n                            currentNode as Element, newIndex, nestedIcus, depth + 1) |\n              bindingMask;\n          addRemoveNode(remove, newIndex, depth);\n        }\n        break;\n      case Node.TEXT_NODE:\n        const value = currentNode.textContent || '';\n        const hasBinding = value.match(BINDING_REGEXP);\n        addCreateNodeAndAppend(create, null, hasBinding ? '' : value, parentIdx, newIndex);\n        addRemoveNode(remove, newIndex, depth);\n        if (hasBinding) {\n          bindingMask =\n              generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;\n        }\n        break;\n      case Node.COMMENT_NODE:\n        // Check if the comment node is a placeholder for a nested ICU\n        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || '');\n        if (isNestedIcu) {\n          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);\n          const icuExpression: IcuExpression = nestedIcus[nestedIcuIndex];\n          // Create the comment node that will anchor the ICU expression\n          addCreateNodeAndAppend(\n              create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : '', parentIdx,\n              newIndex);\n          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);\n          addRemoveNestedIcu(remove, newIndex, depth);\n        }\n        break;\n    }\n    currentNode = currentNode.nextSibling;\n  }\n  return bindingMask;\n}\n\nfunction addRemoveNode(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(index);\n  }\n}\n\nfunction addRemoveNestedIcu(remove: I18nRemoveOpCodes, index: number, depth: number) {\n  if (depth === 0) {\n    remove.push(~index);  // remove ICU at `index`\n    remove.push(index);   // remove ICU comment at `index`\n  }\n}\n\nfunction addUpdateIcuSwitch(\n    update: I18nUpdateOpCodes, icuExpression: IcuExpression, index: number) {\n  update.push(\n      toMaskBit(icuExpression.mainBinding), 2, -1 - icuExpression.mainBinding,\n      index << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuSwitch);\n}\n\nfunction addUpdateIcuUpdate(update: I18nUpdateOpCodes, bindingMask: number, index: number) {\n  update.push(bindingMask, 1, index << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuUpdate);\n}\n\nfunction addCreateNodeAndAppend(\n    create: IcuCreateOpCodes, marker: null|ICU_MARKER|ELEMENT_MARKER, text: string,\n    appendToParentIdx: number, createAtIdx: number) {\n  if (marker !== null) {\n    create.push(marker);\n  }\n  create.push(\n      text, createAtIdx,\n      icuCreateOpCode(IcuCreateOpCode.AppendChild, appendToParentIdx, createAtIdx));\n}\n\nfunction addCreateAttribute(create: IcuCreateOpCodes, newIndex: number, attr: Attr) {\n  create.push(newIndex << IcuCreateOpCode.SHIFT_REF | IcuCreateOpCode.Attr, attr.name, attr.value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// i18nPostprocess consts\nconst ROOT_TEMPLATE_ID = 0;\nconst PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]/;\nconst PP_PLACEHOLDERS_REGEXP = /\\[(�.+?�?)\\]|(�\\/?\\*\\d+:\\d+�)/g;\nconst PP_ICU_VARS_REGEXP = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;\nconst PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\\d+)?)�/g;\nconst PP_CLOSE_TEMPLATE_REGEXP = /\\/\\*/;\nconst PP_TEMPLATE_ID_REGEXP = /\\d+\\:(\\d+)/;\n\n// Parsed placeholder structure used in postprocessing (within `i18nPostprocess` function)\n// Contains the following fields: [templateId, isCloseTemplateTag, placeholder]\ntype PostprocessPlaceholder = [number, boolean, string];\n\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function i18nPostprocess(\n    message: string, replacements: {[key: string]: (string|string[])} = {}): string {\n  /**\n   * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]\n   *\n   * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically\n   * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root\n   * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index\n   * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in\n   * front of �#6�. The post processing step restores the right order by keeping track of the\n   * template id stack and looks for placeholders that belong to the currently active template.\n   */\n  let result: string = message;\n  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {\n    const matches: {[key: string]: PostprocessPlaceholder[]} = {};\n    const templateIdsStack: number[] = [ROOT_TEMPLATE_ID];\n    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m: any, phs: string, tmpl: string): string => {\n      const content = phs || tmpl;\n      const placeholders: PostprocessPlaceholder[] = matches[content] || [];\n      if (!placeholders.length) {\n        content.split('|').forEach((placeholder: string) => {\n          const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);\n          const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;\n          const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);\n          placeholders.push([templateId, isCloseTemplateTag, placeholder]);\n        });\n        matches[content] = placeholders;\n      }\n\n      if (!placeholders.length) {\n        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n      }\n\n      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];\n      let idx = 0;\n      // find placeholder index that matches current template id\n      for (let i = 0; i < placeholders.length; i++) {\n        if (placeholders[i][0] === currentTemplateId) {\n          idx = i;\n          break;\n        }\n      }\n      // update template id stack based on the current tag extracted\n      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];\n      if (isCloseTemplateTag) {\n        templateIdsStack.pop();\n      } else if (currentTemplateId !== templateId) {\n        templateIdsStack.push(templateId);\n      }\n      // remove processed tag from the list\n      placeholders.splice(idx, 1);\n      return placeholder;\n    });\n  }\n\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n\n  /**\n   * Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n   */\n  result = result.replace(PP_ICU_VARS_REGEXP, (match, start, key, _type, _idx, end): string => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n\n  /**\n   * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n   */\n  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match, key): string => {\n    return replacements.hasOwnProperty(key) ? replacements[key] as string : match;\n  });\n\n  /**\n   * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case\n   * multiple ICUs have the same placeholder name\n   */\n  result = result.replace(PP_ICUS_REGEXP, (match, key): string => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key] as string[];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift()!;\n    }\n    return match;\n  });\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\nimport '../../util/ng_i18n_closure_mode';\n\nimport {assertDefined} from '../../util/assert';\nimport {bindingUpdated} from '../bindings';\nimport {applyCreateOpCodes, applyI18n, setMaskBit} from '../i18n/i18n_apply';\nimport {i18nAttributesFirstPass, i18nStartFirstCreatePass} from '../i18n/i18n_parse';\nimport {i18nPostprocess} from '../i18n/i18n_postprocess';\nimport {TI18n} from '../interfaces/i18n';\nimport {TElementNode, TNodeType} from '../interfaces/node';\nimport {HEADER_OFFSET, T_HOST} from '../interfaces/view';\nimport {getClosestRElement} from '../node_manipulation';\nimport {getCurrentParentTNode, getLView, getTView, nextBindingIndex, setInI18nBlock} from '../state';\nimport {getConstant} from '../util/view_utils';\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nStart(\n    index: number, messageIndex: number, subTemplateIndex: number = -1): void {\n  const tView = getTView();\n  const lView = getLView();\n  const adjustedIndex = HEADER_OFFSET + index;\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const message = getConstant<string>(tView.consts, messageIndex)!;\n  const parentTNode = getCurrentParentTNode() as TElementNode | null;\n  if (tView.firstCreatePass) {\n    i18nStartFirstCreatePass(\n        tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message,\n        subTemplateIndex);\n  }\n  const tI18n = tView.data[adjustedIndex] as TI18n;\n  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;\n  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);\n  // If `parentTNode` is an `ElementContainer` than it has `<!--ng-container--->`.\n  // When we do inserts we have to make sure to insert in front of `<!--ng-container--->`.\n  const insertInFrontOf = parentTNode && (parentTNode.type & TNodeType.ElementContainer) ?\n      lView[parentTNode.index] :\n      null;\n  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);\n  setInI18nBlock(true);\n}\n\n\n\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nEnd(): void {\n  setInI18nBlock(false);\n}\n\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the `def.consts` array.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n *\n * @codeGenApi\n */\nexport function ɵɵi18n(index: number, messageIndex: number, subTemplateIndex?: number): void {\n  ɵɵi18nStart(index, messageIndex, subTemplateIndex);\n  ɵɵi18nEnd();\n}\n\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nexport function ɵɵi18nAttributes(index: number, attrsIndex: number): void {\n  const tView = getTView();\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  const attrs = getConstant<string[]>(tView.consts, attrsIndex)!;\n  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);\n}\n\n\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. `i18nExp(ctx.name)(ctx.title)`)\n *\n * @codeGenApi\n */\nexport function ɵɵi18nExp<T>(value: T): typeof ɵɵi18nExp {\n  const lView = getLView();\n  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));\n  return ɵɵi18nExp;\n}\n\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nexport function ɵɵi18nApply(index: number) {\n  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);\n}\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport function ɵɵi18nPostprocess(\n    message: string, replacements: {[key: string]: (string|string[])} = {}): string {\n  return i18nPostprocess(message, replacements);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * This file re-exports all symbols contained in this directory.\n *\n * Why is this file not `index.ts`?\n *\n * There seems to be an inconsistent path resolution of an `index.ts` file\n * when only the parent directory is referenced. This could be due to the\n * node module resolution configuration differing from rollup and/or typescript.\n *\n * With commit\n * https://github.com/angular/angular/commit/d5e3f2c64bd13ce83e7c70788b7fc514ca4a9918\n * the `instructions.ts` file was moved to `instructions/instructions.ts` and an\n * `index.ts` file was used to re-export everything. Having had file names that were\n * importing from `instructions' directly (not the from the sub file or the `index.ts`\n * file) caused strange CI issues. `index.ts` had to be renamed to `all.ts` for this\n * to work.\n *\n * Jira Issue = FW-1184\n */\nexport * from './attribute';\nexport * from './attribute_interpolation';\nexport * from './change_detection';\nexport * from './template';\nexport * from './storage';\nexport * from './di';\nexport * from './di_attr';\nexport * from './element';\nexport * from './element_container';\nexport * from './get_current_view';\nexport * from './listener';\nexport * from './namespace';\nexport * from './next_context';\nexport * from './projection';\nexport * from './property';\nexport * from './property_interpolation';\nexport * from './advance';\nexport * from './styling';\nexport * from './text';\nexport * from './text_interpolation';\nexport * from './class_map_interpolation';\nexport * from './style_map_interpolation';\nexport * from './style_prop_interpolation';\nexport * from './host_property';\nexport * from './i18n';\nexport {ɵgetUnknownElementStrictMode, ɵsetUnknownElementStrictMode, ɵgetUnknownPropertyStrictMode, ɵsetUnknownPropertyStrictMode} from './element_validation';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {ClassProvider, Provider} from '../di/interface/provider';\nimport {isClassProvider, isTypeProvider} from '../di/provider_collection';\nimport {providerToFactory} from '../di/r3_injector';\nimport {assertDefined} from '../util/assert';\n\nimport {diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode} from './di';\nimport {ɵɵdirectiveInject} from './instructions/all';\nimport {DirectiveDef} from './interfaces/definition';\nimport {NodeInjectorFactory} from './interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeProviderIndexes} from './interfaces/node';\nimport {isComponentDef} from './interfaces/type_checks';\nimport {DestroyHookData, LView, TData, TVIEW, TView} from './interfaces/view';\nimport {getCurrentTNode, getLView, getTView} from './state';\n\n\n\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @param def the directive definition\n * @param providers: Array of `providers`.\n * @param viewProviders: Array of `viewProviders`.\n */\nexport function providersResolver<T>(\n    def: DirectiveDef<T>, providers: Provider[], viewProviders: Provider[]): void {\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const isComponent = isComponentDef(def);\n\n    // The list of view providers is processed first, and the flags are updated\n    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n\n    // Then, the list of providers is processed, and the flags are updated\n    resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n  }\n}\n\n/**\n * Resolves a provider and publishes it to the DI system.\n */\nfunction resolveProvider(\n    provider: Provider, tInjectables: TData, lInjectablesBlueprint: NodeInjectorFactory[],\n    isComponent: boolean, isViewProvider: boolean): void {\n  provider = resolveForwardRef(provider);\n  if (Array.isArray(provider)) {\n    // Recursively call `resolveProvider`\n    // Recursion is OK in this case because this code will not be in hot-path once we implement\n    // cloning of the initial state.\n    for (let i = 0; i < provider.length; i++) {\n      resolveProvider(\n          provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n    }\n  } else {\n    const tView = getTView();\n    const lView = getLView();\n    let token: any = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n    let providerFactory: () => any = providerToFactory(provider);\n\n    const tNode = getCurrentTNode()!;\n    const beginIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n    const endIndex = tNode.directiveStart;\n    const cptViewProvidersCount =\n        tNode.providerIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n\n    if (isTypeProvider(provider) || !provider.multi) {\n      // Single provider case: the factory is created and pushed immediately\n      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);\n      const existingFactoryIndex = indexOf(\n          token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount,\n          endIndex);\n      if (existingFactoryIndex === -1) {\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        lInjectablesBlueprint[existingFactoryIndex] = factory;\n        lView[existingFactoryIndex] = factory;\n      }\n    } else {\n      // Multi provider case:\n      // We create a multi factory which is going to aggregate all the values.\n      // Since the output of such a factory depends on content or view injection,\n      // we create two of them, which are linked together.\n      //\n      // The first one (for view providers) is always in the first block of the injectables array,\n      // and the second one (for providers) is always in the second block.\n      // This is important because view providers have higher priority. When a multi token\n      // is being looked up, the view providers should be found first.\n      // Note that it is not possible to have a multi factory in the third block (directive block).\n      //\n      // The algorithm to process multi providers is as follows:\n      // 1) If the multi provider comes from the `viewProviders` of the component:\n      //   a) If the special view providers factory doesn't exist, it is created and pushed.\n      //   b) Else, the multi provider is added to the existing multi factory.\n      // 2) If the multi provider comes from the `providers` of the component or of another\n      // directive:\n      //   a) If the multi factory doesn't exist, it is created and provider pushed into it.\n      //      It is also linked to the multi factory for view providers, if it exists.\n      //   b) Else, the multi provider is added to the existing multi factory.\n\n      const existingProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n      const existingViewProvidersFactoryIndex =\n          indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingProvidersFactoryIndex];\n      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n\n      if (isViewProvider && !doesViewProvidersFactoryExist ||\n          !isViewProvider && !doesProvidersFactoryExist) {\n        // Cases 1.a and 2.a\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                tNode as TElementNode | TContainerNode | TElementContainerNode, lView),\n            tView, token);\n        const factory = multiFactory(\n            isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver,\n            lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n        if (!isViewProvider && doesViewProvidersFactoryExist) {\n          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n        }\n        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);\n        tInjectables.push(token);\n        tNode.directiveStart++;\n        tNode.directiveEnd++;\n        if (isViewProvider) {\n          tNode.providerIndexes += TNodeProviderIndexes.CptViewProvidersCountShifter;\n        }\n        lInjectablesBlueprint.push(factory);\n        lView.push(factory);\n      } else {\n        // Cases 1.b and 2.b\n        const indexInFactory = multiFactoryAdd(\n            lInjectablesBlueprint!\n                [isViewProvider ? existingViewProvidersFactoryIndex :\n                                  existingProvidersFactoryIndex],\n            providerFactory, !isViewProvider && isComponent);\n        registerDestroyHooksIfSupported(\n            tView, provider,\n            existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex :\n                                                 existingViewProvidersFactoryIndex,\n            indexInFactory);\n      }\n      if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders!++;\n      }\n    }\n  }\n}\n\n/**\n * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.\n * @param tView `TView` in which to register the hook.\n * @param provider Provider whose hook should be registered.\n * @param contextIndex Index under which to find the context for the hook when it's being invoked.\n * @param indexInFactory Only required for `multi` providers. Index of the provider in the multi\n * provider factory.\n */\nfunction registerDestroyHooksIfSupported(\n    tView: TView, provider: Exclude<Provider, any[]>, contextIndex: number,\n    indexInFactory?: number) {\n  const providerIsTypeProvider = isTypeProvider(provider);\n  const providerIsClassProvider = isClassProvider(provider);\n\n  if (providerIsTypeProvider || providerIsClassProvider) {\n    // Resolve forward references as `useClass` can hold a forward reference.\n    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;\n    const prototype = classToken.prototype;\n    const ngOnDestroy = prototype.ngOnDestroy;\n\n    if (ngOnDestroy) {\n      const hooks = tView.destroyHooks || (tView.destroyHooks = []);\n\n      if (!providerIsTypeProvider && ((provider as ClassProvider)).multi) {\n        ngDevMode &&\n            assertDefined(\n                indexInFactory, 'indexInFactory when registering multi factory destroy hook');\n        const existingCallbacksIndex = hooks.indexOf(contextIndex);\n\n        if (existingCallbacksIndex === -1) {\n          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);\n        } else {\n          (hooks[existingCallbacksIndex + 1] as DestroyHookData).push(indexInFactory!, ngOnDestroy);\n        }\n      } else {\n        hooks.push(contextIndex, ngOnDestroy);\n      }\n    }\n  }\n}\n\n/**\n * Add a factory in a multi factory.\n * @returns Index at which the factory was inserted.\n */\nfunction multiFactoryAdd(\n    multiFactory: NodeInjectorFactory, factory: () => any, isComponentProvider: boolean): number {\n  if (isComponentProvider) {\n    multiFactory.componentProviders!++;\n  }\n  return multiFactory.multi!.push(factory) - 1;\n}\n\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n */\nfunction indexOf(item: any, arr: any[], begin: number, end: number) {\n  for (let i = begin; i < end; i++) {\n    if (arr[i] === item) return i;\n  }\n  return -1;\n}\n\n/**\n * Use this with `multi` `providers`.\n */\nfunction multiProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n    tNode: TDirectiveHostNode): any[] {\n  return multiResolve(this.multi!, []);\n}\n\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n */\nfunction multiViewProvidersFactoryResolver(\n    this: NodeInjectorFactory, _: undefined, tData: TData, lView: LView,\n    tNode: TDirectiveHostNode): any[] {\n  const factories = this.multi!;\n  let result: any[];\n  if (this.providerFactory) {\n    const componentCount = this.providerFactory.componentProviders!;\n    const multiProviders =\n        getNodeInjectable(lView, lView[TVIEW], this.providerFactory!.index!, tNode);\n    // Copy the section of the array which contains `multi` `providers` from the component\n    result = multiProviders.slice(0, componentCount);\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n    // Copy the section of the array which contains `multi` `providers` from other directives\n    for (let i = componentCount; i < multiProviders.length; i++) {\n      result.push(multiProviders[i]);\n    }\n  } else {\n    result = [];\n    // Insert the `viewProvider` instances.\n    multiResolve(factories, result);\n  }\n  return result;\n}\n\n/**\n * Maps an array of factories into an array of values.\n */\nfunction multiResolve(factories: Array<() => any>, result: any[]): any[] {\n  for (let i = 0; i < factories.length; i++) {\n    const factory = factories[i]! as () => null;\n    result.push(factory());\n  }\n  return result;\n}\n\n/**\n * Creates a multi factory.\n */\nfunction multiFactory(\n    factoryFn: (\n        this: NodeInjectorFactory, _: undefined, tData: TData, lData: LView,\n        tNode: TDirectiveHostNode) => any,\n    index: number, isViewProvider: boolean, isComponent: boolean,\n    f: () => any): NodeInjectorFactory {\n  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);\n  factory.multi = [];\n  factory.index = index;\n  factory.componentProviders = 0;\n  multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n  return factory;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ProcessProvidersFunction, Provider} from '../../di/interface/provider';\nimport {providersResolver} from '../di_setup';\nimport {DirectiveDef} from '../interfaces/definition';\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * ```ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * ```\n *\n * @param definition\n *\n * @codeGenApi\n */\nexport function ɵɵProvidersFeature<T>(providers: Provider[], viewProviders: Provider[] = []) {\n  return (definition: DirectiveDef<T>) => {\n    definition.providersResolver =\n        (def: DirectiveDef<T>, processProvidersFn?: ProcessProvidersFunction) => {\n          return providersResolver(\n              def,                                                             //\n              processProvidersFn ? processProvidersFn(providers) : providers,  //\n              viewProviders);\n        };\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n\n\n/**\n * Represents an instance of an `NgModule` created by an `NgModuleFactory`.\n * Provides access to the `NgModule` instance and related objects.\n *\n * @publicApi\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the `NgModule`.\n   */\n  abstract get injector(): EnvironmentInjector;\n\n  /**\n   * The resolver that can retrieve component factories in a context of this module.\n   *\n   * Note: since v13, dynamic component creation via\n   * [`ViewContainerRef.createComponent`](api/core/ViewContainerRef#createComponent)\n   * does **not** require resolving component factory: component class can be used directly.\n   *\n   * @deprecated Angular no longer requires Component factories. Please use other APIs where\n   *     Component class can be used directly.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The `NgModule` instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Registers a callback to be executed when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector|null): NgModuleRef<T>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createInjectorWithoutInjectorInstances} from '../di/create_injector';\nimport {Injector} from '../di/injector';\nimport {EnvironmentProviders, Provider} from '../di/interface/provider';\nimport {EnvironmentInjector, getNullInjector, R3Injector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {assertDefined} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactoryResolver} from './component_ref';\nimport {getNgModuleDef} from './definition';\nimport {maybeUnwrapFn} from './util/misc_utils';\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, `NullInjector` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nexport function createNgModule<T>(\n    ngModule: Type<T>, parentInjector?: Injector): viewEngine_NgModuleRef<T> {\n  return new NgModuleRef<T>(ngModule, parentInjector ?? null);\n}\n\n/**\n * The `createNgModule` function alias for backwards-compatibility.\n * Please avoid using it directly and use `createNgModule` instead.\n *\n * @deprecated Use `createNgModule` instead.\n */\nexport const createNgModuleRef = createNgModule;\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  // tslint:disable-next-line:require-internal-with-underscore\n  _r3Injector: R3Injector;\n  override instance: T;\n  destroyCbs: (() => void)[]|null = [];\n\n  // When bootstrapping a module we have a dependency graph that looks like this:\n  // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the\n  // module being resolved tries to inject the ComponentFactoryResolver, it'll create a\n  // circular dependency which will result in a runtime error, because the injector doesn't\n  // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves\n  // and providing it, rather than letting the injector resolve it.\n  override readonly componentFactoryResolver: ComponentFactoryResolver =\n      new ComponentFactoryResolver(this);\n\n  constructor(ngModuleType: Type<T>, public _parent: Injector|null) {\n    super();\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode &&\n        assertDefined(\n            ngModuleDef,\n            `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n\n    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef!.bootstrap);\n    this._r3Injector = createInjectorWithoutInjectorInstances(\n                           ngModuleType, _parent,\n                           [\n                             {provide: viewEngine_NgModuleRef, useValue: this}, {\n                               provide: viewEngine_ComponentFactoryResolver,\n                               useValue: this.componentFactoryResolver\n                             }\n                           ],\n                           stringify(ngModuleType), new Set(['environment'])) as R3Injector;\n\n    // We need to resolve the injector types separately from the injector creation, because\n    // the module might be trying to use this ref in its constructor for DI which will cause a\n    // circular error that will eventually error out, because the injector isn't created yet.\n    this._r3Injector.resolveInjectorInitializers();\n    this.instance = this._r3Injector.get(ngModuleType);\n  }\n\n  override get injector(): EnvironmentInjector {\n    return this._r3Injector;\n  }\n\n  override destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    const injector = this._r3Injector;\n    !injector.destroyed && injector.destroy();\n    this.destroyCbs!.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  override onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs!.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) {\n    super();\n  }\n\n  override create(parentInjector: Injector|null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\n\nclass EnvironmentNgModuleRefAdapter extends viewEngine_NgModuleRef<null> {\n  override readonly injector: EnvironmentInjector;\n  override readonly componentFactoryResolver: ComponentFactoryResolver =\n      new ComponentFactoryResolver(this);\n  override readonly instance = null;\n\n  constructor(\n      providers: Array<Provider|EnvironmentProviders>, parent: EnvironmentInjector|null,\n      source: string|null) {\n    super();\n    const injector = new R3Injector(\n        [\n          ...providers,\n          {provide: viewEngine_NgModuleRef, useValue: this},\n          {provide: viewEngine_ComponentFactoryResolver, useValue: this.componentFactoryResolver},\n        ],\n        parent || getNullInjector(), source, new Set(['environment']));\n    this.injector = injector;\n    injector.resolveInjectorInitializers();\n  }\n\n  override destroy(): void {\n    this.injector.destroy();\n  }\n\n  override onDestroy(callback: () => void): void {\n    this.injector.onDestroy(callback);\n  }\n}\n\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n */\nexport function createEnvironmentInjector(\n    providers: Array<Provider|EnvironmentProviders>, parent: EnvironmentInjector,\n    debugName: string|null = null): EnvironmentInjector {\n  const adapter = new EnvironmentNgModuleRefAdapter(providers, parent, debugName);\n  return adapter.injector;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ɵɵinject as inject} from '../../di/injector_compatibility';\nimport {ɵɵdefineInjectable as defineInjectable} from '../../di/interface/defs';\nimport {internalImportProvidersFrom} from '../../di/provider_collection';\nimport {EnvironmentInjector} from '../../di/r3_injector';\nimport {OnDestroy} from '../../interface/lifecycle_hooks';\nimport {ComponentDef} from '../interfaces/definition';\nimport {createEnvironmentInjector} from '../ng_module_ref';\n\n/**\n * A service used by the framework to create instances of standalone injectors. Those injectors are\n * created on demand in case of dynamic component instantiation and contain ambient providers\n * collected from the imports graph rooted at a given standalone component.\n */\nclass StandaloneService implements OnDestroy {\n  cachedInjectors = new Map<string, EnvironmentInjector|null>();\n\n  constructor(private _injector: EnvironmentInjector) {}\n\n  getOrCreateStandaloneInjector(componentDef: ComponentDef<unknown>): EnvironmentInjector|null {\n    if (!componentDef.standalone) {\n      return null;\n    }\n\n    if (!this.cachedInjectors.has(componentDef.id)) {\n      const providers = internalImportProvidersFrom(false, componentDef.type);\n      const standaloneInjector = providers.length > 0 ?\n          createEnvironmentInjector(\n              [providers], this._injector, `Standalone[${componentDef.type.name}]`) :\n          null;\n      this.cachedInjectors.set(componentDef.id, standaloneInjector);\n    }\n\n    return this.cachedInjectors.get(componentDef.id)!;\n  }\n\n  ngOnDestroy() {\n    try {\n      for (const injector of this.cachedInjectors.values()) {\n        if (injector !== null) {\n          injector.destroy();\n        }\n      }\n    } finally {\n      this.cachedInjectors.clear();\n    }\n  }\n\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ defineInjectable({\n    token: StandaloneService,\n    providedIn: 'environment',\n    factory: () => new StandaloneService(inject(EnvironmentInjector)),\n  });\n}\n\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nexport function ɵɵStandaloneFeature(definition: ComponentDef<unknown>) {\n  definition.getStandaloneInjector = (parentInjector: EnvironmentInjector) => {\n    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../../change_detection/constants';\nimport {Injector} from '../../di/injector';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {assertLView} from '../assert';\nimport {discoverLocalRefs, getComponentAtNodeIndex, getDirectivesAtNodeIndex, getLContext, readPatchedLView} from '../context_discovery';\nimport {getComponentDef, getDirectiveDef} from '../definition';\nimport {NodeInjector} from '../di';\nimport {DirectiveDef} from '../interfaces/definition';\nimport {TElementNode, TNode, TNodeProviderIndexes} from '../interfaces/node';\nimport {CLEANUP, CONTEXT, FLAGS, LView, LViewFlags, TVIEW, TViewType} from '../interfaces/view';\n\nimport {getLViewParent, getRootContext} from './view_traversal_utils';\nimport {unwrapRNode} from './view_utils';\n\n\n\n/**\n * Retrieves the component instance associated with a given DOM element.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div>\n *     <child-comp></child-comp>\n *   </div>\n * </app-root>\n * ```\n *\n * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`\n * associated with this DOM element.\n *\n * Calling the function on `<app-root>` will return the `MyApp` instance.\n *\n *\n * @param element DOM element from which the component should be retrieved.\n * @returns Component instance associated with the element or `null` if there\n *    is no component associated with it.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getComponent<T>(element: Element): T|null {\n  ngDevMode && assertDomElement(element);\n  const context = getLContext(element);\n  if (context === null) return null;\n\n  if (context.component === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return null;\n    }\n    context.component = getComponentAtNodeIndex(context.nodeIndex, lView);\n  }\n\n  return context.component as unknown as T;\n}\n\n\n/**\n * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded\n * view that the element is part of. Otherwise retrieves the instance of the component whose view\n * owns the element (in this case, the result is the same as calling `getOwningComponent`).\n *\n * @param element Element for which to get the surrounding component instance.\n * @returns Instance of the component that is around the element or null if the element isn't\n *    inside any component.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getContext<T extends {}>(element: Element): T|null {\n  assertDomElement(element);\n  const context = getLContext(element)!;\n  const lView = context ? context.lView : null;\n  return lView === null ? null : lView[CONTEXT] as T;\n}\n\n/**\n * Retrieves the component instance whose view contains the DOM element.\n *\n * For example, if `<child-comp>` is used in the template of `<app-comp>`\n * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`\n * would return `<app-comp>`.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Component instance whose view owns the DOM element or null if the element is not\n *    part of a component view.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getOwningComponent<T>(elementOrDir: Element|{}): T|null {\n  const context = getLContext(elementOrDir)!;\n  let lView = context ? context.lView : null;\n  if (lView === null) return null;\n\n  let parent: LView|null;\n  while (lView[TVIEW].type === TViewType.Embedded && (parent = getLViewParent(lView)!)) {\n    lView = parent;\n  }\n  return lView[FLAGS] & LViewFlags.IsRoot ? null : lView[CONTEXT] as unknown as T;\n}\n\n/**\n * Retrieves all root components associated with a DOM element, directive or component instance.\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param elementOrDir DOM element, component or directive instance\n *    for which to retrieve the root components.\n * @returns Root components associated with the target object.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getRootComponents(elementOrDir: Element|{}): {}[] {\n  const lView = readPatchedLView<{}>(elementOrDir);\n  return lView !== null ? [getRootContext(lView)] : [];\n}\n\n/**\n * Retrieves an `Injector` associated with an element, component or directive instance.\n *\n * @param elementOrDir DOM element, component or directive instance for which to\n *    retrieve the injector.\n * @returns Injector associated with the element, component or directive instance.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getInjector(elementOrDir: Element|{}): Injector {\n  const context = getLContext(elementOrDir)!;\n  const lView = context ? context.lView : null;\n  if (lView === null) return Injector.NULL;\n\n  const tNode = lView[TVIEW].data[context.nodeIndex] as TElementNode;\n  return new NodeInjector(tNode, lView);\n}\n\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n */\nexport function getInjectionTokens(element: Element): any[] {\n  const context = getLContext(element)!;\n  const lView = context ? context.lView : null;\n  if (lView === null) return [];\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex] as TNode;\n  const providerTokens: any[] = [];\n  const startIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * ```\n *\n * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`\n * directive that is associated with the DOM node.\n *\n * Calling `getDirectives` on `<my-comp>` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getDirectives(node: Node): {}[] {\n  // Skip text nodes because we can't have directives associated with them.\n  if (node instanceof Text) {\n    return [];\n  }\n\n  const context = getLContext(node)!;\n  const lView = context ? context.lView : null;\n  if (lView === null) {\n    return [];\n  }\n\n  const tView = lView[TVIEW];\n  const nodeIndex = context.nodeIndex;\n  if (!tView?.data[nodeIndex]) {\n    return [];\n  }\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(nodeIndex, lView);\n  }\n\n  // The `directives` in this case are a named array called `LComponentView`. Clone the\n  // result so we don't expose an internal data structure in the user's console.\n  return context.directives === null ? [] : [...context.directives];\n}\n\n/**\n * Partial metadata for a given directive instance.\n * This information might be useful for debugging purposes or tooling.\n * Currently only `inputs` and `outputs` metadata is available.\n *\n * @publicApi\n */\nexport interface DirectiveDebugMetadata {\n  inputs: Record<string, string>;\n  outputs: Record<string, string>;\n}\n\n/**\n * Partial metadata for a given component instance.\n * This information might be useful for debugging purposes or tooling.\n * Currently the following fields are available:\n *  - inputs\n *  - outputs\n *  - encapsulation\n *  - changeDetection\n *\n * @publicApi\n */\nexport interface ComponentDebugMetadata extends DirectiveDebugMetadata {\n  encapsulation: ViewEncapsulation;\n  changeDetection: ChangeDetectionStrategy;\n}\n\n/**\n * Returns the debug (partial) metadata for a particular directive or component instance.\n * The function accepts an instance of a directive or component and returns the corresponding\n * metadata.\n *\n * @param directiveOrComponentInstance Instance of a directive or component\n * @returns metadata of the passed directive or component\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getDirectiveMetadata(directiveOrComponentInstance: any): ComponentDebugMetadata|\n    DirectiveDebugMetadata|null {\n  const {constructor} = directiveOrComponentInstance;\n  if (!constructor) {\n    throw new Error('Unable to find the instance constructor');\n  }\n  // In case a component inherits from a directive, we may have component and directive metadata\n  // To ensure we don't get the metadata of the directive, we want to call `getComponentDef` first.\n  const componentDef = getComponentDef(constructor);\n  if (componentDef) {\n    return {\n      inputs: componentDef.inputs,\n      outputs: componentDef.outputs,\n      encapsulation: componentDef.encapsulation,\n      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush :\n                                             ChangeDetectionStrategy.Default\n    };\n  }\n  const directiveDef = getDirectiveDef(constructor);\n  if (directiveDef) {\n    return {inputs: directiveDef.inputs, outputs: directiveDef.outputs};\n  }\n  return null;\n}\n\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target DOM element, component or directive instance for which to retrieve\n *    the local references.\n */\nexport function getLocalRefs(target: {}): {[key: string]: any} {\n  const context = getLContext(target);\n  if (context === null) return {};\n\n  if (context.localRefs === undefined) {\n    const lView = context.lView;\n    if (lView === null) {\n      return {};\n    }\n    context.localRefs = discoverLocalRefs(lView, context.nodeIndex);\n  }\n\n  return context.localRefs || {};\n}\n\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getHostElement(componentOrDirective: {}): Element {\n  return getLContext(componentOrDirective)!.native as unknown as Element;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\n/**\n * Event listener configuration returned from `getListeners`.\n * @publicApi\n */\nexport interface Listener {\n  /** Name of the event listener. */\n  name: string;\n  /** Element that the listener is bound to. */\n  element: Element;\n  /** Callback that is invoked when the event is triggered. */\n  callback: (value: any) => any;\n  /** Whether the listener is using event capturing. */\n  useCapture: boolean;\n  /**\n   * Type of the listener (e.g. a native DOM event or a custom @Output).\n   */\n  type: 'dom'|'output';\n}\n\n\n/**\n * Retrieves a list of event listeners associated with a DOM element. The list does include host\n * listeners, but it does not include event listeners defined outside of the Angular context\n * (e.g. through `addEventListener`).\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * ```html\n * <app-root>\n *   <div (click)=\"doSomething()\"></div>\n * </app-root>\n * ```\n *\n * Calling `getListeners` on `<div>` will return an object that looks as follows:\n *\n * ```ts\n * {\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * }\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @returns Array of event listeners on the DOM element.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function getListeners(element: Element): Listener[] {\n  ngDevMode && assertDomElement(element);\n  const lContext = getLContext(element);\n  const lView = lContext === null ? null : lContext.lView;\n  if (lView === null) return [];\n\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners: Listener[] = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name: string = firstParam;\n        const listenerElement = unwrapRNode(lView[secondParam]) as any as Element;\n        const callback: (value: any) => any = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const type =\n            (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;\n        if (element == listenerElement) {\n          listeners.push({element, name, callback, useCapture, type});\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\n\nfunction sortListeners(a: Listener, b: Listener) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj: any): obj is DirectiveDef<any> {\n  return obj.type !== undefined && obj.declaredInputs !== undefined &&\n      obj.findHostDirectiveDefs !== undefined;\n}\n\n/**\n * Retrieve the component `LView` from component/element.\n *\n * NOTE: `LView` is a private and should not be leaked outside.\n *       Don't export this method to `ng.*` on window.\n *\n * @param target DOM element or component instance for which to retrieve the LView.\n */\nexport function getComponentLView(target: any): LView {\n  const lContext = getLContext(target)!;\n  const nodeIndx = lContext.nodeIndex;\n  const lView = lContext.lView!;\n  ngDevMode && assertLView(lView);\n  const componentLView = lView[nodeIndx];\n  ngDevMode && assertLView(componentLView);\n  return componentLView;\n}\n\n/** Asserts that a value is a DOM Element. */\nfunction assertDomElement(value: any) {\n  if (typeof Element !== 'undefined' && !(value instanceof Element)) {\n    throw new Error('Expecting instance of DOM Element');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {noSideEffects} from '../util/closure';\n\ninterface TypeWithMetadata extends Type<any> {\n  decorators?: any[];\n  ctorParameters?: () => any[];\n  propDecorators?: {[field: string]: any};\n}\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nexport function setClassMetadata(\n    type: Type<any>, decorators: any[]|null, ctorParameters: (() => any[])|null,\n    propDecorators: {[field: string]: any}|null): void {\n  return noSideEffects(() => {\n           const clazz = type as TypeWithMetadata;\n\n           if (decorators !== null) {\n             if (clazz.hasOwnProperty('decorators') && clazz.decorators !== undefined) {\n               clazz.decorators.push(...decorators);\n             } else {\n               clazz.decorators = decorators;\n             }\n           }\n           if (ctorParameters !== null) {\n             // Rather than merging, clobber the existing parameters. If other projects exist which\n             // use tsickle-style annotations and reflect over them in the same way, this could\n             // cause issues, but that is vanishingly unlikely.\n             clazz.ctorParameters = ctorParameters;\n           }\n           if (propDecorators !== null) {\n             // The property decorator objects are merged as it is possible different fields have\n             // different decorator types. Decorators on individual fields are not merged, as it's\n             // also incredibly unlikely that a field will be decorated both with an Angular\n             // decorator and a non-Angular decorator that's also been downleveled.\n             if (clazz.hasOwnProperty('propDecorators') && clazz.propDecorators !== undefined) {\n               clazz.propDecorators = {...clazz.propDecorators, ...propDecorators};\n             } else {\n               clazz.propDecorators = propDecorators;\n             }\n           }\n         }) as never;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertIndexInRange} from '../util/assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding} from './bindings';\nimport {LView} from './interfaces/view';\nimport {getBindingRoot, getLView} from './state';\nimport {NO_CHANGE} from './tokens';\n\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  return lView[bindingIndex] === NO_CHANGE ?\n      updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n      getBinding(lView, bindingIndex);\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction1(\n    slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any {\n  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction2(\n    slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any,\n    thisArg?: any): any {\n  return pureFunction2Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction3(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  return pureFunction3Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction4(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any,\n    exp3: any, exp4: any, thisArg?: any): any {\n  return pureFunction4Internal(\n      getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction5(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n      updateBinding(\n          lView, bindingIndex + 5,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5)) :\n      getBinding(lView, bindingIndex + 5);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction6(\n    slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n      updateBinding(\n          lView, bindingIndex + 6,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n      getBinding(lView, bindingIndex + 6);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction7(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any,\n    exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n      updateBinding(\n          lView, bindingIndex + 7,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n      getBinding(lView, bindingIndex + 7);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunction8(\n    slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any,\n    exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any,\n    thisArg?: any): any {\n  const bindingIndex = getBindingRoot() + slotOffset;\n  const lView = getLView();\n  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n      updateBinding(\n          lView, bindingIndex + 8,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n                    pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n      getBinding(lView, bindingIndex + 8);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport function ɵɵpureFunctionV(\n    slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any {\n  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);\n}\n\n/**\n * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized\n * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first\n * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE\n * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert\n * it to `undefined`.\n */\nfunction getPureFunctionReturnValue(lView: LView, returnValueIndex: number) {\n  ngDevMode && assertIndexInRange(lView, returnValueIndex);\n  const lastReturnValue = lView[returnValueIndex];\n  return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;\n}\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction1Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v: any) => any, exp: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated(lView, bindingIndex, exp) ?\n      updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 1);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction2Internal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (v1: any, v2: any) => any,\n    exp1: any, exp2: any, thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n      updateBinding(\n          lView, bindingIndex + 2,\n          thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 2);\n}\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunction3Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n      updateBinding(\n          lView, bindingIndex + 3,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 3);\n}\n\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n */\nexport function pureFunction4Internal(\n    lView: LView, bindingRoot: number, slotOffset: number,\n    pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any,\n    thisArg?: any): any {\n  const bindingIndex = bindingRoot + slotOffset;\n  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n      updateBinding(\n          lView, bindingIndex + 4,\n          thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n      getPureFunctionReturnValue(lView, bindingIndex + 4);\n}\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param lView LView in which the function is being executed.\n * @param bindingRoot Binding root index.\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n */\nexport function pureFunctionVInternal(\n    lView: LView, bindingRoot: number, slotOffset: number, pureFn: (...v: any[]) => any,\n    exps: any[], thisArg?: any): any {\n  let bindingIndex = bindingRoot + slotOffset;\n  let different = false;\n  for (let i = 0; i < exps.length; i++) {\n    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n  }\n  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n                     getPureFunctionReturnValue(lView, bindingIndex);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PipeTransform} from '../change_detection/pipe_transform';\nimport {setInjectImplementation} from '../di/inject_switch';\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {Type} from '../interface/type';\n\nimport {getFactoryDef} from './definition_factory';\nimport {setIncludeViewProviders} from './di';\nimport {store, ɵɵdirectiveInject} from './instructions/all';\nimport {isHostComponentStandalone} from './instructions/element_validation';\nimport {PipeDef, PipeDefList} from './interfaces/definition';\nimport {CONTEXT, DECLARATION_COMPONENT_VIEW, HEADER_OFFSET, LView, TVIEW} from './interfaces/view';\nimport {pureFunction1Internal, pureFunction2Internal, pureFunction3Internal, pureFunction4Internal, pureFunctionVInternal} from './pure_function';\nimport {getBindingRoot, getLView, getTView} from './state';\nimport {load} from './util/view_utils';\n\n\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nexport function ɵɵpipe(index: number, pipeName: string): any {\n  const tView = getTView();\n  let pipeDef: PipeDef<any>;\n  const adjustedIndex = index + HEADER_OFFSET;\n\n  if (tView.firstCreatePass) {\n    // The `getPipeDef` throws if a pipe with a given name is not found\n    // (so we use non-null assertion below).\n    pipeDef = getPipeDef(pipeName, tView.pipeRegistry)!;\n    tView.data[adjustedIndex] = pipeDef;\n    if (pipeDef.onDestroy) {\n      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);\n    }\n  } else {\n    pipeDef = tView.data[adjustedIndex] as PipeDef<any>;\n  }\n\n  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));\n  const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);\n  try {\n    // DI for pipes is supposed to behave like directives when placed on a component\n    // host node, which means that we have to disable access to `viewProviders`.\n    const previousIncludeViewProviders = setIncludeViewProviders(false);\n    const pipeInstance = pipeFactory();\n    setIncludeViewProviders(previousIncludeViewProviders);\n    store(tView, getLView(), adjustedIndex, pipeInstance);\n    return pipeInstance;\n  } finally {\n    // we have to restore the injector implementation in finally, just in case the creation of the\n    // pipe throws an error.\n    setInjectImplementation(previousInjectImplementation);\n  }\n}\n\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param name Name of pipe to resolve\n * @param registry Full list of available pipes\n * @returns Matching PipeDef\n */\nfunction getPipeDef(name: string, registry: PipeDefList|null): PipeDef<any>|undefined {\n  if (registry) {\n    for (let i = registry.length - 1; i >= 0; i--) {\n      const pipeDef = registry[i];\n      if (name === pipeDef.name) {\n        return pipeDef;\n      }\n    }\n  }\n  if (ngDevMode) {\n    throw new RuntimeError(RuntimeErrorCode.PIPE_NOT_FOUND, getPipeNotFoundErrorMessage(name));\n  }\n}\n\n/**\n * Generates a helpful error message for the user when a pipe is not found.\n *\n * @param name Name of the missing pipe\n * @returns The error message\n */\nfunction getPipeNotFoundErrorMessage(name: string) {\n  const lView = getLView();\n  const declarationLView = lView[DECLARATION_COMPONENT_VIEW] as LView<Type<unknown>>;\n  const context = declarationLView[CONTEXT];\n  const hostIsStandalone = isHostComponentStandalone(lView);\n  const componentInfoMessage = context ? ` in the '${context.constructor.name}' component` : '';\n  const verifyMessage = `Verify that it is ${\n      hostIsStandalone ? 'included in the \\'@Component.imports\\' of this component' :\n                         'declared or imported in this module'}`;\n  const errorMessage =\n      `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;\n  return errorMessage;\n}\n\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind1(index: number, slotOffset: number, v1: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction1Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :\n      pipeInstance.transform(v1);\n}\n\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction2Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n      pipeInstance.transform(v1, v2);\n}\n\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunction3Internal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n      pipeInstance.transform(v1, v2, v3);\n}\n\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBind4(\n    index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ? pureFunction4Internal(\n                                            lView, getBindingRoot(), slotOffset,\n                                            pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n                                        pipeInstance.transform(v1, v2, v3, v4);\n}\n\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nexport function ɵɵpipeBindV(index: number, slotOffset: number, values: [any, ...any[]]): any {\n  const adjustedIndex = index + HEADER_OFFSET;\n  const lView = getLView();\n  const pipeInstance = load<PipeTransform>(lView, adjustedIndex);\n  return isPure(lView, adjustedIndex) ?\n      pureFunctionVInternal(\n          lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :\n      pipeInstance.transform.apply(pipeInstance, values);\n}\n\nfunction isPure(lView: LView, index: number): boolean {\n  return (<PipeDef<any>>lView[TVIEW].data[index]).pure;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/// <reference types=\"rxjs\" />\n\nimport {PartialObserver, Subject, Subscription} from 'rxjs';\n\n/**\n * Use in components with the `@Output` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * @usageNotes\n *\n * Extends\n * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the `emit()` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```html\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * @see [Observables in Angular](guide/observables-in-angular)\n * @publicApi\n */\nexport interface EventEmitter<T> extends Subject<T> {\n  /**\n   * @internal\n   */\n  __isAsync: boolean;\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param [isAsync=false] When true, deliver events asynchronously.\n   *\n   */\n  new(isAsync?: boolean): EventEmitter<T>;\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T): void;\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param next When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void):\n      Subscription;\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param observerOrNext When supplied, a custom handler for emitted events, or an observer\n   *     object.\n   * @param error When supplied, a custom handler for an error notification from this emitter.\n   * @param complete When supplied, a custom handler for a completion notification from this\n   *     emitter.\n   */\n  subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription;\n}\n\nclass EventEmitter_ extends Subject<any> {\n  __isAsync: boolean;  // tslint:disable-line\n\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  emit(value?: any) {\n    super.next(value);\n  }\n\n  override subscribe(observerOrNext?: any, error?: any, complete?: any): Subscription {\n    let nextFn = observerOrNext;\n    let errorFn = error || (() => null);\n    let completeFn = complete;\n\n    if (observerOrNext && typeof observerOrNext === 'object') {\n      const observer = observerOrNext as PartialObserver<unknown>;\n      nextFn = observer.next?.bind(observer);\n      errorFn = observer.error?.bind(observer);\n      completeFn = observer.complete?.bind(observer);\n    }\n\n    if (this.__isAsync) {\n      errorFn = _wrapInTimeout(errorFn);\n\n      if (nextFn) {\n        nextFn = _wrapInTimeout(nextFn);\n      }\n\n      if (completeFn) {\n        completeFn = _wrapInTimeout(completeFn);\n      }\n    }\n\n    const sink = super.subscribe({next: nextFn, error: errorFn, complete: completeFn});\n\n    if (observerOrNext instanceof Subscription) {\n      observerOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n\nfunction _wrapInTimeout(fn: (value: unknown) => any) {\n  return (value: unknown) => {\n    setTimeout(fn, undefined, value);\n  };\n}\n\n/**\n * @publicApi\n */\nexport const EventEmitter: {\n  new (isAsync?: boolean): EventEmitter<any>; new<T>(isAsync?: boolean): EventEmitter<T>;\n  readonly prototype: EventEmitter<any>;\n} = EventEmitter_ as any;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {EventEmitter} from '../event_emitter';\nimport {arrayEquals, flatten} from '../util/array_utils';\n\nfunction symbolIterator<T>(this: QueryList<T>): Iterator<T> {\n  // @ts-expect-error accessing a private member\n  return this._results[Symbol.iterator]();\n}\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * @publicApi\n */\nexport class QueryList<T> implements Iterable<T> {\n  public readonly dirty = true;\n  private _results: Array<T> = [];\n  private _changesDetected: boolean = false;\n  private _changes: EventEmitter<QueryList<T>>|null = null;\n\n  readonly length: number = 0;\n  readonly first: T = undefined!;\n  readonly last: T = undefined!;\n\n  /**\n   * Returns `Observable` of `QueryList` notifying the subscriber of changes.\n   */\n  get changes(): Observable<any> {\n    return this._changes || (this._changes = new EventEmitter());\n  }\n\n  /**\n   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change\n   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n   *     the same result)\n   */\n  constructor(private _emitDistinctChangesOnly: boolean = false) {\n    // This function should be declared on the prototype, but doing so there will cause the class\n    // declaration to have side-effects and become not tree-shakable. For this reason we do it in\n    // the constructor.\n    // [Symbol.iterator](): Iterator<T> { ... }\n    const proto = QueryList.prototype;\n    if (!proto[Symbol.iterator]) proto[Symbol.iterator] = symbolIterator;\n  }\n\n  /**\n   * Returns the QueryList entry at `index`.\n   */\n  get(index: number): T|undefined {\n    return this._results[index];\n  }\n\n  /**\n   * See\n   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n   */\n  map<U>(fn: (item: T, index: number, array: T[]) => U): U[] {\n    return this._results.map(fn);\n  }\n\n  /**\n   * See\n   * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n   */\n  filter(fn: (item: T, index: number, array: T[]) => boolean): T[] {\n    return this._results.filter(fn);\n  }\n\n  /**\n   * See\n   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n   */\n  find(fn: (item: T, index: number, array: T[]) => boolean): T|undefined {\n    return this._results.find(fn);\n  }\n\n  /**\n   * See\n   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n   */\n  reduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U {\n    return this._results.reduce(fn, init);\n  }\n\n  /**\n   * See\n   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n   */\n  forEach(fn: (item: T, index: number, array: T[]) => void): void {\n    this._results.forEach(fn);\n  }\n\n  /**\n   * See\n   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n   */\n  some(fn: (value: T, index: number, array: T[]) => boolean): boolean {\n    return this._results.some(fn);\n  }\n\n  /**\n   * Returns a copy of the internal results list as an Array.\n   */\n  toArray(): T[] {\n    return this._results.slice();\n  }\n\n  toString(): string {\n    return this._results.toString();\n  }\n\n  /**\n   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that\n   * on change detection, it will not notify of changes to the queries, unless a new change\n   * occurs.\n   *\n   * @param resultsTree The query results to store\n   * @param identityAccessor Optional function for extracting stable object identity from a value\n   *    in the array. This function is executed for each element of the query result list while\n   *    comparing current query list with the new one (provided as a first argument of the `reset`\n   *    function) to detect if the lists are different. If the function is not provided, elements\n   *    are compared as is (without any pre-processing).\n   */\n  reset(resultsTree: Array<T|any[]>, identityAccessor?: (value: T) => unknown): void {\n    // Cast to `QueryListInternal` so that we can mutate fields which are readonly for the usage of\n    // QueryList (but not for QueryList itself.)\n    const self = this as QueryListInternal<T>;\n    (self as {dirty: boolean}).dirty = false;\n    const newResultFlat = flatten(resultsTree);\n    if (this._changesDetected = !arrayEquals(self._results, newResultFlat, identityAccessor)) {\n      self._results = newResultFlat;\n      self.length = newResultFlat.length;\n      self.last = newResultFlat[this.length - 1];\n      self.first = newResultFlat[0];\n    }\n  }\n\n  /**\n   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.\n   */\n  notifyOnChanges(): void {\n    if (this._changes && (this._changesDetected || !this._emitDistinctChangesOnly))\n      this._changes.emit(this);\n  }\n\n  /** internal */\n  setDirty() {\n    (this as {dirty: boolean}).dirty = true;\n  }\n\n  /** internal */\n  destroy(): void {\n    (this.changes as EventEmitter<any>).complete();\n    (this.changes as EventEmitter<any>).unsubscribe();\n  }\n\n  // The implementation of `Symbol.iterator` should be declared here, but this would cause\n  // tree-shaking issues with `QueryList. So instead, it's added in the constructor (see comments\n  // there) and this declaration is left here to ensure that TypeScript considers QueryList to\n  // implement the Iterable interface. This is required for template type-checking of NgFor loops\n  // over QueryLists to work correctly, since QueryList must be assignable to NgIterable.\n  [Symbol.iterator]!: () => Iterator<T>;\n}\n\n/**\n * Internal set of APIs used by the framework. (not to be made public)\n */\ninterface QueryListInternal<T> extends QueryList<T> {\n  reset(a: any[]): void;\n  notifyOnChanges(): void;\n  length: number;\n  last: T;\n  first: T;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {assertLContainer} from '../render3/assert';\nimport {createLView, renderView} from '../render3/instructions/shared';\nimport {TContainerNode, TNode, TNodeType} from '../render3/interfaces/node';\nimport {DECLARATION_LCONTAINER, LView, LViewFlags, QUERIES, TView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {ViewRef as R3_ViewRef} from '../render3/view_ref';\nimport {assertDefined} from '../util/assert';\n\nimport {createElementRef, ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract readonly elementRef: ElementRef;\n\n  /**\n   * Instantiates an unattached embedded view based on this template.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param injector Injector to be used within the embedded view.\n   * @returns The new embedded view object.\n   */\n  abstract createEmbeddedView(context: C, injector?: Injector): EmbeddedViewRef<C>;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => TemplateRef<any>| null = injectTemplateRef;\n}\n\nconst ViewEngineTemplateRef = TemplateRef;\n\n// TODO(alxhub): combine interface and implementation. Currently this is challenging since something\n// in g3 depends on them being separate.\nconst R3TemplateRef = class TemplateRef<T> extends ViewEngineTemplateRef<T> {\n  constructor(\n      private _declarationLView: LView, private _declarationTContainer: TContainerNode,\n      public override elementRef: ElementRef) {\n    super();\n  }\n\n  override createEmbeddedView(context: T, injector?: Injector): EmbeddedViewRef<T> {\n    const embeddedTView = this._declarationTContainer.tView as TView;\n    const embeddedLView = createLView(\n        this._declarationLView, embeddedTView, context, LViewFlags.CheckAlways, null,\n        embeddedTView.declTNode, null, null, null, null, injector || null);\n\n    const declarationLContainer = this._declarationLView[this._declarationTContainer.index];\n    ngDevMode && assertLContainer(declarationLContainer);\n    embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;\n\n    const declarationViewLQueries = this._declarationLView[QUERIES];\n    if (declarationViewLQueries !== null) {\n      embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);\n    }\n\n    renderView(embeddedTView, embeddedLView, context);\n\n    return new R3_ViewRef<T>(embeddedLView);\n  }\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(): TemplateRef<T>|null {\n  return createTemplateRef<T>(getCurrentTNode()!, getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param hostTNode The node on which a TemplateRef is requested\n * @param hostLView The `LView` to which the node belongs\n * @returns The TemplateRef instance or null if we can't create a TemplateRef on a given node type\n */\nexport function createTemplateRef<T>(hostTNode: TNode, hostLView: LView): TemplateRef<T>|null {\n  if (hostTNode.type & TNodeType.Container) {\n    ngDevMode && assertDefined(hostTNode.tView, 'TView must be allocated');\n    return new R3TemplateRef(\n        hostLView, hostTNode as TContainerNode, createElementRef(hostTNode, hostLView));\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector} from '../di/r3_injector';\nimport {isType, Type} from '../interface/type';\nimport {assertNodeInjector} from '../render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from '../render3/component_ref';\nimport {getComponentDef} from '../render3/definition';\nimport {getParentInjectorLocation, NodeInjector} from '../render3/di';\nimport {addToViewTree, createLContainer} from '../render3/instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE, VIEW_REFS} from '../render3/interfaces/container';\nimport {NodeInjectorOffset} from '../render3/interfaces/injector';\nimport {TContainerNode, TDirectiveHostNode, TElementContainerNode, TElementNode, TNodeType} from '../render3/interfaces/node';\nimport {RComment, RElement} from '../render3/interfaces/renderer_dom';\nimport {isLContainer} from '../render3/interfaces/type_checks';\nimport {LView, PARENT, RENDERER, T_HOST, TVIEW} from '../render3/interfaces/view';\nimport {assertTNodeType} from '../render3/node_assert';\nimport {addViewToContainer, destroyLView, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode} from '../render3/node_manipulation';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getParentInjectorIndex, getParentInjectorView, hasParentInjector} from '../render3/util/injector_utils';\nimport {getNativeByTNode, unwrapRNode, viewAttachedToContainer} from '../render3/util/view_utils';\nimport {ViewRef as R3ViewRef} from '../render3/view_ref';\nimport {addToArray, removeFromArray} from '../util/array_utils';\nimport {assertDefined, assertEqual, assertGreaterThan, assertLessThan, throwError} from '../util/assert';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {createElementRef, ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-hierarchy).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing view.\n   * Each view container can have only one anchor element, and each anchor element\n   * can have only a single view container.\n   *\n   * Root elements of views attached to this container become siblings of the anchor element in\n   * the rendered view.\n   *\n   * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n   * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n   *\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this view container.\n   */\n  abstract get injector(): Injector;\n\n  /** @deprecated No replacement */\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Retrieves a view from this container.\n   * @param index The 0-based index of the view to retrieve.\n   * @returns The `ViewRef` instance, or null if the index is out of range.\n   */\n  abstract get(index: number): ViewRef|null;\n\n  /**\n   * Reports how many views are currently attached to this container.\n   * @returns The number of views.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param options Extra configuration for the created view. Includes:\n   *  * index: The 0-based index at which to insert the new view into this container.\n   *           If not specified, appends the new view as the last entry.\n   *  * injector: Injector to be used within the embedded view.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, options?: {\n    index?: number,\n    injector?: Injector\n  }): EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param context The data-binding context of the embedded view, as declared\n   * in the `<ng-template>` usage.\n   * @param index The 0-based index at which to insert the new view into this container.\n   * If not specified, appends the new view as the last entry.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentType Component Type to use.\n   * @param options An object that contains extra parameters:\n   *  * index: the index at which to insert the new component's host view into this container.\n   *           If not specified, appends the new view as the last entry.\n   *  * injector: the injector to use as the parent for the new component.\n   *  * ngModuleRef: an NgModuleRef of the component's NgModule, you should almost always provide\n   *                 this to ensure that all expected providers are available for the component\n   *                 instantiation.\n   *  * environmentInjector: an EnvironmentInjector which will provide the component's environment.\n   *                 you should almost always provide this to ensure that all expected providers\n   *                 are available for the component instantiation. This option is intended to\n   *                 replace the `ngModuleRef` parameter.\n   *  * projectableNodes: list of DOM nodes that should be projected through\n   *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   */\n  abstract createComponent<C>(componentType: Type<C>, options?: {\n    index?: number,\n    injector?: Injector,\n    ngModuleRef?: NgModuleRef<unknown>,\n    environmentInjector?: EnvironmentInjector|NgModuleRef<unknown>,\n    projectableNodes?: Node[][],\n  }): ComponentRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentFactory Component factory to use.\n   * @param index The index at which to insert the new component's host view into this container.\n   * If not specified, appends the new view as the last entry.\n   * @param injector The injector to use as the parent for the new component.\n   * @param projectableNodes List of DOM nodes that should be projected through\n   *     [`<ng-content>`](api/core/ng-content) of the new component instance.\n   * @param ngModuleRef An instance of the NgModuleRef that represent an NgModule.\n   * This information is used to retrieve corresponding NgModule injector.\n   *\n   * @returns The new `ComponentRef` which contains the component instance and the host view.\n   *\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  abstract createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][],\n      environmentInjector?: EnvironmentInjector|NgModuleRef<any>): ComponentRef<C>;\n\n  /**\n   * Inserts a view into this container.\n   * @param viewRef The view to insert.\n   * @param index The 0-based index at which to insert the view.\n   * If not specified, appends the new view as the last entry.\n   * @returns The inserted `ViewRef` instance.\n   *\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a view to a new location in this container.\n   * @param viewRef The view to move.\n   * @param index The 0-based index of the new location.\n   * @returns The moved `ViewRef` instance.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of a view within the current container.\n   * @param viewRef The view to query.\n   * @returns The 0-based index of the view's position in this container,\n   * or `-1` if this container doesn't contain the view.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a view attached to this container\n   * @param index The 0-based index of the view to destroy.\n   * If not specified, the last view in the container is removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Detaches a view from this container without destroying it.\n   * Use along with `insert()` to move a view within the current container.\n   * @param index The 0-based index of the view to detach.\n   * If not specified, the last view in the container is detached.\n   */\n  abstract detach(index?: number): ViewRef|null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ViewContainerRef = injectViewContainerRef;\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(): ViewContainerRef {\n  const previousTNode = getCurrentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(previousTNode, getLView());\n}\n\nconst VE_ViewContainerRef = ViewContainerRef;\n\n// TODO(alxhub): cleaning up this indirection triggers a subtle bug in Closure in g3. Once the fix\n// for that lands, this can be cleaned up.\nconst R3ViewContainerRef = class ViewContainerRef extends VE_ViewContainerRef {\n  constructor(\n      private _lContainer: LContainer,\n      private _hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n      private _hostLView: LView) {\n    super();\n  }\n\n  override get element(): ElementRef {\n    return createElementRef(this._hostTNode, this._hostLView);\n  }\n\n  override get injector(): Injector {\n    return new NodeInjector(this._hostTNode, this._hostLView);\n  }\n\n  /** @deprecated No replacement */\n  override get parentInjector(): Injector {\n    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);\n    if (hasParentInjector(parentLocation)) {\n      const parentView = getParentInjectorView(parentLocation, this._hostLView);\n      const injectorIndex = getParentInjectorIndex(parentLocation);\n      ngDevMode && assertNodeInjector(parentView, injectorIndex);\n      const parentTNode =\n          parentView[TVIEW].data[injectorIndex + NodeInjectorOffset.TNODE] as TElementNode;\n      return new NodeInjector(parentTNode, parentView);\n    } else {\n      return new NodeInjector(null, this._hostLView);\n    }\n  }\n\n  override clear(): void {\n    while (this.length > 0) {\n      this.remove(this.length - 1);\n    }\n  }\n\n  override get(index: number): ViewRef|null {\n    const viewRefs = getViewRefs(this._lContainer);\n    return viewRefs !== null && viewRefs[index] || null;\n  }\n\n  override get length(): number {\n    return this._lContainer.length - CONTAINER_HEADER_OFFSET;\n  }\n\n  override createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, options?: {\n    index?: number,\n    injector?: Injector\n  }): EmbeddedViewRef<C>;\n  override createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n  override createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, indexOrOptions?: number|{\n    index?: number,\n    injector?: Injector\n  }): EmbeddedViewRef<C> {\n    let index: number|undefined;\n    let injector: Injector|undefined;\n\n    if (typeof indexOrOptions === 'number') {\n      index = indexOrOptions;\n    } else if (indexOrOptions != null) {\n      index = indexOrOptions.index;\n      injector = indexOrOptions.injector;\n    }\n\n    const viewRef = templateRef.createEmbeddedView(context || <any>{}, injector);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  override createComponent<C>(componentType: Type<C>, options?: {\n    index?: number,\n    injector?: Injector,\n    projectableNodes?: Node[][],\n    ngModuleRef?: NgModuleRef<unknown>,\n  }): ComponentRef<C>;\n  /**\n   * @deprecated Angular no longer requires component factories to dynamically create components.\n   *     Use different signature of the `createComponent` method, which allows passing\n   *     Component class directly.\n   */\n  override createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number|undefined,\n      injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n      environmentInjector?: EnvironmentInjector|NgModuleRef<any>|undefined): ComponentRef<C>;\n  override createComponent<C>(\n      componentFactoryOrType: ComponentFactory<C>|Type<C>, indexOrOptions?: number|undefined|{\n        index?: number,\n        injector?: Injector,\n        ngModuleRef?: NgModuleRef<unknown>,\n        environmentInjector?: EnvironmentInjector|NgModuleRef<unknown>,\n        projectableNodes?: Node[][],\n      },\n      injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n      environmentInjector?: EnvironmentInjector|NgModuleRef<any>|undefined): ComponentRef<C> {\n    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);\n    let index: number|undefined;\n\n    // This function supports 2 signatures and we need to handle options correctly for both:\n    //   1. When first argument is a Component type. This signature also requires extra\n    //      options to be provided as as object (more ergonomic option).\n    //   2. First argument is a Component factory. In this case extra options are represented as\n    //      positional arguments. This signature is less ergonomic and will be deprecated.\n    if (isComponentFactory) {\n      if (ngDevMode) {\n        assertEqual(\n            typeof indexOrOptions !== 'object', true,\n            'It looks like Component factory was provided as the first argument ' +\n                'and an options object as the second argument. This combination of arguments ' +\n                'is incompatible. You can either change the first argument to provide Component ' +\n                'type or change the second argument to be a number (representing an index at ' +\n                'which to insert the new component\\'s host view into this container)');\n      }\n      index = indexOrOptions as number | undefined;\n    } else {\n      if (ngDevMode) {\n        assertDefined(\n            getComponentDef(componentFactoryOrType),\n            `Provided Component class doesn't contain Component definition. ` +\n                `Please check whether provided class has @Component decorator.`);\n        assertEqual(\n            typeof indexOrOptions !== 'number', true,\n            'It looks like Component type was provided as the first argument ' +\n                'and a number (representing an index at which to insert the new component\\'s ' +\n                'host view into this container as the second argument. This combination of arguments ' +\n                'is incompatible. Please use an object as the second argument instead.');\n      }\n      const options = (indexOrOptions || {}) as {\n        index?: number,\n        injector?: Injector,\n        ngModuleRef?: NgModuleRef<unknown>,\n        environmentInjector?: EnvironmentInjector | NgModuleRef<unknown>,\n        projectableNodes?: Node[][],\n      };\n      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {\n        throwError(\n            `Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);\n      }\n      index = options.index;\n      injector = options.injector;\n      projectableNodes = options.projectableNodes;\n      environmentInjector = options.environmentInjector || options.ngModuleRef;\n    }\n\n    const componentFactory: ComponentFactory<C> = isComponentFactory ?\n        componentFactoryOrType as ComponentFactory<C>:\n        new R3ComponentFactory(getComponentDef(componentFactoryOrType)!);\n    const contextInjector = injector || this.parentInjector;\n\n    // If an `NgModuleRef` is not provided explicitly, try retrieving it from the DI tree.\n    if (!environmentInjector && (componentFactory as any).ngModule == null) {\n      // For the `ComponentFactory` case, entering this logic is very unlikely, since we expect that\n      // an instance of a `ComponentFactory`, resolved via `ComponentFactoryResolver` would have an\n      // `ngModule` field. This is possible in some test scenarios and potentially in some JIT-based\n      // use-cases. For the `ComponentFactory` case we preserve backwards-compatibility and try\n      // using a provided injector first, then fall back to the parent injector of this\n      // `ViewContainerRef` instance.\n      //\n      // For the factory-less case, it's critical to establish a connection with the module\n      // injector tree (by retrieving an instance of an `NgModuleRef` and accessing its injector),\n      // so that a component can use DI tokens provided in MgModules. For this reason, we can not\n      // rely on the provided injector, since it might be detached from the DI tree (for example, if\n      // it was created via `Injector.create` without specifying a parent injector, or if an\n      // injector is retrieved from an `NgModuleRef` created via `createNgModule` using an\n      // NgModule outside of a module tree). Instead, we always use `ViewContainerRef`'s parent\n      // injector, which is normally connected to the DI tree, which includes module injector\n      // subtree.\n      const _injector = isComponentFactory ? contextInjector : this.parentInjector;\n\n      // DO NOT REFACTOR. The code here used to have a `injector.get(NgModuleRef, null) ||\n      // undefined` expression which seems to cause internal google apps to fail. This is documented\n      // in the following internal bug issue: go/b/142967802\n      const result = _injector.get(EnvironmentInjector, null);\n      if (result) {\n        environmentInjector = result;\n      }\n    }\n\n    const componentRef =\n        componentFactory.create(contextInjector, projectableNodes, undefined, environmentInjector);\n    this.insert(componentRef.hostView, index);\n    return componentRef;\n  }\n\n  override insert(viewRef: ViewRef, index?: number): ViewRef {\n    const lView = (viewRef as R3ViewRef<any>)._lView!;\n    const tView = lView[TVIEW];\n\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n    }\n\n    if (viewAttachedToContainer(lView)) {\n      // If view is already attached, detach it first so we clean up references appropriately.\n\n      const prevIdx = this.indexOf(viewRef);\n\n      // A view might be attached either to this or a different container. The `prevIdx` for\n      // those cases will be:\n      // equal to -1 for views attached to this ViewContainerRef\n      // >= 0 for views attached to a different ViewContainerRef\n      if (prevIdx !== -1) {\n        this.detach(prevIdx);\n      } else {\n        const prevLContainer = lView[PARENT] as LContainer;\n        ngDevMode &&\n            assertEqual(\n                isLContainer(prevLContainer), true,\n                'An attached view should have its PARENT point to a container.');\n\n\n        // We need to re-create a R3ViewContainerRef instance since those are not stored on\n        // LView (nor anywhere else).\n        const prevVCRef = new R3ViewContainerRef(\n            prevLContainer, prevLContainer[T_HOST] as TDirectiveHostNode, prevLContainer[PARENT]);\n\n        prevVCRef.detach(prevVCRef.indexOf(viewRef));\n      }\n    }\n\n    // Logical operation of adding `LView` to `LContainer`\n    const adjustedIdx = this._adjustIndex(index);\n    const lContainer = this._lContainer;\n    insertView(tView, lView, lContainer, adjustedIdx);\n\n    // Physical operation of adding the DOM nodes.\n    const beforeNode = getBeforeNodeForView(adjustedIdx, lContainer);\n    const renderer = lView[RENDERER];\n    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE] as RElement | RComment);\n    if (parentRNode !== null) {\n      addViewToContainer(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);\n    }\n\n    (viewRef as R3ViewRef<any>).attachToViewContainerRef();\n    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);\n\n    return viewRef;\n  }\n\n  override move(viewRef: ViewRef, newIndex: number): ViewRef {\n    if (ngDevMode && viewRef.destroyed) {\n      throw new Error('Cannot move a destroyed View in a ViewContainer!');\n    }\n    return this.insert(viewRef, newIndex);\n  }\n\n  override indexOf(viewRef: ViewRef): number {\n    const viewRefsArr = getViewRefs(this._lContainer);\n    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;\n  }\n\n  override remove(index?: number): void {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const detachedView = detachView(this._lContainer, adjustedIdx);\n\n    if (detachedView) {\n      // Before destroying the view, remove it from the container's array of `ViewRef`s.\n      // This ensures the view container length is updated before calling\n      // `destroyLView`, which could recursively call view container methods that\n      // rely on an accurate container length.\n      // (e.g. a method on this view container being called by a child directive's OnDestroy\n      // lifecycle hook)\n      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);\n      destroyLView(detachedView[TVIEW], detachedView);\n    }\n  }\n\n  override detach(index?: number): ViewRef|null {\n    const adjustedIdx = this._adjustIndex(index, -1);\n    const view = detachView(this._lContainer, adjustedIdx);\n\n    const wasDetached =\n        view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;\n    return wasDetached ? new R3ViewRef(view!) : null;\n  }\n\n  private _adjustIndex(index?: number, shift: number = 0) {\n    if (index == null) {\n      return this.length + shift;\n    }\n    if (ngDevMode) {\n      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);\n      // +1 because it's legal to insert at the end.\n      assertLessThan(index, this.length + 1 + shift, 'index');\n    }\n    return index;\n  }\n};\n\nfunction getViewRefs(lContainer: LContainer): ViewRef[]|null {\n  return lContainer[VIEW_REFS] as ViewRef[];\n}\n\nfunction getOrCreateViewRefs(lContainer: LContainer): ViewRef[] {\n  return (lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = [])) as ViewRef[];\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostLView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n    hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n    hostLView: LView): ViewContainerRef {\n  ngDevMode && assertTNodeType(hostTNode, TNodeType.AnyContainer | TNodeType.AnyRNode);\n\n  let lContainer: LContainer;\n  const slotValue = hostLView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n  } else {\n    let commentNode: RComment;\n    // If the host is an element container, the native host element is guaranteed to be a\n    // comment and we can reuse that comment as anchor element for the new LContainer.\n    // The comment node in question is already part of the DOM structure so we don't need to append\n    // it again.\n    if (hostTNode.type & TNodeType.ElementContainer) {\n      commentNode = unwrapRNode(slotValue) as RComment;\n    } else {\n      // If the host is a regular element, we have to insert a comment node manually which will\n      // be used as an anchor when inserting elements. In this specific case we use low-level DOM\n      // manipulation to insert it.\n      const renderer = hostLView[RENDERER];\n      ngDevMode && ngDevMode.rendererCreateComment++;\n      commentNode = renderer.createComment(ngDevMode ? 'container' : '');\n\n      const hostNative = getNativeByTNode(hostTNode, hostLView)!;\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(\n          renderer, parentOfHostNative!, commentNode, nativeNextSibling(renderer, hostNative),\n          false);\n    }\n\n    hostLView[hostTNode.index] = lContainer =\n        createLContainer(slotValue, hostLView, commentNode, hostTNode);\n\n    addToViewTree(hostLView, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine_from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\n\nimport {ProviderToken} from '../di/provider_token';\nimport {createElementRef, ElementRef as ViewEngine_ElementRef, unwrapElementRef} from '../linker/element_ref';\nimport {QueryList} from '../linker/query_list';\nimport {createTemplateRef, TemplateRef as ViewEngine_TemplateRef} from '../linker/template_ref';\nimport {createContainerRef, ViewContainerRef} from '../linker/view_container_ref';\nimport {assertDefined, assertIndexInRange, assertNumber, throwError} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {assertFirstCreatePass, assertLContainer} from './assert';\nimport {getNodeInjectable, locateDirectiveOrProvider} from './di';\nimport {storeCleanupWithContext} from './instructions/shared';\nimport {CONTAINER_HEADER_OFFSET, LContainer, MOVED_VIEWS} from './interfaces/container';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType} from './interfaces/node';\nimport {LQueries, LQuery, QueryFlags, TQueries, TQuery, TQueryMetadata} from './interfaces/query';\nimport {DECLARATION_LCONTAINER, LView, PARENT, QUERIES, TVIEW, TView} from './interfaces/view';\nimport {assertTNodeType} from './node_assert';\nimport {getCurrentQueryIndex, getCurrentTNode, getLView, getTView, setCurrentQueryIndex} from './state';\nimport {isCreationMode} from './util/view_utils';\n\nclass LQuery_<T> implements LQuery<T> {\n  matches: (T|null)[]|null = null;\n  constructor(public queryList: QueryList<T>) {}\n  clone(): LQuery<T> {\n    return new LQuery_(this.queryList);\n  }\n  setDirty(): void {\n    this.queryList.setDirty();\n  }\n}\n\nclass LQueries_ implements LQueries {\n  constructor(public queries: LQuery<any>[] = []) {}\n\n  createEmbeddedView(tView: TView): LQueries|null {\n    const tQueries = tView.queries;\n    if (tQueries !== null) {\n      const noOfInheritedQueries =\n          tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;\n      const viewLQueries: LQuery<any>[] = [];\n\n      // An embedded view has queries propagated from a declaration view at the beginning of the\n      // TQueries collection and up until a first content query declared in the embedded view. Only\n      // propagated LQueries are created at this point (LQuery corresponding to declared content\n      // queries will be instantiated from the content query instructions for each directive).\n      for (let i = 0; i < noOfInheritedQueries; i++) {\n        const tQuery = tQueries.getByIndex(i);\n        const parentLQuery = this.queries[tQuery.indexInDeclarationView];\n        viewLQueries.push(parentLQuery.clone());\n      }\n\n      return new LQueries_(viewLQueries);\n    }\n\n    return null;\n  }\n\n  insertView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  detachView(tView: TView): void {\n    this.dirtyQueriesWithMatches(tView);\n  }\n\n  private dirtyQueriesWithMatches(tView: TView) {\n    for (let i = 0; i < this.queries.length; i++) {\n      if (getTQuery(tView, i).matches !== null) {\n        this.queries[i].setDirty();\n      }\n    }\n  }\n}\n\nclass TQueryMetadata_ implements TQueryMetadata {\n  constructor(\n      public predicate: ProviderToken<unknown>|string[], public flags: QueryFlags,\n      public read: any = null) {}\n}\n\nclass TQueries_ implements TQueries {\n  constructor(private queries: TQuery[] = []) {}\n\n  elementStart(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementStart(tView, tNode);\n    }\n  }\n  elementEnd(tNode: TNode): void {\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].elementEnd(tNode);\n    }\n  }\n  embeddedTView(tNode: TNode): TQueries|null {\n    let queriesForTemplateRef: TQuery[]|null = null;\n\n    for (let i = 0; i < this.length; i++) {\n      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;\n      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);\n\n      if (tqueryClone) {\n        tqueryClone.indexInDeclarationView = i;\n        if (queriesForTemplateRef !== null) {\n          queriesForTemplateRef.push(tqueryClone);\n        } else {\n          queriesForTemplateRef = [tqueryClone];\n        }\n      }\n    }\n\n    return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    ngDevMode &&\n        assertFirstCreatePass(\n            tView, 'Queries should collect results on the first template pass only');\n    for (let i = 0; i < this.queries.length; i++) {\n      this.queries[i].template(tView, tNode);\n    }\n  }\n\n  getByIndex(index: number): TQuery {\n    ngDevMode && assertIndexInRange(this.queries, index);\n    return this.queries[index];\n  }\n\n  get length(): number {\n    return this.queries.length;\n  }\n\n  track(tquery: TQuery): void {\n    this.queries.push(tquery);\n  }\n}\n\nclass TQuery_ implements TQuery {\n  matches: number[]|null = null;\n  indexInDeclarationView = -1;\n  crossesNgTemplate = false;\n\n  /**\n   * A node index on which a query was declared (-1 for view queries and ones inherited from the\n   * declaration template). We use this index (alongside with _appliesToNextNode flag) to know\n   * when to apply content queries to elements in a template.\n   */\n  private _declarationNodeIndex: number;\n\n  /**\n   * A flag indicating if a given query still applies to nodes it is crossing. We use this flag\n   * (alongside with _declarationNodeIndex) to know when to stop applying content queries to\n   * elements in a template.\n   */\n  private _appliesToNextNode = true;\n\n  constructor(public metadata: TQueryMetadata, nodeIndex: number = -1) {\n    this._declarationNodeIndex = nodeIndex;\n  }\n\n  elementStart(tView: TView, tNode: TNode): void {\n    if (this.isApplyingToNode(tNode)) {\n      this.matchTNode(tView, tNode);\n    }\n  }\n\n  elementEnd(tNode: TNode): void {\n    if (this._declarationNodeIndex === tNode.index) {\n      this._appliesToNextNode = false;\n    }\n  }\n\n  template(tView: TView, tNode: TNode): void {\n    this.elementStart(tView, tNode);\n  }\n\n  embeddedTView(tNode: TNode, childQueryIndex: number): TQuery|null {\n    if (this.isApplyingToNode(tNode)) {\n      this.crossesNgTemplate = true;\n      // A marker indicating a `<ng-template>` element (a placeholder for query results from\n      // embedded views created based on this `<ng-template>`).\n      this.addMatch(-tNode.index, childQueryIndex);\n      return new TQuery_(this.metadata);\n    }\n    return null;\n  }\n\n  private isApplyingToNode(tNode: TNode): boolean {\n    if (this._appliesToNextNode &&\n        (this.metadata.flags & QueryFlags.descendants) !== QueryFlags.descendants) {\n      const declarationNodeIdx = this._declarationNodeIndex;\n      let parent = tNode.parent;\n      // Determine if a given TNode is a \"direct\" child of a node on which a content query was\n      // declared (only direct children of query's host node can match with the descendants: false\n      // option). There are 3 main use-case / conditions to consider here:\n      // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query\n      // host node;\n      // - <needs-target><ng-template [ngIf]=\"true\"><i #target></i></ng-template></needs-target>:\n      // here <i #target> parent node is null;\n      // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need\n      // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse\n      // up past the query's host node!).\n      while (parent !== null && (parent.type & TNodeType.ElementContainer) &&\n             parent.index !== declarationNodeIdx) {\n        parent = parent.parent;\n      }\n      return declarationNodeIdx === (parent !== null ? parent.index : -1);\n    }\n    return this._appliesToNextNode;\n  }\n\n  private matchTNode(tView: TView, tNode: TNode): void {\n    const predicate = this.metadata.predicate;\n    if (Array.isArray(predicate)) {\n      for (let i = 0; i < predicate.length; i++) {\n        const name = predicate[i];\n        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));\n        // Also try matching the name to a provider since strings can be used as DI tokens too.\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));\n      }\n    } else {\n      if ((predicate as any) === ViewEngine_TemplateRef) {\n        if (tNode.type & TNodeType.Container) {\n          this.matchTNodeWithReadOption(tView, tNode, -1);\n        }\n      } else {\n        this.matchTNodeWithReadOption(\n            tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));\n      }\n    }\n  }\n\n  private matchTNodeWithReadOption(tView: TView, tNode: TNode, nodeMatchIdx: number|null): void {\n    if (nodeMatchIdx !== null) {\n      const read = this.metadata.read;\n      if (read !== null) {\n        if (read === ViewEngine_ElementRef || read === ViewContainerRef ||\n            read === ViewEngine_TemplateRef && (tNode.type & TNodeType.Container)) {\n          this.addMatch(tNode.index, -2);\n        } else {\n          const directiveOrProviderIdx =\n              locateDirectiveOrProvider(tNode, tView, read, false, false);\n          if (directiveOrProviderIdx !== null) {\n            this.addMatch(tNode.index, directiveOrProviderIdx);\n          }\n        }\n      } else {\n        this.addMatch(tNode.index, nodeMatchIdx);\n      }\n    }\n  }\n\n  private addMatch(tNodeIdx: number, matchIdx: number) {\n    if (this.matches === null) {\n      this.matches = [tNodeIdx, matchIdx];\n    } else {\n      this.matches.push(tNodeIdx, matchIdx);\n    }\n  }\n}\n\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param tNode static data of a node to check\n * @param selector selector to match\n * @returns directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode: TNode, selector: string): number|null {\n  const localNames = tNode.localNames;\n  if (localNames !== null) {\n    for (let i = 0; i < localNames.length; i += 2) {\n      if (localNames[i] === selector) {\n        return localNames[i + 1] as number;\n      }\n    }\n  }\n  return null;\n}\n\n\nfunction createResultByTNodeType(tNode: TNode, currentView: LView): any {\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    return createElementRef(tNode, currentView);\n  } else if (tNode.type & TNodeType.Container) {\n    return createTemplateRef(tNode, currentView);\n  }\n  return null;\n}\n\n\nfunction createResultForNode(lView: LView, tNode: TNode, matchingIdx: number, read: any): any {\n  if (matchingIdx === -1) {\n    // if read token and / or strategy is not specified, detect it using appropriate tNode type\n    return createResultByTNodeType(tNode, lView);\n  } else if (matchingIdx === -2) {\n    // read a special token from a node injector\n    return createSpecialToken(lView, tNode, read);\n  } else {\n    // read a token\n    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode as TElementNode);\n  }\n}\n\nfunction createSpecialToken(lView: LView, tNode: TNode, read: any): any {\n  if (read === ViewEngine_ElementRef) {\n    return createElementRef(tNode, lView);\n  } else if (read === ViewEngine_TemplateRef) {\n    return createTemplateRef(tNode, lView);\n  } else if (read === ViewContainerRef) {\n    ngDevMode && assertTNodeType(tNode, TNodeType.AnyRNode | TNodeType.AnyContainer);\n    return createContainerRef(\n        tNode as TElementNode | TContainerNode | TElementContainerNode, lView);\n  } else {\n    ngDevMode &&\n        throwError(\n            `Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${\n                stringify(read)}.`);\n  }\n}\n\n/**\n * A helper function that creates query results for a given view. This function is meant to do the\n * processing once and only once for a given view instance (a set of results for a given view\n * doesn't change).\n */\nfunction materializeViewResults<T>(\n    tView: TView, lView: LView, tQuery: TQuery, queryIndex: number): (T|null)[] {\n  const lQuery = lView[QUERIES]!.queries![queryIndex];\n  if (lQuery.matches === null) {\n    const tViewData = tView.data;\n    const tQueryMatches = tQuery.matches!;\n    const result: T|null[] = [];\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const matchedNodeIdx = tQueryMatches[i];\n      if (matchedNodeIdx < 0) {\n        // we at the <ng-template> marker which might have results in views created based on this\n        // <ng-template> - those results will be in separate views though, so here we just leave\n        // null as a placeholder\n        result.push(null);\n      } else {\n        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);\n        const tNode = tViewData[matchedNodeIdx] as TNode;\n        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));\n      }\n    }\n    lQuery.matches = result;\n  }\n\n  return lQuery.matches;\n}\n\n/**\n * A helper function that collects (already materialized) query results from a tree of views,\n * starting with a provided LView.\n */\nfunction collectQueryResults<T>(tView: TView, lView: LView, queryIndex: number, result: T[]): T[] {\n  const tQuery = tView.queries!.getByIndex(queryIndex);\n  const tQueryMatches = tQuery.matches;\n  if (tQueryMatches !== null) {\n    const lViewResults = materializeViewResults<T>(tView, lView, tQuery, queryIndex);\n\n    for (let i = 0; i < tQueryMatches.length; i += 2) {\n      const tNodeIdx = tQueryMatches[i];\n      if (tNodeIdx > 0) {\n        result.push(lViewResults[i / 2] as T);\n      } else {\n        const childQueryIndex = tQueryMatches[i + 1];\n\n        const declarationLContainer = lView[-tNodeIdx] as LContainer;\n        ngDevMode && assertLContainer(declarationLContainer);\n\n        // collect matches for views inserted in this container\n        for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {\n          const embeddedLView = declarationLContainer[i];\n          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n\n        // collect matches for views created from this declaration container and inserted into\n        // different containers\n        if (declarationLContainer[MOVED_VIEWS] !== null) {\n          const embeddedLViews = declarationLContainer[MOVED_VIEWS]!;\n          for (let i = 0; i < embeddedLViews.length; i++) {\n            const embeddedLView = embeddedLViews[i];\n            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns `true` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, `false` otherwise.\n *\n * @codeGenApi\n */\nexport function ɵɵqueryRefresh(queryList: QueryList<any>): boolean {\n  const lView = getLView();\n  const tView = getTView();\n  const queryIndex = getCurrentQueryIndex();\n\n  setCurrentQueryIndex(queryIndex + 1);\n\n  const tQuery = getTQuery(tView, queryIndex);\n  if (queryList.dirty &&\n      (isCreationMode(lView) ===\n       ((tQuery.metadata.flags & QueryFlags.isStatic) === QueryFlags.isStatic))) {\n    if (tQuery.matches === null) {\n      queryList.reset([]);\n    } else {\n      const result = tQuery.crossesNgTemplate ?\n          collectQueryResults(tView, lView, queryIndex, []) :\n          materializeViewResults(tView, lView, tQuery, queryIndex);\n      queryList.reset(result, unwrapElementRef);\n      queryList.notifyOnChanges();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport function ɵɵviewQuery<T>(\n    predicate: ProviderToken<unknown>|string[], flags: QueryFlags, read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticViewQueries = true;\n    }\n  }\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport function ɵɵcontentQuery<T>(\n    directiveIndex: number, predicate: ProviderToken<unknown>|string[], flags: QueryFlags,\n    read?: any): void {\n  ngDevMode && assertNumber(flags, 'Expecting flags');\n  const tView = getTView();\n  if (tView.firstCreatePass) {\n    const tNode = getCurrentTNode()!;\n    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);\n    saveContentQueryAndDirectiveIndex(tView, directiveIndex);\n    if ((flags & QueryFlags.isStatic) === QueryFlags.isStatic) {\n      tView.staticContentQueries = true;\n    }\n  }\n\n  createLQuery<T>(tView, getLView(), flags);\n}\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport function ɵɵloadQuery<T>(): QueryList<T> {\n  return loadQueryInternal<T>(getLView(), getCurrentQueryIndex());\n}\n\nfunction loadQueryInternal<T>(lView: LView, queryIndex: number): QueryList<T> {\n  ngDevMode &&\n      assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');\n  ngDevMode && assertIndexInRange(lView[QUERIES]!.queries, queryIndex);\n  return lView[QUERIES]!.queries[queryIndex].queryList;\n}\n\nfunction createLQuery<T>(tView: TView, lView: LView, flags: QueryFlags) {\n  const queryList = new QueryList<T>(\n      (flags & QueryFlags.emitDistinctChangesOnly) === QueryFlags.emitDistinctChangesOnly);\n  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);\n\n  if (lView[QUERIES] === null) lView[QUERIES] = new LQueries_();\n  lView[QUERIES]!.queries.push(new LQuery_(queryList));\n}\n\nfunction createTQuery(tView: TView, metadata: TQueryMetadata, nodeIndex: number): void {\n  if (tView.queries === null) tView.queries = new TQueries_();\n  tView.queries.track(new TQuery_(metadata, nodeIndex));\n}\n\nfunction saveContentQueryAndDirectiveIndex(tView: TView, directiveIndex: number) {\n  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n  const lastSavedDirectiveIndex =\n      tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;\n  if (directiveIndex !== lastSavedDirectiveIndex) {\n    tViewContentQueries.push(tView.queries!.length - 1, directiveIndex);\n  }\n}\n\nfunction getTQuery(tView: TView, index: number): TQuery {\n  ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');\n  return tView.queries!.getByIndex(index);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {createTemplateRef, TemplateRef} from '../linker/template_ref';\nimport {TNode} from './interfaces/node';\nimport {LView} from './interfaces/view';\n\n\n/**\n * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the\n * `<ng-template>` element.\n *\n * @codeGenApi\n */\nexport function ɵɵtemplateRefExtractor(tNode: TNode, lView: LView): TemplateRef<any>|null {\n  return createTemplateRef(tNode, lView);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {forwardRef, resolveForwardRef} from '../../di/forward_ref';\nimport {ɵɵinject, ɵɵinvalidFactoryDep} from '../../di/injector_compatibility';\nimport {ɵɵdefineInjectable, ɵɵdefineInjector} from '../../di/interface/defs';\nimport {registerNgModuleType} from '../../linker/ng_module_registration';\nimport * as iframe_attrs_validation from '../../sanitization/iframe_attrs_validation';\nimport * as sanitization from '../../sanitization/sanitization';\nimport * as r3 from '../index';\n\n\n/**\n * A mapping of the @angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of @angular/core.\n */\nexport const angularCoreEnv: {[name: string]: Function} =\n    (() => ({\n       'ɵɵattribute': r3.ɵɵattribute,\n       'ɵɵattributeInterpolate1': r3.ɵɵattributeInterpolate1,\n       'ɵɵattributeInterpolate2': r3.ɵɵattributeInterpolate2,\n       'ɵɵattributeInterpolate3': r3.ɵɵattributeInterpolate3,\n       'ɵɵattributeInterpolate4': r3.ɵɵattributeInterpolate4,\n       'ɵɵattributeInterpolate5': r3.ɵɵattributeInterpolate5,\n       'ɵɵattributeInterpolate6': r3.ɵɵattributeInterpolate6,\n       'ɵɵattributeInterpolate7': r3.ɵɵattributeInterpolate7,\n       'ɵɵattributeInterpolate8': r3.ɵɵattributeInterpolate8,\n       'ɵɵattributeInterpolateV': r3.ɵɵattributeInterpolateV,\n       'ɵɵdefineComponent': r3.ɵɵdefineComponent,\n       'ɵɵdefineDirective': r3.ɵɵdefineDirective,\n       'ɵɵdefineInjectable': ɵɵdefineInjectable,\n       'ɵɵdefineInjector': ɵɵdefineInjector,\n       'ɵɵdefineNgModule': r3.ɵɵdefineNgModule,\n       'ɵɵdefinePipe': r3.ɵɵdefinePipe,\n       'ɵɵdirectiveInject': r3.ɵɵdirectiveInject,\n       'ɵɵgetInheritedFactory': r3.ɵɵgetInheritedFactory,\n       'ɵɵinject': ɵɵinject,\n       'ɵɵinjectAttribute': r3.ɵɵinjectAttribute,\n       'ɵɵinvalidFactory': r3.ɵɵinvalidFactory,\n       'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,\n       'ɵɵtemplateRefExtractor': r3.ɵɵtemplateRefExtractor,\n       'ɵɵresetView': r3.ɵɵresetView,\n       'ɵɵHostDirectivesFeature': r3.ɵɵHostDirectivesFeature,\n       'ɵɵNgOnChangesFeature': r3.ɵɵNgOnChangesFeature,\n       'ɵɵProvidersFeature': r3.ɵɵProvidersFeature,\n       'ɵɵCopyDefinitionFeature': r3.ɵɵCopyDefinitionFeature,\n       'ɵɵInheritDefinitionFeature': r3.ɵɵInheritDefinitionFeature,\n       'ɵɵStandaloneFeature': r3.ɵɵStandaloneFeature,\n       'ɵɵnextContext': r3.ɵɵnextContext,\n       'ɵɵnamespaceHTML': r3.ɵɵnamespaceHTML,\n       'ɵɵnamespaceMathML': r3.ɵɵnamespaceMathML,\n       'ɵɵnamespaceSVG': r3.ɵɵnamespaceSVG,\n       'ɵɵenableBindings': r3.ɵɵenableBindings,\n       'ɵɵdisableBindings': r3.ɵɵdisableBindings,\n       'ɵɵelementStart': r3.ɵɵelementStart,\n       'ɵɵelementEnd': r3.ɵɵelementEnd,\n       'ɵɵelement': r3.ɵɵelement,\n       'ɵɵelementContainerStart': r3.ɵɵelementContainerStart,\n       'ɵɵelementContainerEnd': r3.ɵɵelementContainerEnd,\n       'ɵɵelementContainer': r3.ɵɵelementContainer,\n       'ɵɵpureFunction0': r3.ɵɵpureFunction0,\n       'ɵɵpureFunction1': r3.ɵɵpureFunction1,\n       'ɵɵpureFunction2': r3.ɵɵpureFunction2,\n       'ɵɵpureFunction3': r3.ɵɵpureFunction3,\n       'ɵɵpureFunction4': r3.ɵɵpureFunction4,\n       'ɵɵpureFunction5': r3.ɵɵpureFunction5,\n       'ɵɵpureFunction6': r3.ɵɵpureFunction6,\n       'ɵɵpureFunction7': r3.ɵɵpureFunction7,\n       'ɵɵpureFunction8': r3.ɵɵpureFunction8,\n       'ɵɵpureFunctionV': r3.ɵɵpureFunctionV,\n       'ɵɵgetCurrentView': r3.ɵɵgetCurrentView,\n       'ɵɵrestoreView': r3.ɵɵrestoreView,\n       'ɵɵlistener': r3.ɵɵlistener,\n       'ɵɵprojection': r3.ɵɵprojection,\n       'ɵɵsyntheticHostProperty': r3.ɵɵsyntheticHostProperty,\n       'ɵɵsyntheticHostListener': r3.ɵɵsyntheticHostListener,\n       'ɵɵpipeBind1': r3.ɵɵpipeBind1,\n       'ɵɵpipeBind2': r3.ɵɵpipeBind2,\n       'ɵɵpipeBind3': r3.ɵɵpipeBind3,\n       'ɵɵpipeBind4': r3.ɵɵpipeBind4,\n       'ɵɵpipeBindV': r3.ɵɵpipeBindV,\n       'ɵɵprojectionDef': r3.ɵɵprojectionDef,\n       'ɵɵhostProperty': r3.ɵɵhostProperty,\n       'ɵɵproperty': r3.ɵɵproperty,\n       'ɵɵpropertyInterpolate': r3.ɵɵpropertyInterpolate,\n       'ɵɵpropertyInterpolate1': r3.ɵɵpropertyInterpolate1,\n       'ɵɵpropertyInterpolate2': r3.ɵɵpropertyInterpolate2,\n       'ɵɵpropertyInterpolate3': r3.ɵɵpropertyInterpolate3,\n       'ɵɵpropertyInterpolate4': r3.ɵɵpropertyInterpolate4,\n       'ɵɵpropertyInterpolate5': r3.ɵɵpropertyInterpolate5,\n       'ɵɵpropertyInterpolate6': r3.ɵɵpropertyInterpolate6,\n       'ɵɵpropertyInterpolate7': r3.ɵɵpropertyInterpolate7,\n       'ɵɵpropertyInterpolate8': r3.ɵɵpropertyInterpolate8,\n       'ɵɵpropertyInterpolateV': r3.ɵɵpropertyInterpolateV,\n       'ɵɵpipe': r3.ɵɵpipe,\n       'ɵɵqueryRefresh': r3.ɵɵqueryRefresh,\n       'ɵɵviewQuery': r3.ɵɵviewQuery,\n       'ɵɵloadQuery': r3.ɵɵloadQuery,\n       'ɵɵcontentQuery': r3.ɵɵcontentQuery,\n       'ɵɵreference': r3.ɵɵreference,\n       'ɵɵclassMap': r3.ɵɵclassMap,\n       'ɵɵclassMapInterpolate1': r3.ɵɵclassMapInterpolate1,\n       'ɵɵclassMapInterpolate2': r3.ɵɵclassMapInterpolate2,\n       'ɵɵclassMapInterpolate3': r3.ɵɵclassMapInterpolate3,\n       'ɵɵclassMapInterpolate4': r3.ɵɵclassMapInterpolate4,\n       'ɵɵclassMapInterpolate5': r3.ɵɵclassMapInterpolate5,\n       'ɵɵclassMapInterpolate6': r3.ɵɵclassMapInterpolate6,\n       'ɵɵclassMapInterpolate7': r3.ɵɵclassMapInterpolate7,\n       'ɵɵclassMapInterpolate8': r3.ɵɵclassMapInterpolate8,\n       'ɵɵclassMapInterpolateV': r3.ɵɵclassMapInterpolateV,\n       'ɵɵstyleMap': r3.ɵɵstyleMap,\n       'ɵɵstyleMapInterpolate1': r3.ɵɵstyleMapInterpolate1,\n       'ɵɵstyleMapInterpolate2': r3.ɵɵstyleMapInterpolate2,\n       'ɵɵstyleMapInterpolate3': r3.ɵɵstyleMapInterpolate3,\n       'ɵɵstyleMapInterpolate4': r3.ɵɵstyleMapInterpolate4,\n       'ɵɵstyleMapInterpolate5': r3.ɵɵstyleMapInterpolate5,\n       'ɵɵstyleMapInterpolate6': r3.ɵɵstyleMapInterpolate6,\n       'ɵɵstyleMapInterpolate7': r3.ɵɵstyleMapInterpolate7,\n       'ɵɵstyleMapInterpolate8': r3.ɵɵstyleMapInterpolate8,\n       'ɵɵstyleMapInterpolateV': r3.ɵɵstyleMapInterpolateV,\n       'ɵɵstyleProp': r3.ɵɵstyleProp,\n       'ɵɵstylePropInterpolate1': r3.ɵɵstylePropInterpolate1,\n       'ɵɵstylePropInterpolate2': r3.ɵɵstylePropInterpolate2,\n       'ɵɵstylePropInterpolate3': r3.ɵɵstylePropInterpolate3,\n       'ɵɵstylePropInterpolate4': r3.ɵɵstylePropInterpolate4,\n       'ɵɵstylePropInterpolate5': r3.ɵɵstylePropInterpolate5,\n       'ɵɵstylePropInterpolate6': r3.ɵɵstylePropInterpolate6,\n       'ɵɵstylePropInterpolate7': r3.ɵɵstylePropInterpolate7,\n       'ɵɵstylePropInterpolate8': r3.ɵɵstylePropInterpolate8,\n       'ɵɵstylePropInterpolateV': r3.ɵɵstylePropInterpolateV,\n       'ɵɵclassProp': r3.ɵɵclassProp,\n       'ɵɵadvance': r3.ɵɵadvance,\n       'ɵɵtemplate': r3.ɵɵtemplate,\n       'ɵɵtext': r3.ɵɵtext,\n       'ɵɵtextInterpolate': r3.ɵɵtextInterpolate,\n       'ɵɵtextInterpolate1': r3.ɵɵtextInterpolate1,\n       'ɵɵtextInterpolate2': r3.ɵɵtextInterpolate2,\n       'ɵɵtextInterpolate3': r3.ɵɵtextInterpolate3,\n       'ɵɵtextInterpolate4': r3.ɵɵtextInterpolate4,\n       'ɵɵtextInterpolate5': r3.ɵɵtextInterpolate5,\n       'ɵɵtextInterpolate6': r3.ɵɵtextInterpolate6,\n       'ɵɵtextInterpolate7': r3.ɵɵtextInterpolate7,\n       'ɵɵtextInterpolate8': r3.ɵɵtextInterpolate8,\n       'ɵɵtextInterpolateV': r3.ɵɵtextInterpolateV,\n       'ɵɵi18n': r3.ɵɵi18n,\n       'ɵɵi18nAttributes': r3.ɵɵi18nAttributes,\n       'ɵɵi18nExp': r3.ɵɵi18nExp,\n       'ɵɵi18nStart': r3.ɵɵi18nStart,\n       'ɵɵi18nEnd': r3.ɵɵi18nEnd,\n       'ɵɵi18nApply': r3.ɵɵi18nApply,\n       'ɵɵi18nPostprocess': r3.ɵɵi18nPostprocess,\n       'ɵɵresolveWindow': r3.ɵɵresolveWindow,\n       'ɵɵresolveDocument': r3.ɵɵresolveDocument,\n       'ɵɵresolveBody': r3.ɵɵresolveBody,\n       'ɵɵsetComponentScope': r3.ɵɵsetComponentScope,\n       'ɵɵsetNgModuleScope': r3.ɵɵsetNgModuleScope,\n       'ɵɵregisterNgModuleType': registerNgModuleType,\n\n       'ɵɵsanitizeHtml': sanitization.ɵɵsanitizeHtml,\n       'ɵɵsanitizeStyle': sanitization.ɵɵsanitizeStyle,\n       'ɵɵsanitizeResourceUrl': sanitization.ɵɵsanitizeResourceUrl,\n       'ɵɵsanitizeScript': sanitization.ɵɵsanitizeScript,\n       'ɵɵsanitizeUrl': sanitization.ɵɵsanitizeUrl,\n       'ɵɵsanitizeUrlOrResourceUrl': sanitization.ɵɵsanitizeUrlOrResourceUrl,\n       'ɵɵtrustConstantHtml': sanitization.ɵɵtrustConstantHtml,\n       'ɵɵtrustConstantResourceUrl': sanitization.ɵɵtrustConstantResourceUrl,\n       'ɵɵvalidateIframeAttribute': iframe_attrs_validation.ɵɵvalidateIframeAttribute,\n\n       'forwardRef': forwardRef,\n       'resolveForwardRef': resolveForwardRef,\n     }))();\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ViewEncapsulation} from '../../metadata/view';\n\nexport interface JitCompilerOptions {\n  defaultEncapsulation?: ViewEncapsulation;\n  preserveWhitespaces?: boolean;\n}\n\nlet jitOptions: JitCompilerOptions|null = null;\n\nexport function setJitOptions(options: JitCompilerOptions): void {\n  if (jitOptions !== null) {\n    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {\n      ngDevMode &&\n          console.error(\n              'Provided value for `defaultEncapsulation` can not be changed once it has been set.');\n      return;\n    }\n    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {\n      ngDevMode &&\n          console.error(\n              'Provided value for `preserveWhitespaces` can not be changed once it has been set.');\n      return;\n    }\n  }\n  jitOptions = options;\n}\n\nexport function getJitOptions(): JitCompilerOptions|null {\n  return jitOptions;\n}\n\nexport function resetJitOptions(): void {\n  jitOptions = null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function patchModuleCompilation(): void {\n  // Does nothing, but exists as a target for patching.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders} from '../../di/interface/provider';\nimport {Type} from '../../interface/type';\nimport {NgModuleDef} from '../../metadata/ng_module_def';\nimport {getNgModuleDef} from '../definition';\n\nexport function isModuleWithProviders(value: any): value is ModuleWithProviders<{}> {\n  return (value as {ngModule?: any}).ngModule !== undefined;\n}\n\nexport function isNgModule<T>(value: Type<T>): value is Type<T>&{ɵmod: NgModuleDef<T>} {\n  return !!getNgModuleDef(value);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3InjectorMetadataFacade} from '../../compiler/compiler_facade';\nimport {resolveForwardRef} from '../../di/forward_ref';\nimport {NG_INJ_DEF} from '../../di/interface/defs';\nimport {ModuleWithProviders} from '../../di/interface/provider';\nimport {reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport {registerNgModuleType} from '../../linker/ng_module_registration';\nimport {Component} from '../../metadata/directives';\nimport {NgModule} from '../../metadata/ng_module';\nimport {NgModuleDef, NgModuleTransitiveScopes, NgModuleType} from '../../metadata/ng_module_def';\nimport {deepForEach, flatten} from '../../util/array_utils';\nimport {assertDefined} from '../../util/assert';\nimport {EMPTY_ARRAY} from '../../util/empty';\nimport {getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef, isStandalone} from '../definition';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_FACTORY_DEF, NG_MOD_DEF, NG_PIPE_DEF} from '../fields';\nimport {ComponentDef} from '../interfaces/definition';\nimport {maybeUnwrapFn} from '../util/misc_utils';\nimport {stringifyForError} from '../util/stringify_utils';\n\nimport {angularCoreEnv} from './environment';\nimport {patchModuleCompilation} from './module_patch';\nimport {isModuleWithProviders, isNgModule} from './util';\n\ninterface ModuleQueueItem {\n  moduleType: Type<any>;\n  ngModule: NgModule;\n}\n\nconst moduleQueue: ModuleQueueItem[] = [];\n\n/**\n * Enqueues moduleDef to be checked later to see if scope can be set on its\n * component declarations.\n */\nfunction enqueueModuleForDelayedScoping(moduleType: Type<any>, ngModule: NgModule) {\n  moduleQueue.push({moduleType, ngModule});\n}\n\nlet flushingModuleQueue = false;\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nexport function flushModuleScopingQueueAsMuchAsPossible() {\n  if (!flushingModuleQueue) {\n    flushingModuleQueue = true;\n    try {\n      for (let i = moduleQueue.length - 1; i >= 0; i--) {\n        const {moduleType, ngModule} = moduleQueue[i];\n\n        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {\n          // dequeue\n          moduleQueue.splice(i, 1);\n          setScopeOnDeclaredComponents(moduleType, ngModule);\n        }\n      }\n    } finally {\n      flushingModuleQueue = false;\n    }\n  }\n}\n\n/**\n * Returns truthy if a declaration has resolved. If the declaration happens to be\n * an array of declarations, it will recurse to check each declaration in that array\n * (which may also be arrays).\n */\nfunction isResolvedDeclaration(declaration: any[]|Type<any>): boolean {\n  if (Array.isArray(declaration)) {\n    return declaration.every(isResolvedDeclaration);\n  }\n  return !!resolveForwardRef(declaration);\n}\n\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `@NgModule` decorator.\n */\nexport function compileNgModule(moduleType: Type<any>, ngModule: NgModule = {}): void {\n  patchModuleCompilation();\n  compileNgModuleDefs(moduleType as NgModuleType, ngModule);\n  if (ngModule.id !== undefined) {\n    registerNgModuleType(moduleType as NgModuleType, ngModule.id);\n  }\n\n  // Because we don't know if all declarations have resolved yet at the moment the\n  // NgModule decorator is executing, we're enqueueing the setting of module scope\n  // on its declarations to be run at a later time when all declarations for the module,\n  // including forward refs, have resolved.\n  enqueueModuleForDelayedScoping(moduleType, ngModule);\n}\n\n/**\n * Compiles and adds the `ɵmod`, `ɵfac` and `ɵinj` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nexport function compileNgModuleDefs(\n    moduleType: NgModuleType, ngModule: NgModule,\n    allowDuplicateDeclarationsInRoot: boolean = false): void {\n  ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n  ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n  const declarations: Type<any>[] = flatten(ngModule.declarations || EMPTY_ARRAY);\n  let ngModuleDef: any = null;\n  Object.defineProperty(moduleType, NG_MOD_DEF, {\n    configurable: true,\n    get: () => {\n      if (ngModuleDef === null) {\n        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {\n          // We need to assert this immediately, because allowing it to continue will cause it to\n          // go into an infinite loop before we've reached the point where we throw all the errors.\n          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);\n        }\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {\n          type: moduleType,\n          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),\n          declarations: declarations.map(resolveForwardRef),\n          imports: flatten(ngModule.imports || EMPTY_ARRAY)\n                       .map(resolveForwardRef)\n                       .map(expandModuleWithProviders),\n          exports: flatten(ngModule.exports || EMPTY_ARRAY)\n                       .map(resolveForwardRef)\n                       .map(expandModuleWithProviders),\n          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,\n          id: ngModule.id || null,\n        });\n        // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime\n        // should verify that there are no unknown elements in a template. In AOT mode, that check\n        // happens at compile time and `schemas` information is not present on Component and Module\n        // defs after compilation (so the check doesn't happen the second time at runtime).\n        if (!ngModuleDef.schemas) {\n          ngModuleDef.schemas = [];\n        }\n      }\n      return ngModuleDef;\n    }\n  });\n\n  let ngFactoryDef: any = null;\n  Object.defineProperty(moduleType, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/ɵfac.js`, {\n          name: moduleType.name,\n          type: moduleType,\n          deps: reflectDependencies(moduleType),\n          target: compiler.FactoryTarget.NgModule,\n          typeArgumentCount: 0,\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n\n  let ngInjectorDef: any = null;\n  Object.defineProperty(moduleType, NG_INJ_DEF, {\n    get: () => {\n      if (ngInjectorDef === null) {\n        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);\n        const meta: R3InjectorMetadataFacade = {\n          name: moduleType.name,\n          type: moduleType,\n          providers: ngModule.providers || EMPTY_ARRAY,\n          imports: [\n            (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),\n            (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef),\n          ],\n        };\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'NgModule', type: moduleType});\n        ngInjectorDef =\n            compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);\n      }\n      return ngInjectorDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nexport function generateStandaloneInDeclarationsError(type: Type<any>, location: string) {\n  const prefix = `Unexpected \"${stringifyForError(type)}\" found in the \"declarations\" array of the`;\n  const suffix = `\"${stringifyForError(type)}\" is marked as standalone and can't be declared ` +\n      'in any NgModule - did you intend to import it instead (by adding it to the \"imports\" array)?';\n  return `${prefix} ${location}, ${suffix}`;\n}\n\nfunction verifySemanticsOfNgModuleDef(\n    moduleType: NgModuleType, allowDuplicateDeclarationsInRoot: boolean,\n    importingModule?: NgModuleType): void {\n  if (verifiedNgModule.get(moduleType)) return;\n\n  // skip verifications of standalone components, directives, and pipes\n  if (isStandalone(moduleType)) return;\n\n  verifiedNgModule.set(moduleType, true);\n  moduleType = resolveForwardRef(moduleType);\n  let ngModuleDef: NgModuleDef<any>;\n  if (importingModule) {\n    ngModuleDef = getNgModuleDef(moduleType)!;\n    if (!ngModuleDef) {\n      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  } else {\n    ngModuleDef = getNgModuleDef(moduleType, true);\n  }\n  const errors: string[] = [];\n  const declarations = maybeUnwrapFn(ngModuleDef.declarations);\n  const imports = maybeUnwrapFn(ngModuleDef.imports);\n  flatten(imports).map(unwrapModuleWithProvidersImports).forEach(modOrStandaloneCmpt => {\n    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);\n    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);\n  });\n  const exports = maybeUnwrapFn(ngModuleDef.exports);\n  declarations.forEach(verifyDeclarationsHaveDefinitions);\n  declarations.forEach(verifyDirectivesHaveSelector);\n  declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));\n  const combinedDeclarations: Type<any>[] = [\n    ...declarations.map(resolveForwardRef),\n    ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),\n  ];\n  exports.forEach(verifyExportsAreDeclaredOrReExported);\n  declarations.forEach(decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));\n  declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);\n\n  const ngModule = getAnnotation<NgModule>(moduleType, 'NgModule');\n  if (ngModule) {\n    ngModule.imports &&\n        flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach(mod => {\n          verifySemanticsOfNgModuleImport(mod, moduleType);\n          verifySemanticsOfNgModuleDef(mod, false, moduleType);\n        });\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);\n    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);\n    ngModule.entryComponents &&\n        deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);\n  }\n\n  // Throw Error if any errors were detected.\n  if (errors.length) {\n    throw new Error(errors.join('\\n'));\n  }\n  ////////////////////////////////////////////////////////////////////////////////////////////////\n  function verifyDeclarationsHaveDefinitions(type: Type<any>): void {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n    if (!def) {\n      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${\n          stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);\n    }\n  }\n\n  function verifyDirectivesHaveSelector(type: Type<any>): void {\n    type = resolveForwardRef(type);\n    const def = getDirectiveDef(type);\n    if (!getComponentDef(type) && def && def.selectors.length == 0) {\n      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);\n    }\n  }\n\n  function verifyNotStandalone(type: Type<any>, moduleType: NgModuleType): void {\n    type = resolveForwardRef(type);\n    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);\n    if (def?.standalone) {\n      const location = `\"${stringifyForError(moduleType)}\" NgModule`;\n      errors.push(generateStandaloneInDeclarationsError(type, location));\n    }\n  }\n\n  function verifyExportsAreDeclaredOrReExported(type: Type<any>) {\n    type = resolveForwardRef(type);\n    const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||\n        getPipeDef(type) && 'pipe';\n    if (kind) {\n      // only checked if we are declared as Component, Directive, or Pipe\n      // Modules don't need to be declared or imported.\n      if (combinedDeclarations.lastIndexOf(type) === -1) {\n        // We are exporting something which we don't explicitly declare or import.\n        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${\n            stringifyForError(moduleType)} as it was neither declared nor imported!`);\n      }\n    }\n  }\n\n  function verifyDeclarationIsUnique(type: Type<any>, suppressErrors: boolean) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (existingModule && existingModule !== moduleType) {\n      if (!suppressErrors) {\n        const modules = [existingModule, moduleType].map(stringifyForError).sort();\n        errors.push(\n            `Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${\n                modules[0]} and ${modules[1]}! ` +\n            `Please consider moving ${stringifyForError(type)} to a higher module that imports ${\n                modules[0]} and ${modules[1]}. ` +\n            `You can also create a new NgModule that exports and includes ${\n                stringifyForError(\n                    type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);\n      }\n    } else {\n      // Mark type as having owner.\n      ownerNgModule.set(type, moduleType);\n    }\n  }\n\n  function verifyComponentIsPartOfNgModule(type: Type<any>) {\n    type = resolveForwardRef(type);\n    const existingModule = ownerNgModule.get(type);\n    if (!existingModule && !isStandalone(type)) {\n      errors.push(`Component ${\n          stringifyForError(\n              type)} is not part of any NgModule or the module has not been imported into your module.`);\n    }\n  }\n\n  function verifyCorrectBootstrapType(type: Type<any>) {\n    type = resolveForwardRef(type);\n    if (!getComponentDef(type)) {\n      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);\n    }\n    if (isStandalone(type)) {\n      // Note: this error should be the same as the\n      // `NGMODULE_BOOTSTRAP_IS_STANDALONE` one in AOT compiler.\n      errors.push(\n          `The \\`${stringifyForError(type)}\\` class is a standalone component, which can ` +\n          `not be used in the \\`@NgModule.bootstrap\\` array. Use the \\`bootstrapApplication\\` ` +\n          `function for bootstrap instead.`);\n    }\n  }\n\n  function verifyComponentEntryComponentsIsPartOfNgModule(type: Type<any>) {\n    type = resolveForwardRef(type);\n    if (getComponentDef(type)) {\n      // We know we are component\n      const component = getAnnotation<Component>(type, 'Component');\n      if (component && component.entryComponents) {\n        deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);\n      }\n    }\n  }\n\n  function verifySemanticsOfNgModuleImport(type: Type<any>, importingModule: Type<any>) {\n    type = resolveForwardRef(type);\n\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null && !directiveDef.standalone) {\n      throw new Error(`Unexpected directive '${type.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n\n    const pipeDef = getPipeDef(type);\n    if (pipeDef !== null && !pipeDef.standalone) {\n      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${\n          importingModule.name}'. Please add an @NgModule annotation.`);\n    }\n  }\n}\n\nfunction unwrapModuleWithProvidersImports(typeOrWithProviders: NgModuleType<any>|\n                                          {ngModule: NgModuleType<any>}): NgModuleType<any> {\n  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);\n  return (typeOrWithProviders as any).ngModule || typeOrWithProviders;\n}\n\nfunction getAnnotation<T>(type: any, name: string): T|null {\n  let annotation: T|null = null;\n  collect(type.__annotations__);\n  collect(type.decorators);\n  return annotation;\n\n  function collect(annotations: any[]|null) {\n    if (annotations) {\n      annotations.forEach(readAnnotation);\n    }\n  }\n\n  function readAnnotation(\n      decorator: {type: {prototype: {ngMetadataName: string}, args: any[]}, args: any}): void {\n    if (!annotation) {\n      const proto = Object.getPrototypeOf(decorator);\n      if (proto.ngMetadataName == name) {\n        annotation = decorator as any;\n      } else if (decorator.type) {\n        const proto = Object.getPrototypeOf(decorator.type);\n        if (proto.ngMetadataName == name) {\n          annotation = decorator.args[0];\n        }\n      }\n    }\n  }\n}\n\n/**\n * Keep track of compiled components. This is needed because in tests we often want to compile the\n * same component with more than one NgModule. This would cause an error unless we reset which\n * NgModule the component belongs to. We keep the list of compiled components here so that the\n * TestBed can reset it later.\n */\nlet ownerNgModule = new WeakMap<Type<any>, NgModuleType<any>>();\nlet verifiedNgModule = new WeakMap<NgModuleType<any>, boolean>();\n\nexport function resetCompiledComponents(): void {\n  ownerNgModule = new WeakMap<Type<any>, NgModuleType<any>>();\n  verifiedNgModule = new WeakMap<NgModuleType<any>, boolean>();\n  moduleQueue.length = 0;\n}\n\n/**\n * Computes the combined declarations of explicit declarations, as well as declarations inherited by\n * traversing the exports of imported modules.\n * @param type\n */\nfunction computeCombinedExports(type: Type<any>): Type<any>[] {\n  type = resolveForwardRef(type);\n  const ngModuleDef = getNgModuleDef(type);\n\n  // a standalone component, directive or pipe\n  if (ngModuleDef === null) {\n    return [type];\n  }\n\n  return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((type) => {\n    const ngModuleDef = getNgModuleDef(type);\n    if (ngModuleDef) {\n      verifySemanticsOfNgModuleDef(type as any as NgModuleType, false);\n      return computeCombinedExports(type);\n    } else {\n      return type;\n    }\n  }))];\n}\n\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ɵcmp set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n */\nfunction setScopeOnDeclaredComponents(moduleType: Type<any>, ngModule: NgModule) {\n  const declarations: Type<any>[] = flatten(ngModule.declarations || EMPTY_ARRAY);\n\n  const transitiveScopes = transitiveScopesFor(moduleType);\n\n  declarations.forEach(declaration => {\n    declaration = resolveForwardRef(declaration);\n    if (declaration.hasOwnProperty(NG_COMP_DEF)) {\n      // A `ɵcmp` field exists - go ahead and patch the component directly.\n      const component = declaration as Type<any>& {ɵcmp: ComponentDef<any>};\n      const componentDef = getComponentDef(component)!;\n      patchComponentDefWithScope(componentDef, transitiveScopes);\n    } else if (\n        !declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n      // Set `ngSelectorScope` for future reference when the component compilation finishes.\n      (declaration as Type<any>& {ngSelectorScope?: any}).ngSelectorScope = moduleType;\n    }\n  });\n}\n\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nexport function patchComponentDefWithScope<C>(\n    componentDef: ComponentDef<C>, transitiveScopes: NgModuleTransitiveScopes) {\n  componentDef.directiveDefs = () =>\n      Array.from(transitiveScopes.compilation.directives)\n          .map(\n              dir => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir)! : getDirectiveDef(dir)!\n              )\n          .filter(def => !!def);\n  componentDef.pipeDefs = () =>\n      Array.from(transitiveScopes.compilation.pipes).map(pipe => getPipeDef(pipe)!);\n  componentDef.schemas = transitiveScopes.schemas;\n\n  // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we\n  // may face a problem where previously compiled defs available to a given Component/Directive\n  // are cached in TView and may become stale (in case any of these defs gets recompiled). In\n  // order to avoid this problem, we force fresh TView to be created.\n  componentDef.tView = null;\n}\n\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nexport function transitiveScopesFor<T>(type: Type<T>): NgModuleTransitiveScopes {\n  if (isNgModule(type)) {\n    return transitiveScopesForNgModule(type);\n  } else if (isStandalone(type)) {\n    const directiveDef = getComponentDef(type) || getDirectiveDef(type);\n    if (directiveDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set<any>(),\n          pipes: new Set<any>(),\n        },\n        exported: {\n          directives: new Set<any>([type]),\n          pipes: new Set<any>(),\n        },\n      };\n    }\n\n    const pipeDef = getPipeDef(type);\n    if (pipeDef !== null) {\n      return {\n        schemas: null,\n        compilation: {\n          directives: new Set<any>(),\n          pipes: new Set<any>(),\n        },\n        exported: {\n          directives: new Set<any>(),\n          pipes: new Set<any>([type]),\n        },\n      };\n    }\n  }\n\n  // TODO: change the error message to be more user-facing and take standalone into account\n  throw new Error(`${type.name} does not have a module def (ɵmod property)`);\n}\n\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. This function can\n * be called on modules with components that have not fully compiled yet, but the result should not\n * be used until they have.\n *\n * @param moduleType module that transitive scope should be calculated for.\n */\nexport function transitiveScopesForNgModule<T>(moduleType: Type<T>): NgModuleTransitiveScopes {\n  const def = getNgModuleDef(moduleType, true);\n\n  if (def.transitiveCompileScopes !== null) {\n    return def.transitiveCompileScopes;\n  }\n\n  const scopes: NgModuleTransitiveScopes = {\n    schemas: def.schemas || null,\n    compilation: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n    exported: {\n      directives: new Set<any>(),\n      pipes: new Set<any>(),\n    },\n  };\n\n  maybeUnwrapFn(def.imports).forEach(<I>(imported: Type<I>) => {\n    // When this module imports another, the imported module's exported directives and pipes are\n    // added to the compilation scope of this module.\n    const importedScope = transitiveScopesFor(imported);\n    importedScope.exported.directives.forEach(entry => scopes.compilation.directives.add(entry));\n    importedScope.exported.pipes.forEach(entry => scopes.compilation.pipes.add(entry));\n  });\n\n  maybeUnwrapFn(def.declarations).forEach(declared => {\n    const declaredWithDefs = declared as Type<any>& {\n      ɵpipe?: any;\n    };\n\n    if (getPipeDef(declaredWithDefs)) {\n      scopes.compilation.pipes.add(declared);\n    } else {\n      // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't\n      // had its template compiled yet. In either case, it gets added to the compilation's\n      // directives.\n      scopes.compilation.directives.add(declared);\n    }\n  });\n\n  maybeUnwrapFn(def.exports).forEach(<E>(exported: Type<E>) => {\n    const exportedType = exported as Type<E>& {\n      // Components, Directives, NgModules, and Pipes can all be exported.\n      ɵcmp?: any;\n      ɵdir?: any;\n      ɵmod?: NgModuleDef<E>;\n      ɵpipe?: any;\n    };\n\n    // Either the type is a module, a pipe, or a component/directive (which may not have a\n    // ɵcmp as it might be compiled asynchronously).\n    if (isNgModule(exportedType)) {\n      // When this module exports another, the exported module's exported directives and pipes are\n      // added to both the compilation and exported scopes of this module.\n      const exportedScope = transitiveScopesFor(exportedType);\n      exportedScope.exported.directives.forEach(entry => {\n        scopes.compilation.directives.add(entry);\n        scopes.exported.directives.add(entry);\n      });\n      exportedScope.exported.pipes.forEach(entry => {\n        scopes.compilation.pipes.add(entry);\n        scopes.exported.pipes.add(entry);\n      });\n    } else if (getPipeDef(exportedType)) {\n      scopes.exported.pipes.add(exportedType);\n    } else {\n      scopes.exported.directives.add(exportedType);\n    }\n  });\n\n  def.transitiveCompileScopes = scopes;\n  return scopes;\n}\n\nfunction expandModuleWithProviders(value: Type<any>|ModuleWithProviders<{}>): Type<any> {\n  if (isModuleWithProviders(value)) {\n    return value.ngModule;\n  }\n  return value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3DirectiveMetadataFacade} from '../../compiler/compiler_facade';\nimport {R3ComponentMetadataFacade, R3QueryMetadataFacade} from '../../compiler/compiler_facade_interface';\nimport {isForwardRef, resolveForwardRef} from '../../di/forward_ref';\nimport {getReflect, reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport {Query} from '../../metadata/di';\nimport {Component, Directive, Input} from '../../metadata/directives';\nimport {componentNeedsResolution, maybeQueueResolutionOfComponentResources} from '../../metadata/resource_loading';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {flatten} from '../../util/array_utils';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../../util/empty';\nimport {initNgDevMode} from '../../util/ng_dev_mode';\nimport {getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef} from '../definition';\nimport {NG_COMP_DEF, NG_DIR_DEF, NG_FACTORY_DEF} from '../fields';\nimport {ComponentDef, ComponentType, DirectiveDefList, PipeDefList} from '../interfaces/definition';\nimport {stringifyForError} from '../util/stringify_utils';\n\nimport {angularCoreEnv} from './environment';\nimport {getJitOptions} from './jit_options';\nimport {flushModuleScopingQueueAsMuchAsPossible, patchComponentDefWithScope, transitiveScopesFor} from './module';\nimport {isModuleWithProviders} from './util';\n\n/**\n * Keep track of the compilation depth to avoid reentrancy issues during JIT compilation. This\n * matters in the following scenario:\n *\n * Consider a component 'A' that extends component 'B', both declared in module 'M'. During\n * the compilation of 'A' the definition of 'B' is requested to capture the inheritance chain,\n * potentially triggering compilation of 'B'. If this nested compilation were to trigger\n * `flushModuleScopingQueueAsMuchAsPossible` it may happen that module 'M' is still pending in the\n * queue, resulting in 'A' and 'B' to be patched with the NgModule scope. As the compilation of\n * 'A' is still in progress, this would introduce a circular dependency on its compilation. To avoid\n * this issue, the module scope queue is only flushed for compilations at the depth 0, to ensure\n * all compilations have finished.\n */\nlet compilationDepth = 0;\n\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nexport function compileComponent(type: Type<any>, metadata: Component): void {\n  // Initialize ngDevMode. This must be the first statement in compileComponent.\n  // See the `initNgDevMode` docstring for more information.\n  (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();\n\n  let ngComponentDef: ComponentDef<unknown>|null = null;\n\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(type, metadata);\n\n  // Note that we're using the same function as `Directive`, because that's only subset of metadata\n  // that we need to create the ngFactoryDef. We're avoiding using the component metadata\n  // because we'd have to resolve the asynchronous templates.\n  addDirectiveFactoryDef(type, metadata);\n\n  Object.defineProperty(type, NG_COMP_DEF, {\n    get: () => {\n      if (ngComponentDef === null) {\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'component', type: type});\n\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${type.name}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${metadata.templateUrl}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n\n        // This const was called `jitOptions` previously but had to be renamed to `options` because\n        // of a bug with Terser that caused optimized JIT builds to throw a `ReferenceError`.\n        // This bug was investigated in https://github.com/angular/angular-cli/issues/17264.\n        // We should not rename it back until https://github.com/terser/terser/issues/615 is fixed.\n        const options = getJitOptions();\n        let preserveWhitespaces = metadata.preserveWhitespaces;\n        if (preserveWhitespaces === undefined) {\n          if (options !== null && options.preserveWhitespaces !== undefined) {\n            preserveWhitespaces = options.preserveWhitespaces;\n          } else {\n            preserveWhitespaces = false;\n          }\n        }\n        let encapsulation = metadata.encapsulation;\n        if (encapsulation === undefined) {\n          if (options !== null && options.defaultEncapsulation !== undefined) {\n            encapsulation = options.defaultEncapsulation;\n          } else {\n            encapsulation = ViewEncapsulation.Emulated;\n          }\n        }\n\n        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;\n        const meta: R3ComponentMetadataFacade = {\n          ...directiveMetadata(type, metadata),\n          typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl),\n          template: metadata.template || '',\n          preserveWhitespaces,\n          styles: metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          // JIT components are always compiled against an empty set of `declarations`. Instead, the\n          // `directiveDefs` and `pipeDefs` are updated at a later point:\n          //  * for NgModule-based components, they're set when the NgModule which declares the\n          //    component resolves in the module scoping queue\n          //  * for standalone components, they're set just below, after `compileComponent`.\n          declarations: [],\n          changeDetection: metadata.changeDetection,\n          encapsulation,\n          interpolation: metadata.interpolation,\n          viewProviders: metadata.viewProviders || null,\n        };\n\n        compilationDepth++;\n        try {\n          if (meta.usesInheritance) {\n            addDirectiveDefToUndecoratedParents(type);\n          }\n          ngComponentDef =\n              compiler.compileComponent(angularCoreEnv, templateUrl, meta) as ComponentDef<unknown>;\n\n          if (metadata.standalone) {\n            // Patch the component definition for standalone components with `directiveDefs` and\n            // `pipeDefs` functions which lazily compute the directives/pipes available in the\n            // standalone component. Also set `dependencies` to the lazily resolved list of imports.\n            const imports: Type<any>[] = flatten(metadata.imports || EMPTY_ARRAY);\n            const {directiveDefs, pipeDefs} = getStandaloneDefFunctions(type, imports);\n            ngComponentDef.directiveDefs = directiveDefs;\n            ngComponentDef.pipeDefs = pipeDefs;\n            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);\n          }\n        } finally {\n          // Ensure that the compilation depth is decremented even when the compilation failed.\n          compilationDepth--;\n        }\n\n        if (compilationDepth === 0) {\n          // When NgModule decorator executed, we enqueued the module definition such that\n          // it would only dequeue and add itself as module scope to all of its declarations,\n          // but only if  if all of its declarations had resolved. This call runs the check\n          // to see if any modules that are in the queue can be dequeued and add scope to\n          // their declarations.\n          flushModuleScopingQueueAsMuchAsPossible();\n        }\n\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(ngComponentDef, scopes);\n        }\n\n        if (metadata.schemas) {\n          if (metadata.standalone) {\n            ngComponentDef.schemas = metadata.schemas;\n          } else {\n            throw new Error(`The 'schemas' was specified for the ${\n                stringifyForError(type)} but is only valid on a component that is standalone.`);\n          }\n        } else if (metadata.standalone) {\n          ngComponentDef.schemas = [];\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction getDependencyTypeForError(type: Type<any>) {\n  if (getComponentDef(type)) return 'component';\n  if (getDirectiveDef(type)) return 'directive';\n  if (getPipeDef(type)) return 'pipe';\n  return 'type';\n}\n\nfunction verifyStandaloneImport(depType: Type<unknown>, importingType: Type<unknown>) {\n  if (isForwardRef(depType)) {\n    depType = resolveForwardRef(depType);\n    if (!depType) {\n      throw new Error(`Expected forwardRef function, imported from \"${\n          stringifyForError(importingType)}\", to return a standalone entity or NgModule but got \"${\n          stringifyForError(depType) || depType}\".`);\n    }\n  }\n\n  if (getNgModuleDef(depType) == null) {\n    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef(depType);\n    if (def != null) {\n      // if a component, directive or pipe is imported make sure that it is standalone\n      if (!def.standalone) {\n        throw new Error(`The \"${stringifyForError(depType)}\" ${\n            getDependencyTypeForError(depType)}, imported from \"${\n            stringifyForError(\n                importingType)}\", is not standalone. Did you forget to add the standalone: true flag?`);\n      }\n    } else {\n      // it can be either a module with provider or an unknown (not annotated) type\n      if (isModuleWithProviders(depType)) {\n        throw new Error(`A module with providers was imported from \"${\n            stringifyForError(\n                importingType)}\". Modules with providers are not supported in standalone components imports.`);\n      } else {\n        throw new Error(`The \"${stringifyForError(depType)}\" type, imported from \"${\n            stringifyForError(\n                importingType)}\", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);\n      }\n    }\n  }\n}\n\n/**\n * Build memoized `directiveDefs` and `pipeDefs` functions for the component definition of a\n * standalone component, which process `imports` and filter out directives and pipes. The use of\n * memoized functions here allows for the delayed resolution of any `forwardRef`s present in the\n * component's `imports`.\n */\nfunction getStandaloneDefFunctions(type: Type<any>, imports: Type<any>[]): {\n  directiveDefs: () => DirectiveDefList,\n  pipeDefs: () => PipeDefList,\n} {\n  let cachedDirectiveDefs: DirectiveDefList|null = null;\n  let cachedPipeDefs: PipeDefList|null = null;\n  const directiveDefs = () => {\n    if (cachedDirectiveDefs === null) {\n      // Standalone components are always able to self-reference, so include the component's own\n      // definition in its `directiveDefs`.\n      cachedDirectiveDefs = [getComponentDef(type)!];\n      const seen = new Set<Type<unknown>>();\n\n      for (const rawDep of imports) {\n        ngDevMode && verifyStandaloneImport(rawDep, type);\n\n        const dep = resolveForwardRef(rawDep);\n        if (seen.has(dep)) {\n          continue;\n        }\n        seen.add(dep);\n\n        if (!!getNgModuleDef(dep)) {\n          const scope = transitiveScopesFor(dep);\n          for (const dir of scope.exported.directives) {\n            const def = getComponentDef(dir) || getDirectiveDef(dir);\n            if (def && !seen.has(dir)) {\n              seen.add(dir);\n              cachedDirectiveDefs.push(def);\n            }\n          }\n        } else {\n          const def = getComponentDef(dep) || getDirectiveDef(dep);\n          if (def) {\n            cachedDirectiveDefs.push(def);\n          }\n        }\n      }\n    }\n    return cachedDirectiveDefs;\n  };\n\n  const pipeDefs = () => {\n    if (cachedPipeDefs === null) {\n      cachedPipeDefs = [];\n      const seen = new Set<Type<unknown>>();\n\n      for (const rawDep of imports) {\n        const dep = resolveForwardRef(rawDep);\n        if (seen.has(dep)) {\n          continue;\n        }\n        seen.add(dep);\n\n        if (!!getNgModuleDef(dep)) {\n          const scope = transitiveScopesFor(dep);\n          for (const pipe of scope.exported.pipes) {\n            const def = getPipeDef(pipe);\n            if (def && !seen.has(pipe)) {\n              seen.add(pipe);\n              cachedPipeDefs.push(def);\n            }\n          }\n        } else {\n          const def = getPipeDef(dep);\n          if (def) {\n            cachedPipeDefs.push(def);\n          }\n        }\n      }\n    }\n    return cachedPipeDefs;\n  };\n\n  return {\n    directiveDefs,\n    pipeDefs,\n  };\n}\n\nfunction hasSelectorScope<T>(component: Type<T>): component is Type<T>&\n    {ngSelectorScope: Type<any>} {\n  return (component as {ngSelectorScope?: any}).ngSelectorScope !== undefined;\n}\n\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport function compileDirective(type: Type<any>, directive: Directive|null): void {\n  let ngDirectiveDef: any = null;\n\n  addDirectiveFactoryDef(type, directive || {});\n\n  Object.defineProperty(type, NG_DIR_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        // `directive` can be null in the case of abstract directives as a base class\n        // that use `@Directive()` with no selector. In that case, pass empty object to the\n        // `directiveMetadata` function instead of null.\n        const meta = getDirectiveMetadata(type, directive || {});\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n        ngDirectiveDef =\n            compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction getDirectiveMetadata(type: Type<any>, metadata: Directive) {\n  const name = type && type.name;\n  const sourceMapUrl = `ng:///${name}/ɵdir.js`;\n  const compiler = getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n  const facade = directiveMetadata(type as ComponentType<any>, metadata);\n  facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);\n  if (facade.usesInheritance) {\n    addDirectiveDefToUndecoratedParents(type);\n  }\n  return {metadata: facade, sourceMapUrl};\n}\n\nfunction addDirectiveFactoryDef(type: Type<any>, metadata: Directive|Component) {\n  let ngFactoryDef: any = null;\n\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const meta = getDirectiveMetadata(type, metadata);\n        const compiler =\n            getCompilerFacade({usage: JitCompilerUsage.Decorator, kind: 'directive', type});\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, {\n          name: meta.metadata.name,\n          type: meta.metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Directive\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nexport function extendsDirectlyFromObject(type: Type<any>): boolean {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nexport function directiveMetadata(type: Type<any>, metadata: Directive): R3DirectiveMetadataFacade {\n  // Reflect inputs and outputs.\n  const reflect = getReflect();\n  const propMetadata = reflect.ownPropMetadata(type);\n\n  return {\n    name: type.name,\n    type: type,\n    selector: metadata.selector !== undefined ? metadata.selector : null,\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),\n    lifecycle: {usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges')},\n    typeSourceSpan: null!,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: extractExportAs(metadata.exportAs),\n    providers: metadata.providers || null,\n    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),\n    isStandalone: !!metadata.standalone,\n    hostDirectives: metadata.hostDirectives?.map(\n                        directive => typeof directive === 'function' ? {directive} : directive) ||\n        null\n  };\n}\n\n/**\n * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.\n */\nfunction addDirectiveDefToUndecoratedParents(type: Type<any>) {\n  const objPrototype = Object.prototype;\n  let parent = Object.getPrototypeOf(type.prototype).constructor;\n\n  // Go up the prototype until we hit `Object`.\n  while (parent && parent !== objPrototype) {\n    // Since inheritance works if the class was annotated already, we only need to add\n    // the def if there are no annotations and the def hasn't been created already.\n    if (!getDirectiveDef(parent) && !getComponentDef(parent) &&\n        shouldAddAbstractDirective(parent)) {\n      compileDirective(parent, null);\n    }\n    parent = Object.getPrototypeOf(parent);\n  }\n}\n\nfunction convertToR3QueryPredicate(selector: any): any|string[] {\n  return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);\n}\n\nexport function convertToR3QueryMetadata(propertyName: string, ann: Query): R3QueryMetadataFacade {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null,\n    static: !!ann.static,\n    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly,\n  };\n}\nfunction extractQueriesMetadata(\n    type: Type<any>, propMetadata: {[key: string]: any[]},\n    isQueryAnn: (ann: any) => ann is Query): R3QueryMetadataFacade[] {\n  const queriesMeta: R3QueryMetadataFacade[] = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      const annotations = propMetadata[field];\n      annotations.forEach(ann => {\n        if (isQueryAnn(ann)) {\n          if (!ann.selector) {\n            throw new Error(\n                `Can't construct a query for the property \"${field}\" of ` +\n                `\"${stringifyForError(type)}\" since the query selector wasn't defined.`);\n          }\n          if (annotations.some(isInputAnnotation)) {\n            throw new Error(`Cannot combine @Input decorators with query decorators`);\n          }\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\n\nfunction extractExportAs(exportAs: string|undefined): string[]|null {\n  return exportAs === undefined ? null : splitByComma(exportAs);\n}\n\nfunction isContentQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\n\nfunction isViewQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\n\nfunction isInputAnnotation(value: any): value is Input {\n  return value.ngMetadataName === 'Input';\n}\n\nfunction splitByComma(value: string): string[] {\n  return value.split(',').map(piece => piece.trim());\n}\n\nconst LIFECYCLE_HOOKS = [\n  'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',\n  'ngAfterContentInit', 'ngAfterContentChecked'\n];\n\nfunction shouldAddAbstractDirective(type: Type<any>): boolean {\n  const reflect = getReflect();\n\n  if (LIFECYCLE_HOOKS.some(hookName => reflect.hasLifecycleHook(type, hookName))) {\n    return true;\n  }\n\n  const propMetadata = reflect.propMetadata(type);\n\n  for (const field in propMetadata) {\n    const annotations = propMetadata[field];\n\n    for (let i = 0; i < annotations.length; i++) {\n      const current = annotations[i];\n      const metadataName = current.ngMetadataName;\n\n      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||\n          metadataName === 'Output' || metadataName === 'HostBinding' ||\n          metadataName === 'HostListener') {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getCompilerFacade, JitCompilerUsage, R3PipeMetadataFacade} from '../../compiler/compiler_facade';\nimport {reflectDependencies} from '../../di/jit/util';\nimport {Type} from '../../interface/type';\nimport {Pipe} from '../../metadata/directives';\nimport {NG_FACTORY_DEF, NG_PIPE_DEF} from '../fields';\n\nimport {angularCoreEnv} from './environment';\n\nexport function compilePipe(type: Type<any>, meta: Pipe): void {\n  let ngPipeDef: any = null;\n  let ngFactoryDef: any = null;\n\n  Object.defineProperty(type, NG_FACTORY_DEF, {\n    get: () => {\n      if (ngFactoryDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'pipe', type: metadata.type});\n        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, {\n          name: metadata.name,\n          type: metadata.type,\n          typeArgumentCount: 0,\n          deps: reflectDependencies(type),\n          target: compiler.FactoryTarget.Pipe\n        });\n      }\n      return ngFactoryDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n\n  Object.defineProperty(type, NG_PIPE_DEF, {\n    get: () => {\n      if (ngPipeDef === null) {\n        const metadata = getPipeMetadata(type, meta);\n        const compiler = getCompilerFacade(\n            {usage: JitCompilerUsage.Decorator, kind: 'pipe', type: metadata.type});\n        ngPipeDef =\n            compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);\n      }\n      return ngPipeDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction getPipeMetadata(type: Type<any>, meta: Pipe): R3PipeMetadataFacade {\n  return {\n    type: type,\n    name: type.name,\n    pipeName: meta.name,\n    pure: meta.pure !== undefined ? meta.pure : true,\n    isStandalone: !!meta.standalone,\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Provider} from '../di/interface/provider';\nimport {Type} from '../interface/type';\nimport {compileComponent, compileDirective} from '../render3/jit/directive';\nimport {compilePipe} from '../render3/jit/pipe';\nimport {makeDecorator, makePropDecorator, TypeDecorator} from '../util/decorators';\n\nimport {SchemaMetadata} from './schema';\nimport {ViewEncapsulation} from './view';\n\n\n\n/**\n * Type of the Directive decorator / constructor function.\n * @publicApi\n */\nexport interface DirectiveDecorator {\n  /**\n   * Decorator that marks a class as an Angular directive.\n   * You can define your own directives to attach custom behavior to elements in the DOM.\n   *\n   * The options provide configuration metadata that determines\n   * how the directive should be processed, instantiated and used at\n   * runtime.\n   *\n   * Directive classes, like component classes, can implement\n   * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n   *\n   *\n   * @usageNotes\n   * To define a directive, mark the class with the decorator and provide metadata.\n   *\n   * ```ts\n   * import {Directive} from '@angular/core';\n   *\n   * @Directive({\n   *   selector: 'my-directive',\n   * })\n   * export class MyDirective {\n   * ...\n   * }\n   * ```\n   *\n   * ### Declaring directives\n   *\n   * In order to make a directive available to other components in your application, you should do\n   * one of the following:\n   *  - either mark the directive as [standalone](guide/standalone-components),\n   *  - or declare it in an NgModule by adding it to the `declarations` and `exports` fields.\n   *\n   * ** Marking a directive as standalone **\n   *\n   * You can add the `standalone: true` flag to the Directive decorator metadata to declare it as\n   * [standalone](guide/standalone-components):\n   *\n   * ```ts\n   * @Directive({\n   *   standalone: true,\n   *   selector: 'my-directive',\n   * })\n   * class MyDirective {}\n   * ```\n   *\n   * When marking a directive as standalone, please make sure that the directive is not already\n   * declared in an NgModule.\n   *\n   *\n   * ** Declaring a directive in an NgModule **\n   *\n   * Another approach is to declare a directive in an NgModule:\n   *\n   * ```ts\n   * @Directive({\n   *   selector: 'my-directive',\n   * })\n   * class MyDirective {}\n   *\n   * @NgModule({\n   *   declarations: [MyDirective, SomeComponent],\n   *   exports: [MyDirective], // making it available outside of this module\n   * })\n   * class SomeNgModule {}\n   * ```\n   *\n   * When declaring a directive in an NgModule, please make sure that:\n   *  - the directive is declared in exactly one NgModule.\n   *  - the directive is not standalone.\n   *  - you do not re-declare a directive imported from another module.\n   *  - the directive is included into the `exports` field as well if you want this directive to be\n   *    accessible for components outside of the NgModule.\n   *\n   *\n   * @Annotation\n   */\n  (obj?: Directive): TypeDecorator;\n\n  /**\n   * See the `Directive` decorator.\n   */\n  new(obj?: Directive): Directive;\n}\n\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport interface Directive {\n  /**\n   * The CSS selector that identifies this directive in a template\n   * and triggers instantiation of the directive.\n   *\n   * Declare as one of the following:\n   *\n   * - `element-name`: Select by element name.\n   * - `.class`: Select by class name.\n   * - `[attribute]`: Select by attribute name.\n   * - `[attribute=value]`: Select by attribute name and value.\n   * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n   * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n   *\n   * Angular only allows directives to apply on CSS selectors that do not cross\n   * element boundaries.\n   *\n   * For the following template HTML, a directive with an `input[type=text]` selector,\n   * would be instantiated only on the `<input type=\"text\">` element.\n   *\n   * ```html\n   * <form>\n   *   <input type=\"text\">\n   *   <input type=\"radio\">\n   * <form>\n   * ```\n   *\n   */\n  selector?: string;\n\n  /**\n   * Enumerates the set of data-bound input properties for a directive\n   *\n   * Angular automatically updates input properties during change detection.\n   * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property where the value is written.\n   * - `bindingProperty` specifies the DOM property where the value is read from.\n   *\n   * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n   *\n   * @usageNotes\n   *\n   * The following example creates a component with two data-bound properties.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   inputs: ['bankName', 'id: account-id'],\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   bankName: string;\n   *   id: string;\n   * }\n   * ```\n   *\n   */\n  inputs?: string[];\n\n  /**\n   * Enumerates the set of event-bound output properties.\n   *\n   * When an output property emits an event, an event handler attached to that event\n   * in the template is invoked.\n   *\n   * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property that emits events.\n   * - `bindingProperty` specifies the DOM property the event handler is attached to.\n   *\n   * @usageNotes\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'child-dir',\n   *   outputs: [ 'bankNameChange' ],\n   *   template: `<input (input)=\"bankNameChange.emit($event.target.value)\" />`\n   * })\n   * class ChildDir {\n   *  bankNameChange: EventEmitter<string> = new EventEmitter<string>();\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `\n   *     {{ bankName }} <child-dir (bankNameChange)=\"onBankNameChange($event)\"></child-dir>\n   *   `\n   * })\n   * class MainComponent {\n   *  bankName: string;\n   *\n   *   onBankNameChange(bankName: string) {\n   *     this.bankName = bankName;\n   *   }\n   * }\n   * ```\n   *\n   */\n  outputs?: string[];\n\n  /**\n   * Configures the [injector](guide/glossary#injector) of this\n   * directive or component with a [token](guide/glossary#di-token)\n   * that maps to a [provider](guide/glossary#provider) of a dependency.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * @usageNotes\n   *\n   * ```ts\n   * @Directive({\n   *   selector: 'child-dir',\n   *   exportAs: 'child'\n   * })\n   * class ChildDir {\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `<child-dir #c=\"child\"></child-dir>`\n   * })\n   * class MainComponent {\n   * }\n   * ```\n   *\n   */\n  exportAs?: string;\n\n  /**\n   * Configures the queries that will be injected into the directive.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * @usageNotes\n   *\n   * The following example shows how queries are defined\n   * and when their results are available in lifecycle hooks:\n   *\n   * ```ts\n   * @Component({\n   *   selector: 'someDir',\n   *   queries: {\n   *     contentChildren: new ContentChildren(ChildDirective),\n   *     viewChildren: new ViewChildren(ChildDirective)\n   *   },\n   *   template: '<child-directive></child-directive>'\n   * })\n   * class SomeDir {\n   *   contentChildren: QueryList<ChildDirective>,\n   *   viewChildren: QueryList<ChildDirective>\n   *\n   *   ngAfterContentInit() {\n   *     // contentChildren is set\n   *   }\n   *\n   *   ngAfterViewInit() {\n   *     // viewChildren is set\n   *   }\n   * }\n   * ```\n   *\n   * @Annotation\n   */\n  queries?: {[key: string]: any};\n\n  /**\n   * Maps class properties to host element bindings for properties,\n   * attributes, and events, using a set of key-value pairs.\n   *\n   * Angular automatically checks host property bindings during change detection.\n   * If a binding changes, Angular updates the directive's host element.\n   *\n   * When the key is a property of the host element, the property value is\n   * the propagated to the specified DOM property.\n   *\n   * When the key is a static attribute in the DOM, the attribute value\n   * is propagated to the specified property in the host element.\n   *\n   * For event handling:\n   * - The key is the DOM event that the directive listens to.\n   * To listen to global events, add the target to the event name.\n   * The target can be `window`, `document` or `body`.\n   * - The value is the statement to execute when the event occurs. If the\n   * statement evaluates to `false`, then `preventDefault` is applied on the DOM\n   * event. A handler method can refer to the `$event` local variable.\n   *\n   */\n  host?: {[key: string]: string};\n\n  /**\n   * When present, this directive/component is ignored by the AOT compiler.\n   * It remains in distributed code, and the JIT compiler attempts to compile it\n   * at run time, in the browser.\n   * To ensure the correct behavior, the app must import `@angular/compiler`.\n   */\n  jit?: true;\n\n  /**\n   * Angular directives marked as `standalone` do not need to be declared in an NgModule. Such\n   * directives don't depend on any \"intermediate context\" of an NgModule (ex. configured\n   * providers).\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */\n  standalone?: boolean;\n\n  /**\n   * Standalone directives that should be applied to the host whenever the directive is matched.\n   * By default, none of the inputs or outputs of the host directives will be available on the host,\n   * unless they are specified in the `inputs` or `outputs` properties.\n   *\n   * You can additionally alias inputs and outputs by putting a colon and the alias after the\n   * original input or output name. For example, if a directive applied via `hostDirectives`\n   * defines an input named `menuDisabled`, you can alias this to `disabled` by adding\n   * `'menuDisabled: disabled'` as an entry to `inputs`.\n   */\n  hostDirectives?: (Type<unknown>|{\n    directive: Type<unknown>,\n    inputs?: string[],\n    outputs?: string[],\n  })[];\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nexport const Directive: DirectiveDecorator = makeDecorator(\n    'Directive', (dir: Directive = {}) => dir, undefined, undefined,\n    (type: Type<any>, meta: Directive) => compileDirective(type, meta));\n\n/**\n * Component decorator interface\n *\n * @publicApi\n */\nexport interface ComponentDecorator {\n  /**\n   * Decorator that marks a class as an Angular component and provides configuration\n   * metadata that determines how the component should be processed,\n   * instantiated, and used at runtime.\n   *\n   * Components are the most basic UI building block of an Angular app.\n   * An Angular app contains a tree of Angular components.\n   *\n   * Angular components are a subset of directives, always associated with a template.\n   * Unlike other directives, only one component can be instantiated for a given element in a\n   * template.\n   *\n   * A component must belong to an NgModule in order for it to be available\n   * to another component or application. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `NgModule` metadata.\n   *\n   * Note that, in addition to these options for configuring a directive,\n   * you can control a component's runtime behavior by implementing\n   * life-cycle hooks. For more information, see the\n   * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n   *\n   * @usageNotes\n   *\n   * ### Setting component inputs\n   *\n   * The following example creates a component with two data-bound properties,\n   * specified by the `inputs` value.\n   *\n   * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\"></code-example>\n   *\n   *\n   * ### Setting component outputs\n   *\n   * The following example shows two event emitters that emit on an interval. One\n   * emits an output every second, while the other emits every five seconds.\n   *\n   * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n   *\n   * ### Injecting a class with a view provider\n   *\n   * The following simple example injects a class into a component\n   * using the view provider specified in component metadata:\n   *\n   * ```ts\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @Directive({\n   *   selector: 'needs-greeter'\n   * })\n   * class NeedsGreeter {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   viewProviders: [\n   *     Greeter\n   *   ],\n   *   template: `<needs-greeter></needs-greeter>`\n   * })\n   * class HelloWorld {\n   * }\n   *\n   * ```\n   *\n   * ### Preserving whitespace\n   *\n   * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n   * As of Angular 6, the default for `preserveWhitespaces` is false (whitespace is removed).\n   * To change the default setting for all components in your application, set\n   * the `preserveWhitespaces` option of the AOT compiler.\n   *\n   * By default, the AOT compiler removes whitespace characters as follows:\n   * * Trims all whitespaces at the beginning and the end of a template.\n   * * Removes whitespace-only text nodes. For example,\n   *\n   * ```html\n   * <button>Action 1</button>  <button>Action 2</button>\n   * ```\n   *\n   * becomes:\n   *\n   * ```html\n   * <button>Action 1</button><button>Action 2</button>\n   * ```\n   *\n   * * Replaces a series of whitespace characters in text nodes with a single space.\n   * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n   * * Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n   * where whitespace characters are significant.\n   *\n   * Note that these transformations can influence DOM nodes layout, although impact\n   * should be minimal.\n   *\n   * You can override the default behavior to preserve whitespace characters\n   * in certain fragments of a template. For example, you can exclude an entire\n   * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n   *\n   * ```html\n   * <div ngPreserveWhitespaces>\n   *     whitespaces are preserved here\n   *     <span>    and here </span>\n   * </div>\n   * ```\n   *\n   * You can force a single space to be preserved in a text node by using `&ngsp;`,\n   * which is replaced with a space character by Angular's template\n   * compiler:\n   *\n   * ```html\n   * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n   * <!-- compiled to be equivalent to:\n   *  <a>Spaces</a> <a>between</a> <a>links.</a>  -->\n   * ```\n   *\n   * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n   * the `preserveWhitespaces` option is set to `false`.\n   *\n   * ```html\n   * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n   * <!-- compiled to be equivalent to:\n   *  <a>before</a> <a>after</a> -->\n   * ```\n   *\n   * To preserve sequences of whitespace characters, use the\n   * `ngPreserveWhitespaces` attribute.\n   *\n   * @Annotation\n   */\n  (obj: Component): TypeDecorator;\n  /**\n   * See the `Component` decorator.\n   */\n  new(obj: Component): Component;\n}\n\n/**\n * Supplies configuration metadata for an Angular component.\n *\n * @publicApi\n */\nexport interface Component extends Directive {\n  /**\n   * The change-detection strategy to use for this component.\n   *\n   * When a component is instantiated, Angular creates a change detector,\n   * which is responsible for propagating the component's bindings.\n   * The strategy is one of:\n   * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n   * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   * See [example](#injecting-a-class-with-a-view-provider).\n   *\n   */\n  viewProviders?: Provider[];\n\n  /**\n   * The module ID of the module that contains the component.\n   * The component must be able to resolve relative URLs for templates and styles.\n   * SystemJS exposes the `__moduleName` variable within each module.\n   * In CommonJS, this can  be set to `module.id`.\n   *\n   */\n  moduleId?: string;\n\n  /**\n   * The relative path or absolute URL of a template file for an Angular component.\n   * If provided, do not supply an inline template using `template`.\n   *\n   */\n  templateUrl?: string;\n\n  /**\n   * An inline template for an Angular component. If provided,\n   * do not supply a template file using `templateUrl`.\n   *\n   */\n  template?: string;\n\n  /**\n   * One or more relative paths or absolute URLs for files containing CSS stylesheets to use\n   * in this component.\n   */\n  styleUrls?: string[];\n\n  /**\n   * One or more inline CSS stylesheets to use\n   * in this component.\n   */\n  styles?: string[];\n\n  /**\n   * One or more animation `trigger()` calls, containing\n   * [`state()`](api/animations/state) and `transition()` definitions.\n   * See the [Animations guide](/guide/animations) and animations API documentation.\n   *\n   */\n  animations?: any[];\n\n  /**\n   * An encapsulation policy for the component's styling.\n   * Possible values:\n   * - `ViewEncapsulation.Emulated`: Apply modified component styles in order to emulate\n   *                                 a native Shadow DOM CSS encapsulation behavior.\n   * - `ViewEncapsulation.None`: Apply component styles globally without any sort of encapsulation.\n   * - `ViewEncapsulation.ShadowDom`: Use the browser's native Shadow DOM API to encapsulate styles.\n   *\n   * If not supplied, the value is taken from the `CompilerOptions`\n   * which defaults to `ViewEncapsulation.Emulated`.\n   *\n   * If the policy is `ViewEncapsulation.Emulated` and the component has no\n   * {@link Component#styles styles} nor {@link Component#styleUrls styleUrls},\n   * the policy is automatically switched to `ViewEncapsulation.None`.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Overrides the default interpolation start and end delimiters (`{{` and `}}`).\n   */\n  interpolation?: [string, string];\n\n  /**\n   * A set of components that should be compiled along with\n   * this component. For each component listed here,\n   * Angular creates a {@link ComponentFactory} and stores it in the\n   * {@link ComponentFactoryResolver}.\n   * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * True to preserve or false to remove potentially superfluous whitespace characters\n   * from the compiled template. Whitespace characters are those matching the `\\s`\n   * character class in JavaScript regular expressions. Default is false, unless\n   * overridden in compiler options.\n   */\n  preserveWhitespaces?: boolean;\n\n  /**\n   * Angular components marked as `standalone` do not need to be declared in an NgModule. Such\n   * components directly manage their own template dependencies (components, directives, and pipes\n   * used in a template) via the imports property.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */\n  standalone?: boolean;\n\n  /**\n   * The imports property specifies the standalone component's template dependencies — those\n   * directives, components, and pipes that can be used within its template. Standalone components\n   * can import other standalone components, directives, and pipes as well as existing NgModules.\n   *\n   * This property is only available for standalone components - specifying it for components\n   * declared in an NgModule generates a compilation error.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */\n  imports?: (Type<any>|ReadonlyArray<any>)[];\n\n  /**\n   * The set of schemas that declare elements to be allowed in a standalone component. Elements and\n   * properties that are neither Angular components nor directives must be declared in a schema.\n   *\n   * This property is only available for standalone components - specifying it for components\n   * declared in an NgModule generates a compilation error.\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */\n  schemas?: SchemaMetadata[];\n}\n\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Component: ComponentDecorator = makeDecorator(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}),\n    Directive, undefined, (type: Type<any>, meta: Component) => compileComponent(type, meta));\n\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * @publicApi\n */\nexport interface PipeDecorator {\n  /**\n   *\n   * Decorator that marks a class as pipe and supplies configuration metadata.\n   *\n   * A pipe class must implement the `PipeTransform` interface.\n   * For example, if the name is \"myPipe\", use a template binding expression\n   * such as the following:\n   *\n   * ```\n   * {{ exp | myPipe }}\n   * ```\n   *\n   * The result of the expression is passed to the pipe's `transform()` method.\n   *\n   * A pipe must belong to an NgModule in order for it to be available\n   * to a template. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `NgModule` metadata.\n   *\n   * @see [Style Guide: Pipe Names](guide/styleguide#02-09)\n   *\n   */\n  (obj: Pipe): TypeDecorator;\n\n  /**\n   * See the `Pipe` decorator.\n   */\n  new(obj: Pipe): Pipe;\n}\n\n/**\n * Type of the Pipe metadata.\n *\n * @publicApi\n */\nexport interface Pipe {\n  /**\n   * The pipe name to use in template bindings.\n   * Typically uses [lowerCamelCase](guide/glossary#case-types)\n   * because the name cannot contain hyphens.\n   */\n  name: string;\n\n  /**\n   * When true, the pipe is pure, meaning that the\n   * `transform()` method is invoked only when its input arguments\n   * change. Pipes are pure by default.\n   *\n   * If the pipe has internal state (that is, the result\n   * depends on state other than its arguments), set `pure` to false.\n   * In this case, the pipe is invoked on each change-detection cycle,\n   * even if the arguments have not changed.\n   */\n  pure?: boolean;\n\n  /**\n   * Angular pipes marked as `standalone` do not need to be declared in an NgModule. Such\n   * pipes don't depend on any \"intermediate context\" of an NgModule (ex. configured providers).\n   *\n   * More information about standalone components, directives, and pipes can be found in [this\n   * guide](guide/standalone-components).\n   */\n  standalone?: boolean;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Pipe: PipeDecorator = makeDecorator(\n    'Pipe', (p: Pipe) => ({pure: true, ...p}), undefined, undefined,\n    (type: Type<any>, meta: Pipe) => compilePipe(type, meta));\n\n\n/**\n * @publicApi\n */\nexport interface InputDecorator {\n  /**\n   * Decorator that marks a class field as an input property and supplies configuration metadata.\n   * The input property is bound to a DOM property in the template. During change detection,\n   * Angular automatically updates the data property with the DOM property's value.\n   *\n   * @usageNotes\n   *\n   * You can supply an optional name to use in templates when the\n   * component is instantiated, that maps to the\n   * name of the bound property. By default, the original\n   * name of the bound property is used for input binding.\n   *\n   * The following example creates a component with two input properties,\n   * one of which is given a special binding name.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   // This property is bound using its original name.\n   *   @Input() bankName: string;\n   *   // this property value is bound to a different property name\n   *   // when this component is instantiated in a template.\n   *   @Input('account-id') id: string;\n   *\n   *   // this property is not bound, and is not automatically updated by Angular\n   *   normalizedBankName: string;\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `\n   *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n   *   `\n   * })\n   * class App {}\n   * ```\n   *\n   * @see [Input and Output properties](guide/inputs-outputs)\n   */\n  (bindingPropertyName?: string): any;\n  new(bindingPropertyName?: string): any;\n}\n\n/**\n * Type of metadata for an `Input` property.\n *\n * @publicApi\n */\nexport interface Input {\n  /**\n   * The name of the DOM property to which the input property is bound.\n   */\n  bindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Input: InputDecorator =\n    makePropDecorator('Input', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\n/**\n * Type of the Output decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OutputDecorator {\n  /**\n   * Decorator that marks a class field as an output property and supplies configuration metadata.\n   * The DOM property bound to the output property is automatically updated during change detection.\n   *\n   * @usageNotes\n   *\n   * You can supply an optional name to use in templates when the\n   * component is instantiated, that maps to the\n   * name of the bound property. By default, the original\n   * name of the bound property is used for output binding.\n   *\n   * See `Input` decorator for an example of providing a binding name.\n   *\n   * @see [Input and Output properties](guide/inputs-outputs)\n   *\n   */\n  (bindingPropertyName?: string): any;\n  new(bindingPropertyName?: string): any;\n}\n\n/**\n * Type of the Output metadata.\n *\n * @publicApi\n */\nexport interface Output {\n  /**\n   * The name of the DOM property to which the output property is bound.\n   */\n  bindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Output: OutputDecorator =\n    makePropDecorator('Output', (bindingPropertyName?: string) => ({bindingPropertyName}));\n\n\n\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostBindingDecorator {\n  /**\n   * Decorator that marks a DOM property as a host-binding property and supplies configuration\n   * metadata.\n   * Angular automatically checks host property bindings during change detection, and\n   * if a binding changes it updates the host element of the directive.\n   *\n   * @usageNotes\n   *\n   * The following example creates a directive that sets the `valid` and `invalid`\n   * properties on the DOM element that has an `ngModel` directive on it.\n   *\n   * ```typescript\n   * @Directive({selector: '[ngModel]'})\n   * class NgModelStatus {\n   *   constructor(public control: NgModel) {}\n   *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n   *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `<input [(ngModel)]=\"prop\">`,\n   * })\n   * class App {\n   *   prop;\n   * }\n   * ```\n   *\n   */\n  (hostPropertyName?: string): any;\n  new(hostPropertyName?: string): any;\n}\n\n/**\n * Type of the HostBinding metadata.\n *\n * @publicApi\n */\nexport interface HostBinding {\n  /**\n   * The DOM property that is bound to a data property.\n   */\n  hostPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const HostBinding: HostBindingDecorator =\n    makePropDecorator('HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\n\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostListenerDecorator {\n  /**\n   * Decorator that declares a DOM event to listen for,\n   * and provides a handler method to run when that event occurs.\n   *\n   * Angular invokes the supplied handler method when the host element emits the specified event,\n   * and updates the bound element with the result.\n   *\n   * If the handler method returns false, applies `preventDefault` on the bound element.\n   */\n  (eventName: string, args?: string[]): any;\n  new(eventName: string, args?: string[]): any;\n}\n\n/**\n * Type of the HostListener metadata.\n *\n * @publicApi\n */\nexport interface HostListener {\n  /**\n   * The DOM event to listen for.\n   */\n  eventName?: string;\n  /**\n   * A set of arguments to pass to the handler method when the event occurs.\n   */\n  args?: string[];\n}\n\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * ```\n *\n * The following example registers another DOM event handler that listens for `Enter` key-press\n * events on the global `window`.\n * ``` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: `<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key\n * to increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown.enter', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * ```\n * The list of valid key names for `keydown` and `keyup` events\n * can be found here:\n * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values\n *\n * Note that keys can also be combined, e.g. `@HostListener('keydown.shift.a')`.\n *\n * The global target names that can be used to prefix an event name are\n * `document:`, `window:` and `body:`.\n *\n * @Annotation\n * @publicApi\n */\nexport const HostListener: HostListenerDecorator =\n    makePropDecorator('HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, ModuleWithProviders, Provider} from '../di/interface/provider';\nimport {Type} from '../interface/type';\nimport {SchemaMetadata} from '../metadata/schema';\nimport {compileNgModule} from '../render3/jit/module';\nimport {makeDecorator, TypeDecorator} from '../util/decorators';\n\n\n/**\n * Type of the NgModule decorator / constructor function.\n *\n * @publicApi\n */\nexport interface NgModuleDecorator {\n  /**\n   * Decorator that marks a class as an NgModule and supplies configuration metadata.\n   */\n  (obj?: NgModule): TypeDecorator;\n  new(obj?: NgModule): NgModule;\n}\n\n/**\n * Type of the NgModule metadata.\n *\n * @publicApi\n */\nexport interface NgModule {\n  /**\n   * The set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection)\n   * @see [NgModule guide](guide/providers)\n   *\n   * @usageNotes\n   *\n   * Dependencies whose providers are listed here become available for injection\n   * into any component, directive, pipe or service that is a child of this injector.\n   * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n   * to any part of the app.\n   *\n   * A lazy-loaded module has its own injector, typically a child of the app root injector.\n   * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n   * If a lazy-loaded module also provides the `UserService`, any component created\n   * within that module's context (such as by router navigation) gets the local instance\n   * of the service, not the instance in the root injector.\n   * Components in external modules continue to receive the instance provided by their injectors.\n   *\n   * ### Example\n   *\n   * The following example defines a class that is injected in\n   * the HelloWorld NgModule:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  providers?: Array<Provider|EnvironmentProviders>;\n\n  /**\n   * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n   * that belong to this module.\n   *\n   * @usageNotes\n   *\n   * The set of selectors that are available to a template include those declared here, and\n   * those that are exported from imported NgModules.\n   *\n   * Declarables must belong to exactly one module.\n   * The compiler emits an error if you try to declare the same class in more than one module.\n   * Be careful not to declare a class that is imported from another module.\n   *\n   * ### Example\n   *\n   * The following example allows the CommonModule to use the `NgFor`\n   * directive.\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n   * are available to templates in this module.\n   *\n   * @usageNotes\n   *\n   * A template can use exported declarables from any\n   * imported module, including those from modules that are imported indirectly\n   * and re-exported.\n   * For example, `ModuleA` imports `ModuleB`, and also exports\n   * it, which makes the declarables from `ModuleB` available\n   * wherever `ModuleA` is imported.\n   *\n   * ### Example\n   *\n   * The following example allows MainModule to use anything exported by\n   * `CommonModule`:\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   *\n   */\n  imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>;\n\n  /**\n   * The set of components, directives, and pipes declared in this\n   * NgModule that can be used in the template of any component that is part of an\n   * NgModule that imports this NgModule. Exported declarations are the module's public API.\n   *\n   * A declarable belongs to one and only one NgModule.\n   * A module can list another module among its exports, in which case all of that module's\n   * public declaration are exported.\n   *\n   * @usageNotes\n   *\n   * Declarations are private by default.\n   * If this ModuleA does not export UserComponent, then only the components within this\n   * ModuleA can use UserComponent.\n   *\n   * ModuleA can import ModuleB and also export it, making exports from ModuleB\n   * available to an NgModule that imports ModuleA.\n   *\n   * ### Example\n   *\n   * The following example exports the `NgFor` directive from CommonModule.\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components to compile when this NgModule is defined,\n   * so that they can be dynamically loaded into the view.\n   *\n   * For each component listed here, Angular creates a `ComponentFactory`\n   * and stores it in the `ComponentFactoryResolver`.\n   *\n   * Angular automatically adds components in the module's bootstrap\n   * and route definitions into the `entryComponents` list. Use this\n   * option to add components that are bootstrapped\n   * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n   *\n   * @see [Entry Components](guide/entry-components)\n   * @deprecated\n   * Since 9.0.0. With Ivy, this property is no longer necessary.\n   * (You may need to keep these if building a library that will be consumed by a View Engine\n   * application.)\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components that are bootstrapped when\n   * this module is bootstrapped. The components listed here\n   * are automatically added to `entryComponents`.\n   */\n  bootstrap?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the NgModule.\n   * Elements and properties that are neither Angular components nor directives\n   * must be declared in a schema.\n   *\n   * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n   *\n   * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n   * you must ensure that allowed elements and properties securely escape inputs.\n   */\n  schemas?: Array<SchemaMetadata|any[]>;\n\n  /**\n   * A name or path that uniquely identifies this NgModule in `getNgModuleById`.\n   * If left `undefined`, the NgModule is not registered with `getNgModuleById`.\n   */\n  id?: string;\n\n  /**\n   * When present, this module is ignored by the AOT compiler.\n   * It remains in distributed code, and the JIT compiler attempts to compile it\n   * at run time, in the browser.\n   * To ensure the correct behavior, the app must import `@angular/compiler`.\n   */\n  jit?: true;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const NgModule: NgModuleDecorator = makeDecorator(\n    'NgModule', (ngModule: NgModule) => ngModule, undefined, undefined,\n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    (type: Type<any>, meta: NgModule) => compileNgModule(type, meta));\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This indirection is needed to free up Component, etc symbols in the public API\n * to be used by the decorator versions of these annotations.\n */\n\n\nexport {Attribute, AttributeDecorator} from './di/metadata_attr';\nexport {AfterContentChecked, AfterContentInit, AfterViewChecked, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit} from './interface/lifecycle_hooks';\nexport {ANALYZE_FOR_ENTRY_COMPONENTS, ContentChild, ContentChildDecorator, ContentChildren, ContentChildrenDecorator, Query, ViewChild, ViewChildDecorator, ViewChildren, ViewChildrenDecorator} from './metadata/di';\nexport {Component, ComponentDecorator, Directive, DirectiveDecorator, HostBinding, HostBindingDecorator, HostListener, HostListenerDecorator, Input, InputDecorator, Output, OutputDecorator, Pipe, PipeDecorator} from './metadata/directives';\nexport {DoBootstrap} from './metadata/do_boostrap';\nexport {NgModule, NgModuleDecorator} from './metadata/ng_module';\nexport {CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SchemaMetadata} from './metadata/schema';\nexport {ViewEncapsulation} from './metadata/view';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function noop(...args: any[]): any {\n  // Do nothing.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/*\n * This file exists to support compilation of @angular/core in Ivy mode.\n *\n * When the Angular compiler processes a compilation unit, it normally writes imports to\n * @angular/core. When compiling the core package itself this strategy isn't usable. Instead, the\n * compiler writes imports to this file.\n *\n * Only a subset of such imports are supported - core is not allowed to declare components or pipes.\n * A check in ngtsc's `R3SymbolsImportRewriter` validates this condition. The rewriter is only used\n * when compiling @angular/core and is responsible for translating an external name (prefixed with\n * ɵ) to the internal symbol name as exported below.\n *\n * The below symbols are used for @Injectable and @NgModule compilation.\n */\n\nexport {ɵɵinject} from './di/injector_compatibility';\nexport {ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵInjectableDeclaration} from './di/interface/defs';\nexport {NgModuleDef} from './metadata/ng_module_def';\nexport {ɵɵdefineNgModule} from './render3/definition';\nexport {ɵɵFactoryDeclaration, ɵɵInjectorDeclaration, ɵɵNgModuleDeclaration} from './render3/interfaces/public_definitions';\nexport {setClassMetadata} from './render3/metadata';\nexport {NgModuleFactory} from './render3/ng_module_ref';\nexport {noSideEffects as ɵnoSideEffects} from './util/closure';\n\n\n\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\nexport const ITS_JUST_ANGULAR = true;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\nimport {isObservable, isPromise} from './util/lang';\nimport {noop} from './util/noop';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the `APP_INITIALIZER` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see `ApplicationInitStatus`\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using `APP_INITIALIZER` token\n * and a function returning a promise.\n *\n * ```\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * ```\n *\n * It's also possible to configure a multi-provider using `APP_INITIALIZER` token and a function\n * returning an observable, see an example below. Note: the `HttpClient` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * ```\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * ```\n *\n * @publicApi\n */\nexport const APP_INITIALIZER =\n    new InjectionToken<ReadonlyArray<() => Observable<unknown>| Promise<unknown>| void>>(\n        'Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ApplicationInitStatus {\n  private resolve = noop;\n  private reject = noop;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private readonly appInits:\n                  ReadonlyArray<() => Observable<unknown>| Promise<unknown>| void>) {\n    // TODO: Throw RuntimeErrorCode.INVALID_MULTI_PROVIDER if appInits is not an array\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as {done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        } else if (isObservable(initResult)) {\n          const observableAsPromise = new Promise<void>((resolve, reject) => {\n            initResult.subscribe({complete: resolve, error: reject});\n          });\n          asyncInitPromises.push(observableAsPromise);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises)\n        .then(() => {\n          complete();\n        })\n        .catch(e => {\n          this.reject(e);\n        });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\n\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a unique string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * BY default, the value is randomly generated and assigned to the application by Angular.\n * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure\n * the root {@link Injector} that uses this token.\n *\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>('AppId', {\n  providedIn: 'root',\n  factory: _appIdRandomProviderFactory,\n});\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that generate a random `APP_ID_TOKEN`.\n * @publicApi\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID', {\n  providedIn: 'platform',\n  factory: () => 'unknown',  // set a default platform name, when none set explicitly\n});\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n\n// We keep this token here, rather than the animations package, so that modules that only care\n// about which animations module is loaded (e.g. the CDK) can retrieve it without having to\n// include extra dependencies. See #44970 for more context.\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nexport const ANIMATION_MODULE_TYPE =\n    new InjectionToken<'NoopAnimations'|'BrowserAnimations'>('AnimationModuleType');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable({providedIn: 'platform'})\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {inject} from '../di/injector_compatibility';\nimport {InjectFlags} from '../di/interface/injector';\n\nimport {DEFAULT_LOCALE_ID, USD_CURRENCY_CODE} from './localization';\n\ndeclare const $localize: {locale?: string};\n\n/**\n * Work out the locale from the potential global properties.\n *\n * * Closure Compiler: use `goog.LOCALE`.\n * * Ivy enabled: use `$localize.locale`\n */\nexport function getGlobalLocale(): string {\n  if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&\n      typeof goog !== 'undefined' && goog.LOCALE !== 'en') {\n    // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.\n    // * In order to preserve backwards compatibility, we use Angular default value over\n    //   Closure Compiler's one.\n    return goog.LOCALE;\n  } else {\n    // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE\n    // COMPILE-TIME INLINER.\n    //\n    // * During compile time inlining of translations the expression will be replaced\n    //   with a string literal that is the current locale. Other forms of this expression are not\n    //   guaranteed to be replaced.\n    //\n    // * During runtime translation evaluation, the developer is required to set `$localize.locale`\n    //   if required, or just to provide their own `LOCALE_ID` provider.\n    return (typeof $localize !== 'undefined' && $localize.locale) || DEFAULT_LOCALE_ID;\n  }\n}\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID: InjectionToken<string> = new InjectionToken('LocaleId', {\n  providedIn: 'root',\n  factory: () =>\n      inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale(),\n});\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always `USD` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in\n * your application `NgModule`:\n *\n * ```ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * ```\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const DEFAULT_CURRENCY_CODE = new InjectionToken<string>('DefaultCurrencyCode', {\n  providedIn: 'root',\n  factory: () => USD_CURRENCY_CODE,\n});\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>('Translations');\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>('TranslationsFormat');\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/interface/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {Type} from '../interface/type';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {ComponentFactory as ComponentFactoryR3} from '../render3/component_ref';\nimport {getComponentDef, getNgModuleDef} from '../render3/definition';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {maybeUnwrapFn} from '../render3/util/misc_utils';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\n@Injectable({providedIn: 'root'})\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> {\n    return new NgModuleFactoryR3(moduleType);\n  }\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n    return Promise.resolve(this.compileModuleSync(moduleType));\n  }\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    const ngModuleFactory = this.compileModuleSync(moduleType);\n    const moduleDef = getNgModuleDef(moduleType)!;\n    const componentFactories =\n        maybeUnwrapFn(moduleDef.declarations)\n            .reduce((factories: ComponentFactory<any>[], declaration: Type<any>) => {\n              const componentDef = getComponentDef(declaration);\n              componentDef && factories.push(new ComponentFactoryR3(componentDef));\n              return factories;\n            }, [] as ComponentFactory<any>[]);\n    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n  }\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined {\n    return undefined;\n  }\n}\n\n/**\n * Options for creating a compiler.\n *\n * Note: the `useJit` and `missingTranslation` config options are not used in Ivy, passing them has\n * no effect. Those config options are deprecated since v13.\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  /**\n   * @deprecated not used at all in Ivy, providing this config option has no effect.\n   */\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  /**\n   * @deprecated not used at all in Ivy, providing this config option has no effect.\n   */\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined} from '../../util/assert';\nimport {getComponentViewByInstance} from '../context_discovery';\nimport {detectChanges} from '../instructions/change_detection';\nimport {markViewDirty} from '../instructions/shared';\n\nimport {getRootComponents} from './discovery_utils';\n\n/**\n * Marks a component for check (in case of OnPush components) and synchronously\n * performs change detection on the application this component belongs to.\n *\n * @param component Component to {@link ChangeDetectorRef#markForCheck mark for check}.\n *\n * @publicApi\n * @globalApi ng\n */\nexport function applyChanges(component: {}): void {\n  ngDevMode && assertDefined(component, 'component');\n  markViewDirty(getComponentViewByInstance(component));\n  getRootComponents(component).forEach(rootComponent => detectChanges(rootComponent));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {assertDefined} from '../../util/assert';\nimport {global} from '../../util/global';\nimport {setProfiler} from '../profiler';\nimport {applyChanges} from './change_detection_utils';\nimport {getComponent, getContext, getDirectiveMetadata, getDirectives, getHostElement, getInjector, getListeners, getOwningComponent, getRootComponents} from './discovery_utils';\n\n\n\n/**\n * This file introduces series of globally accessible debug tools\n * to allow for the Angular debugging story to function.\n *\n * To see this in action run the following command:\n *\n *   bazel run //packages/core/test/bundling/todo:devserver\n *\n *  Then load `localhost:5432` and start using the console tools.\n */\n\n/**\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n * */\nexport const GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n\nlet _published = false;\n/**\n * Publishes a collection of default debug tools onto`window.ng`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nexport function publishDefaultGlobalUtils() {\n  if (!_published) {\n    _published = true;\n\n    /**\n     * Warning: this function is *INTERNAL* and should not be relied upon in application's code.\n     * The contract of the function might be changed in any release and/or the function can be\n     * removed completely.\n     */\n    publishGlobalUtil('ɵsetProfiler', setProfiler);\n    publishGlobalUtil('getDirectiveMetadata', getDirectiveMetadata);\n    publishGlobalUtil('getComponent', getComponent);\n    publishGlobalUtil('getContext', getContext);\n    publishGlobalUtil('getListeners', getListeners);\n    publishGlobalUtil('getOwningComponent', getOwningComponent);\n    publishGlobalUtil('getHostElement', getHostElement);\n    publishGlobalUtil('getInjector', getInjector);\n    publishGlobalUtil('getRootComponents', getRootComponents);\n    publishGlobalUtil('getDirectives', getDirectives);\n    publishGlobalUtil('applyChanges', applyChanges);\n  }\n}\n\nexport declare type GlobalDevModeContainer = {\n  [GLOBAL_PUBLISH_EXPANDO_KEY]: {[fnName: string]: Function};\n};\n\n/**\n * Publishes the given function to `window.ng` so that it can be\n * used from the browser console when an application is not in production.\n */\nexport function publishGlobalUtil(name: string, fn: Function): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for AngularJS (via `goog.provide('ng....')`).\n    const w = global as any as GlobalDevModeContainer;\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n      let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n      if (!container) {\n        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n      }\n      container[name] = fn;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst promise: Promise<any> = (() => Promise.resolve(0))();\n\ndeclare const Zone: any;\n\nexport function scheduleMicroTask(fn: Function) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => {\n      fn && fn.apply(null, null);\n    });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {global} from './global';\n\nexport function getNativeRequestAnimationFrame() {\n  let nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number =\n      global['requestAnimationFrame'];\n  let nativeCancelAnimationFrame: (handle: number) => void = global['cancelAnimationFrame'];\n  if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame! && nativeCancelAnimationFrame!) {\n    // use unpatched version of requestAnimationFrame(native delegate) if possible\n    // to avoid another Change detection\n    const unpatchedRequestAnimationFrame =\n        (nativeRequestAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedRequestAnimationFrame) {\n      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;\n    }\n    const unpatchedCancelAnimationFrame =\n        (nativeCancelAnimationFrame as any)[(Zone as any).__symbol__('OriginalDelegate')];\n    if (unpatchedCancelAnimationFrame) {\n      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;\n    }\n  }\n  return {nativeRequestAnimationFrame, nativeCancelAnimationFrame};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface ConsoleWithAsyncTagging {\n  createTask(name: string): ConsoleTask;\n}\n\ninterface ConsoleTask {\n  run<T>(f: () => T): T;\n}\n\ninterface ZoneConsoleTask extends Task {\n  consoleTask?: ConsoleTask;\n}\n\nexport class AsyncStackTaggingZoneSpec implements ZoneSpec {\n  createTask: ConsoleWithAsyncTagging['createTask'];\n\n  constructor(\n      namePrefix: string, consoleAsyncStackTaggingImpl: ConsoleWithAsyncTagging = console as any) {\n    this.name = 'asyncStackTagging for ' + namePrefix;\n    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);\n  }\n\n  // ZoneSpec implementation below.\n  name: string;\n\n  onScheduleTask(delegate: ZoneDelegate, _current: Zone, target: Zone, task: ZoneConsoleTask):\n      Task {\n    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);\n    return delegate.scheduleTask(target, task);\n  }\n\n  onInvokeTask(\n      delegate: ZoneDelegate, _currentZone: Zone, targetZone: Zone, task: ZoneConsoleTask,\n      applyThis: any, applyArgs?: any[]) {\n    let ret;\n    if (task.consoleTask) {\n      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));\n    } else {\n      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);\n    }\n    return ret;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../errors';\nimport {EventEmitter} from '../event_emitter';\nimport {global} from '../util/global';\nimport {noop} from '../util/noop';\nimport {getNativeRequestAnimationFrame} from '../util/raf';\n\nimport {AsyncStackTaggingZoneSpec} from './async-stack-tagging';\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly hasPendingMicrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n\n  constructor({\n    enableLongStackTrace = false,\n    shouldCoalesceEventChangeDetection = false,\n    shouldCoalesceRunChangeDetection = false\n  }) {\n    if (typeof Zone == 'undefined') {\n      throw new RuntimeError(\n          RuntimeErrorCode.MISSING_ZONEJS,\n          ngDevMode && `In this configuration Angular requires Zone.js`);\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    // AsyncStackTaggingZoneSpec provides `linked stack traces` to show\n    // where the async operation is scheduled. For more details, refer\n    // to this article, https://developer.chrome.com/blog/devtools-better-angular-debugging/\n    // And we only import this AsyncStackTaggingZoneSpec in development mode,\n    // in the production mode, the AsyncStackTaggingZoneSpec will be tree shaken away.\n    if (ngDevMode) {\n      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec('Angular'));\n    }\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any));\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n    // if shouldCoalesceRunChangeDetection is true, all tasks including event tasks will be\n    // coalesced, so shouldCoalesceEventChangeDetection option is not necessary and can be skipped.\n    self.shouldCoalesceEventChangeDetection =\n        !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;\n    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;\n    self.lastRequestAnimationFrameId = -1;\n    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  static isInAngularZone(): boolean {\n    // Zone needs to be checked, because this method might be called even when NoopNgZone is used.\n    return typeof Zone !== 'undefined' && Zone.current.get('isAngularZone') === true;\n  }\n\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new RuntimeError(\n          RuntimeErrorCode.UNEXPECTED_ZONE_STATE,\n          ngDevMode && 'Expected to be in Angular Zone, but it is not!');\n    }\n  }\n\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new RuntimeError(\n          RuntimeErrorCode.UNEXPECTED_ZONE_STATE,\n          ngDevMode && 'Expected to not be in Angular Zone, but it is!');\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs);\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs);\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn);\n  }\n}\n\nconst EMPTY_PAYLOAD = {};\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n  _hasPendingMicrotasks: boolean;\n\n  hasPendingMacrotasks: boolean;\n  hasPendingMicrotasks: boolean;\n  lastRequestAnimationFrameId: number;\n  /**\n   * A flag to indicate if NgZone is currently inside\n   * checkStable and to prevent re-entry. The flag is\n   * needed because it is possible to invoke the change\n   * detection from within change detection leading to\n   * incorrect behavior.\n   *\n   * For detail, please refer here,\n   * https://github.com/angular/angular/pull/40540\n   */\n  isCheckStableRunning: boolean;\n  isStable: boolean;\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling it in an animation frame. So in the case above,\n   * the change detection will only be trigged once.\n   */\n  shouldCoalesceEventChangeDetection: boolean;\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   *\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loops trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  shouldCoalesceRunChangeDetection: boolean;\n\n  nativeRequestAnimationFrame: (callback: FrameRequestCallback) => number;\n\n  // Cache a  \"fake\" top eventTask so you don't need to schedule a new task every\n  // time you run a `checkStable`.\n  fakeTopEventTask: Task;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  // TODO: @JiaLiPassion, should check zone.isCheckStableRunning to prevent\n  // re-entry. The case is:\n  //\n  // @Component({...})\n  // export class AppComponent {\n  // constructor(private ngZone: NgZone) {\n  //   this.ngZone.onStable.subscribe(() => {\n  //     this.ngZone.run(() => console.log('stable'););\n  //   });\n  // }\n  //\n  // The onStable subscriber run another function inside ngZone\n  // which causes `checkStable()` re-entry.\n  // But this fix causes some issues in g3, so this fix will be\n  // launched in another PR.\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction delayChangeDetectionForEvents(zone: NgZonePrivate) {\n  /**\n   * We also need to check _nesting here\n   * Consider the following case with shouldCoalesceRunChangeDetection = true\n   *\n   * ngZone.run(() => {});\n   * ngZone.run(() => {});\n   *\n   * We want the two `ngZone.run()` only trigger one change detection\n   * when shouldCoalesceRunChangeDetection is true.\n   * And because in this case, change detection run in async way(requestAnimationFrame),\n   * so we also need to check the _nesting here to prevent multiple\n   * change detections.\n   */\n  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {\n    return;\n  }\n  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(global, () => {\n    // This is a work around for https://github.com/angular/angular/issues/36839.\n    // The core issue is that when event coalescing is enabled it is possible for microtasks\n    // to get flushed too early (As is the case with `Promise.then`) between the\n    // coalescing eventTasks.\n    //\n    // To workaround this we schedule a \"fake\" eventTask before we process the\n    // coalescing eventTasks. The benefit of this is that the \"fake\" container eventTask\n    //  will prevent the microtasks queue from getting drained in between the coalescing\n    // eventTask execution.\n    if (!zone.fakeTopEventTask) {\n      zone.fakeTopEventTask = Zone.root.scheduleEventTask('fakeTopEventTask', () => {\n        zone.lastRequestAnimationFrameId = -1;\n        updateMicroTaskStatus(zone);\n        zone.isCheckStableRunning = true;\n        checkStable(zone);\n        zone.isCheckStableRunning = false;\n      }, undefined, () => {}, () => {});\n    }\n    zone.fakeTopEventTask.invoke();\n  });\n  updateMicroTaskStatus(zone);\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  const delayChangeDetectionForEventsDelegate = () => {\n    delayChangeDetectionForEvents(zone);\n  };\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{'isAngularZone': true},\n    onInvokeTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n         applyArgs: any): any => {\n          try {\n            onEnter(zone);\n            return delegate.invokeTask(target, task, applyThis, applyArgs);\n          } finally {\n            if ((zone.shouldCoalesceEventChangeDetection && task.type === 'eventTask') ||\n                zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onInvoke:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function, applyThis: any,\n         applyArgs?: any[], source?: string): any => {\n          try {\n            onEnter(zone);\n            return delegate.invoke(target, callback, applyThis, applyArgs, source);\n          } finally {\n            if (zone.shouldCoalesceRunChangeDetection) {\n              delayChangeDetectionForEventsDelegate();\n            }\n            onLeave(zone);\n          }\n        },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone._hasPendingMicrotasks = hasTaskState.microTask;\n              updateMicroTaskStatus(zone);\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n\nfunction updateMicroTaskStatus(zone: NgZonePrivate) {\n  if (zone._hasPendingMicrotasks ||\n      ((zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) &&\n       zone.lastRequestAnimationFrameId !== -1)) {\n    zone.hasPendingMicrotasks = true;\n  } else {\n    zone.hasPendingMicrotasks = false;\n  }\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runGuarded<T>(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return fn();\n  }\n\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any, name?: string): T {\n    return fn.apply(applyThis, applyArgs);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '../di';\nimport {scheduleMicroTask} from '../util/microtask';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data?: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the `Testability` class. This is\n * needed to ensure that there are no direct references to the `Testability` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the `Testability` class\n * should be available, this token is used to add a provider that references the `Testability`\n * class. Otherwise, only this token is retained in a bundle, but the `Testability` class is not.\n */\nexport const TESTABILITY = new InjectionToken<Testability>('');\n\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nexport const TESTABILITY_GETTER = new InjectionToken<GetTestability>('');\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via `@NgModule.bootstrap` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the `bootstrapApplication` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the `provideProtractorTestingSupport()` function and adding them into the\n * `options.providers` array. Example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]}|null = null;\n\n  constructor(\n      private _ngZone: NgZone, private registry: TestabilityRegistry,\n      @Inject(TESTABILITY_GETTER) testabilityGetter: GetTestability) {\n    // If there was no Testability logic registered in the global scope\n    // before, register the current testability getter as a global one.\n    if (!_testabilityGetter) {\n      setTestabilityGetter(testabilityGetter);\n      testabilityGetter.addToWindow(registry);\n    }\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n          typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop()!;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/plugins/task-tracking\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number {\n    return this._pendingCount;\n  }\n  /**\n   * Registers an application with a testability hook so that it can be tracked.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  registerApplication(token: any) {\n    this.registry.registerApplication(token, this);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   *\n   * @internal\n   */\n  unregisterApplication(token: any) {\n    this.registry.unregisterApplication(token);\n  }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable({providedIn: 'platform'})\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) {\n    this._applications.delete(token);\n  }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() {\n    this._applications.clear();\n  }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null {\n    return this._applications.get(elem) || null;\n  }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] {\n    return Array.from(this._applications.values());\n  }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] {\n    return Array.from(this._applications.keys());\n  }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability|undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport './util/ng_jit_mode';\n\nimport {merge, Observable, Observer, Subscription} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {PLATFORM_INITIALIZER} from './application_tokens';\nimport {getCompilerFacade, JitCompilerUsage} from './compiler/compiler_facade';\nimport {Console} from './console';\nimport {Injectable} from './di/injectable';\nimport {InjectionToken} from './di/injection_token';\nimport {Injector} from './di/injector';\nimport {EnvironmentProviders, Provider, StaticProvider} from './di/interface/provider';\nimport {EnvironmentInjector} from './di/r3_injector';\nimport {INJECTOR_SCOPE} from './di/scope';\nimport {ErrorHandler} from './error_handler';\nimport {formatRuntimeError, RuntimeError, RuntimeErrorCode} from './errors';\nimport {DEFAULT_LOCALE_ID} from './i18n/localization';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {Type} from './interface/type';\nimport {COMPILER_OPTIONS, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {isComponentResourceResolutionQueueEmpty, resolveComponentResources} from './metadata/resource_loading';\nimport {assertNgModuleType} from './render3/assert';\nimport {ComponentFactory as R3ComponentFactory} from './render3/component_ref';\nimport {isStandalone} from './render3/definition';\nimport {assertStandaloneComponentType} from './render3/errors';\nimport {setLocaleId} from './render3/i18n/i18n_locale_id';\nimport {setJitOptions} from './render3/jit/jit_options';\nimport {createEnvironmentInjector, NgModuleFactory as R3NgModuleFactory} from './render3/ng_module_ref';\nimport {publishDefaultGlobalUtils as _publishDefaultGlobalUtils} from './render3/util/global_utils';\nimport {TESTABILITY} from './testability/testability';\nimport {isPromise} from './util/lang';\nimport {scheduleMicroTask} from './util/microtask';\nimport {stringify} from './util/stringify';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || ngDevMode;\n\nlet _platformInjector: Injector|null = null;\n\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n/**\n * Internal token that allows to register extra callbacks that should be invoked during the\n * `PlatformRef.destroy` operation. This token is needed to avoid a direct reference to the\n * `PlatformRef` class (i.e. register the callback via `PlatformRef.onDestroy`), thus making the\n * entire class tree-shakeable.\n */\nconst PLATFORM_DESTROY_LISTENERS =\n    new InjectionToken<Set<VoidFunction>>('PlatformDestroyListeners');\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a `ComponentRef` instance and return nothing.\n *\n * `(componentRef: ComponentRef) => void`\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\nexport function compileNgModuleFactory<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n\n  const moduleFactory = new R3NgModuleFactory(moduleType);\n\n  // All of the logic below is irrelevant for AOT-compiled code.\n  if (typeof ngJitMode !== 'undefined' && !ngJitMode) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);\n\n  // Configure the compiler to use the provided options. This call may fail when multiple modules\n  // are bootstrapped with incompatible options, as a component can only be compiled according to\n  // a single set of options.\n  setJitOptions({\n    defaultEncapsulation: _lastDefined(compilerOptions.map(opts => opts.defaultEncapsulation)),\n    preserveWhitespaces: _lastDefined(compilerOptions.map(opts => opts.preserveWhitespaces)),\n  });\n\n  if (isComponentResourceResolutionQueueEmpty()) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compilerProviders = _mergeArrays(compilerOptions.map(o => o.providers!));\n\n  // In case there are no compiler providers, we just return the module factory as\n  // there won't be any resource loader. This can happen with Ivy, because AOT compiled\n  // modules can be still passed through \"bootstrapModule\". In that case we shouldn't\n  // unnecessarily require the JIT compiler.\n  if (compilerProviders.length === 0) {\n    return Promise.resolve(moduleFactory);\n  }\n\n  const compiler = getCompilerFacade({\n    usage: JitCompilerUsage.Decorator,\n    kind: 'NgModule',\n    type: moduleType,\n  });\n  const compilerInjector = Injector.create({providers: compilerProviders});\n  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);\n  // The resource loader can also return a string while the \"resolveComponentResources\"\n  // always expects a promise. Therefore we need to wrap the returned value in a promise.\n  return resolveComponentResources(url => Promise.resolve(resourceLoader.get(url)))\n      .then(() => moduleFactory);\n}\n\nexport function publishDefaultGlobalUtils() {\n  ngDevMode && _publishDefaultGlobalUtils();\n}\n\nexport function isBoundToModule<C>(cf: ComponentFactory<C>): boolean {\n  return (cf as R3ComponentFactory<C>).isBoundToModule;\n}\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.MULTIPLE_PLATFORMS,\n        ngDevMode &&\n            'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  publishDefaultGlobalUtils();\n  _platformInjector = injector;\n  const platform = injector.get(PlatformRef);\n  runPlatformInitializers(injector);\n  return platform;\n}\n\n/**\n * The goal of this function is to bootstrap a platform injector,\n * but avoid referencing `PlatformRef` class.\n * This function is needed for bootstrapping a Standalone Component.\n */\nexport function createOrReusePlatformInjector(providers: StaticProvider[] = []): Injector {\n  // If a platform injector already exists, it means that the platform\n  // is already bootstrapped and no additional actions are required.\n  if (_platformInjector) return _platformInjector;\n\n  // Otherwise, setup a new platform injector and run platform initializers.\n  const injector = createPlatformInjector(providers);\n  _platformInjector = injector;\n  publishDefaultGlobalUtils();\n  runPlatformInitializers(injector);\n  return injector;\n}\n\nexport function runPlatformInitializers(injector: Injector): void {\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) {\n    inits.forEach((init: any) => init());\n  }\n}\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as `platform-browser`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n */\nexport function internalCreateApplication(config: {\n  rootComponent?: Type<unknown>,\n  appProviders?: Array<Provider|EnvironmentProviders>,\n  platformProviders?: Provider[],\n}): Promise<ApplicationRef> {\n  const {rootComponent, appProviders, platformProviders} = config;\n\n  if (NG_DEV_MODE && rootComponent !== undefined) {\n    assertStandaloneComponentType(rootComponent);\n  }\n\n  const platformInjector = createOrReusePlatformInjector(platformProviders as StaticProvider[]);\n\n  const ngZone = getNgZone('zone.js', getNgZoneOptions());\n\n  return ngZone.run(() => {\n    // Create root application injector based on a set of providers configured at the platform\n    // bootstrap level as well as providers passed to the bootstrap call by a user.\n    const allAppProviders = [\n      {provide: NgZone, useValue: ngZone},  //\n      ...(appProviders || []),              //\n    ];\n\n    const envInjector = createEnvironmentInjector(\n        allAppProviders, platformInjector as EnvironmentInjector, 'Environment Injector');\n\n    const exceptionHandler: ErrorHandler|null = envInjector.get(ErrorHandler, null);\n    if (NG_DEV_MODE && !exceptionHandler) {\n      throw new RuntimeError(\n          RuntimeErrorCode.ERROR_HANDLER_NOT_FOUND,\n          'No `ErrorHandler` found in the Dependency Injection tree.');\n    }\n\n    let onErrorSubscription: Subscription;\n    ngZone.runOutsideAngular(() => {\n      onErrorSubscription = ngZone.onError.subscribe({\n        next: (error: any) => {\n          exceptionHandler!.handleError(error);\n        }\n      });\n    });\n\n    // If the whole platform is destroyed, invoke the `destroy` method\n    // for all bootstrapped applications as well.\n    const destroyListener = () => envInjector.destroy();\n    const onPlatformDestroyListeners = platformInjector.get(PLATFORM_DESTROY_LISTENERS);\n    onPlatformDestroyListeners.add(destroyListener);\n\n    envInjector.onDestroy(() => {\n      onErrorSubscription.unsubscribe();\n      onPlatformDestroyListeners.delete(destroyListener);\n    });\n\n    return _callAndReportToErrorHandler(exceptionHandler!, ngZone, () => {\n      const initStatus = envInjector.get(ApplicationInitStatus);\n      initStatus.runInitializers();\n\n      return initStatus.donePromise.then(() => {\n        const localeId = envInjector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n        setLocaleId(localeId || DEFAULT_LOCALE_ID);\n\n        const appRef = envInjector.get(ApplicationRef);\n        if (rootComponent !== undefined) {\n          appRef.bootstrap(rootComponent);\n        }\n        return appRef;\n      });\n    });\n  });\n}\n\n/**\n * Creates a factory for a platform. Can be used to provide or override `Providers` specific to\n * your application's runtime needs, such as `PLATFORM_INITIALIZER` and `PLATFORM_ID`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef)|null, name: string,\n    providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) => PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      const platformProviders: StaticProvider[] = [\n        ...providers,       //\n        ...extraProviders,  //\n        {provide: marker, useValue: true}\n      ];\n      if (parentPlatformFactory) {\n        parentPlatformFactory(platformProviders);\n      } else {\n        createPlatform(createPlatformInjector(platformProviders, desc));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new RuntimeError(RuntimeErrorCode.PLATFORM_NOT_FOUND, ngDevMode && 'No platform exists!');\n  }\n\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n      !platform.injector.get(requiredToken, null)) {\n    throw new RuntimeError(\n        RuntimeErrorCode.MULTIPLE_PLATFORMS,\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Helper function to create an instance of a platform injector (that maintains the 'platform'\n * scope).\n */\nexport function createPlatformInjector(providers: StaticProvider[] = [], name?: string): Injector {\n  return Injector.create({\n    name,\n    providers: [\n      {provide: INJECTOR_SCOPE, useValue: 'platform'},\n      {provide: PLATFORM_DESTROY_LISTENERS, useValue: new Set([() => _platformInjector = null])},\n      ...providers\n    ],\n  });\n}\n\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  getPlatform()?.destroy();\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platformInjector?.get(PlatformRef) ?? null;\n}\n\n/**\n * Provides additional options to the bootstrapping process.\n *\n * @publicApi\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n\n  /**\n   * Optionally specify coalescing event change detections or not.\n   * Consider the following case.\n   *\n   * ```\n   * <div (click)=\"doSomething()\">\n   *   <button (click)=\"doSomethingElse()\"></button>\n   * </div>\n   * ```\n   *\n   * When button is clicked, because of the event bubbling, both\n   * event handlers will be called and 2 change detections will be\n   * triggered. We can coalesce such kind of events to only trigger\n   * change detection only once.\n   *\n   * By default, this option will be false. So the events will not be\n   * coalesced and the change detection will be triggered multiple times.\n   * And if this option be set to true, the change detection will be\n   * triggered async by scheduling a animation frame. So in the case above,\n   * the change detection will only be triggered once.\n   */\n  ngZoneEventCoalescing?: boolean;\n\n  /**\n   * Optionally specify if `NgZone#run()` method invocations should be coalesced\n   * into a single change detection.\n   *\n   * Consider the following case.\n   * ```\n   * for (let i = 0; i < 10; i ++) {\n   *   ngZone.run(() => {\n   *     // do something\n   *   });\n   * }\n   * ```\n   *\n   * This case triggers the change detection multiple times.\n   * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n   * In addition, the change detection executes in requestAnimation.\n   *\n   */\n  ngZoneRunCoalescing?: boolean;\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as `PlatformBrowser`, or explicitly by calling the `createPlatform()` function.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'platform'})\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Array<() => void> = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform.\n   *\n   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function\n   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZone = getNgZone(options?.ngZone, getNgZoneOptions(options));\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Note: Create ngZoneInjector within ngZone.run so that all of the instantiated services are\n    // created within the Angular zone\n    // Do not try to replace ngZone.run with ApplicationRef#run because ApplicationRef would then be\n    // created outside of the Angular zone.\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler|null = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new RuntimeError(\n            RuntimeErrorCode.ERROR_HANDLER_NOT_FOUND,\n            ngDevMode && 'No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      ngZone!.runOutsideAngular(() => {\n        const subscription = ngZone!.onError.subscribe({\n          next: (error: any) => {\n            exceptionHandler.handleError(error);\n          }\n        });\n        moduleRef.onDestroy(() => {\n          remove(this._modules, moduleRef);\n          subscription.unsubscribe();\n        });\n      });\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone!, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy\n          const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);\n          setLocaleId(localeId || DEFAULT_LOCALE_ID);\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>,\n      compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType)\n        .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new RuntimeError(\n          RuntimeErrorCode.BOOTSTRAP_COMPONENTS_NOT_FOUND,\n          ngDevMode &&\n              `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, ` +\n                  `but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n                  `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Registers a listener to be called when the platform is destroyed.\n   */\n  onDestroy(callback: () => void): void {\n    this._destroyListeners.push(callback);\n  }\n\n  /**\n   * Retrieves the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector {\n    return this._injector;\n  }\n\n  /**\n   * Destroys the current Angular platform and all Angular applications on the page.\n   * Destroys all modules and listeners registered with the platform.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new RuntimeError(\n          RuntimeErrorCode.PLATFORM_ALREADY_DESTROYED,\n          ngDevMode && 'The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n\n    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);\n    if (destroyListeners) {\n      destroyListeners.forEach(listener => listener());\n      destroyListeners.clear();\n    }\n\n    this._destroyed = true;\n  }\n\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n}\n\n// Set of options recognized by the NgZone.\ninterface NgZoneOptions {\n  enableLongStackTrace: boolean;\n  shouldCoalesceEventChangeDetection: boolean;\n  shouldCoalesceRunChangeDetection: boolean;\n}\n\n// Transforms a set of `BootstrapOptions` (supported by the NgModule-based bootstrap APIs) ->\n// `NgZoneOptions` that are recognized by the NgZone constructor. Passing no options will result in\n// a set of default options returned.\nfunction getNgZoneOptions(options?: BootstrapOptions): NgZoneOptions {\n  return {\n    enableLongStackTrace: typeof ngDevMode === 'undefined' ? false : !!ngDevMode,\n    shouldCoalesceEventChangeDetection: !!(options && options.ngZoneEventCoalescing) || false,\n    shouldCoalesceRunChangeDetection: !!(options && options.ngZoneRunCoalescing) || false,\n  };\n}\n\nfunction getNgZone(ngZoneToUse: NgZone|'zone.js'|'noop'|undefined, options: NgZoneOptions): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneToUse === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneToUse === 'zone.js' ? undefined : ngZoneToUse) || new NgZone(options);\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T|T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about `isStable`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a `setInterval`, a `setTimeout`\n * or using RxJS operators like `interval`);\n * - the `isStable` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS `interval`),\n * and at the same time subscribe to `isStable`.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, `isStable` will never emit `true`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * ```\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * ```\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * ```\n * As the `isStable` Observable runs outside the zone,\n * the `value` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * ```\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * ```\n *\n * Or make the subscription callback run inside the zone.\n *\n * ```\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * ```\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root'})\nexport class ApplicationRef {\n  /** @internal */\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _stable = true;\n  private _onMicrotaskEmptySubscription: Subscription;\n  private _destroyed = false;\n  private _destroyListeners: Array<() => void> = [];\n\n  /**\n   * Indicates whether this instance was destroyed.\n   */\n  get destroyed() {\n    return this._destroyed;\n  }\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   *\n   * @see  [Usage notes](#is-stable-examples) for examples and caveats when using this API.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable!: Observable<boolean>;\n\n  /**\n   * The `EnvironmentInjector` used to create this application.\n   */\n  get injector(): EnvironmentInjector {\n    return this._injector;\n  }\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone,\n      private _injector: EnvironmentInjector,\n      private _exceptionHandler: ErrorHandler,\n  ) {\n    this._onMicrotaskEmptySubscription = this._zone.onMicrotaskEmpty.subscribe({\n      next: () => {\n        this._zone.run(() => {\n          this.tick();\n        });\n      }\n    });\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => {\n            observer.next(false);\n          });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as {isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(component: Type<C>, rootSelectorOrNode?: string|any): ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   *\n   * @deprecated Passing Component factories as the `Application.bootstrap` function argument is\n   *     deprecated. Pass Component Types instead.\n   */\n  bootstrap<C>(componentFactory: ComponentFactory<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C>;\n\n  /**\n   * Bootstrap a component onto the element identified by its selector or, optionally, to a\n   * specified element.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a component, Angular mounts it onto a target DOM element\n   * and kicks off automatic change detection. The target DOM element can be\n   * provided using the `rootSelectorOrNode` argument.\n   *\n   * If the target DOM element is not provided, Angular tries to find one on a page\n   * using the `selector` of the component that is being bootstrapped\n   * (first matched element is used).\n   *\n   * ### Example\n   *\n   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,\n   * but it requires us to know the component while writing the application code.\n   *\n   * Imagine a situation where we have to wait for an API call to decide about the component to\n   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to\n   * dynamically bootstrap a component.\n   *\n   * {@example core/ts/platform/platform.ts region='componentSelector'}\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * selector of the bootstrapped component.\n   *\n   * In the following example, we are providing a CSS selector to match the target element.\n   *\n   * {@example core/ts/platform/platform.ts region='cssSelector'}\n   *\n   * While in this example, we are providing reference to a DOM node.\n   *\n   * {@example core/ts/platform/platform.ts region='domNode'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const isComponentFactory = componentOrFactory instanceof ComponentFactory;\n    const initStatus = this._injector.get(ApplicationInitStatus);\n\n    if (!initStatus.done) {\n      const standalone = !isComponentFactory && isStandalone(componentOrFactory);\n      const errorMessage =\n          'Cannot bootstrap as there are still asynchronous initializers running.' +\n          (standalone ? '' :\n                        ' Bootstrap components in the `ngDoBootstrap` method of the root module.');\n      throw new RuntimeError(\n          RuntimeErrorCode.ASYNC_INITIALIZERS_STILL_RUNNING, NG_DEV_MODE && errorMessage);\n    }\n\n    let componentFactory: ComponentFactory<C>;\n    if (isComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      const resolver = this._injector.get(ComponentFactoryResolver);\n      componentFactory = resolver.resolveComponentFactory(componentOrFactory)!;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule =\n        isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n    const nativeElement = compRef.location.nativeElement;\n    const testability = compRef.injector.get(TESTABILITY, null);\n    testability?.registerApplication(nativeElement);\n\n    compRef.onDestroy(() => {\n      this.detachView(compRef.hostView);\n      remove(this.components, compRef);\n      testability?.unregisterApplication(nativeElement);\n    });\n\n    this._loadComponent(compRef);\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      const _console = this._injector.get(Console);\n      _console.log(\n          `Angular is running in development mode. Call enableProdMode() to enable production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    if (this._runningTick) {\n      throw new RuntimeError(\n          RuntimeErrorCode.RECURSIVE_APPLICATION_REF_TICK,\n          ngDevMode && 'ApplicationRef.tick is called recursively');\n    }\n\n    try {\n      this._runningTick = true;\n      for (let view of this._views) {\n        view.detectChanges();\n      }\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        for (let view of this._views) {\n          view.checkNoChanges();\n        }\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);\n    if (ngDevMode && !Array.isArray(listeners)) {\n      throw new RuntimeError(\n          RuntimeErrorCode.INVALID_MULTI_PROVIDER,\n          'Unexpected type of the `APP_BOOTSTRAP_LISTENER` token value ' +\n              `(expected an array, but got ${typeof listeners}). ` +\n              'Please check that the `APP_BOOTSTRAP_LISTENER` token is configured as a ' +\n              '`multi: true` provider.');\n    }\n    listeners.push(...this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    if (this._destroyed) return;\n\n    try {\n      // Call all the lifecycle hooks.\n      this._destroyListeners.forEach(listener => listener());\n\n      // Destroy all registered views.\n      this._views.slice().forEach((view) => view.destroy());\n      this._onMicrotaskEmptySubscription.unsubscribe();\n    } finally {\n      // Indicate that this instance is destroyed.\n      this._destroyed = true;\n\n      // Release all references.\n      this._views = [];\n      this._bootstrapListeners = [];\n      this._destroyListeners = [];\n    }\n  }\n\n  /**\n   * Registers a listener to be called when an instance is destroyed.\n   *\n   * @param callback A callback function to add as a listener.\n   * @returns A function which unregisters a listener.\n   *\n   * @internal\n   */\n  onDestroy(callback: () => void): VoidFunction {\n    NG_DEV_MODE && this.warnIfDestroyed();\n    this._destroyListeners.push(callback);\n    return () => remove(this._destroyListeners, callback);\n  }\n\n  /**\n   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function\n   * will destroy the associated environment injectors as well as all the bootstrapped components\n   * with their views.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      throw new RuntimeError(\n          RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED,\n          ngDevMode && 'This instance of the `ApplicationRef` has already been destroyed.');\n    }\n\n    // This is a temporary type to represent an instance of an R3Injector, which can be destroyed.\n    // The type will be replaced with a different one once destroyable injector type is available.\n    type DestroyableInjector = Injector&{destroy?: Function, destroyed?: boolean};\n\n    const injector = this._injector as DestroyableInjector;\n\n    // Check that this injector instance supports destroy operation.\n    if (injector.destroy && !injector.destroyed) {\n      // Destroying an underlying injector will trigger the `ngOnDestroy` lifecycle\n      // hook, which invokes the remaining cleanup actions.\n      injector.destroy();\n    }\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() {\n    return this._views.length;\n  }\n\n  private warnIfDestroyed() {\n    if (NG_DEV_MODE && this._destroyed) {\n      console.warn(formatRuntimeError(\n          RuntimeErrorCode.APPLICATION_REF_ALREADY_DESTROYED,\n          'This instance of the `ApplicationRef` has already been destroyed.'));\n    }\n  }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n\nfunction _lastDefined<T>(args: T[]): T|undefined {\n  for (let i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n\nfunction _mergeArrays(parts: any[][]): any[] {\n  const result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from './global';\n\n/**\n * Returns whether Angular is in development mode.\n *\n * By default, this is true, unless `enableProdMode` is invoked prior to calling this method or the\n * application is built using the Angular CLI with the `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  return typeof ngDevMode === 'undefined' || !!ngDevMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * Using this method is discouraged as the Angular CLI will set production mode when using the\n * `optimization` option.\n * @see {@link cli/build ng build}\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  // The below check is there so when ngDevMode is set via terser\n  // `global['ngDevMode'] = false;` is also dropped.\n  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n    global['ngDevMode'] = false;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Public API for Zone\nexport {NgZone, NoopNgZone as ɵNoopNgZone} from './zone/ng_zone';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Public API for render\nexport {Renderer2, RendererFactory2} from './render/api';\nexport {RendererStyleFlags2, RendererType2} from './render/api_flags';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {NgModuleFactory as R3NgModuleFactory} from '../render3/ng_module_ref';\n\nimport {NgModuleFactory} from './ng_module_factory';\nimport {getRegisteredNgModuleType} from './ng_module_registration';\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use `getNgModuleById` instead.\n */\nexport function getModuleFactory(id: string): NgModuleFactory<any> {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return new R3NgModuleFactory(type);\n}\n\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an `id` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nexport function getNgModuleById<T>(id: string): Type<T> {\n  const type = getRegisteredNgModuleType(id);\n  if (!type) throw noModuleError(id);\n  return type;\n}\n\nfunction noModuleError(\n    id: string,\n    ): Error {\n  return new Error(`No module with ID ${id} loaded`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags} from '../di';\nimport {InternalInjectFlags} from '../di/interface/injector';\nimport {TNode, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView} from '../render3/interfaces/view';\nimport {getCurrentTNode, getLView} from '../render3/state';\nimport {getComponentLViewByIndex} from '../render3/util/view_utils';\nimport {ViewRef} from '../render3/view_ref';\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport abstract class ChangeDetectorRef {\n  /**\n   * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n   * change detection strategy, explicitly marks the view as changed so that\n   * it can be checked again.\n   *\n   * Components are normally marked as dirty (in need of rerendering) when inputs\n   * have changed or events have fired in the view. Call this method to ensure that\n   * a component is checked even if these triggers have not occurred.\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   */\n  abstract markForCheck(): void;\n\n  /**\n   * Detaches this view from the change-detection tree.\n   * A detached view is  not checked until it is reattached.\n   * Use in combination with `detectChanges()` to implement local change detection checks.\n   *\n   * Detached views are not checked during change detection runs until they are\n   * re-attached, even if they are marked as dirty.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detach(): void;\n\n  /**\n   * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n   * detach}\n   * to implement local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detectChanges(): void;\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * Use in development mode to verify that running change detection doesn't introduce\n   * other changes. Calling it in production mode is a noop.\n   */\n  abstract checkNoChanges(): void;\n\n  /**\n   * Re-attaches the previously detached view to the change detection tree.\n   * Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   */\n  abstract reattach(): void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: (flags: InjectFlags) => ChangeDetectorRef = injectChangeDetectorRef;\n}\n\n\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(flags: InjectFlags): ChangeDetectorRef {\n  return createViewRef(\n      getCurrentTNode()!, getLView(),\n      (flags & InternalInjectFlags.ForPipe) === InternalInjectFlags.ForPipe);\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param tNode The node that is requesting a ChangeDetectorRef\n * @param lView The view to which the node belongs\n * @param isPipe Whether the view is being injected into a pipe.\n * @returns The ChangeDetectorRef to use\n */\nfunction createViewRef(tNode: TNode, lView: LView, isPipe: boolean): ChangeDetectorRef {\n  if (isComponentHost(tNode) && !isPipe) {\n    // The LView represents the location where the component is declared.\n    // Instead we want the LView for the component View and so we need to look it up.\n    const componentView = getComponentLViewByIndex(tNode.index, lView);  // look down\n    return new ViewRef(componentView, componentView);\n  } else if (tNode.type & (TNodeType.AnyRNode | TNodeType.AnyContainer | TNodeType.Icu)) {\n    // The LView represents the location where the injection is requested from.\n    // We need to locate the containing LView (in case where the `lView` is an embedded view)\n    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];  // look up\n    return new ViewRef(hostComponentView, lView);\n  }\n  return null!;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\n\n/**\n * Represents an Angular [view](guide/glossary#view \"Definition\").\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport abstract class ViewRef extends ChangeDetectorRef {\n  /**\n   * Destroys this view and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Reports whether this view has been destroyed.\n   * @returns True after the `destroy()` method has been called, false otherwise.\n   */\n  abstract get destroyed(): boolean;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for views.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with a view. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): any /** TODO #9100, replace by void in a major release*/;\n}\n\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-hierarchy) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * @publicApi\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n  /**\n   * The context for this view, inherited from the anchor element.\n   */\n  abstract context: C;\n\n  /**\n   * The root nodes for this embedded view.\n   */\n  abstract get rootNodes(): any[];\n}\n\nexport interface InternalViewRef extends ViewRef {\n  detachFromAppRef(): void;\n  attachToAppRef(appRef: ViewRefTracker): void;\n}\n\n/**\n * Interface for tracking root `ViewRef`s in `ApplicationRef`.\n *\n * NOTE: Importing `ApplicationRef` here directly creates circular dependency, which is why we have\n * a subset of the `ApplicationRef` interface `ViewRefTracker` here.\n */\nexport interface ViewRefTracker {\n  detachView(viewRef: ViewRef): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Public API for compiler\nexport {Compiler, COMPILER_OPTIONS, CompilerFactory, CompilerOptions, ModuleWithComponentFactories} from './linker/compiler';\nexport {ComponentFactory, ComponentRef} from './linker/component_factory';\nexport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nexport {ElementRef} from './linker/element_ref';\nexport {NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nexport {getModuleFactory, getNgModuleById} from './linker/ng_module_factory_loader';\nexport {QueryList} from './linker/query_list';\nexport {TemplateRef} from './linker/template_ref';\nexport {ViewContainerRef} from './linker/view_container_ref';\nexport {EmbeddedViewRef, ViewRef} from './linker/view_ref';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file exists for easily patching NgModuleFactoryLoader in g3\nexport default {};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {assertTNodeForLView} from '../render3/assert';\nimport {getLContext} from '../render3/context_discovery';\nimport {CONTAINER_HEADER_OFFSET, LContainer, NATIVE} from '../render3/interfaces/container';\nimport {TElementNode, TNode, TNodeFlags, TNodeType} from '../render3/interfaces/node';\nimport {isComponentHost, isLContainer} from '../render3/interfaces/type_checks';\nimport {DECLARATION_COMPONENT_VIEW, LView, PARENT, T_HOST, TData, TVIEW} from '../render3/interfaces/view';\nimport {getComponent, getContext, getInjectionTokens, getInjector, getListeners, getLocalRefs, getOwningComponent} from '../render3/util/discovery_utils';\nimport {INTERPOLATION_DELIMITER} from '../render3/util/misc_utils';\nimport {renderStringify} from '../render3/util/stringify_utils';\nimport {getComponentLViewByIndex, getNativeByTNodeOrNull} from '../render3/util/view_utils';\nimport {assertDomNode} from '../util/assert';\n\n/**\n * @publicApi\n */\nexport class DebugEventListener {\n  constructor(public name: string, public callback: Function) {}\n}\n\n/**\n * @publicApi\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n\n/**\n * @publicApi\n */\nexport class DebugNode {\n  /**\n   * The underlying DOM node.\n   */\n  readonly nativeNode: any;\n\n  constructor(nativeNode: Node) {\n    this.nativeNode = nativeNode;\n  }\n\n  /**\n   * The `DebugElement` parent. Will be `null` if this is the root element.\n   */\n  get parent(): DebugElement|null {\n    const parent = this.nativeNode.parentNode as Element;\n    return parent ? new DebugElement(parent) : null;\n  }\n\n  /**\n   * The host dependency injector. For example, the root element's component instance injector.\n   */\n  get injector(): Injector {\n    return getInjector(this.nativeNode);\n  }\n\n  /**\n   * The element's own component instance, if it has one.\n   */\n  get componentInstance(): any {\n    const nativeElement = this.nativeNode;\n    return nativeElement &&\n        (getComponent(nativeElement as Element) || getOwningComponent(nativeElement));\n  }\n\n  /**\n   * An object that provides parent context for this element. Often an ancestor component instance\n   * that governs this element.\n   *\n   * When an element is repeated within *ngFor, the context is an `NgForOf` whose `$implicit`\n   * property is the value of the row instance value. For example, the `hero` in `*ngFor=\"let hero\n   * of heroes\"`.\n   */\n  get context(): any {\n    return getComponent(this.nativeNode as Element) || getContext(this.nativeNode as Element);\n  }\n\n  /**\n   * The callbacks attached to the component's @Output properties and/or the element's event\n   * properties.\n   */\n  get listeners(): DebugEventListener[] {\n    return getListeners(this.nativeNode as Element).filter(listener => listener.type === 'dom');\n  }\n\n  /**\n   * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n   * variable name.\n   */\n  get references(): {[key: string]: any} {\n    return getLocalRefs(this.nativeNode);\n  }\n\n  /**\n   * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n   * component lists in its providers metadata.\n   */\n  get providerTokens(): any[] {\n    return getInjectionTokens(this.nativeNode as Element);\n  }\n}\n\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing-components-scenarios)\n * @see [Basics of testing components](guide/testing-components-basics)\n * @see [Testing utility APIs](guide/testing-utility-apis)\n */\nexport class DebugElement extends DebugNode {\n  constructor(nativeNode: Element) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n\n  /**\n   * The underlying DOM element at the root of the component.\n   */\n  get nativeElement(): any {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode as Element : null;\n  }\n\n  /**\n   * The element tag name, if it is an element.\n   */\n  get name(): string {\n    const context = getLContext(this.nativeNode)!;\n    const lView = context ? context.lView : null;\n\n    if (lView !== null) {\n      const tData = lView[TVIEW].data;\n      const tNode = tData[context.nodeIndex] as TNode;\n      return tNode.value!;\n    } else {\n      return this.nativeNode.nodeName;\n    }\n  }\n\n  /**\n   *  Gets a map of property names to property values for an element.\n   *\n   *  This map includes:\n   *  - Regular property bindings (e.g. `[id]=\"id\"`)\n   *  - Host property bindings (e.g. `host: { '[id]': \"id\" }`)\n   *  - Interpolated property bindings (e.g. `id=\"{{ value }}\")\n   *\n   *  It does not include:\n   *  - input property bindings (e.g. `[myCustomInput]=\"value\"`)\n   *  - attribute bindings (e.g. `[attr.role]=\"menu\"`)\n   */\n  get properties(): {[key: string]: any;} {\n    const context = getLContext(this.nativeNode)!;\n    const lView = context ? context.lView : null;\n\n    if (lView === null) {\n      return {};\n    }\n\n    const tData = lView[TVIEW].data;\n    const tNode = tData[context.nodeIndex] as TNode;\n\n    const properties: {[key: string]: string} = {};\n    // Collect properties from the DOM.\n    copyDomProperties(this.nativeElement, properties);\n    // Collect properties from the bindings. This is needed for animation renderer which has\n    // synthetic properties which don't get reflected into the DOM.\n    collectPropertyBindings(properties, tNode, lView, tData);\n    return properties;\n  }\n\n  /**\n   *  A map of attribute names to attribute values for an element.\n   */\n  get attributes(): {[key: string]: string|null} {\n    const attributes: {[key: string]: string|null} = {};\n    const element = this.nativeElement;\n\n    if (!element) {\n      return attributes;\n    }\n\n    const context = getLContext(element)!;\n    const lView = context ? context.lView : null;\n\n    if (lView === null) {\n      return {};\n    }\n\n    const tNodeAttrs = (lView[TVIEW].data[context.nodeIndex] as TNode).attrs;\n    const lowercaseTNodeAttrs: string[] = [];\n\n    // For debug nodes we take the element's attribute directly from the DOM since it allows us\n    // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones\n    // that are set through `Renderer2`). The problem is that the browser will lowercase all names,\n    // however since we have the attributes already on the TNode, we can preserve the case by going\n    // through them once, adding them to the `attributes` map and putting their lower-cased name\n    // into an array. Afterwards when we're going through the native DOM attributes, we can check\n    // whether we haven't run into an attribute already through the TNode.\n    if (tNodeAttrs) {\n      let i = 0;\n      while (i < tNodeAttrs.length) {\n        const attrName = tNodeAttrs[i];\n\n        // Stop as soon as we hit a marker. We only care about the regular attributes. Everything\n        // else will be handled below when we read the final attributes off the DOM.\n        if (typeof attrName !== 'string') break;\n\n        const attrValue = tNodeAttrs[i + 1];\n        attributes[attrName] = attrValue as string;\n        lowercaseTNodeAttrs.push(attrName.toLowerCase());\n\n        i += 2;\n      }\n    }\n\n    for (const attr of element.attributes) {\n      // Make sure that we don't assign the same attribute both in its\n      // case-sensitive form and the lower-cased one from the browser.\n      if (!lowercaseTNodeAttrs.includes(attr.name)) {\n        attributes[attr.name] = attr.value;\n      }\n    }\n\n    return attributes;\n  }\n\n  /**\n   * The inline styles of the DOM element.\n   *\n   * Will be `null` if there is no `style` property on the underlying DOM element.\n   *\n   * @see [ElementCSSInlineStyle](https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style)\n   */\n  get styles(): {[key: string]: string|null} {\n    if (this.nativeElement && (this.nativeElement as HTMLElement).style) {\n      return (this.nativeElement as HTMLElement).style as {[key: string]: any};\n    }\n    return {};\n  }\n\n  /**\n   * A map containing the class names on the element as keys.\n   *\n   * This map is derived from the `className` property of the DOM element.\n   *\n   * Note: The values of this object will always be `true`. The class key will not appear in the KV\n   * object if it does not exist on the element.\n   *\n   * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n   */\n  get classes(): {[key: string]: boolean} {\n    const result: {[key: string]: boolean} = {};\n    const element = this.nativeElement as HTMLElement | SVGElement;\n\n    // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.\n    const className = element.className as string | SVGAnimatedString;\n    const classes =\n        typeof className !== 'string' ? className.baseVal.split(' ') : className.split(' ');\n\n    classes.forEach((value: string) => result[value] = true);\n\n    return result;\n  }\n\n  /**\n   * The `childNodes` of the DOM element as a `DebugNode` array.\n   *\n   * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n   */\n  get childNodes(): DebugNode[] {\n    const childNodes = this.nativeNode.childNodes;\n    const children: DebugNode[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element)!);\n    }\n    return children;\n  }\n\n  /**\n   * The immediate `DebugElement` children. Walk the tree by descending through `children`.\n   */\n  get children(): DebugElement[] {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children: DebugElement[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode(element) as DebugElement);\n    }\n    return children;\n  }\n\n  /**\n   * @returns the first `DebugElement` that matches the predicate at any depth in the subtree.\n   */\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  /**\n   * @returns All `DebugElement` matches for the predicate at any depth in the subtree.\n   */\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryAll(this, predicate, matches, true);\n    return matches;\n  }\n\n  /**\n   * @returns All `DebugNode` matches for the predicate at any depth in the subtree.\n   */\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryAll(this, predicate, matches, false);\n    return matches;\n  }\n\n  /**\n   * Triggers the event by its name if there is a corresponding listener in the element's\n   * `listeners` collection.\n   *\n   * If the event lacks a listener or there's some other problem, consider\n   * calling `nativeElement.dispatchEvent(eventObject)`.\n   *\n   * @param eventName The name of the event to trigger\n   * @param eventObj The _event object_ expected by the handler\n   *\n   * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)\n   */\n  triggerEventHandler(eventName: string, eventObj?: any): void {\n    const node = this.nativeNode as any;\n    const invokedListeners: Function[] = [];\n\n    this.listeners.forEach(listener => {\n      if (listener.name === eventName) {\n        const callback = listener.callback;\n        callback.call(node, eventObj);\n        invokedListeners.push(callback);\n      }\n    });\n\n    // We need to check whether `eventListeners` exists, because it's something\n    // that Zone.js only adds to `EventTarget` in browser environments.\n    if (typeof node.eventListeners === 'function') {\n      // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some\n      // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event\n      // listener.\n      node.eventListeners(eventName).forEach((listener: Function) => {\n        // In order to ensure that we can detect the special __ngUnwrap__ token described above, we\n        // use `toString` on the listener and see if it contains the token. We use this approach to\n        // ensure that it still worked with compiled code since it cannot remove or rename string\n        // literals. We also considered using a special function name (i.e. if(listener.name ===\n        // special)) but that was more cumbersome and we were also concerned the compiled code could\n        // strip the name, turning the condition in to (\"\" === \"\") and always returning true.\n        if (listener.toString().indexOf('__ngUnwrap__') !== -1) {\n          const unwrappedListener = listener('__ngUnwrap__');\n          return invokedListeners.indexOf(unwrappedListener) === -1 &&\n              unwrappedListener.call(node, eventObj);\n        }\n      });\n    }\n  }\n}\n\nfunction copyDomProperties(element: Element|null, properties: {[name: string]: string}): void {\n  if (element) {\n    // Skip own properties (as those are patched)\n    let obj = Object.getPrototypeOf(element);\n    const NodePrototype: any = Node.prototype;\n    while (obj !== null && obj !== NodePrototype) {\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      for (let key in descriptors) {\n        if (!key.startsWith('__') && !key.startsWith('on')) {\n          // don't include properties starting with `__` and `on`.\n          // `__` are patched values which should not be included.\n          // `on` are listeners which also should not be included.\n          const value = (element as any)[key];\n          if (isPrimitiveValue(value)) {\n            properties[key] = value;\n          }\n        }\n      }\n      obj = Object.getPrototypeOf(obj);\n    }\n  }\n}\n\nfunction isPrimitiveValue(value: any): boolean {\n  return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||\n      value === null;\n}\n\n/**\n * Walk the TNode tree to find matches for the predicate.\n *\n * @param parentElement the element from which the walk is started\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryAll(\n    parentElement: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[],\n    elementsOnly: true): void;\nfunction _queryAll(\n    parentElement: DebugElement, predicate: Predicate<DebugNode>, matches: DebugNode[],\n    elementsOnly: false): void;\nfunction _queryAll(\n    parentElement: DebugElement, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean) {\n  const context = getLContext(parentElement.nativeNode)!;\n  const lView = context ? context.lView : null;\n  if (lView !== null) {\n    const parentTNode = lView[TVIEW].data[context.nodeIndex] as TNode;\n    _queryNodeChildren(\n        parentTNode, lView, predicate, matches, elementsOnly, parentElement.nativeNode);\n  } else {\n    // If the context is null, then `parentElement` was either created with Renderer2 or native DOM\n    // APIs.\n    _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);\n  }\n}\n\n/**\n * Recursively match the current TNode against the predicate, and goes on with the next ones.\n *\n * @param tNode the current TNode\n * @param lView the LView of this TNode\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildren(\n    tNode: TNode, lView: LView, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  ngDevMode && assertTNodeForLView(tNode, lView);\n  const nativeNode = getNativeByTNodeOrNull(tNode, lView);\n  // For each type of TNode, specific logic is executed.\n  if (tNode.type & (TNodeType.AnyRNode | TNodeType.ElementContainer)) {\n    // Case 1: the TNode is an element\n    // The native node has to be checked.\n    _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n    if (isComponentHost(tNode)) {\n      // If the element is the host of a component, then all nodes in its view have to be processed.\n      // Note: the component's content (tNode.child) will be processed from the insertion points.\n      const componentView = getComponentLViewByIndex(tNode.index, lView);\n      if (componentView && componentView[TVIEW].firstChild) {\n        _queryNodeChildren(\n            componentView[TVIEW].firstChild!, componentView, predicate, matches, elementsOnly,\n            rootNativeNode);\n      }\n    } else {\n      if (tNode.child) {\n        // Otherwise, its children have to be processed.\n        _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n      }\n\n      // We also have to query the DOM directly in order to catch elements inserted through\n      // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple\n      // times. ViewEngine could do it more efficiently, because all the insertions go through\n      // Renderer2, however that's not the case in Ivy. This approach is being used because:\n      // 1. Matching the ViewEngine behavior would mean potentially introducing a dependency\n      //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.\n      // 2. It allows us to capture nodes that were inserted directly via the DOM.\n      nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);\n    }\n    // In all cases, if a dynamic container exists for this node, each view inside it has to be\n    // processed.\n    const nodeOrContainer = lView[tNode.index];\n    if (isLContainer(nodeOrContainer)) {\n      _queryNodeChildrenInContainer(\n          nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.type & TNodeType.Container) {\n    // Case 2: the TNode is a container\n    // The native node has to be checked.\n    const lContainer = lView[tNode.index];\n    _addQueryMatch(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);\n    // Each view inside the container has to be processed.\n    _queryNodeChildrenInContainer(lContainer, predicate, matches, elementsOnly, rootNativeNode);\n  } else if (tNode.type & TNodeType.Projection) {\n    // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).\n    // The nodes projected at this location all need to be processed.\n    const componentView = lView![DECLARATION_COMPONENT_VIEW];\n    const componentHost = componentView[T_HOST] as TElementNode;\n    const head: TNode|null =\n        (componentHost.projection as (TNode | null)[])[tNode.projection as number];\n\n    if (Array.isArray(head)) {\n      for (let nativeNode of head) {\n        _addQueryMatch(nativeNode, predicate, matches, elementsOnly, rootNativeNode);\n      }\n    } else if (head) {\n      const nextLView = componentView[PARENT]! as LView;\n      const nextTNode = nextLView[TVIEW].data[head.index] as TNode;\n      _queryNodeChildren(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  } else if (tNode.child) {\n    // Case 4: the TNode is a view.\n    _queryNodeChildren(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);\n  }\n\n  // We don't want to go to the next sibling of the root node.\n  if (rootNativeNode !== nativeNode) {\n    // To determine the next node to be processed, we need to use the next or the projectionNext\n    // link, depending on whether the current node has been projected.\n    const nextTNode = (tNode.flags & TNodeFlags.isProjected) ? tNode.projectionNext : tNode.next;\n    if (nextTNode) {\n      _queryNodeChildren(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n\n/**\n * Process all TNodes in a given container.\n *\n * @param lContainer the container to be processed\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _queryNodeChildrenInContainer(\n    lContainer: LContainer, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {\n    const childView = lContainer[i] as LView;\n    const firstChild = childView[TVIEW].firstChild;\n    if (firstChild) {\n      _queryNodeChildren(firstChild, childView, predicate, matches, elementsOnly, rootNativeNode);\n    }\n  }\n}\n\n/**\n * Match the current native node against the predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list of positive matches\n * @param elementsOnly whether only elements should be searched\n * @param rootNativeNode the root native node on which predicate should not be matched\n */\nfunction _addQueryMatch(\n    nativeNode: any, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean, rootNativeNode: any) {\n  if (rootNativeNode !== nativeNode) {\n    const debugNode = getDebugNode(nativeNode);\n    if (!debugNode) {\n      return;\n    }\n    // Type of the \"predicate and \"matches\" array are set based on the value of\n    // the \"elementsOnly\" parameter. TypeScript is not able to properly infer these\n    // types with generics, so we manually cast the parameters accordingly.\n    if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&\n        matches.indexOf(debugNode) === -1) {\n      matches.push(debugNode);\n    } else if (\n        !elementsOnly && (predicate as Predicate<DebugNode>)(debugNode) &&\n        (matches as DebugNode[]).indexOf(debugNode) === -1) {\n      (matches as DebugNode[]).push(debugNode);\n    }\n  }\n}\n\n/**\n * Match all the descendants of a DOM node against a predicate.\n *\n * @param nativeNode the current native node\n * @param predicate the predicate to match\n * @param matches the list where matches are stored\n * @param elementsOnly whether only elements should be searched\n */\nfunction _queryNativeNodeDescendants(\n    parentNode: any, predicate: Predicate<DebugElement>|Predicate<DebugNode>,\n    matches: DebugElement[]|DebugNode[], elementsOnly: boolean) {\n  const nodes = parentNode.childNodes;\n  const length = nodes.length;\n\n  for (let i = 0; i < length; i++) {\n    const node = nodes[i];\n    const debugNode = getDebugNode(node);\n\n    if (debugNode) {\n      if (elementsOnly && (debugNode instanceof DebugElement) && predicate(debugNode) &&\n          matches.indexOf(debugNode) === -1) {\n        matches.push(debugNode);\n      } else if (\n          !elementsOnly && (predicate as Predicate<DebugNode>)(debugNode) &&\n          (matches as DebugNode[]).indexOf(debugNode) === -1) {\n        (matches as DebugNode[]).push(debugNode);\n      }\n\n      _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);\n    }\n  }\n}\n\n/**\n * Iterates through the property bindings for a given node and generates\n * a map of property names to values. This map only contains property bindings\n * defined in templates, not in host bindings.\n */\nfunction collectPropertyBindings(\n    properties: {[key: string]: string}, tNode: TNode, lView: LView, tData: TData): void {\n  let bindingIndexes = tNode.propertyBindings;\n\n  if (bindingIndexes !== null) {\n    for (let i = 0; i < bindingIndexes.length; i++) {\n      const bindingIndex = bindingIndexes[i];\n      const propMetadata = tData[bindingIndex] as string;\n      const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);\n      const propertyName = metadataParts[0];\n      if (metadataParts.length > 1) {\n        let value = metadataParts[1];\n        for (let j = 1; j < metadataParts.length - 1; j++) {\n          value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];\n        }\n        properties[propertyName] = value;\n      } else {\n        properties[propertyName] = lView[bindingIndex];\n      }\n    }\n  }\n}\n\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map<any, DebugNode>();\n\nconst NG_DEBUG_PROPERTY = '__ng_debug__';\n\n/**\n * @publicApi\n */\nexport function getDebugNode(nativeNode: any): DebugNode|null {\n  if (nativeNode instanceof Node) {\n    if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {\n      (nativeNode as any)[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?\n          new DebugElement(nativeNode as Element) :\n          new DebugNode(nativeNode);\n    }\n    return (nativeNode as any)[NG_DEBUG_PROPERTY];\n  }\n  return null;\n}\n\n// TODO: cleanup all references to this function and remove it.\nexport function getDebugNodeR2(_nativeNode: any): DebugNode|null {\n  return null;\n}\n\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @publicApi\n */\nexport interface Predicate<T> {\n  (value: T): boolean;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {isListLikeIterable, iterateListLike} from '../../util/iterable';\nimport {stringify} from '../../util/stringify';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\n\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object|null|undefined): boolean {\n    return isListLikeIterable(obj);\n  }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public readonly collection!: V[]|Iterable<V>|null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V>|null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V>|null = null;\n  private _previousItHead: IterableChangeRecord_<V>|null = null;\n  private _itHead: IterableChangeRecord_<V>|null = null;\n  private _itTail: IterableChangeRecord_<V>|null = null;\n  private _additionsHead: IterableChangeRecord_<V>|null = null;\n  private _additionsTail: IterableChangeRecord_<V>|null = null;\n  private _movesHead: IterableChangeRecord_<V>|null = null;\n  private _movesTail: IterableChangeRecord_<V>|null = null;\n  private _removalsHead: IterableChangeRecord_<V>|null = null;\n  private _removalsTail: IterableChangeRecord_<V>|null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V>|null = null;\n  private _identityChangesTail: IterableChangeRecord_<V>|null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) {\n    this._trackByFn = trackByFn || trackByIdentity;\n  }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex! <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt! :\n          nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt!._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V>|null|undefined): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new RuntimeError(\n          RuntimeErrorCode.INVALID_DIFFER_INPUT,\n          ngDevMode &&\n              `Error trying to diff '${\n                  stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V>|null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as {length: number}).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !Object.is(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as {length: number}).length = index;\n    }\n\n    this._truncate(record);\n    (this as {collection: V[] | Iterable<V>}).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = record._nextMoved) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // See if we have evicted the item, which used to be at some anterior position of _itHead list.\n    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (record !== null) {\n      // It is an item which we have evicted earlier: reinsert it back into the list.\n      // But first we need to check if identity changed, so we can update in view if necessary.\n      if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n      this._reinsertAfter(record, previousRecord, index);\n    } else {\n      // Attempt to see if the item is at some posterior position of _itHead list.\n      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n      if (record !== null) {\n        // We have the item in _itHead at/after `index` position. We need to move it forward in the\n        // collection.\n        // But first we need to check if identity changed, so we can update in view if necessary.\n        if (!Object.is(record.item, item)) this._addIdentityChange(record, item);\n\n        this._moveAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev!, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V>|null = null;\n\n\n  constructor(public item: V, public trackById: any) {}\n}\n\n// A linked list of IterableChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V>|null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail!._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex!) &&\n          Object.is(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key)!;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  clear() {\n    this.map.clear();\n  }\n}\n\nfunction getPreviousIndex(item: any, addRemoveOffset: number, moveOffsets: number[]|null): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {isJsObject} from '../../util/iterable';\nimport {stringify} from '../../util/stringify';\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\n\n\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n  constructor() {}\n  supports(obj: any): boolean {\n    return obj instanceof Map || isJsObject(obj);\n  }\n\n  create<K, V>(): KeyValueDiffer<K, V> {\n    return new DefaultKeyValueDiffer<K, V>();\n  }\n}\n\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n  private _records = new Map<K, KeyValueChangeRecord_<K, V>>();\n  private _mapHead: KeyValueChangeRecord_<K, V>|null = null;\n  // _appendAfter is used in the check loop\n  private _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\n  private _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  diff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new RuntimeError(\n          RuntimeErrorCode.INVALID_DIFFER_INPUT,\n          ngDevMode &&\n              `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n\n  onDestroy() {}\n\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  private _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n\n  private _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const record = this._records.get(key)!;\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  private _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!Object.is(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n\n  private _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail!._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n\n  private _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail!._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n\n  /** @internal */\n  private _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _next: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _prev: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n\n  constructor(public key: K) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵɵdefineInjectable} from '../../di/interface/defs';\nimport {StaticProvider} from '../../di/interface/provider';\nimport {Optional, SkipSelf} from '../../di/metadata';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\nimport {DefaultIterableDifferFactory} from '../differs/default_iterable_differ';\n\n\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport type NgIterable<T> = Array<T>|Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>|undefined|null): IterableChanges<V>|null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn:\n          (record: IterableChangeRecord<V>, previousIndex: number|null,\n           currentIndex: number|null) => void): void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n   * changed.\n   */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `TrackByFunction`. */\n  readonly trackById: any;\n}\n\n/**\n * A function optionally passed into the `NgForOf` directive to customize how `NgForOf` uniquely\n * identifies items in an iterable.\n *\n * `NgForOf` needs to uniquely identify items in the iterable to correctly perform DOM updates\n * when items in the iterable are reordered, new items are added, or existing items are removed.\n *\n *\n * In all of these scenarios it is usually desirable to only update the DOM elements associated\n * with the items affected by the change. This behavior is important to:\n *\n * - preserve any DOM-specific UI state (like cursor position, focus, text selection) when the\n *   iterable is modified\n * - enable animation of item addition, removal, and iterable reordering\n * - preserve the value of the `<select>` element when nested `<option>` elements are dynamically\n *   populated using `NgForOf` and the bound iterable is updated\n *\n * A common use for custom `trackBy` functions is when the model that `NgForOf` iterates over\n * contains a property with a unique identifier. For example, given a model:\n *\n * ```ts\n * class User {\n *   id: number;\n *   name: string;\n *   ...\n * }\n * ```\n * a custom `trackBy` function could look like the following:\n * ```ts\n * function userTrackBy(index, user) {\n *   return user.id;\n * }\n * ```\n *\n * A custom `trackBy` function must have several properties:\n *\n * - be [idempotent](https://en.wikipedia.org/wiki/Idempotence) (be without side effects, and always\n * return the same value for a given input)\n * - return unique value for all unique inputs\n * - be fast\n *\n * @see [`NgForOf#ngForTrackBy`](api/common/NgForOf#ngForTrackBy)\n * @publicApi\n */\nexport interface TrackByFunction<T> {\n  // Note: the type parameter `U` enables more accurate template type checking in case a trackBy\n  // function is declared using a base type of the iterated type. The `U` type gives TypeScript\n  // additional freedom to infer a narrower type for the `item` parameter type, instead of imposing\n  // the trackBy's declared item type as the inferred type for `T`.\n  // See https://github.com/angular/angular/issues/40125\n\n  /**\n   * @param index The index of the item within the iterable.\n   * @param item The item in the iterable.\n   */\n  <U extends T>(index: number, item: T&U): any;\n}\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\nexport function defaultIterableDiffersFactory() {\n  return new IterableDiffers([new DefaultIterableDifferFactory()]);\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport class IterableDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable(\n      {token: IterableDiffers, providedIn: 'root', factory: defaultIterableDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private\n   */\n  factories: IterableDifferFactory[];\n  constructor(factories: IterableDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n\n    return new IterableDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers|null) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for IterableDiffers, in such a case just assume\n        // `defaultIterableDiffersFactory`.\n        return IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(iterable: any): IterableDifferFactory {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new RuntimeError(\n          RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY,\n          ngDevMode &&\n              `Cannot find a differ supporting object '${iterable}' of type '${\n                  getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, ɵɵdefineInjectable} from '../../di';\nimport {RuntimeError, RuntimeErrorCode} from '../../errors';\n\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>|null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>|null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\nexport function defaultKeyValueDiffersFactory() {\n  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ɵprov = /** @pureOrBreakMyCode */ ɵɵdefineInjectable(\n      {token: KeyValueDiffers, providedIn: 'root', factory: defaultKeyValueDiffersFactory});\n\n  /**\n   * @deprecated v4.0.0 - Should be private.\n   */\n  factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) {\n    this.factories = factories;\n  }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        // if parent is null, it means that we are in the root injector and we have just overridden\n        // the default injection mechanism for KeyValueDiffers, in such a case just assume\n        // `defaultKeyValueDiffersFactory`.\n        return KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new RuntimeError(\n        RuntimeErrorCode.NO_SUPPORTING_DIFFER_FACTORY,\n        ngDevMode && `Cannot find a differ supporting object '${kv}'`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nimport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nimport {IterableDifferFactory, IterableDiffers} from './differs/iterable_differs';\nimport {KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\n\nexport {SimpleChange, SimpleChanges} from '../interface/simple_change';\nexport {devModeEqual} from '../util/comparison';\nexport {ChangeDetectorRef} from './change_detector_ref';\nexport {ChangeDetectionStrategy} from './constants';\nexport {DefaultIterableDiffer, DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nexport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nexport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, NgIterable, TrackByFunction} from './differs/iterable_differs';\nexport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\nexport {PipeTransform} from './pipe_transform';\n\n\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff: KeyValueDifferFactory[] = [new DefaultKeyValueDifferFactory()];\n\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff: IterableDifferFactory[] = [new DefaultIterableDifferFactory()];\n\nexport const defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\nexport const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Change detection enables data binding in Angular.\n */\n\nexport {ChangeDetectionStrategy, ChangeDetectorRef, DefaultIterableDiffer, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, IterableDiffers, KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers, NgIterable, PipeTransform, SimpleChange, SimpleChanges, TrackByFunction} from './change_detection/change_detection';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {createPlatformFactory, PlatformRef} from './application_ref';\nimport {StaticProvider} from './di';\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport const platformCore: (extraProviders?: StaticProvider[]|undefined) => PlatformRef =\n    createPlatformFactory(null, 'core', []);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef} from './application_ref';\nimport {NgModule} from './metadata';\n\n/**\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command. Eagerly injects\n * `ApplicationRef` to instantiate it.\n *\n * @publicApi\n */\n@NgModule()\nexport class ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef: ApplicationRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Coerces a value (typically a string) to a boolean. */\nexport function coerceToBoolean(value: unknown): boolean {\n  return typeof value === 'boolean' ? value : (value != null && value !== 'false');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FactoryTarget, getCompilerFacade, JitCompilerUsage, R3DeclareComponentFacade, R3DeclareDirectiveFacade, R3DeclareFactoryFacade, R3DeclareInjectableFacade, R3DeclareInjectorFacade, R3DeclareNgModuleFacade, R3DeclarePipeFacade} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {setClassMetadata} from '../metadata';\nimport {angularCoreEnv} from './environment';\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareDirective(decl: R3DeclareDirectiveFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'directive', type: decl.type});\n  return compiler.compileDirectiveDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareClassMetadata(decl: {\n  type: Type<any>; decorators: any[];\n  ctorParameters?: () => any[];\n  propDecorators?: {[field: string]: any};\n}): void {\n  setClassMetadata(\n      decl.type, decl.decorators, decl.ctorParameters ?? null, decl.propDecorators ?? null);\n}\n\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareComponent(decl: R3DeclareComponentFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'component', type: decl.type});\n  return compiler.compileComponentDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵcmp.js`, decl);\n}\n\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareFactory(decl: R3DeclareFactoryFacade): unknown {\n  const compiler = getCompilerFacade({\n    usage: JitCompilerUsage.PartialDeclaration,\n    kind: getFactoryKind(decl.target),\n    type: decl.type\n  });\n  return compiler.compileFactoryDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵfac.js`, decl);\n}\n\nfunction getFactoryKind(target: FactoryTarget) {\n  switch (target) {\n    case FactoryTarget.Directive:\n      return 'directive';\n    case FactoryTarget.Component:\n      return 'component';\n    case FactoryTarget.Injectable:\n      return 'injectable';\n    case FactoryTarget.Pipe:\n      return 'pipe';\n    case FactoryTarget.NgModule:\n      return 'NgModule';\n  }\n}\n\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareInjectable(decl: R3DeclareInjectableFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'injectable', type: decl.type});\n  return compiler.compileInjectableDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵprov.js`, decl);\n}\n\n/**\n * These enums are used in the partial factory declaration calls.\n */\nexport {FactoryTarget} from '../../compiler/compiler_facade';\n\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareInjector(decl: R3DeclareInjectorFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'NgModule', type: decl.type});\n  return compiler.compileInjectorDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵinj.js`, decl);\n}\n\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclareNgModule(decl: R3DeclareNgModuleFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'NgModule', type: decl.type});\n  return compiler.compileNgModuleDeclaration(\n      angularCoreEnv, `ng:///${decl.type.name}/ɵmod.js`, decl);\n}\n\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nexport function ɵɵngDeclarePipe(decl: R3DeclarePipeFacade): unknown {\n  const compiler = getCompilerFacade(\n      {usage: JitCompilerUsage.PartialDeclaration, kind: 'pipe', type: decl.type});\n  return compiler.compilePipeDeclaration(angularCoreEnv, `ng:///${decl.type.name}/ɵpipe.js`, decl);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// clang-format off\n// we reexport these symbols just so that they are retained during the dead code elimination\n// performed by rollup while it's creating fesm files.\n//\n// no code actually imports these symbols from the @angular/core entry point\nexport {\n  compileNgModuleFactory as ɵcompileNgModuleFactory,\n  isBoundToModule as ɵisBoundToModule\n} from './application_ref';\nexport {\n  injectChangeDetectorRef as ɵinjectChangeDetectorRef,\n} from './change_detection/change_detector_ref';\nexport {\n  getDebugNode as ɵgetDebugNode,\n} from './debug/debug_node';\nexport {\n  NG_INJ_DEF as ɵNG_INJ_DEF,\n  NG_PROV_DEF as ɵNG_PROV_DEF,\n  isInjectable as ɵisInjectable,\n} from './di/interface/defs';\nexport {createInjector as ɵcreateInjector} from './di/create_injector';\nexport {\n  registerNgModuleType as ɵɵregisterNgModuleType,\n  setAllowDuplicateNgModuleIdsForTest as ɵsetAllowDuplicateNgModuleIdsForTest,\n} from './linker/ng_module_registration';\nexport {\n  NgModuleDef as ɵNgModuleDef,\n  NgModuleTransitiveScopes as ɵNgModuleTransitiveScopes,\n} from './metadata/ng_module_def';\nexport {\n  getLContext as ɵgetLContext\n} from './render3/context_discovery';\nexport {\n  NG_COMP_DEF as ɵNG_COMP_DEF,\n  NG_DIR_DEF as ɵNG_DIR_DEF,\n  NG_ELEMENT_ID as ɵNG_ELEMENT_ID,\n  NG_MOD_DEF as ɵNG_MOD_DEF,\n  NG_PIPE_DEF as ɵNG_PIPE_DEF,\n} from './render3/fields';\nexport {\n  AttributeMarker as ɵAttributeMarker,\n  ComponentDef as ɵComponentDef,\n  ComponentFactory as ɵRender3ComponentFactory,\n  ComponentRef as ɵRender3ComponentRef,\n  ComponentType as ɵComponentType,\n  CssSelectorList as ɵCssSelectorList,\n  detectChanges as ɵdetectChanges,\n  DirectiveDef as ɵDirectiveDef,\n  DirectiveType as ɵDirectiveType,\n  getDirectives as ɵgetDirectives,\n  getHostElement as ɵgetHostElement,\n  LifecycleHooksFeature as ɵLifecycleHooksFeature,\n  NgModuleFactory as ɵNgModuleFactory,\n  NgModuleRef as ɵRender3NgModuleRef,\n  NgModuleType as ɵNgModuleType,\n  NO_CHANGE as ɵNO_CHANGE,\n  PipeDef as ɵPipeDef,\n  RenderFlags as ɵRenderFlags,\n  setClassMetadata as ɵsetClassMetadata,\n  setLocaleId as ɵsetLocaleId,\n  store as ɵstore,\n  ɵɵadvance,\n  ɵɵattribute,\n  ɵɵattributeInterpolate1,\n  ɵɵattributeInterpolate2,\n  ɵɵattributeInterpolate3,\n  ɵɵattributeInterpolate4,\n  ɵɵattributeInterpolate5,\n  ɵɵattributeInterpolate6,\n  ɵɵattributeInterpolate7,\n  ɵɵattributeInterpolate8,\n  ɵɵattributeInterpolateV,\n  ɵɵclassMap,\n  ɵɵclassMapInterpolate1,\n  ɵɵclassMapInterpolate2,\n  ɵɵclassMapInterpolate3,\n  ɵɵclassMapInterpolate4,\n  ɵɵclassMapInterpolate5,\n  ɵɵclassMapInterpolate6,\n  ɵɵclassMapInterpolate7,\n  ɵɵclassMapInterpolate8,\n  ɵɵclassMapInterpolateV,\n  ɵɵclassProp,\n  ɵɵComponentDeclaration,\n  ɵɵcontentQuery,\n  ɵɵCopyDefinitionFeature,\n  ɵɵdefineComponent,\n  ɵɵdefineDirective,\n  ɵɵdefineNgModule,\n  ɵɵdefinePipe,\n  ɵɵDirectiveDeclaration,\n  ɵɵdirectiveInject,\n  ɵɵdisableBindings,\n  ɵɵelement,\n  ɵɵelementContainer,\n  ɵɵelementContainerEnd,\n  ɵɵelementContainerStart,\n  ɵɵelementEnd,\n  ɵɵelementStart,\n  ɵɵenableBindings,\n  ɵɵFactoryDeclaration,\n  ɵɵgetCurrentView,\n  ɵɵgetInheritedFactory,\n  ɵɵhostProperty,\n  ɵɵi18n,\n  ɵɵi18nApply,\n  ɵɵi18nAttributes,\n  ɵɵi18nEnd,\n  ɵɵi18nExp,\n  ɵɵi18nPostprocess,\n  ɵɵi18nStart,\n  ɵɵInheritDefinitionFeature,\n  ɵɵinjectAttribute,\n  ɵɵInjectorDeclaration,\n  ɵɵinvalidFactory,\n  ɵɵlistener,\n  ɵɵloadQuery,\n  ɵɵnamespaceHTML,\n  ɵɵnamespaceMathML,\n  ɵɵnamespaceSVG,\n  ɵɵnextContext,\n  ɵɵNgModuleDeclaration,\n  ɵɵNgOnChangesFeature,\n  ɵɵpipe,\n  ɵɵpipeBind1,\n  ɵɵpipeBind2,\n  ɵɵpipeBind3,\n  ɵɵpipeBind4,\n  ɵɵpipeBindV,\n  ɵɵPipeDeclaration,\n  ɵɵprojection,\n  ɵɵprojectionDef,\n  ɵɵproperty,\n  ɵɵpropertyInterpolate,\n  ɵɵpropertyInterpolate1,\n  ɵɵpropertyInterpolate2,\n  ɵɵpropertyInterpolate3,\n  ɵɵpropertyInterpolate4,\n  ɵɵpropertyInterpolate5,\n  ɵɵpropertyInterpolate6,\n  ɵɵpropertyInterpolate7,\n  ɵɵpropertyInterpolate8,\n  ɵɵpropertyInterpolateV,\n  ɵɵProvidersFeature,\n  ɵɵHostDirectivesFeature,\n  ɵɵpureFunction0,\n  ɵɵpureFunction1,\n  ɵɵpureFunction2,\n  ɵɵpureFunction3,\n  ɵɵpureFunction4,\n  ɵɵpureFunction5,\n  ɵɵpureFunction6,\n  ɵɵpureFunction7,\n  ɵɵpureFunction8,\n  ɵɵpureFunctionV,\n  ɵɵqueryRefresh,\n  ɵɵreference,\n  ɵɵresetView,\n  ɵɵresolveBody,\n  ɵɵresolveDocument,\n  ɵɵresolveWindow,\n  ɵɵrestoreView,\n\n  ɵɵsetComponentScope,\n  ɵɵsetNgModuleScope,\n  ɵɵStandaloneFeature,\n  ɵɵstyleMap,\n  ɵɵstyleMapInterpolate1,\n  ɵɵstyleMapInterpolate2,\n  ɵɵstyleMapInterpolate3,\n  ɵɵstyleMapInterpolate4,\n  ɵɵstyleMapInterpolate5,\n  ɵɵstyleMapInterpolate6,\n  ɵɵstyleMapInterpolate7,\n  ɵɵstyleMapInterpolate8,\n  ɵɵstyleMapInterpolateV,\n  ɵɵstyleProp,\n  ɵɵstylePropInterpolate1,\n  ɵɵstylePropInterpolate2,\n  ɵɵstylePropInterpolate3,\n  ɵɵstylePropInterpolate4,\n  ɵɵstylePropInterpolate5,\n  ɵɵstylePropInterpolate6,\n  ɵɵstylePropInterpolate7,\n  ɵɵstylePropInterpolate8,\n  ɵɵstylePropInterpolateV,\n  ɵɵsyntheticHostListener,\n  ɵɵsyntheticHostProperty,\n  ɵɵtemplate,\n  ɵɵtemplateRefExtractor,\n  ɵɵtext,\n  ɵɵtextInterpolate,\n  ɵɵtextInterpolate1,\n  ɵɵtextInterpolate2,\n  ɵɵtextInterpolate3,\n  ɵɵtextInterpolate4,\n  ɵɵtextInterpolate5,\n  ɵɵtextInterpolate6,\n  ɵɵtextInterpolate7,\n  ɵɵtextInterpolate8,\n  ɵɵtextInterpolateV,\n  ɵɵviewQuery,\n  ɵgetUnknownElementStrictMode,\n  ɵsetUnknownElementStrictMode,\n  ɵgetUnknownPropertyStrictMode,\n  ɵsetUnknownPropertyStrictMode\n} from './render3/index';\nexport {\n  LContext as ɵLContext,\n} from './render3/interfaces/context';\nexport {\n  setDocument as ɵsetDocument\n} from './render3/interfaces/document';\nexport {\n  compileComponent as ɵcompileComponent,\n  compileDirective as ɵcompileDirective,\n} from './render3/jit/directive';\nexport {\n  resetJitOptions as ɵresetJitOptions,\n} from './render3/jit/jit_options';\nexport {\n  compileNgModule as ɵcompileNgModule,\n  compileNgModuleDefs as ɵcompileNgModuleDefs,\n  flushModuleScopingQueueAsMuchAsPossible as ɵflushModuleScopingQueueAsMuchAsPossible,\n  patchComponentDefWithScope as ɵpatchComponentDefWithScope,\n  resetCompiledComponents as ɵresetCompiledComponents,\n  transitiveScopesFor as ɵtransitiveScopesFor,\n} from './render3/jit/module';\nexport {\n  FactoryTarget as ɵɵFactoryTarget,\n  ɵɵngDeclareClassMetadata,\n  ɵɵngDeclareComponent,\n  ɵɵngDeclareDirective,\n  ɵɵngDeclareFactory,\n  ɵɵngDeclareInjectable,\n  ɵɵngDeclareInjector,\n  ɵɵngDeclareNgModule,\n  ɵɵngDeclarePipe,\n} from './render3/jit/partial';\nexport {\n  compilePipe as ɵcompilePipe,\n} from './render3/jit/pipe';\nexport {\n  isNgModule as ɵisNgModule\n} from './render3/jit/util';\nexport { Profiler as ɵProfiler, ProfilerEvent as ɵProfilerEvent } from './render3/profiler';\nexport {\n  publishDefaultGlobalUtils as ɵpublishDefaultGlobalUtils\n,\n  publishGlobalUtil as ɵpublishGlobalUtil} from './render3/util/global_utils';\nexport {ViewRef as ɵViewRef} from './render3/view_ref';\nexport {\n  bypassSanitizationTrustHtml as ɵbypassSanitizationTrustHtml,\n  bypassSanitizationTrustResourceUrl as ɵbypassSanitizationTrustResourceUrl,\n  bypassSanitizationTrustScript as ɵbypassSanitizationTrustScript,\n  bypassSanitizationTrustStyle as ɵbypassSanitizationTrustStyle,\n  bypassSanitizationTrustUrl as ɵbypassSanitizationTrustUrl,\n} from './sanitization/bypass';\nexport {\n  ɵɵsanitizeHtml,\n  ɵɵsanitizeResourceUrl,\n  ɵɵsanitizeScript,\n  ɵɵsanitizeStyle,\n  ɵɵsanitizeUrl,\n  ɵɵsanitizeUrlOrResourceUrl,\n  ɵɵtrustConstantHtml,\n  ɵɵtrustConstantResourceUrl,\n} from './sanitization/sanitization';\nexport {\n  ɵɵvalidateIframeAttribute,\n} from './sanitization/iframe_attrs_validation';\nexport {\n  noSideEffects as ɵnoSideEffects,\n} from './util/closure';\n\n// clang-format on\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {EnvironmentInjector, getNullInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentRef} from '../linker/component_factory';\n\nimport {ComponentFactory} from './component_ref';\nimport {getComponentDef} from './definition';\nimport {assertComponentDef} from './errors';\n\n/**\n * Creates a `ComponentRef` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the `createComponent` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: `Hello {{ name }}!`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: `<div id=\"hello-component-host\"></div>`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const host = document.getElementById('hello-component-host');\n *\n * // Get an `EnvironmentInjector` instance from the `ApplicationRef`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a `ComponentRef` instance.\n * const componentRef = createComponent(HelloComponent, {host, environmentInjector});\n *\n * // Last step is to register the newly created ref using the `ApplicationRef` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * ```\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * `environmentInjector`: An `EnvironmentInjector` instance to be used for the component, see\n * additional info about it at https://angular.io/guide/standalone-components#environment-injectors.\n *  * `hostElement` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using `div` if selector doesn't have tag name info).\n *  * `elementInjector` (optional): An `ElementInjector` instance, see additional info about it at\n * https://angular.io/guide/hierarchical-dependency-injection#elementinjector.\n *  * `projectableNodes` (optional): A list of DOM nodes that should be projected through\n *                      [`<ng-content>`](api/core/ng-content) of the new component instance.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nexport function createComponent<C>(component: Type<C>, options: {\n  environmentInjector: EnvironmentInjector,\n  hostElement?: Element,\n  elementInjector?: Injector,\n  projectableNodes?: Node[][],\n}): ComponentRef<C> {\n  ngDevMode && assertComponentDef(component);\n  const componentDef = getComponentDef(component)!;\n  const elementInjector = options.elementInjector || getNullInjector();\n  const factory = new ComponentFactory<C>(componentDef);\n  return factory.create(\n      elementInjector, options.projectableNodes, options.hostElement, options.environmentInjector);\n}\n\n/**\n * An interface that describes the subset of component metadata\n * that can be retrieved using the `reflectComponentType` function.\n *\n * @publicApi\n */\nexport interface ComponentMirror<C> {\n  /**\n   * The component's HTML selector.\n   */\n  get selector(): string;\n  /**\n   * The type of component the factory will create.\n   */\n  get type(): Type<C>;\n  /**\n   * The inputs of the component.\n   */\n  get inputs(): ReadonlyArray<{readonly propName: string, readonly templateName: string}>;\n  /**\n   * The outputs of the component.\n   */\n  get outputs(): ReadonlyArray<{readonly propName: string, readonly templateName: string}>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  get ngContentSelectors(): ReadonlyArray<string>;\n  /**\n   * Whether this component is marked as standalone.\n   * Note: an extra flag, not present in `ComponentFactory`.\n   */\n  get isStandalone(): boolean;\n}\n\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: `\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   `,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first `<ng-content>` in a template, the selector defaults to `*`\n *   'content-selector-a' // second `<ng-content>` in a template\n * ]);\n * ```\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nexport function reflectComponentType<C>(component: Type<C>): ComponentMirror<C>|null {\n  const componentDef = getComponentDef(component);\n  if (!componentDef) return null;\n\n  const factory = new ComponentFactory<C>(componentDef);\n  return {\n    get selector(): string {\n      return factory.selector;\n    },\n    get type(): Type<C> {\n      return factory.componentType;\n    },\n    get inputs(): ReadonlyArray<{propName: string, templateName: string}> {\n      return factory.inputs;\n    },\n    get outputs(): ReadonlyArray<{propName: string, templateName: string}> {\n      return factory.outputs;\n    },\n    get ngContentSelectors(): ReadonlyArray<string> {\n      return factory.ngContentSelectors;\n    },\n    get isStandalone(): boolean {\n      return componentDef.standalone;\n    },\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point from which you should import all public core APIs.\n */\nexport * from './metadata';\nexport * from './version';\nexport {TypeDecorator} from './util/decorators';\nexport * from './di';\nexport {createPlatform, assertPlatform, destroyPlatform, getPlatform, BootstrapOptions, PlatformRef, ApplicationRef, createPlatformFactory, NgProbeToken, APP_BOOTSTRAP_LISTENER} from './application_ref';\nexport {enableProdMode, isDevMode} from './util/is_dev_mode';\nexport {APP_ID, PACKAGE_ROOT_URL, PLATFORM_INITIALIZER, PLATFORM_ID, ANIMATION_MODULE_TYPE} from './application_tokens';\nexport {APP_INITIALIZER, ApplicationInitStatus} from './application_init';\nexport * from './zone';\nexport * from './render';\nexport * from './linker';\nexport * from './linker/ng_module_factory_loader_impl';\nexport {DebugElement, DebugEventListener, DebugNode, asNativeElements, getDebugNode, Predicate} from './debug/debug_node';\nexport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter} from './testability/testability';\nexport * from './change_detection';\nexport * from './platform_core_providers';\nexport {TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, DEFAULT_CURRENCY_CODE, MissingTranslationStrategy} from './i18n/tokens';\nexport {ApplicationModule} from './application_module';\nexport {AbstractType, Type} from './interface/type';\nexport {EventEmitter} from './event_emitter';\nexport {ErrorHandler} from './error_handler';\nexport * from './core_private_export';\nexport * from './core_render3_private_export';\nexport {SecurityContext} from './sanitization/security';\nexport {Sanitizer} from './sanitization/sanitizer';\nexport {createNgModule, createNgModuleRef, createEnvironmentInjector} from './render3/ng_module_ref';\nexport {createComponent, reflectComponentType, ComponentMirror} from './render3/component';\nexport {isStandalone} from './render3/definition';\n\nimport {global} from './util/global';\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  // This helper is to give a reasonable error message to people upgrading to v9 that have not yet\n  // installed `@angular/localize` in their app.\n  // tslint:disable-next-line: no-toplevel-property-access\n  global.$localize = global.$localize || function() {\n    throw new Error(\n        'It looks like your application or one of its dependencies is using i18n.\\n' +\n        'Angular 9 introduced a global `$localize()` function that needs to be loaded.\\n' +\n        'Please run `ng add @angular/localize` from the Angular CLI.\\n' +\n        '(For non-CLI projects, add `import \\'@angular/localize/init\\';` to your `polyfills.ts` file.\\n' +\n        'For server-side rendering applications add the import to your `main.server.ts` file.)');\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/core';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* This file is not used to build this module. It is only used during editing\n * by the TypeScript language service and during build for verification. `ngc`\n * replaces this file with production index.ts when it rewrites private symbol\n * names.\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}