{"ast":null,"code":"var _class;\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nfunction $localize(a) {\n  return a;\n}\n;\n;\nexport class UploadService {\n  /**\n   * @description:\n   */\n  constructor() {\n    /**\n     * @description:\n     */\n    this.stream = new Subject();\n    /**\n     * @description:\n     */\n    this.settings = [];\n    /**\n     * @description:\n     */\n    this.upload_list = [];\n    /**\n     * @description:\n     */\n    this.file_mime_types = {\n      image: ['image/jpeg', 'image/png', 'image/gif', 'image/bmp', 'image/webp'],\n      video: ['video/mp4', 'video/webm', 'video/ogg'],\n      audio: ['audio/mpeg', 'audio/ogg', 'audio/wav', 'audio/webm'],\n      document: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation']\n    };\n    /**\n     * @description:\n     */\n    this.file_mime_types_error = {\n      image: $localize`Incorrect format, try again with .jpg, .png, .gif only`,\n      video: $localize`Incorrect format, try again with .mp4, .webm, .ogg only`,\n      audio: $localize`Incorrect format, try again with .mp3, .ogg, .wav only`,\n      document: $localize`Incorrect format, try again with .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`,\n      all: $localize`Incorrect format, try again with .jpg, .png, .gif, .mp4, .webm, .ogg, .mp3, .wav, .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`\n    };\n  }\n  /**\n   * @description:\n   */\n  clickButtonUpload(settings) {\n    this.updateSettings(settings);\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // TODO: Return the subject to the caller\n        // TODO: Le but etant de retourner a l'utilisateur l'ensemble des informations pre-traiter.\n        resolve('salope');\n      }, 1000);\n    });\n  }\n  /**\n   * @description:\n   */\n  updateSettings(settings) {\n    let encountered = this.settings.filter(x => x.label === settings.label);\n    if (encountered.length === 0) {\n      this.settings.push(settings);\n      this.stream.next({\n        event: 'new_settings',\n        data: settings\n      });\n    } else {\n      this.stream.next({\n        event: 'new_upload',\n        data: settings\n      });\n    }\n  }\n  /**\n   * @description:\n   */\n  getListOfMimeType(settings) {\n    if (settings.file_type === 'all') {\n      return [...this.file_mime_types.image, ...this.file_mime_types.video, ...this.file_mime_types.audio, ...this.file_mime_types.document];\n    }\n    let file_type = settings.file_type;\n    let mime_types = this.file_mime_types[file_type];\n    return mime_types;\n  }\n  /**\n   * @description:\n   */\n  getErrorMimeType(settings) {\n    let file_type = settings.file_type;\n    let mime_types = this.file_mime_types_error[file_type];\n    return mime_types;\n  }\n  /**\n   * @description:\n   */\n  convertBytes(bytes, decimals = 2) {\n    if (bytes === 0) {\n      return '0 Bytes';\n    }\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n  /**\n   * @description:\n   */\n  getHost(settings) {\n    if (settings.host === undefined) {\n      return window.location.origin;\n    }\n    return settings.host;\n  }\n}\n_class = UploadService;\n_class.ɵfac = function UploadService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Subject","$localize","a","UploadService","constructor","image","video","audio","document","all","clickButtonUpload","settings","updateSettings","Promise","resolve","reject","setTimeout","encountered","filter","x","label","length","push","stream","next","event","data","getListOfMimeType","file_type","file_mime_types","mime_types","getErrorMimeType","file_mime_types_error","convertBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","getHost","host","undefined","window","location","origin","factory","providedIn"],"sourceRoot":"","sources":["/var/projects/gtender/client2/src/modules/uploadmanager/services/upload.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nfunction $localize(a: any) {\n  return a;\n}\n\n/**\n * @description: \n */\nexport interface Files {\n  data: any;\n  inProgress: boolean;\n  progress: number;\n}\n\n/**\n * @description: \n * @type: The type of upload, single or multiple\n * @label: The label of upload, to differentiate between multiple uploads type.\n */\nexport interface UploadSettings {\n  type: 'mutiple' | 'single'; \n  label: string;\n  file_type: 'all' | 'image' | 'video' | 'audio' | 'document';\n  max_file_size: number;\n  is_private: boolean;\n  progress: number;\n  file_list: Array<Files>;\n  host?: string;\n  stream: Subject<UploadStream>\n};\n\n/**\n * @description: \n */\nexport interface UploadStream {\n  event: 'new_settings' | 'new_upload' | 'progress' | 'complete' | 'error';\n  data: any;\n}\n\n\n/**\n * @description:\n */\nexport interface UploadObject {\n\n};\n\n/**\n * @description:\n */\nexport interface UploadSlot {\n  settings: UploadSettings;\n  global_progress: number;\n  upload_list: Array<UploadObject>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UploadService {\n  /**\n   * @description: \n   */\n  public stream: Subject <UploadStream> = new Subject <UploadStream>();\n\n  /**\n   * @description: \n   */\n  public settings: Array<UploadSettings> = [];\n\n  /**\n   * @description: \n   */\n  private upload_list = [];\n\n  /**\n   * @description: \n   */\n  public file_mime_types = {\n    image: [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'image/bmp',\n      'image/webp',\n    ], \n    video: [\n      'video/mp4',\n      'video/webm',\n      'video/ogg',\n    ],\n    audio: [\n      'audio/mpeg',\n      'audio/ogg',\n      'audio/wav',\n      'audio/webm',\n    ],\n    document: [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'application/vnd.ms-powerpoint',\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    ],\n  };\n\n  /**\n   * @description:\n   */\n  public file_mime_types_error = {\n    image: $localize `Incorrect format, try again with .jpg, .png, .gif only`,\n    video: $localize `Incorrect format, try again with .mp4, .webm, .ogg only`,\n    audio: $localize `Incorrect format, try again with .mp3, .ogg, .wav only`,\n    document: $localize `Incorrect format, try again with .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`,\n    all: $localize `Incorrect format, try again with .jpg, .png, .gif, .mp4, .webm, .ogg, .mp3, .wav, .pdf, .doc, .docx, .xls, .xlsx, .ppt, .pptx only`,\n  };\n\n  /**\n   * @description: \n   */\n  constructor() { }\n\n  /**\n   * @description: \n   */\n  public clickButtonUpload(settings: UploadSettings) {\n    this.updateSettings(settings);\n\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // TODO: Return the subject to the caller\n        // TODO: Le but etant de retourner a l'utilisateur l'ensemble des informations pre-traiter.\n        resolve('salope');\n      }, 1000);\n    });\n  }\n\n  /**\n   * @description:\n   */\n  private updateSettings(settings: UploadSettings) {\n    let encountered = this.settings.filter((x) => x.label === settings.label);\n\n    if (encountered.length === 0) {\n      this.settings.push(settings);\n      this.stream.next({\n        event: 'new_settings',\n        data: settings,\n      });\n    } else {\n      this.stream.next({\n        event: 'new_upload',\n        data: settings,\n      });\n    }\n  }\n\n  /**\n   * @description:\n   */\n  public getListOfMimeType(settings: UploadSettings) {\n    if (settings.file_type === 'all') {\n      return [\n        ...this.file_mime_types.image,\n        ...this.file_mime_types.video,\n        ...this.file_mime_types.audio,\n        ...this.file_mime_types.document,\n      ];\n    }\n    let file_type = settings.file_type;\n    let mime_types = this.file_mime_types[file_type];\n\n    return mime_types;\n  }\n\n  /**\n   * @description:\n   */\n  public getErrorMimeType(settings: UploadSettings) {\n    let file_type = settings.file_type;\n    let mime_types = this.file_mime_types_error[file_type];\n\n    return mime_types;\n  }\n\n  /**\n   * @description:\n   */\n  public convertBytes(bytes: number, decimals: number = 2) {\n    if (bytes === 0) { return '0 Bytes'; }\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n\n  /**\n   * @description:\n   */\n  public getHost(settings: UploadSettings) {\n    if (settings.host === undefined) {\n      return window.location.origin;\n    }\n    return settings.host;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}