{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/modules/form/services/forms.service\";\nvar $localize = function (data) {\n  return data;\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  var _class;\n  class AuthService {\n    /**\n     * @description:\n     */\n    constructor(router, formsService) {\n      this.router = router;\n      this.formsService = formsService;\n      /**\n       * @description:\n       */\n      this.config__signin = {\n        redirectToPathname: '/',\n        eventAfterSignin: () => {\n          const redirectToPathname = this.config__signin.redirectToPathname;\n          if (typeof redirectToPathname === 'string') {\n            window.location.href = redirectToPathname;\n          } else {\n            this.router.navigate(redirectToPathname);\n          }\n        }\n      };\n      /**\n       * @description:\n       */\n      this.config__signup = {\n        redirectToPathname: '/',\n        eventAfterSignup: () => {\n          const redirectToPathname = this.config__signin.redirectToPathname;\n          if (typeof redirectToPathname === 'string') {\n            window.location.href = redirectToPathname;\n          } else {\n            this.router.navigate(redirectToPathname);\n          }\n        },\n        inputList: [{\n          name: 'username',\n          required: true,\n          placeholder: `My Username`\n        }, {\n          name: 'email',\n          required: true,\n          placeholder: `Myemail@gmail.com`\n        }, {\n          name: 'password',\n          required: true,\n          placeholder: '********'\n        }]\n      };\n      /**\n       * @description:\n       */\n      this.config__forget_password = {\n        redirectToPathname: ['/', 'dashboard'],\n        eventAfterForgetPassword: () => {\n          this.router.navigate([this.config__forget_password.redirectToPathname]);\n        }\n      };\n      this.defineConvertFormError();\n    }\n    /**\n     * @description: Set the error message for the form.\n     */\n    defineConvertFormError() {\n      this.formsService.setConvertFormError({\n        email: {\n          exists: $localize`This email address is already in use.`,\n          invalid: $localize`The email address is invalid.`,\n          required: $localize`This field is required.`,\n          not_encountered: $localize`This email address is not registered.`,\n          'Enter a valid email address.': $localize`The email address is invalid.`\n        },\n        password: {\n          password_is_alpha: $localize`Password must contain at least one number.`,\n          password_is_numeric: $localize`Password must contain at least one letter.`,\n          password_too_long: $localize`Password must contain at most 128 characters.`,\n          password_too_short: $localize`Password must contain at least 8 characters.`,\n          password_is_lower: $localize`Password must contain at least one uppercase letter.`,\n          password_has_space: $localize`Password must not contain spaces.`,\n          required: $localize`This field is required.`\n        },\n        first_name: {\n          required: $localize`This field is required.`\n        },\n        last_name: {\n          required: $localize`This field is required.`\n        },\n        __signin__: {\n          not_exists: $localize`Please fill in your email and password to sign in`\n        }\n      });\n    }\n  }\n  _class = AuthService;\n  _class.ɵfac = function AuthService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.FormsService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}