{"ast":null,"code":"import * as i0 from \"@angular/core\";\n/**\n * @description: HELP THE USER TO UNDERSTAND THE ERROR MESSAGE.\n */\nconst FORM_DJANGO_TRADUCTOR = {\n  // email: {\n  //   exists: $localize`This email address is already in use.`,\n  //   invalid: $localize`The email address is invalid.`,\n  //   required: $localize`This field is required.`,\n  //   not_encountered: $localize`This email address is not registered.`,\n  //   'Enter a valid email address.': $localize`The email address is invalid.`,\n  // },\n};\nexport let FormsService = /*#__PURE__*/(() => {\n  var _class;\n  class FormsService {\n    /**\n     * @description: Constructeur.\n     */\n    constructor() {}\n    /**\n     * @description: Retourne le message d'erreur associé à un champ de formulaire.\n     */\n    hasError(httpResponse, inputName) {\n      if (httpResponse === undefined) {\n        return false;\n      }\n      if (inputName === undefined) {\n        return false;\n      }\n      return httpResponse.form_error !== undefined && httpResponse.form_error[inputName] !== undefined;\n    }\n    /**\n     * @description: Retourne le message d'erreur associé à un champ de formulaire.\n     */\n    notHasError(httpResponse, inputName) {\n      return !this.hasError(httpResponse, inputName);\n    }\n    /**\n     * @description: Retourne le message d'erreur associé à un champ de formulaire.\n     * @param httpResponse: any\n     * @param inputName: string | undefined\n     * @param traductor: any\n     */\n    getErrorMsg(httpResponse, inputName) {\n      if (this.notHasError(httpResponse, inputName)) {\n        return undefined;\n      }\n      if (inputName === undefined) {\n        return undefined;\n      }\n      const error = httpResponse.form_error[inputName][0];\n      const errorMsg = this.getErrorMsgDjango(error, inputName);\n      if (errorMsg === undefined) {\n        console.error(\"FORM-ERROR>>>>\", error);\n      }\n      return errorMsg;\n    }\n    /**\n     * @description: Retourne le message d'erreur associé à un champ de formulaire.\n     * @param httpResponse: any\n     * @param inputName: string | undefined\n     */\n    getErrorMsgDjango(error, inputName) {\n      if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(inputName) === false) {\n        return undefined;\n      }\n      if (FORM_DJANGO_TRADUCTOR[inputName].hasOwnProperty(error) === false) {\n        return undefined;\n      }\n      return FORM_DJANGO_TRADUCTOR[inputName][error];\n    }\n    /**\n     * @description: Add the error message to the traductor.\n     */\n    setConvertFormError(dict) {\n      for (const key of Object.keys(dict)) {\n        console.log(key);\n        if (FORM_DJANGO_TRADUCTOR.hasOwnProperty(key) === false) {\n          FORM_DJANGO_TRADUCTOR[key] = dict[key];\n        } else {\n          Object.assign(FORM_DJANGO_TRADUCTOR[key], dict[key]);\n        }\n      }\n    }\n  }\n  _class = FormsService;\n  _class.ɵfac = function FormsService_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: \"root\"\n  });\n  return FormsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}